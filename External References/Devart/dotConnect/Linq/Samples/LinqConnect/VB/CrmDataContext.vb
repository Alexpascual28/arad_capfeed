'------------------------------------------------------------------------------
' This is auto-generated code.
'------------------------------------------------------------------------------
' This code was generated by Entity Developer tool.
' Code is generated on: 03.08.2010 20:01:42
'
' Changes to this file may cause incorrect behavior and will be lost if
' the code is regenerated.
'------------------------------------------------------------------------------
Imports System
Imports System.Data
Imports System.ComponentModel
Imports System.Collections.Generic
Imports System.Reflection
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Runtime.InteropServices
Imports Devart.Data.Linq
Imports Devart.Data.Linq.Mapping
Namespace CrmDataContext

    Public Partial Class CrmDataContext
        Inherits DataContext

        Private Shared mappingSource As MappingSource = New AttributeMappingSource()
'        Public Shared compiledQueryCache As CompiledQueryCache = CompiledQueryCache.RegisterDataContext(GetType(CrmDataContext))

        #Region "Extensibility Method Definitions"    
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnSubmitError(args As SubmitErrorEventArgs)
        End Sub
        Partial Private Sub InsertCompany(instance As Company)
        End Sub
        Partial Private Sub UpdateCompany(instance As Company)
        End Sub
        Partial Private Sub DeleteCompany(instance As Company)
        End Sub
        Partial Private Sub InsertOrder_Detail(instance As Order_Detail)
        End Sub
        Partial Private Sub UpdateOrder_Detail(instance As Order_Detail)
        End Sub
        Partial Private Sub DeleteOrder_Detail(instance As Order_Detail)
        End Sub
        Partial Private Sub InsertOrder(instance As Order)
        End Sub
        Partial Private Sub UpdateOrder(instance As Order)
        End Sub
        Partial Private Sub DeleteOrder(instance As Order)
        End Sub
        Partial Private Sub InsertPerson_Contact(instance As Person_Contact)
        End Sub
        Partial Private Sub UpdatePerson_Contact(instance As Person_Contact)
        End Sub
        Partial Private Sub DeletePerson_Contact(instance As Person_Contact)
        End Sub
        Partial Private Sub InsertProduct_Category(instance As Product_Category)
        End Sub
        Partial Private Sub UpdateProduct_Category(instance As Product_Category)
        End Sub
        Partial Private Sub DeleteProduct_Category(instance As Product_Category)
        End Sub
        Partial Private Sub InsertProduct(instance As Product)
        End Sub
        Partial Private Sub UpdateProduct(instance As Product)
        End Sub
        Partial Private Sub DeleteProduct(instance As Product)
        End Sub
        #End Region

       public Sub New()
            MyBase.New(GetConnectionString("CrmDataContextConnectionString"), mappingSource)
            OnCreated()
        End Sub

        Private Shared Function GetConnectionString(ConnectionStringName As String) As String

            Dim Settings As System.Configuration.ConnectionStringSettings
            Settings = System.Configuration.ConfigurationManager.ConnectionStrings.Item(ConnectionStringName)
            If (Settings Is Nothing) Then
                throw new InvalidOperationException("Connection string """ + connectionStringName +""" could not be found in the configuration file.")
            End If
            Return Settings.ConnectionString
        End Function

        Public Sub New(connection As String)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(connection As System.Data.IDbConnection)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(connection As String, mappingSource As MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public Sub New(connection As System.Data.IDbConnection, mappingSource As MappingSource)
            MyBase.New(connection, mappingSource)
            OnCreated()
        End Sub

        Public ReadOnly Property Companies As Table(Of Company)
            Get
                Return Me.GetTable(Of Company)()
            End Get
        End Property

        Public ReadOnly Property Order_Details As Table(Of Order_Detail)
            Get
                Return Me.GetTable(Of Order_Detail)()
            End Get
        End Property

        Public ReadOnly Property Orders As Table(Of Order)
            Get
                Return Me.GetTable(Of Order)()
            End Get
        End Property

        Public ReadOnly Property Person_Contacts As Table(Of Person_Contact)
            Get
                Return Me.GetTable(Of Person_Contact)()
            End Get
        End Property

        Public ReadOnly Property Product_Categories As Table(Of Product_Category)
            Get
                Return Me.GetTable(Of Product_Category)()
            End Get
        End Property

        Public ReadOnly Property Products As Table(Of Product)
            Get
                Return Me.GetTable(Of Product)()
            End Get
        End Property
    End Class

    ''' <summary>
    ''' There are no comments for Company in the schema.
    ''' </summary>
    ''' <LongDescription>
    ''' The table of customer and shipping companies
    ''' </LongDescription>
    Public Partial Class Company
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _CompanyID As Integer

        Private _CompanyName As String

        Private _PrimaryContact As System.Nullable(Of Integer)

        Private _Web As String

        Private _Email As String

        Private _AddressTitle As String

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _Phone As String

        Private _Fax As String

        Private _Company_Orders As EntitySet(Of Order)

        Private _ShippingCompany_Orders As EntitySet(Of Order)

        Private _Primary_Contact As EntityRef(Of Person_Contact)

        Private _Company_Contacts As EntitySet(Of Person_Contact)
    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCompanyIDChanging(value As Integer)
        End Sub
        Partial Private Sub OnCompanyIDChanged()
        End Sub
        Partial Private Sub OnCompanyNameChanging(value As String)
        End Sub
        Partial Private Sub OnCompanyNameChanged()
        End Sub
        Partial Private Sub OnPrimaryContactChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnPrimaryContactChanged()
        End Sub
        Partial Private Sub OnWebChanging(value As String)
        End Sub
        Partial Private Sub OnWebChanged()
        End Sub
        Partial Private Sub OnEmailChanging(value As String)
        End Sub
        Partial Private Sub OnEmailChanged()
        End Sub
        Partial Private Sub OnAddressTitleChanging(value As String)
        End Sub
        Partial Private Sub OnAddressTitleChanged()
        End Sub
        Partial Private Sub OnAddressChanging(value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnRegionChanging(value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnCountryChanging(value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
        Partial Private Sub OnFaxChanging(value As String)
        End Sub
        Partial Private Sub OnFaxChanged()
        End Sub
        #End Region

        Public Sub New()
            Me._Company_Orders = New EntitySet(Of Order)(AddressOf Me.attach_Company_Orders, AddressOf Me.detach_Company_Orders)
            Me._ShippingCompany_Orders = New EntitySet(Of Order)(AddressOf Me.attach_ShippingCompany_Orders, AddressOf Me.detach_ShippingCompany_Orders)
            Me._Primary_Contact = CType(Nothing, EntityRef(Of Person_Contact))
            Me._Company_Contacts = New EntitySet(Of Person_Contact)(AddressOf Me.attach_Company_Contacts, AddressOf Me.detach_Company_Contacts)
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for CompanyID in the schema.
        ''' </summary>
        Public Property CompanyID As Integer
            Get
                Return Me._CompanyID
            End Get
            Set

                If (Object.Equals(Me._CompanyID, value) = false) Then
                    Me.OnCompanyIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CompanyID = value
                    Me.SendPropertyChanged("CompanyID")
                    Me.OnCompanyIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for CompanyName in the schema.
        ''' </summary>
        Public Property CompanyName As String
            Get
                Return Me._CompanyName
            End Get
            Set

                If (Object.Equals(Me._CompanyName, value) = false) Then
                    Me.OnCompanyNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._CompanyName = value
                    Me.SendPropertyChanged("CompanyName")
                    Me.OnCompanyNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for PrimaryContact in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' A reference to the employee who is the preferable company contact
        ''' </LongDescription>
        Public Property PrimaryContact As System.Nullable(Of Integer)
            Get
                Return Me._PrimaryContact
            End Get
            Set

                If (Object.Equals(Me._PrimaryContact, value) = false) Then
                    If (Me._Primary_Contact.HasLoadedOrAssignedValue)
                        Throw New ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnPrimaryContactChanging(value)
                    Me.SendPropertyChanging()
                    Me._PrimaryContact = value
                    Me.SendPropertyChanged("PrimaryContact")
                    Me.OnPrimaryContactChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Web in the schema.
        ''' </summary>
        Public Property Web As String
            Get
                Return Me._Web
            End Get
            Set

                If (Object.Equals(Me._Web, value) = false) Then
                    Me.OnWebChanging(value)
                    Me.SendPropertyChanging()
                    Me._Web = value
                    Me.SendPropertyChanged("Web")
                    Me.OnWebChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Email in the schema.
        ''' </summary>
        Public Property Email As String
            Get
                Return Me._Email
            End Get
            Set

                If (Object.Equals(Me._Email, value) = false) Then
                    Me.OnEmailChanging(value)
                    Me.SendPropertyChanging()
                    Me._Email = value
                    Me.SendPropertyChanged("Email")
                    Me.OnEmailChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for AddressTitle in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Specifies the address type, i.e., if it is legal, physical or other
        ''' </LongDescription>
        Public Property AddressTitle As String
            Get
                Return Me._AddressTitle
            End Get
            Set

                If (Object.Equals(Me._AddressTitle, value) = false) Then
                    Me.OnAddressTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._AddressTitle = value
                    Me.SendPropertyChanged("AddressTitle")
                    Me.OnAddressTitleChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Address in the schema.
        ''' </summary>
        Public Property Address As String
            Get
                Return Me._Address
            End Get
            Set

                If (Object.Equals(Me._Address, value) = false) Then
                    Me.OnAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._Address = value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for City in the schema.
        ''' </summary>
        Public Property City As String
            Get
                Return Me._City
            End Get
            Set

                If (Object.Equals(Me._City, value) = false) Then
                    Me.OnCityChanging(value)
                    Me.SendPropertyChanging()
                    Me._City = value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Region in the schema.
        ''' </summary>
        Public Property Region As String
            Get
                Return Me._Region
            End Get
            Set

                If (Object.Equals(Me._Region, value) = false) Then
                    Me.OnRegionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Region = value
                    Me.SendPropertyChanged("Region")
                    Me.OnRegionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for PostalCode in the schema.
        ''' </summary>
        Public Property PostalCode As String
            Get
                Return Me._PostalCode
            End Get
            Set

                If (Object.Equals(Me._PostalCode, value) = false) Then
                    Me.OnPostalCodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._PostalCode = value
                    Me.SendPropertyChanged("PostalCode")
                    Me.OnPostalCodeChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Country in the schema.
        ''' </summary>
        Public Property Country As String
            Get
                Return Me._Country
            End Get
            Set

                If (Object.Equals(Me._Country, value) = false) Then
                    Me.OnCountryChanging(value)
                    Me.SendPropertyChanging()
                    Me._Country = value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Phone in the schema.
        ''' </summary>
        Public Property Phone As String
            Get
                Return Me._Phone
            End Get
            Set

                If (Object.Equals(Me._Phone, value) = false) Then
                    Me.OnPhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._Phone = value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Fax in the schema.
        ''' </summary>
        Public Property Fax As String
            Get
                Return Me._Fax
            End Get
            Set

                If (Object.Equals(Me._Fax, value) = false) Then
                    Me.OnFaxChanging(value)
                    Me.SendPropertyChanging()
                    Me._Fax = value
                    Me.SendPropertyChanged("Fax")
                    Me.OnFaxChanged()
                End If
            End Set
        End Property

        Public Property Company_Orders As EntitySet(Of Order)
            Get
                Return Me._Company_Orders
            End Get
            Set
                Me._Company_Orders.Assign(value)
            End Set
        End Property

        Public Property ShippingCompany_Orders As EntitySet(Of Order)
            Get
                Return Me._ShippingCompany_Orders
            End Get
            Set
                Me._ShippingCompany_Orders.Assign(value)
            End Set
        End Property

        Public Property Primary_Contact As Person_Contact
            Get
                Return Me._Primary_Contact.Entity
            End Get
            Set
                Dim previousValue As Person_Contact = Me._Primary_Contact.Entity
                If ((Not Object.ReferenceEquals(previousValue, value)) Or (Not Me._Primary_Contact.HasLoadedOrAssignedValue)) Then
                    Me.SendPropertyChanging()
                    If (Not previousValue Is Nothing) Then
                        Me._Primary_Contact.Entity = Nothing
                        previousValue.PrimaryContact_Companies.Remove(Me)
                    End If
                    Me._Primary_Contact.Entity = value
                    If (Not value Is Nothing) Then
                        value.PrimaryContact_Companies.Add(Me)
                        Me._PrimaryContact = value.ContactID
                    Else
                        Me._PrimaryContact = CType(Nothing, System.Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("Primary_Contact")
                End If
            End Set
        End Property

        Public Property Company_Contacts As EntitySet(Of Person_Contact)
            Get
                Return Me._Company_Contacts
            End Get
            Set
                Me._Company_Contacts.Assign(value)
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Company_Orders(entity As Order)
            Me.SendPropertyChanging("Company_Orders")
            entity.Company = Me
        End Sub
    
        Private Sub detach_Company_Orders(entity As Order)
            Me.SendPropertyChanging("Company_Orders")
            entity.Company = Nothing
        End Sub

        Private Sub attach_ShippingCompany_Orders(entity As Order)
            Me.SendPropertyChanging("ShippingCompany_Orders")
            entity.ShippingCompany = Me
        End Sub
    
        Private Sub detach_ShippingCompany_Orders(entity As Order)
            Me.SendPropertyChanging("ShippingCompany_Orders")
            entity.ShippingCompany = Nothing
        End Sub

        Private Sub attach_Company_Contacts(entity As Person_Contact)
            Me.SendPropertyChanging("Company_Contacts")
            entity.Company = Me
        End Sub
    
        Private Sub detach_Company_Contacts(entity As Person_Contact)
            Me.SendPropertyChanging("Company_Contacts")
            entity.Company = Nothing
        End Sub
    End Class
    ''' <summary>
    ''' There are no comments for Order_Detail in the schema.
    ''' </summary>
    ''' <LongDescription>
    ''' Table for the detailed information on what the order consists of
    ''' </LongDescription>
    Public Partial Class Order_Detail
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _OrderID As Integer

        Private _ProductID As Integer

        Private _Price As System.Nullable(Of Double)

        Private _Quantity As System.Nullable(Of Double)

        Private _Order As EntityRef(Of Order)

        Private _Product As EntityRef(Of Product)
    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnOrderIDChanging(value As Integer)
        End Sub
        Partial Private Sub OnOrderIDChanged()
        End Sub
        Partial Private Sub OnProductIDChanging(value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnPriceChanging(value As System.Nullable(Of Double))
        End Sub
        Partial Private Sub OnPriceChanged()
        End Sub
        Partial Private Sub OnQuantityChanging(value As System.Nullable(Of Double))
        End Sub
        Partial Private Sub OnQuantityChanged()
        End Sub
        #End Region

        Public Sub New()
            Me._Order = CType(Nothing, EntityRef(Of Order))
            Me._Product = CType(Nothing, EntityRef(Of Product))
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for OrderID in the schema.
        ''' </summary>
        Public Property OrderID As Integer
            Get
                Return Me._OrderID
            End Get
            Set

                If (Object.Equals(Me._OrderID, value) = false) Then
                    If (Me._Order.HasLoadedOrAssignedValue)
                        Throw New ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnOrderIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._OrderID = value
                    Me.SendPropertyChanged("OrderID")
                    Me.OnOrderIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for ProductID in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' A product present in the order
        ''' </LongDescription>
        Public Property ProductID As Integer
            Get
                Return Me._ProductID
            End Get
            Set

                If (Object.Equals(Me._ProductID, value) = false) Then
                    If (Me._Product.HasLoadedOrAssignedValue)
                        Throw New ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnProductIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductID = value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Price in the schema.
        ''' </summary>
        Public Property Price As System.Nullable(Of Double)
            Get
                Return Me._Price
            End Get
            Set

                If (Object.Equals(Me._Price, value) = false) Then
                    Me.OnPriceChanging(value)
                    Me.SendPropertyChanging()
                    Me._Price = value
                    Me.SendPropertyChanged("Price")
                    Me.OnPriceChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Quantity in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Quantity of the product specified
        ''' </LongDescription>
        Public Property Quantity As System.Nullable(Of Double)
            Get
                Return Me._Quantity
            End Get
            Set

                If (Object.Equals(Me._Quantity, value) = false) Then
                    Me.OnQuantityChanging(value)
                    Me.SendPropertyChanging()
                    Me._Quantity = value
                    Me.SendPropertyChanged("Quantity")
                    Me.OnQuantityChanged()
                End If
            End Set
        End Property

        Public Property Order As Order
            Get
                Return Me._Order.Entity
            End Get
            Set
                Dim previousValue As Order = Me._Order.Entity
                If ((Not Object.ReferenceEquals(previousValue, value)) Or (Not Me._Order.HasLoadedOrAssignedValue)) Then
                    Me.SendPropertyChanging()
                    If (Not previousValue Is Nothing) Then
                        Me._Order.Entity = Nothing
                        previousValue.Order_Details.Remove(Me)
                    End If
                    Me._Order.Entity = value
                    If (Not value Is Nothing) Then
                        value.Order_Details.Add(Me)
                        Me._OrderID = value.OrderID
                    Else
                        Me._OrderID = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Order")
                End If
            End Set
        End Property

        Public Property Product As Product
            Get
                Return Me._Product.Entity
            End Get
            Set
                Dim previousValue As Product = Me._Product.Entity
                If ((Not Object.ReferenceEquals(previousValue, value)) Or (Not Me._Product.HasLoadedOrAssignedValue)) Then
                    Me.SendPropertyChanging()
                    If (Not previousValue Is Nothing) Then
                        Me._Product.Entity = Nothing
                        previousValue.Order_Details.Remove(Me)
                    End If
                    Me._Product.Entity = value
                    If (Not value Is Nothing) Then
                        value.Order_Details.Add(Me)
                        Me._ProductID = value.ProductID
                    Else
                        Me._ProductID = CType(Nothing, Integer)
                    End If
                    Me.SendPropertyChanged("Product")
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub
    End Class
    ''' <summary>
    ''' There are no comments for Order in the schema.
    ''' </summary>
    ''' <LongDescription>
    ''' Table storing the general data about orders
    ''' </LongDescription>
    Public Partial Class Order
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _OrderID As Integer

        Private _CompanyID As System.Nullable(Of Integer)

        Private _ContactID As System.Nullable(Of Integer)

        Private _OrderDate As System.DateTime

        Private _Freight As System.Nullable(Of Decimal)

        Private _ShipDate As System.Nullable(Of System.DateTime)

        Private _ShipCompanyID As System.Nullable(Of Integer)

        Private _Discount As System.Nullable(Of Decimal)

        Private _Company As EntityRef(Of Company)

        Private _ShippingCompany As EntityRef(Of Company)

        Private _Order_Details As EntitySet(Of Order_Detail)

        Private _Person_Contact As EntityRef(Of Person_Contact)
    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnOrderIDChanging(value As Integer)
        End Sub
        Partial Private Sub OnOrderIDChanged()
        End Sub
        Partial Private Sub OnCompanyIDChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnCompanyIDChanged()
        End Sub
        Partial Private Sub OnContactIDChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnContactIDChanged()
        End Sub
        Partial Private Sub OnOrderDateChanging(value As System.DateTime)
        End Sub
        Partial Private Sub OnOrderDateChanged()
        End Sub
        Partial Private Sub OnFreightChanging(value As System.Nullable(Of Decimal))
        End Sub
        Partial Private Sub OnFreightChanged()
        End Sub
        Partial Private Sub OnShipDateChanging(value As System.Nullable(Of System.DateTime))
        End Sub
        Partial Private Sub OnShipDateChanged()
        End Sub
        Partial Private Sub OnShipCompanyIDChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnShipCompanyIDChanged()
        End Sub
        Partial Private Sub OnDiscountChanging(value As System.Nullable(Of Decimal))
        End Sub
        Partial Private Sub OnDiscountChanged()
        End Sub
        #End Region

        Public Sub New()
            Me._Company = CType(Nothing, EntityRef(Of Company))
            Me._ShippingCompany = CType(Nothing, EntityRef(Of Company))
            Me._Order_Details = New EntitySet(Of Order_Detail)(AddressOf Me.attach_Order_Details, AddressOf Me.detach_Order_Details)
            Me._Person_Contact = CType(Nothing, EntityRef(Of Person_Contact))
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for OrderID in the schema.
        ''' </summary>
        Public Property OrderID As Integer
            Get
                Return Me._OrderID
            End Get
            Set

                If (Object.Equals(Me._OrderID, value) = false) Then
                    Me.OnOrderIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._OrderID = value
                    Me.SendPropertyChanged("OrderID")
                    Me.OnOrderIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for CompanyID in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' The customer company
        ''' </LongDescription>
        Public Property CompanyID As System.Nullable(Of Integer)
            Get
                Return Me._CompanyID
            End Get
            Set

                If (Object.Equals(Me._CompanyID, value) = false) Then
                    If (Me._Company.HasLoadedOrAssignedValue)
                        Throw New ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnCompanyIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CompanyID = value
                    Me.SendPropertyChanged("CompanyID")
                    Me.OnCompanyIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for ContactID in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' The person to contact regarding the order
        ''' </LongDescription>
        Public Property ContactID As System.Nullable(Of Integer)
            Get
                Return Me._ContactID
            End Get
            Set

                If (Object.Equals(Me._ContactID, value) = false) Then
                    If (Me._Person_Contact.HasLoadedOrAssignedValue)
                        Throw New ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnContactIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ContactID = value
                    Me.SendPropertyChanged("ContactID")
                    Me.OnContactIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for OrderDate in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' The date when the order was made
        ''' </LongDescription>
        Public Property OrderDate As System.DateTime
            Get
                Return Me._OrderDate
            End Get
            Set

                If (Object.Equals(Me._OrderDate, value) = false) Then
                    Me.OnOrderDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._OrderDate = value
                    Me.SendPropertyChanged("OrderDate")
                    Me.OnOrderDateChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Freight in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Freight cost of the order
        ''' </LongDescription>
        Public Property Freight As System.Nullable(Of Decimal)
            Get
                Return Me._Freight
            End Get
            Set

                If (Object.Equals(Me._Freight, value) = false) Then
                    Me.OnFreightChanging(value)
                    Me.SendPropertyChanging()
                    Me._Freight = value
                    Me.SendPropertyChanged("Freight")
                    Me.OnFreightChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for ShipDate in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' The date of order to be shipped
        ''' </LongDescription>
        Public Property ShipDate As System.Nullable(Of System.DateTime)
            Get
                Return Me._ShipDate
            End Get
            Set

                If (Object.Equals(Me._ShipDate, value) = false) Then
                    Me.OnShipDateChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipDate = value
                    Me.SendPropertyChanged("ShipDate")
                    Me.OnShipDateChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for ShipCompanyID in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' The shipping contractor
        ''' </LongDescription>
        Public Property ShipCompanyID As System.Nullable(Of Integer)
            Get
                Return Me._ShipCompanyID
            End Get
            Set

                If (Object.Equals(Me._ShipCompanyID, value) = false) Then
                    If (Me._ShippingCompany.HasLoadedOrAssignedValue)
                        Throw New ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnShipCompanyIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ShipCompanyID = value
                    Me.SendPropertyChanged("ShipCompanyID")
                    Me.OnShipCompanyIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Discount in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Discount available for the order
        ''' </LongDescription>
        Public Property Discount As System.Nullable(Of Decimal)
            Get
                Return Me._Discount
            End Get
            Set

                If (Object.Equals(Me._Discount, value) = false) Then
                    Me.OnDiscountChanging(value)
                    Me.SendPropertyChanging()
                    Me._Discount = value
                    Me.SendPropertyChanged("Discount")
                    Me.OnDiscountChanged()
                End If
            End Set
        End Property

        Public Property Company As Company
            Get
                Return Me._Company.Entity
            End Get
            Set
                Dim previousValue As Company = Me._Company.Entity
                If ((Not Object.ReferenceEquals(previousValue, value)) Or (Not Me._Company.HasLoadedOrAssignedValue)) Then
                    Me.SendPropertyChanging()
                    If (Not previousValue Is Nothing) Then
                        Me._Company.Entity = Nothing
                        previousValue.Company_Orders.Remove(Me)
                    End If
                    Me._Company.Entity = value
                    If (Not value Is Nothing) Then
                        value.Company_Orders.Add(Me)
                        Me._CompanyID = value.CompanyID
                    Else
                        Me._CompanyID = CType(Nothing, System.Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("Company")
                End If
            End Set
        End Property

        Public Property ShippingCompany As Company
            Get
                Return Me._ShippingCompany.Entity
            End Get
            Set
                Dim previousValue As Company = Me._ShippingCompany.Entity
                If ((Not Object.ReferenceEquals(previousValue, value)) Or (Not Me._ShippingCompany.HasLoadedOrAssignedValue)) Then
                    Me.SendPropertyChanging()
                    If (Not previousValue Is Nothing) Then
                        Me._ShippingCompany.Entity = Nothing
                        previousValue.ShippingCompany_Orders.Remove(Me)
                    End If
                    Me._ShippingCompany.Entity = value
                    If (Not value Is Nothing) Then
                        value.ShippingCompany_Orders.Add(Me)
                        Me._ShipCompanyID = value.CompanyID
                    Else
                        Me._ShipCompanyID = CType(Nothing, System.Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("ShippingCompany")
                End If
            End Set
        End Property

        Public Property Order_Details As EntitySet(Of Order_Detail)
            Get
                Return Me._Order_Details
            End Get
            Set
                Me._Order_Details.Assign(value)
            End Set
        End Property

        Public Property Person_Contact As Person_Contact
            Get
                Return Me._Person_Contact.Entity
            End Get
            Set
                Dim previousValue As Person_Contact = Me._Person_Contact.Entity
                If ((Not Object.ReferenceEquals(previousValue, value)) Or (Not Me._Person_Contact.HasLoadedOrAssignedValue)) Then
                    Me.SendPropertyChanging()
                    If (Not previousValue Is Nothing) Then
                        Me._Person_Contact.Entity = Nothing
                        previousValue.Orders.Remove(Me)
                    End If
                    Me._Person_Contact.Entity = value
                    If (Not value Is Nothing) Then
                        value.Orders.Add(Me)
                        Me._ContactID = value.ContactID
                    Else
                        Me._ContactID = CType(Nothing, System.Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("Person_Contact")
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Order_Details(entity As Order_Detail)
            Me.SendPropertyChanging("Order_Details")
            entity.Order = Me
        End Sub
    
        Private Sub detach_Order_Details(entity As Order_Detail)
            Me.SendPropertyChanging("Order_Details")
            entity.Order = Nothing
        End Sub
    End Class
    ''' <summary>
    ''' There are no comments for Person_Contact in the schema.
    ''' </summary>
    ''' <LongDescription>
    ''' The table for information on persons related to the store activities
    ''' </LongDescription>
    Public Partial Class Person_Contact
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ContactID As Integer

        Private _Title As String

        Private _FirstName As String

        Private _MiddleName As String

        Private _LastName As String

        Private _CompanyID As System.Nullable(Of Integer)

        Private _HomePhone As String

        Private _MobilePhone As String

        Private _AddressTitle As String

        Private _Address As String

        Private _City As String

        Private _Region As String

        Private _PostalCode As String

        Private _Country As String

        Private _Phone As String

        Private _Fax As String

        Private _PrimaryContact_Companies As EntitySet(Of Company)

        Private _Company As EntityRef(Of Company)

        Private _Orders As EntitySet(Of Order)
    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnContactIDChanging(value As Integer)
        End Sub
        Partial Private Sub OnContactIDChanged()
        End Sub
        Partial Private Sub OnTitleChanging(value As String)
        End Sub
        Partial Private Sub OnTitleChanged()
        End Sub
        Partial Private Sub OnFirstNameChanging(value As String)
        End Sub
        Partial Private Sub OnFirstNameChanged()
        End Sub
        Partial Private Sub OnMiddleNameChanging(value As String)
        End Sub
        Partial Private Sub OnMiddleNameChanged()
        End Sub
        Partial Private Sub OnLastNameChanging(value As String)
        End Sub
        Partial Private Sub OnLastNameChanged()
        End Sub
        Partial Private Sub OnCompanyIDChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnCompanyIDChanged()
        End Sub
        Partial Private Sub OnHomePhoneChanging(value As String)
        End Sub
        Partial Private Sub OnHomePhoneChanged()
        End Sub
        Partial Private Sub OnMobilePhoneChanging(value As String)
        End Sub
        Partial Private Sub OnMobilePhoneChanged()
        End Sub
        Partial Private Sub OnAddressTitleChanging(value As String)
        End Sub
        Partial Private Sub OnAddressTitleChanged()
        End Sub
        Partial Private Sub OnAddressChanging(value As String)
        End Sub
        Partial Private Sub OnAddressChanged()
        End Sub
        Partial Private Sub OnCityChanging(value As String)
        End Sub
        Partial Private Sub OnCityChanged()
        End Sub
        Partial Private Sub OnRegionChanging(value As String)
        End Sub
        Partial Private Sub OnRegionChanged()
        End Sub
        Partial Private Sub OnPostalCodeChanging(value As String)
        End Sub
        Partial Private Sub OnPostalCodeChanged()
        End Sub
        Partial Private Sub OnCountryChanging(value As String)
        End Sub
        Partial Private Sub OnCountryChanged()
        End Sub
        Partial Private Sub OnPhoneChanging(value As String)
        End Sub
        Partial Private Sub OnPhoneChanged()
        End Sub
        Partial Private Sub OnFaxChanging(value As String)
        End Sub
        Partial Private Sub OnFaxChanged()
        End Sub
        #End Region

        Public Sub New()
            Me._PrimaryContact_Companies = New EntitySet(Of Company)(AddressOf Me.attach_PrimaryContact_Companies, AddressOf Me.detach_PrimaryContact_Companies)
            Me._Company = CType(Nothing, EntityRef(Of Company))
            Me._Orders = New EntitySet(Of Order)(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for ContactID in the schema.
        ''' </summary>
        Public Property ContactID As Integer
            Get
                Return Me._ContactID
            End Get
            Set

                If (Object.Equals(Me._ContactID, value) = false) Then
                    Me.OnContactIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ContactID = value
                    Me.SendPropertyChanged("ContactID")
                    Me.OnContactIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Title in the schema.
        ''' </summary>
        Public Property Title As String
            Get
                Return Me._Title
            End Get
            Set

                If (Object.Equals(Me._Title, value) = false) Then
                    Me.OnTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._Title = value
                    Me.SendPropertyChanged("Title")
                    Me.OnTitleChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for FirstName in the schema.
        ''' </summary>
        Public Property FirstName As String
            Get
                Return Me._FirstName
            End Get
            Set

                If (Object.Equals(Me._FirstName, value) = false) Then
                    Me.OnFirstNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._FirstName = value
                    Me.SendPropertyChanged("FirstName")
                    Me.OnFirstNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for MiddleName in the schema.
        ''' </summary>
        Public Property MiddleName As String
            Get
                Return Me._MiddleName
            End Get
            Set

                If (Object.Equals(Me._MiddleName, value) = false) Then
                    Me.OnMiddleNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._MiddleName = value
                    Me.SendPropertyChanged("MiddleName")
                    Me.OnMiddleNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for LastName in the schema.
        ''' </summary>
        Public Property LastName As String
            Get
                Return Me._LastName
            End Get
            Set

                If (Object.Equals(Me._LastName, value) = false) Then
                    Me.OnLastNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._LastName = value
                    Me.SendPropertyChanged("LastName")
                    Me.OnLastNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for CompanyID in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Reference to the company where the person is employed
        ''' </LongDescription>
        Public Property CompanyID As System.Nullable(Of Integer)
            Get
                Return Me._CompanyID
            End Get
            Set

                If (Object.Equals(Me._CompanyID, value) = false) Then
                    If (Me._Company.HasLoadedOrAssignedValue)
                        Throw New ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnCompanyIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CompanyID = value
                    Me.SendPropertyChanged("CompanyID")
                    Me.OnCompanyIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for HomePhone in the schema.
        ''' </summary>
        Public Property HomePhone As String
            Get
                Return Me._HomePhone
            End Get
            Set

                If (Object.Equals(Me._HomePhone, value) = false) Then
                    Me.OnHomePhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._HomePhone = value
                    Me.SendPropertyChanged("HomePhone")
                    Me.OnHomePhoneChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for MobilePhone in the schema.
        ''' </summary>
        Public Property MobilePhone As String
            Get
                Return Me._MobilePhone
            End Get
            Set

                If (Object.Equals(Me._MobilePhone, value) = false) Then
                    Me.OnMobilePhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._MobilePhone = value
                    Me.SendPropertyChanged("MobilePhone")
                    Me.OnMobilePhoneChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for AddressTitle in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Specifies the address type which may be Home or Work
        ''' </LongDescription>
        Public Property AddressTitle As String
            Get
                Return Me._AddressTitle
            End Get
            Set

                If (Object.Equals(Me._AddressTitle, value) = false) Then
                    Me.OnAddressTitleChanging(value)
                    Me.SendPropertyChanging()
                    Me._AddressTitle = value
                    Me.SendPropertyChanged("AddressTitle")
                    Me.OnAddressTitleChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Address in the schema.
        ''' </summary>
        Public Property Address As String
            Get
                Return Me._Address
            End Get
            Set

                If (Object.Equals(Me._Address, value) = false) Then
                    Me.OnAddressChanging(value)
                    Me.SendPropertyChanging()
                    Me._Address = value
                    Me.SendPropertyChanged("Address")
                    Me.OnAddressChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for City in the schema.
        ''' </summary>
        Public Property City As String
            Get
                Return Me._City
            End Get
            Set

                If (Object.Equals(Me._City, value) = false) Then
                    Me.OnCityChanging(value)
                    Me.SendPropertyChanging()
                    Me._City = value
                    Me.SendPropertyChanged("City")
                    Me.OnCityChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Region in the schema.
        ''' </summary>
        Public Property Region As String
            Get
                Return Me._Region
            End Get
            Set

                If (Object.Equals(Me._Region, value) = false) Then
                    Me.OnRegionChanging(value)
                    Me.SendPropertyChanging()
                    Me._Region = value
                    Me.SendPropertyChanged("Region")
                    Me.OnRegionChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for PostalCode in the schema.
        ''' </summary>
        Public Property PostalCode As String
            Get
                Return Me._PostalCode
            End Get
            Set

                If (Object.Equals(Me._PostalCode, value) = false) Then
                    Me.OnPostalCodeChanging(value)
                    Me.SendPropertyChanging()
                    Me._PostalCode = value
                    Me.SendPropertyChanged("PostalCode")
                    Me.OnPostalCodeChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Country in the schema.
        ''' </summary>
        Public Property Country As String
            Get
                Return Me._Country
            End Get
            Set

                If (Object.Equals(Me._Country, value) = false) Then
                    Me.OnCountryChanging(value)
                    Me.SendPropertyChanging()
                    Me._Country = value
                    Me.SendPropertyChanged("Country")
                    Me.OnCountryChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Phone in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Working phone
        ''' </LongDescription>
        Public Property Phone As String
            Get
                Return Me._Phone
            End Get
            Set

                If (Object.Equals(Me._Phone, value) = false) Then
                    Me.OnPhoneChanging(value)
                    Me.SendPropertyChanging()
                    Me._Phone = value
                    Me.SendPropertyChanged("Phone")
                    Me.OnPhoneChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Fax in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Working fax
        ''' </LongDescription>
        Public Property Fax As String
            Get
                Return Me._Fax
            End Get
            Set

                If (Object.Equals(Me._Fax, value) = false) Then
                    Me.OnFaxChanging(value)
                    Me.SendPropertyChanging()
                    Me._Fax = value
                    Me.SendPropertyChanged("Fax")
                    Me.OnFaxChanged()
                End If
            End Set
        End Property

        Public Property PrimaryContact_Companies As EntitySet(Of Company)
            Get
                Return Me._PrimaryContact_Companies
            End Get
            Set
                Me._PrimaryContact_Companies.Assign(value)
            End Set
        End Property

        Public Property Company As Company
            Get
                Return Me._Company.Entity
            End Get
            Set
                Dim previousValue As Company = Me._Company.Entity
                If ((Not Object.ReferenceEquals(previousValue, value)) Or (Not Me._Company.HasLoadedOrAssignedValue)) Then
                    Me.SendPropertyChanging()
                    If (Not previousValue Is Nothing) Then
                        Me._Company.Entity = Nothing
                        previousValue.Company_Contacts.Remove(Me)
                    End If
                    Me._Company.Entity = value
                    If (Not value Is Nothing) Then
                        value.Company_Contacts.Add(Me)
                        Me._CompanyID = value.CompanyID
                    Else
                        Me._CompanyID = CType(Nothing, System.Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("Company")
                End If
            End Set
        End Property

        Public Property Orders As EntitySet(Of Order)
            Get
                Return Me._Orders
            End Get
            Set
                Me._Orders.Assign(value)
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_PrimaryContact_Companies(entity As Company)
            Me.SendPropertyChanging("PrimaryContact_Companies")
            entity.Primary_Contact = Me
        End Sub
    
        Private Sub detach_PrimaryContact_Companies(entity As Company)
            Me.SendPropertyChanging("PrimaryContact_Companies")
            entity.Primary_Contact = Nothing
        End Sub

        Private Sub attach_Orders(entity As Order)
            Me.SendPropertyChanging("Orders")
            entity.Person_Contact = Me
        End Sub
    
        Private Sub detach_Orders(entity As Order)
            Me.SendPropertyChanging("Orders")
            entity.Person_Contact = Nothing
        End Sub
    End Class
    ''' <summary>
    ''' There are no comments for Product_Category in the schema.
    ''' </summary>
    ''' <LongDescription>
    ''' The tree of product categories
    ''' </LongDescription>
    Public Partial Class Product_Category
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _CategoryID As Integer

        Private _CategoryName As String

        Private _ParentCategory As System.Nullable(Of Integer)

        Private _Child_Categories As EntitySet(Of Product_Category)

        Private _Parent_Category As EntityRef(Of Product_Category)

        Private _Products As EntitySet(Of Product)
    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnCategoryIDChanging(value As Integer)
        End Sub
        Partial Private Sub OnCategoryIDChanged()
        End Sub
        Partial Private Sub OnCategoryNameChanging(value As String)
        End Sub
        Partial Private Sub OnCategoryNameChanged()
        End Sub
        Partial Private Sub OnParentCategoryChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnParentCategoryChanged()
        End Sub
        #End Region

        Public Sub New()
            Me._Child_Categories = New EntitySet(Of Product_Category)(AddressOf Me.attach_Child_Categories, AddressOf Me.detach_Child_Categories)
            Me._Parent_Category = CType(Nothing, EntityRef(Of Product_Category))
            Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for CategoryID in the schema.
        ''' </summary>
        Public Property CategoryID As Integer
            Get
                Return Me._CategoryID
            End Get
            Set

                If (Object.Equals(Me._CategoryID, value) = false) Then
                    Me.OnCategoryIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CategoryID = value
                    Me.SendPropertyChanged("CategoryID")
                    Me.OnCategoryIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for CategoryName in the schema.
        ''' </summary>
        Public Property CategoryName As String
            Get
                Return Me._CategoryName
            End Get
            Set

                If (Object.Equals(Me._CategoryName, value) = false) Then
                    Me.OnCategoryNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._CategoryName = value
                    Me.SendPropertyChanged("CategoryName")
                    Me.OnCategoryNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for ParentCategory in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' A reference to the major category which includes this one
        ''' </LongDescription>
        Public Property ParentCategory As System.Nullable(Of Integer)
            Get
                Return Me._ParentCategory
            End Get
            Set

                If (Object.Equals(Me._ParentCategory, value) = false) Then
                    If (Me._Parent_Category.HasLoadedOrAssignedValue)
                        Throw New ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnParentCategoryChanging(value)
                    Me.SendPropertyChanging()
                    Me._ParentCategory = value
                    Me.SendPropertyChanged("ParentCategory")
                    Me.OnParentCategoryChanged()
                End If
            End Set
        End Property

        Public Property Child_Categories As EntitySet(Of Product_Category)
            Get
                Return Me._Child_Categories
            End Get
            Set
                Me._Child_Categories.Assign(value)
            End Set
        End Property

        Public Property Parent_Category As Product_Category
            Get
                Return Me._Parent_Category.Entity
            End Get
            Set
                Dim previousValue As Product_Category = Me._Parent_Category.Entity
                If ((Not Object.ReferenceEquals(previousValue, value)) Or (Not Me._Parent_Category.HasLoadedOrAssignedValue)) Then
                    Me.SendPropertyChanging()
                    If (Not previousValue Is Nothing) Then
                        Me._Parent_Category.Entity = Nothing
                        previousValue.Child_Categories.Remove(Me)
                    End If
                    Me._Parent_Category.Entity = value
                    If (Not value Is Nothing) Then
                        value.Child_Categories.Add(Me)
                        Me._ParentCategory = value.CategoryID
                    Else
                        Me._ParentCategory = CType(Nothing, System.Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("Parent_Category")
                End If
            End Set
        End Property

        Public Property Products As EntitySet(Of Product)
            Get
                Return Me._Products
            End Get
            Set
                Me._Products.Assign(value)
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Child_Categories(entity As Product_Category)
            Me.SendPropertyChanging("Child_Categories")
            entity.Parent_Category = Me
        End Sub
    
        Private Sub detach_Child_Categories(entity As Product_Category)
            Me.SendPropertyChanging("Child_Categories")
            entity.Parent_Category = Nothing
        End Sub

        Private Sub attach_Products(entity As Product)
            Me.SendPropertyChanging("Products")
            entity.Product_Category = Me
        End Sub
    
        Private Sub detach_Products(entity As Product)
            Me.SendPropertyChanging("Products")
            entity.Product_Category = Nothing
        End Sub
    End Class
    ''' <summary>
    ''' There are no comments for Product in the schema.
    ''' </summary>
    ''' <LongDescription>
    ''' Table containing data about products
    ''' </LongDescription>
    Public Partial Class Product
        Implements INotifyPropertyChanging, INotifyPropertyChanged

        Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)

        Private _ProductID As Integer

        Private _ProductName As String

        Private _CategoryID As System.Nullable(Of Integer)

        Private _UnitName As String

        Private _UnitScale As System.Nullable(Of Integer)

        Private _InStock As System.Nullable(Of Integer)

        Private _Price As System.Nullable(Of Double)

        Private _DiscontinuedPrice As System.Nullable(Of Double)

        Private _Discontinued As System.Nullable(Of Integer)

        Private _Order_Details As EntitySet(Of Order_Detail)

        Private _Product_Category As EntityRef(Of Product_Category)
    
        #Region "Extensibility Method Definitions"
        Partial Private Sub OnLoaded()
        End Sub
        Partial Private Sub OnValidate(action As ChangeAction)
        End Sub
        Partial Private Sub OnCreated()
        End Sub
        Partial Private Sub OnProductIDChanging(value As Integer)
        End Sub
        Partial Private Sub OnProductIDChanged()
        End Sub
        Partial Private Sub OnProductNameChanging(value As String)
        End Sub
        Partial Private Sub OnProductNameChanged()
        End Sub
        Partial Private Sub OnCategoryIDChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnCategoryIDChanged()
        End Sub
        Partial Private Sub OnUnitNameChanging(value As String)
        End Sub
        Partial Private Sub OnUnitNameChanged()
        End Sub
        Partial Private Sub OnUnitScaleChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnUnitScaleChanged()
        End Sub
        Partial Private Sub OnInStockChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnInStockChanged()
        End Sub
        Partial Private Sub OnPriceChanging(value As System.Nullable(Of Double))
        End Sub
        Partial Private Sub OnPriceChanged()
        End Sub
        Partial Private Sub OnDiscontinuedPriceChanging(value As System.Nullable(Of Double))
        End Sub
        Partial Private Sub OnDiscontinuedPriceChanged()
        End Sub
        Partial Private Sub OnDiscontinuedChanging(value As System.Nullable(Of Integer))
        End Sub
        Partial Private Sub OnDiscontinuedChanged()
        End Sub
        #End Region

        Public Sub New()
            Me._Order_Details = New EntitySet(Of Order_Detail)(AddressOf Me.attach_Order_Details, AddressOf Me.detach_Order_Details)
            Me._Product_Category = CType(Nothing, EntityRef(Of Product_Category))
            OnCreated()
        End Sub

        ''' <summary>
        ''' There are no comments for ProductID in the schema.
        ''' </summary>
        Public Property ProductID As Integer
            Get
                Return Me._ProductID
            End Get
            Set

                If (Object.Equals(Me._ProductID, value) = false) Then
                    Me.OnProductIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductID = value
                    Me.SendPropertyChanged("ProductID")
                    Me.OnProductIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for ProductName in the schema.
        ''' </summary>
        Public Property ProductName As String
            Get
                Return Me._ProductName
            End Get
            Set

                If (Object.Equals(Me._ProductName, value) = false) Then
                    Me.OnProductNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._ProductName = value
                    Me.SendPropertyChanged("ProductName")
                    Me.OnProductNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for CategoryID in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' A category to which the product belongs
        ''' </LongDescription>
        Public Property CategoryID As System.Nullable(Of Integer)
            Get
                Return Me._CategoryID
            End Get
            Set

                If (Object.Equals(Me._CategoryID, value) = false) Then
                    If (Me._Product_Category.HasLoadedOrAssignedValue)
                        Throw New ForeignKeyReferenceAlreadyHasValueException()
                    End If

                    Me.OnCategoryIDChanging(value)
                    Me.SendPropertyChanging()
                    Me._CategoryID = value
                    Me.SendPropertyChanged("CategoryID")
                    Me.OnCategoryIDChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for UnitName in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Specifies whether a single product unit consists of one (Unit) or several (Parcel) items
        ''' </LongDescription>
        Public Property UnitName As String
            Get
                Return Me._UnitName
            End Get
            Set

                If (Object.Equals(Me._UnitName, value) = false) Then
                    Me.OnUnitNameChanging(value)
                    Me.SendPropertyChanging()
                    Me._UnitName = value
                    Me.SendPropertyChanged("UnitName")
                    Me.OnUnitNameChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for UnitScale in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Specifies the number of items in a parcel
        ''' </LongDescription>
        Public Property UnitScale As System.Nullable(Of Integer)
            Get
                Return Me._UnitScale
            End Get
            Set

                If (Object.Equals(Me._UnitScale, value) = false) Then
                    Me.OnUnitScaleChanging(value)
                    Me.SendPropertyChanging()
                    Me._UnitScale = value
                    Me.SendPropertyChanged("UnitScale")
                    Me.OnUnitScaleChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for InStock in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Product quantity available in the stock
        ''' </LongDescription>
        Public Property InStock As System.Nullable(Of Integer)
            Get
                Return Me._InStock
            End Get
            Set

                If (Object.Equals(Me._InStock, value) = false) Then
                    Me.OnInStockChanging(value)
                    Me.SendPropertyChanging()
                    Me._InStock = value
                    Me.SendPropertyChanged("InStock")
                    Me.OnInStockChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Price in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Regular price of the product
        ''' </LongDescription>
        Public Property Price As System.Nullable(Of Double)
            Get
                Return Me._Price
            End Get
            Set

                If (Object.Equals(Me._Price, value) = false) Then
                    Me.OnPriceChanging(value)
                    Me.SendPropertyChanging()
                    Me._Price = value
                    Me.SendPropertyChanged("Price")
                    Me.OnPriceChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for DiscontinuedPrice in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Actual price of discontinued products
        ''' </LongDescription>
        Public Property DiscontinuedPrice As System.Nullable(Of Double)
            Get
                Return Me._DiscontinuedPrice
            End Get
            Set

                If (Object.Equals(Me._DiscontinuedPrice, value) = false) Then
                    Me.OnDiscontinuedPriceChanging(value)
                    Me.SendPropertyChanging()
                    Me._DiscontinuedPrice = value
                    Me.SendPropertyChanged("DiscontinuedPrice")
                    Me.OnDiscontinuedPriceChanged()
                End If
            End Set
        End Property

        ''' <summary>
        ''' There are no comments for Discontinued in the schema.
        ''' </summary>
        ''' <LongDescription>
        ''' Specifies whether the product is being sold off
        ''' </LongDescription>
        Public Property Discontinued As System.Nullable(Of Integer)
            Get
                Return Me._Discontinued
            End Get
            Set

                If (Object.Equals(Me._Discontinued, value) = false) Then
                    Me.OnDiscontinuedChanging(value)
                    Me.SendPropertyChanging()
                    Me._Discontinued = value
                    Me.SendPropertyChanged("Discontinued")
                    Me.OnDiscontinuedChanged()
                End If
            End Set
        End Property

        Public Property Order_Details As EntitySet(Of Order_Detail)
            Get
                Return Me._Order_Details
            End Get
            Set
                Me._Order_Details.Assign(value)
            End Set
        End Property

        Public Property Product_Category As Product_Category
            Get
                Return Me._Product_Category.Entity
            End Get
            Set
                Dim previousValue As Product_Category = Me._Product_Category.Entity
                If ((Not Object.ReferenceEquals(previousValue, value)) Or (Not Me._Product_Category.HasLoadedOrAssignedValue)) Then
                    Me.SendPropertyChanging()
                    If (Not previousValue Is Nothing) Then
                        Me._Product_Category.Entity = Nothing
                        previousValue.Products.Remove(Me)
                    End If
                    Me._Product_Category.Entity = value
                    If (Not value Is Nothing) Then
                        value.Products.Add(Me)
                        Me._CategoryID = value.CategoryID
                    Else
                        Me._CategoryID = CType(Nothing, System.Nullable(Of Integer))
                    End If
                    Me.SendPropertyChanged("Product_Category")
                End If
            End Set
        End Property
   
        Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging

        Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged

        Protected Overridable Sub SendPropertyChanging()
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanging(propertyName As String)
            If (Not Me.PropertyChangingEvent Is Nothing) Then
                RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
            End If
        End Sub

        Protected Overridable Sub SendPropertyChanged(propertyName As String)
            If (Not Me.PropertyChangedEvent Is Nothing) Then
                RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
            End If
        End Sub

        Private Sub attach_Order_Details(entity As Order_Detail)
            Me.SendPropertyChanging("Order_Details")
            entity.Product = Me
        End Sub
    
        Private Sub detach_Order_Details(entity As Order_Detail)
            Me.SendPropertyChanging("Order_Details")
            entity.Product = Nothing
        End Sub
    End Class
End Namespace
