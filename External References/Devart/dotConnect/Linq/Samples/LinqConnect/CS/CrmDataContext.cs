//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool.
// Code is generated on: 14.05.2010 19:52:52
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;

namespace CrmDataContext
{

    public partial class CrmDataContext : DataContext
    {
        private static MappingSource mappingSource = new AttributeMappingSource();
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(CrmDataContext));

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(SubmitErrorEventArgs args);

        partial void InsertCompany(Company instance);
        partial void UpdateCompany(Company instance);
        partial void DeleteCompany(Company instance);
        partial void InsertOrder_Detail(Order_Detail instance);
        partial void UpdateOrder_Detail(Order_Detail instance);
        partial void DeleteOrder_Detail(Order_Detail instance);
        partial void InsertOrder(Order instance);
        partial void UpdateOrder(Order instance);
        partial void DeleteOrder(Order instance);
        partial void InsertPerson_Contact(Person_Contact instance);
        partial void UpdatePerson_Contact(Person_Contact instance);
        partial void DeletePerson_Contact(Person_Contact instance);
        partial void InsertProduct_Category(Product_Category instance);
        partial void UpdateProduct_Category(Product_Category instance);
        partial void DeleteProduct_Category(Product_Category instance);
        partial void InsertProduct(Product instance);
        partial void UpdateProduct(Product instance);
        partial void DeleteProduct(Product instance);
        #endregion

        public CrmDataContext() :
        base(GetConnectionString("CrmDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }
      
        private static string GetConnectionString(string connectionStringName) {

            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public CrmDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrmDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }
      
        public CrmDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public CrmDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Table<Company> Companies
        {
            get
            {
                return this.GetTable<Company>();
            }
        }

        public Table<Order_Detail> Order_Details
        {
            get
            {
                return this.GetTable<Order_Detail>();
            }
        }

        public Table<Order> Orders
        {
            get
            {
                return this.GetTable<Order>();
            }
        }

        public Table<Person_Contact> Person_Contacts
        {
            get
            {
                return this.GetTable<Person_Contact>();
            }
        }

        public Table<Product_Category> Product_categories
        {
            get
            {
                return this.GetTable<Product_Category>();
            }
        }

        public Table<Product> Products
        {
            get
            {
                return this.GetTable<Product>();
            }
        }
    }

    public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _CompanyID;

        private string _CompanyName;

        private System.Nullable<int> _PrimaryContact;

        private string _Web;

        private string _Email;

        private string _AddressTitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _Phone;

        private string _Fax;

        private EntitySet<Order> _Company_Orders;

        private EntitySet<Order> _ShippingCompany_Orders;

        private EntityRef<Person_Contact> _Primary_Contact;

        private EntitySet<Person_Contact> _Company_Contacts;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCompanyIDChanging(int value);
        partial void OnCompanyIDChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnPrimaryContactChanging(System.Nullable<int> value);
        partial void OnPrimaryContactChanged();
        partial void OnWebChanging(string value);
        partial void OnWebChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnAddressTitleChanging(string value);
        partial void OnAddressTitleChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        #endregion

        public Company()
        {
            this._Company_Orders = new EntitySet<Order>(new Action<Order>(this.attach_Company_Orders), new Action<Order>(this.detach_Company_Orders));
            this._ShippingCompany_Orders = new EntitySet<Order>(new Action<Order>(this.attach_ShippingCompany_Orders), new Action<Order>(this.detach_ShippingCompany_Orders));
            this._Primary_Contact  = default(EntityRef<Person_Contact>);
            this._Company_Contacts = new EntitySet<Person_Contact>(new Action<Person_Contact>(this.attach_Company_Contacts), new Action<Person_Contact>(this.detach_Company_Contacts));
            OnCreated();
        }

        public int CompanyID
        {
            get
            {
                return this._CompanyID;
            }
            set
            {
                if (this._CompanyID != value)
                {
                    this.OnCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyID = value;
                    this.SendPropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }


        public string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }


        public System.Nullable<int> PrimaryContact
        {
            get
            {
                return this._PrimaryContact;
            }
            set
            {
                if (this._PrimaryContact != value)
                {
                    if (this._Primary_Contact.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnPrimaryContactChanging(value);
                    this.SendPropertyChanging();
                    this._PrimaryContact = value;
                    this.SendPropertyChanged("PrimaryContact");
                    this.OnPrimaryContactChanged();
                }
            }
        }


        public string Web
        {
            get
            {
                return this._Web;
            }
            set
            {
                if (this._Web != value)
                {
                    this.OnWebChanging(value);
                    this.SendPropertyChanging();
                    this._Web = value;
                    this.SendPropertyChanged("Web");
                    this.OnWebChanged();
                }
            }
        }


        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }


        public string AddressTitle
        {
            get
            {
                return this._AddressTitle;
            }
            set
            {
                if (this._AddressTitle != value)
                {
                    this.OnAddressTitleChanging(value);
                    this.SendPropertyChanging();
                    this._AddressTitle = value;
                    this.SendPropertyChanged("AddressTitle");
                    this.OnAddressTitleChanged();
                }
            }
        }


        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }


        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }


        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging();
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }


        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if (this._PostalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PostalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }


        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }


        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }


        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

        public EntitySet<Order> Company_Orders
        {
            get
            {
                return this._Company_Orders;
            }
            set
            {
                this._Company_Orders.Assign(value);
            }
        }

        public EntitySet<Order> ShippingCompany_Orders
        {
            get
            {
                return this._ShippingCompany_Orders;
            }
            set
            {
                this._ShippingCompany_Orders.Assign(value);
            }
        }

        public Person_Contact Primary_Contact
        {
            get
            {
                return this._Primary_Contact.Entity;
            }
            set
            {
                Person_Contact previousValue = this._Primary_Contact.Entity;
                if ((previousValue != value) || (this._Primary_Contact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Primary_Contact.Entity = null;
                        previousValue.PrimaryContact_Companies.Remove(this);
                    }
                    this._Primary_Contact.Entity = value;
                    if (value != null)
                    {
                        value.PrimaryContact_Companies.Add(this);
                        this._PrimaryContact = value.ContactID;
                    }
                    else
                    {
                        this._PrimaryContact = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Primary_Contact");
                }
            }
        }

        public EntitySet<Person_Contact> Company_Contacts
        {
            get
            {
                return this._Company_Contacts;
            }
            set
            {
                this._Company_Contacts.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Company_Orders(Order entity)
        {
            this.SendPropertyChanging("Company_Orders");
            entity.Company = this;
        }
    
        private void detach_Company_Orders(Order entity)
        {
            this.SendPropertyChanging("Company_Orders");
            entity.Company = null;
        }

        private void attach_ShippingCompany_Orders(Order entity)
        {
            this.SendPropertyChanging("ShippingCompany_Orders");
            entity.ShippingCompany = this;
        }
    
        private void detach_ShippingCompany_Orders(Order entity)
        {
            this.SendPropertyChanging("ShippingCompany_Orders");
            entity.ShippingCompany = null;
        }

        private void attach_Company_Contacts(Person_Contact entity)
        {
            this.SendPropertyChanging("Company_Contacts");
            entity.Company = this;
        }
    
        private void detach_Company_Contacts(Person_Contact entity)
        {
            this.SendPropertyChanging("Company_Contacts");
            entity.Company = null;
        }
    }


    public partial class Order_Detail : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _OrderID;

        private int _ProductID;

        private System.Nullable<decimal> _Price;

        private System.Nullable<decimal> _Quantity;

        private EntityRef<Order> _Order;

        private EntityRef<Product> _Product;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnPriceChanging(System.Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnQuantityChanging(System.Nullable<decimal> value);
        partial void OnQuantityChanged();
        #endregion

        public Order_Detail()
        {
            this._Order  = default(EntityRef<Order>);
            this._Product  = default(EntityRef<Product>);
            OnCreated();
        }


        public int OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if (this._OrderID != value)
                {
                    if (this._Order.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }


        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    if (this._Product.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }


        public System.Nullable<decimal> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }


        public System.Nullable<decimal> Quantity
        {
            get
            {
                return this._Quantity;
            }
            set
            {
                if (this._Quantity != value)
                {
                    this.OnQuantityChanging(value);
                    this.SendPropertyChanging();
                    this._Quantity = value;
                    this.SendPropertyChanged("Quantity");
                    this.OnQuantityChanged();
                }
            }
        }

        public Order Order
        {
            get
            {
                return this._Order.Entity;
            }
            set
            {
                Order previousValue = this._Order.Entity;
                if ((previousValue != value) || (this._Order.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Order.Entity = null;
                        previousValue.Order_Details.Remove(this);
                    }
                    this._Order.Entity = value;
                    if (value != null)
                    {
                        value.Order_Details.Add(this);
                        this._OrderID = value.OrderID;
                    }
                    else
                    {
                        this._OrderID = default(int);
                    }
                    this.SendPropertyChanged("Order");
                }
            }
        }

        public Product Product
        {
            get
            {
                return this._Product.Entity;
            }
            set
            {
                Product previousValue = this._Product.Entity;
                if ((previousValue != value) || (this._Product.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Product.Entity = null;
                        previousValue.Order_Details.Remove(this);
                    }
                    this._Product.Entity = value;
                    if (value != null)
                    {
                        value.Order_Details.Add(this);
                        this._ProductID = value.ProductID;
                    }
                    else
                    {
                        this._ProductID = default(int);
                    }
                    this.SendPropertyChanged("Product");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }
    }


    public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _OrderID;

        private System.Nullable<int> _CompanyID;

        private System.Nullable<int> _ContactID;

        private System.DateTime _OrderDate;

        private System.Nullable<decimal> _Freight;

        private System.Nullable<System.DateTime> _ShipDate;

        private System.Nullable<int> _ShipCompanyID;

        private System.Nullable<decimal> _Discount;

        private EntitySet<Order_Detail> _Order_Details;

        private EntityRef<Company> _Company;

        private EntityRef<Company> _ShippingCompany;

        private EntityRef<Person_Contact> _Person_Contact;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnOrderIDChanging(int value);
        partial void OnOrderIDChanged();
        partial void OnCompanyIDChanging(System.Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnContactIDChanging(System.Nullable<int> value);
        partial void OnContactIDChanged();
        partial void OnOrderDateChanging(System.DateTime value);
        partial void OnOrderDateChanged();
        partial void OnFreightChanging(System.Nullable<decimal> value);
        partial void OnFreightChanged();
        partial void OnShipDateChanging(System.Nullable<System.DateTime> value);
        partial void OnShipDateChanged();
        partial void OnShipCompanyIDChanging(System.Nullable<int> value);
        partial void OnShipCompanyIDChanged();
        partial void OnDiscountChanging(System.Nullable<decimal> value);
        partial void OnDiscountChanged();
        #endregion

        public Order()
        {
            this._Order_Details = new EntitySet<Order_Detail>(new Action<Order_Detail>(this.attach_Order_Details), new Action<Order_Detail>(this.detach_Order_Details));
            this._Company  = default(EntityRef<Company>);
            this._ShippingCompany  = default(EntityRef<Company>);
            this._Person_Contact  = default(EntityRef<Person_Contact>);
            OnCreated();
        }


        public int OrderID
        {
            get
            {
                return this._OrderID;
            }
            set
            {
                if (this._OrderID != value)
                {
                    this.OnOrderIDChanging(value);
                    this.SendPropertyChanging();
                    this._OrderID = value;
                    this.SendPropertyChanged("OrderID");
                    this.OnOrderIDChanged();
                }
            }
        }


        public System.Nullable<int> CompanyID
        {
            get
            {
                return this._CompanyID;
            }
            set
            {
                if (this._CompanyID != value)
                {
                    if (this._Company.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyID = value;
                    this.SendPropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }


        public System.Nullable<int> ContactID
        {
            get
            {
                return this._ContactID;
            }
            set
            {
                if (this._ContactID != value)
                {
                    if (this._Person_Contact.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnContactIDChanging(value);
                    this.SendPropertyChanging();
                    this._ContactID = value;
                    this.SendPropertyChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }


        public System.DateTime OrderDate
        {
            get
            {
                return this._OrderDate;
            }
            set
            {
                if (this._OrderDate != value)
                {
                    this.OnOrderDateChanging(value);
                    this.SendPropertyChanging();
                    this._OrderDate = value;
                    this.SendPropertyChanged("OrderDate");
                    this.OnOrderDateChanged();
                }
            }
        }


        public System.Nullable<decimal> Freight
        {
            get
            {
                return this._Freight;
            }
            set
            {
                if (this._Freight != value)
                {
                    this.OnFreightChanging(value);
                    this.SendPropertyChanging();
                    this._Freight = value;
                    this.SendPropertyChanged("Freight");
                    this.OnFreightChanged();
                }
            }
        }


        public System.Nullable<System.DateTime> ShipDate
        {
            get
            {
                return this._ShipDate;
            }
            set
            {
                if (this._ShipDate != value)
                {
                    this.OnShipDateChanging(value);
                    this.SendPropertyChanging();
                    this._ShipDate = value;
                    this.SendPropertyChanged("ShipDate");
                    this.OnShipDateChanged();
                }
            }
        }


        public System.Nullable<int> ShipCompanyID
        {
            get
            {
                return this._ShipCompanyID;
            }
            set
            {
                if (this._ShipCompanyID != value)
                {
                    if (this._ShippingCompany.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnShipCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._ShipCompanyID = value;
                    this.SendPropertyChanged("ShipCompanyID");
                    this.OnShipCompanyIDChanged();
                }
            }
        }


        public System.Nullable<decimal> Discount
        {
            get
            {
                return this._Discount;
            }
            set
            {
                if (this._Discount != value)
                {
                    this.OnDiscountChanging(value);
                    this.SendPropertyChanging();
                    this._Discount = value;
                    this.SendPropertyChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }

        public EntitySet<Order_Detail> Order_Details
        {
            get
            {
                return this._Order_Details;
            }
            set
            {
                this._Order_Details.Assign(value);
            }
        }

        public Company Company
        {
            get
            {
                return this._Company.Entity;
            }
            set
            {
                Company previousValue = this._Company.Entity;
                if ((previousValue != value) || (this._Company.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company.Entity = null;
                        previousValue.Company_Orders.Remove(this);
                    }
                    this._Company.Entity = value;
                    if (value != null)
                    {
                        value.Company_Orders.Add(this);
                        this._CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this._CompanyID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company");
                }
            }
        }

        public Company ShippingCompany
        {
            get
            {
                return this._ShippingCompany.Entity;
            }
            set
            {
                Company previousValue = this._ShippingCompany.Entity;
                if ((previousValue != value) || (this._ShippingCompany.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._ShippingCompany.Entity = null;
                        previousValue.ShippingCompany_Orders.Remove(this);
                    }
                    this._ShippingCompany.Entity = value;
                    if (value != null)
                    {
                        value.ShippingCompany_Orders.Add(this);
                        this._ShipCompanyID = value.CompanyID;
                    }
                    else
                    {
                        this._ShipCompanyID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("ShippingCompany");
                }
            }
        }

        public Person_Contact Person_Contact
        {
            get
            {
                return this._Person_Contact.Entity;
            }
            set
            {
                Person_Contact previousValue = this._Person_Contact.Entity;
                if ((previousValue != value) || (this._Person_Contact.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Person_Contact.Entity = null;
                        previousValue.Orders.Remove(this);
                    }
                    this._Person_Contact.Entity = value;
                    if (value != null)
                    {
                        value.Orders.Add(this);
                        this._ContactID = value.ContactID;
                    }
                    else
                    {
                        this._ContactID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Person_Contact");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Order_Details(Order_Detail entity)
        {
            this.SendPropertyChanging("Order_Details");
            entity.Order = this;
        }
    
        private void detach_Order_Details(Order_Detail entity)
        {
            this.SendPropertyChanging("Order_Details");
            entity.Order = null;
        }
    }


    public partial class Person_Contact : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ContactID;

        private string _Title;

        private string _FirstName;

        private string _MiddleName;

        private string _LastName;

        private System.Nullable<int> _CompanyID;

        private string _HomePhone;

        private string _MobilePhone;

        private string _AddressTitle;

        private string _Address;

        private string _City;

        private string _Region;

        private string _PostalCode;

        private string _Country;

        private string _Phone;

        private string _Fax;

        private EntitySet<Company> _PrimaryContact_Companies;

        private EntitySet<Order> _Orders;

        private EntityRef<Company> _Company;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnContactIDChanging(int value);
        partial void OnContactIDChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnMiddleNameChanging(string value);
        partial void OnMiddleNameChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnCompanyIDChanging(System.Nullable<int> value);
        partial void OnCompanyIDChanged();
        partial void OnHomePhoneChanging(string value);
        partial void OnHomePhoneChanged();
        partial void OnMobilePhoneChanging(string value);
        partial void OnMobilePhoneChanged();
        partial void OnAddressTitleChanging(string value);
        partial void OnAddressTitleChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnRegionChanging(string value);
        partial void OnRegionChanged();
        partial void OnPostalCodeChanging(string value);
        partial void OnPostalCodeChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnFaxChanging(string value);
        partial void OnFaxChanged();
        #endregion

        public Person_Contact()
        {
            this._PrimaryContact_Companies = new EntitySet<Company>(new Action<Company>(this.attach_PrimaryContact_Companies), new Action<Company>(this.detach_PrimaryContact_Companies));
            this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
            this._Company  = default(EntityRef<Company>);
            OnCreated();
        }


        public int ContactID
        {
            get
            {
                return this._ContactID;
            }
            set
            {
                if (this._ContactID != value)
                {
                    this.OnContactIDChanging(value);
                    this.SendPropertyChanging();
                    this._ContactID = value;
                    this.SendPropertyChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }


        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging();
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }


        public string FirstName
        {
            get
            {
                return this._FirstName;
            }
            set
            {
                if (this._FirstName != value)
                {
                    this.OnFirstNameChanging(value);
                    this.SendPropertyChanging();
                    this._FirstName = value;
                    this.SendPropertyChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }


        public string MiddleName
        {
            get
            {
                return this._MiddleName;
            }
            set
            {
                if (this._MiddleName != value)
                {
                    this.OnMiddleNameChanging(value);
                    this.SendPropertyChanging();
                    this._MiddleName = value;
                    this.SendPropertyChanged("MiddleName");
                    this.OnMiddleNameChanged();
                }
            }
        }


        public string LastName
        {
            get
            {
                return this._LastName;
            }
            set
            {
                if (this._LastName != value)
                {
                    this.OnLastNameChanging(value);
                    this.SendPropertyChanging();
                    this._LastName = value;
                    this.SendPropertyChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }


        public System.Nullable<int> CompanyID
        {
            get
            {
                return this._CompanyID;
            }
            set
            {
                if (this._CompanyID != value)
                {
                    if (this._Company.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCompanyIDChanging(value);
                    this.SendPropertyChanging();
                    this._CompanyID = value;
                    this.SendPropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }


        public string HomePhone
        {
            get
            {
                return this._HomePhone;
            }
            set
            {
                if (this._HomePhone != value)
                {
                    this.OnHomePhoneChanging(value);
                    this.SendPropertyChanging();
                    this._HomePhone = value;
                    this.SendPropertyChanged("HomePhone");
                    this.OnHomePhoneChanged();
                }
            }
        }


        public string MobilePhone
        {
            get
            {
                return this._MobilePhone;
            }
            set
            {
                if (this._MobilePhone != value)
                {
                    this.OnMobilePhoneChanging(value);
                    this.SendPropertyChanging();
                    this._MobilePhone = value;
                    this.SendPropertyChanged("MobilePhone");
                    this.OnMobilePhoneChanged();
                }
            }
        }


        public string AddressTitle
        {
            get
            {
                return this._AddressTitle;
            }
            set
            {
                if (this._AddressTitle != value)
                {
                    this.OnAddressTitleChanging(value);
                    this.SendPropertyChanging();
                    this._AddressTitle = value;
                    this.SendPropertyChanged("AddressTitle");
                    this.OnAddressTitleChanged();
                }
            }
        }


        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }


        public string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this.SendPropertyChanging();
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }


        public string Region
        {
            get
            {
                return this._Region;
            }
            set
            {
                if (this._Region != value)
                {
                    this.OnRegionChanging(value);
                    this.SendPropertyChanging();
                    this._Region = value;
                    this.SendPropertyChanged("Region");
                    this.OnRegionChanged();
                }
            }
        }


        public string PostalCode
        {
            get
            {
                return this._PostalCode;
            }
            set
            {
                if (this._PostalCode != value)
                {
                    this.OnPostalCodeChanging(value);
                    this.SendPropertyChanging();
                    this._PostalCode = value;
                    this.SendPropertyChanged("PostalCode");
                    this.OnPostalCodeChanged();
                }
            }
        }


        public string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this.SendPropertyChanging();
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }


        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

 
        public string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this.SendPropertyChanging();
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

        public EntitySet<Company> PrimaryContact_Companies
        {
            get
            {
                return this._PrimaryContact_Companies;
            }
            set
            {
                this._PrimaryContact_Companies.Assign(value);
            }
        }

        public EntitySet<Order> Orders
        {
            get
            {
                return this._Orders;
            }
            set
            {
                this._Orders.Assign(value);
            }
        }

        public Company Company
        {
            get
            {
                return this._Company.Entity;
            }
            set
            {
                Company previousValue = this._Company.Entity;
                if ((previousValue != value) || (this._Company.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Company.Entity = null;
                        previousValue.Company_Contacts.Remove(this);
                    }
                    this._Company.Entity = value;
                    if (value != null)
                    {
                        value.Company_Contacts.Add(this);
                        this._CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this._CompanyID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Company");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_PrimaryContact_Companies(Company entity)
        {
            this.SendPropertyChanging("PrimaryContact_Companies");
            entity.Primary_Contact = this;
        }
    
        private void detach_PrimaryContact_Companies(Company entity)
        {
            this.SendPropertyChanging("PrimaryContact_Companies");
            entity.Primary_Contact = null;
        }

        private void attach_Orders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Person_Contact = this;
        }
    
        private void detach_Orders(Order entity)
        {
            this.SendPropertyChanging("Orders");
            entity.Person_Contact = null;
        }
    }


    public partial class Product_Category : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _CategoryID;

        private string _CategoryName;

        private System.Nullable<int> _ParentCategory;

        private EntitySet<Product_Category> _Child_Categories;

        private EntityRef<Product_Category> _Parent_Category;

        private EntitySet<Product> _Products;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnCategoryIDChanging(int value);
        partial void OnCategoryIDChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnParentCategoryChanging(System.Nullable<int> value);
        partial void OnParentCategoryChanged();
        #endregion

        public Product_Category()
        {
            this._Child_Categories = new EntitySet<Product_Category>(new Action<Product_Category>(this.attach_Child_Categories), new Action<Product_Category>(this.detach_Child_Categories));
            this._Parent_Category  = default(EntityRef<Product_Category>);
            this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
            OnCreated();
        }


        public int CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }


        public string CategoryName
        {
            get
            {
                return this._CategoryName;
            }
            set
            {
                if (this._CategoryName != value)
                {
                    this.OnCategoryNameChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryName = value;
                    this.SendPropertyChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }


        public System.Nullable<int> ParentCategory
        {
            get
            {
                return this._ParentCategory;
            }
            set
            {
                if (this._ParentCategory != value)
                {
                    if (this._Parent_Category.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnParentCategoryChanging(value);
                    this.SendPropertyChanging();
                    this._ParentCategory = value;
                    this.SendPropertyChanged("ParentCategory");
                    this.OnParentCategoryChanged();
                }
            }
        }

        public EntitySet<Product_Category> Child_Categories
        {
            get
            {
                return this._Child_Categories;
            }
            set
            {
                this._Child_Categories.Assign(value);
            }
        }

        public Product_Category Parent_Category
        {
            get
            {
                return this._Parent_Category.Entity;
            }
            set
            {
                Product_Category previousValue = this._Parent_Category.Entity;
                if ((previousValue != value) || (this._Parent_Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Parent_Category.Entity = null;
                        previousValue.Child_Categories.Remove(this);
                    }
                    this._Parent_Category.Entity = value;
                    if (value != null)
                    {
                        value.Child_Categories.Add(this);
                        this._ParentCategory = value.CategoryID;
                    }
                    else
                    {
                        this._ParentCategory = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Parent_Category");
                }
            }
        }

        public EntitySet<Product> Products
        {
            get
            {
                return this._Products;
            }
            set
            {
                this._Products.Assign(value);
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Child_Categories(Product_Category entity)
        {
            this.SendPropertyChanging("Child_Categories");
            entity.Parent_Category = this;
        }
    
        private void detach_Child_Categories(Product_Category entity)
        {
            this.SendPropertyChanging("Child_Categories");
            entity.Parent_Category = null;
        }

        private void attach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Product_Category = this;
        }
    
        private void detach_Products(Product entity)
        {
            this.SendPropertyChanging("Products");
            entity.Product_Category = null;
        }
    }


    public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ProductID;

        private string _ProductName;

        private System.Nullable<int> _CategoryID;

        private string _UnitName;

        private System.Nullable<short> _UnitScale;

        private System.Nullable<int> _InStock;

        private System.Nullable<decimal> _Price;

        private System.Nullable<decimal> _DiscontinuedPrice;

        private System.Nullable<bool> _Discontinued;

        private EntitySet<Order_Detail> _Order_Details;

        private EntityRef<Product_Category> _Product_Category;
    
        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnProductIDChanging(int value);
        partial void OnProductIDChanged();
        partial void OnProductNameChanging(string value);
        partial void OnProductNameChanged();
        partial void OnCategoryIDChanging(System.Nullable<int> value);
        partial void OnCategoryIDChanged();
        partial void OnUnitNameChanging(string value);
        partial void OnUnitNameChanged();
        partial void OnUnitScaleChanging(System.Nullable<short> value);
        partial void OnUnitScaleChanged();
        partial void OnInStockChanging(System.Nullable<int> value);
        partial void OnInStockChanged();
        partial void OnPriceChanging(System.Nullable<decimal> value);
        partial void OnPriceChanged();
        partial void OnDiscontinuedPriceChanging(System.Nullable<decimal> value);
        partial void OnDiscontinuedPriceChanged();
        partial void OnDiscontinuedChanging(System.Nullable<bool> value);
        partial void OnDiscontinuedChanged();
        #endregion

        public Product()
        {
            this._Order_Details = new EntitySet<Order_Detail>(new Action<Order_Detail>(this.attach_Order_Details), new Action<Order_Detail>(this.detach_Order_Details));
            this._Product_Category  = default(EntityRef<Product_Category>);
            OnCreated();
        }


        public int ProductID
        {
            get
            {
                return this._ProductID;
            }
            set
            {
                if (this._ProductID != value)
                {
                    this.OnProductIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProductID = value;
                    this.SendPropertyChanged("ProductID");
                    this.OnProductIDChanged();
                }
            }
        }


        public string ProductName
        {
            get
            {
                return this._ProductName;
            }
            set
            {
                if (this._ProductName != value)
                {
                    this.OnProductNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductName = value;
                    this.SendPropertyChanged("ProductName");
                    this.OnProductNameChanged();
                }
            }
        }


        public System.Nullable<int> CategoryID
        {
            get
            {
                return this._CategoryID;
            }
            set
            {
                if (this._CategoryID != value)
                {
                    if (this._Product_Category.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnCategoryIDChanging(value);
                    this.SendPropertyChanging();
                    this._CategoryID = value;
                    this.SendPropertyChanged("CategoryID");
                    this.OnCategoryIDChanged();
                }
            }
        }


        public string UnitName
        {
            get
            {
                return this._UnitName;
            }
            set
            {
                if (this._UnitName != value)
                {
                    this.OnUnitNameChanging(value);
                    this.SendPropertyChanging();
                    this._UnitName = value;
                    this.SendPropertyChanged("UnitName");
                    this.OnUnitNameChanged();
                }
            }
        }


        public System.Nullable<short> UnitScale
        {
            get
            {
                return this._UnitScale;
            }
            set
            {
                if (this._UnitScale != value)
                {
                    this.OnUnitScaleChanging(value);
                    this.SendPropertyChanging();
                    this._UnitScale = value;
                    this.SendPropertyChanged("UnitScale");
                    this.OnUnitScaleChanged();
                }
            }
        }


        public System.Nullable<int> InStock
        {
            get
            {
                return this._InStock;
            }
            set
            {
                if (this._InStock != value)
                {
                    this.OnInStockChanging(value);
                    this.SendPropertyChanging();
                    this._InStock = value;
                    this.SendPropertyChanged("InStock");
                    this.OnInStockChanged();
                }
            }
        }


        public System.Nullable<decimal> Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this.SendPropertyChanging();
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }


        public System.Nullable<decimal> DiscontinuedPrice
        {
            get
            {
                return this._DiscontinuedPrice;
            }
            set
            {
                if (this._DiscontinuedPrice != value)
                {
                    this.OnDiscontinuedPriceChanging(value);
                    this.SendPropertyChanging();
                    this._DiscontinuedPrice = value;
                    this.SendPropertyChanged("DiscontinuedPrice");
                    this.OnDiscontinuedPriceChanged();
                }
            }
        }


        public System.Nullable<bool> Discontinued
        {
            get
            {
                return this._Discontinued;
            }
            set
            {
                if (this._Discontinued != value)
                {
                    this.OnDiscontinuedChanging(value);
                    this.SendPropertyChanging();
                    this._Discontinued = value;
                    this.SendPropertyChanged("Discontinued");
                    this.OnDiscontinuedChanged();
                }
            }
        }

        public EntitySet<Order_Detail> Order_Details
        {
            get
            {
                return this._Order_Details;
            }
            set
            {
                this._Order_Details.Assign(value);
            }
        }

        public Product_Category Product_Category
        {
            get
            {
                return this._Product_Category.Entity;
            }
            set
            {
                Product_Category previousValue = this._Product_Category.Entity;
                if ((previousValue != value) || (this._Product_Category.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging();
                    if (previousValue != null)
                    {
                        this._Product_Category.Entity = null;
                        previousValue.Products.Remove(this);
                    }
                    this._Product_Category.Entity = value;
                    if (value != null)
                    {
                        value.Products.Add(this);
                        this._CategoryID = value.CategoryID;
                    }
                    else
                    {
                        this._CategoryID = default(System.Nullable<int>);
                    }
                    this.SendPropertyChanged("Product_Category");
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(String propertyName) 
        {
            if (this.PropertyChanging != null)
                this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
             if (this.PropertyChanged != null)
                 this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private void attach_Order_Details(Order_Detail entity)
        {
            this.SendPropertyChanging("Order_Details");
            entity.Product = this;
        }
    
        private void detach_Order_Details(Order_Detail entity)
        {
            this.SendPropertyChanging("Order_Details");
            entity.Product = null;
        }
    }
}
