<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Labman.Merlin</name>
    </assembly>
    <members>
        <member name="T:Labman.AccessControl.AccessList">
            <summary>
            The access control list class stores the user that is currently logged in
            </summary>
        </member>
        <member name="F:Labman.AccessControl.AccessList._availableUsers">
            <summary>
            List of available users for the system
            </summary>
        </member>
        <member name="T:Labman.AccessControl.AccessList.PasswordEncryptionMethodDelegate">
            <summary>
            Definition of a delegate to encrypt a password
            </summary>
            <param name="plainTextPassword">The plain text password</param>
            <returns>The encrypted password</returns>
        </member>
        <member name="F:Labman.AccessControl.AccessList._logoutTimer">
            <summary>
            Timer used to check for an auto-logout time
            </summary>
        </member>
        <member name="F:Labman.AccessControl.AccessList._lastUserActivity">
            <summary>
            The time the user last performed an authorised action
            </summary>
        </member>
        <member name="P:Labman.AccessControl.AccessList.CurrentlyLoggedInUser">
            <summary>
            The user that is currently logged in
            </summary>
        </member>
        <member name="P:Labman.AccessControl.AccessList.PasswordEncryptionMethod">
            <summary>
            Delegate that can be assign to encrypt a password
            </summary>
        </member>
        <member name="P:Labman.AccessControl.AccessList.AutoLogoutInactivityTimeout">
            <summary>
            The time in seconds to be inactive for before a logout
            </summary>
        </member>
        <member name="M:Labman.AccessControl.AccessList.#ctor(System.Int32)">
            <summary>
            Create a new instance of the access list class
            </summary>
            <param name="autoLogoutInactivityTimeout">The time in seconds before an inactive user is logged out</param>
        </member>
        <member name="M:Labman.AccessControl.AccessList.CheckUserIsAuthorised(Labman.AccessControl.User.AccessGroupFlags)">
            <summary>
            Checks whether the currently logged in user has sufficient access rights to perform an action
            </summary>
            <param name="requiredAccessGroup">The required access group required to access the functionality being protected</param>
        </member>
        <member name="M:Labman.AccessControl.AccessList.IsUserAuthorised(Labman.AccessControl.User.AccessGroupFlags)">
            <summary>
            Checks whether the currently logged in user has sufficient access rights to perform an action
            </summary>
            <param name="requiredAccessGroup">The required access group required to access the functionality being protected</param>
            <returns>If the user is authorised</returns>
        </member>
        <member name="M:Labman.AccessControl.AccessList.LoadUsers(Labman.Settings.StorageEngines.ISettingsStorageEngine)">
            <summary>
            Load users from the storage engine
            </summary>
            <param name="userStorageEngine">The storage engine to use for users</param>
        </member>
        <member name="M:Labman.AccessControl.AccessList.Login(System.String,System.String)">
            <summary>
            Attempt to login to the system access control list.
            An exception will be thrown if the credentials are incorrect.
            </summary>
            <param name="username">The username to login with</param>
            <param name="password">The password to login with</param>
        </member>
        <member name="M:Labman.AccessControl.AccessList.Logout">
            <summary>
            Logout of the access control list
            </summary>
        </member>
        <member name="T:Labman.AccessControl.FeatureAccessLevelRequirements">
            <summary>
            This class stores the required access levels that have been setup for each area of the application
            </summary>
        </member>
        <member name="P:Labman.AccessControl.FeatureAccessLevelRequirements.BasicProcessOperation">
            <summary>
            Gets or sets the basic process operation.
            </summary>
        </member>
        <member name="P:Labman.AccessControl.FeatureAccessLevelRequirements.ModifyProcessParameters">
            <summary>
            Gets or sets the modify process parameters.
            </summary>
        </member>
        <member name="P:Labman.AccessControl.FeatureAccessLevelRequirements.ShowHardwareConfigurationWindow">
            <summary>
            Gets or sets the show hardware configuration window.
            </summary>
        </member>
        <member name="P:Labman.AccessControl.FeatureAccessLevelRequirements.HardwareRibbonAccess">
            <summary>
            Gets or sets the hardware ribbon access.
            </summary>
        </member>
        <member name="P:Labman.AccessControl.FeatureAccessLevelRequirements.PositionsDatabaseRibbonAccess">
            <summary>
            Gets or sets the positions database ribbon access.
            </summary>
        </member>
        <member name="T:Labman.AccessControl.ThirdPartyAuthentication.Google">
            <summary>
            Google Authentication
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.Google.Scopes">
            <summary>
            List of scopes you are requesting access to.
            </summary>
        </member>
        <member name="M:Labman.AccessControl.ThirdPartyAuthentication.Google.#ctor(System.String,System.String)">
            <summary>
            Constructor, Define google API Login. You will need ID and Secrets from Google API's https://console.developers.google.com/
            </summary>
            <param name="clientID">Google API Client ID</param>
            <param name="clientSecret">Google API Client Secret</param>
        </member>
        <member name="M:Labman.AccessControl.ThirdPartyAuthentication.Google.Authenticate">
            <summary>
            Carry out the authentication
            </summary>
            <returns>User Details if successfully authenticated</returns>
        </member>
        <member name="T:Labman.AccessControl.ThirdPartyAuthentication.Google.UserInfo">
            <summary>
            Google User Details
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.Google.UserInfo.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.Google.UserInfo.Email">
            <summary>
            Email
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.Google.UserInfo.VerifiedEmail">
            <summary>
            If the Email has been validated
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.Google.UserInfo.Name">
            <summary>
            Users name
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.Google.UserInfo.Forename">
            <summary>
            Users foreame
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.Google.UserInfo.Surname">
            <summary>
            Users surname
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.Google.UserInfo.Picture">
            <summary>
            Link to users profile picture
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.Google.UserInfo.Location">
            <summary>
            Users location
            </summary>
        </member>
        <member name="T:Labman.AccessControl.ThirdPartyAuthentication.IThirdPartyAuthenticationProvider">
            <summary>
            3rd Party Authentication Interface
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.IThirdPartyAuthenticationProvider.Scopes">
            <summary>
            Requested Scope Access
            </summary>
        </member>
        <member name="M:Labman.AccessControl.ThirdPartyAuthentication.IThirdPartyAuthenticationProvider.Authenticate">
            <summary>
            Authenticate the user
            </summary>
            <returns>A task representing the user details object</returns>
        </member>
        <member name="T:Labman.AccessControl.ThirdPartyAuthentication.IUserDetails">
            <summary>
            User details interface. Bare minimum
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.IUserDetails.ID">
            <summary>
            3rd Party User IS
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.IUserDetails.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:Labman.AccessControl.ThirdPartyAuthentication.IUserDetails.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="T:Labman.AccessControl.User">
            <summary>
            This class represents the details of a user of the system
            </summary>
        </member>
        <member name="T:Labman.AccessControl.User.AccessGroupFlags">
            <summary>
            Enumeration of access group flags. The access group can be any combination of these flags.
            Full access is obtained by setting a user's group to be the sum of all of these values.
            </summary>
        </member>
        <member name="F:Labman.AccessControl.User.AccessGroupFlags.Disabled">
            <summary>User is disabled</summary>
        </member>
        <member name="F:Labman.AccessControl.User.AccessGroupFlags.View">
            <summary>User is allowed to view data</summary>
        </member>
        <member name="F:Labman.AccessControl.User.AccessGroupFlags.Operator">
            <summary>User is allowed to operate the system</summary>
        </member>
        <member name="F:Labman.AccessControl.User.AccessGroupFlags.SystemAdministrator">
            <summary>User is allowed to perform administrative actions</summary>
        </member>
        <member name="F:Labman.AccessControl.User.AccessGroupFlags.SystemEngineer">
            <summary>User is allowed to operate the low-level engineering functions</summary>
        </member>
        <member name="F:Labman.AccessControl.User.AccessGroupFlags.LabmanEngineer">
            <summary>User is allowed full Labman access</summary>
        </member>
        <member name="P:Labman.AccessControl.User.UniqueKey">
            <summary>
            A unique key for the storage engine
            </summary>
        </member>
        <member name="P:Labman.AccessControl.User.AccessGroup">
            <summary>
            The user's access group
            </summary>
        </member>
        <member name="P:Labman.AccessControl.User.UserName">
            <summary>
            The user's name
            </summary>
        </member>
        <member name="P:Labman.AccessControl.User.Password">
            <summary>
            The user's password
            </summary>
        </member>
        <member name="P:Labman.AccessControl.User.IsEnabled">
            <summary>
            Flag indicates whether the user is enabled
            </summary>
        </member>
        <member name="M:Labman.AccessControl.User.#ctor">
            <summary>
            Default constructor for a user
            </summary>
        </member>
        <member name="M:Labman.AccessControl.User.#ctor(System.String,System.String,System.Int32)">
            <summary>
            User constructor sets up user properties
            </summary>
            <param name="userName">The username</param>
            <param name="password">The password</param>
            <param name="group">The access control setting</param>
        </member>
        <member name="M:Labman.AccessControl.User.IsAuthorised(System.Int32,Labman.AccessControl.User.AccessGroupFlags)">
            <summary>
            This method checks whether a specified access group is enabled in a user's access group
            </summary>
            <param name="accessGroup">The user's access group to check</param>
            <param name="flagToCheck">The required access level to check</param>
            <returns>True if this user has the appropriate control</returns>
        </member>
        <member name="M:Labman.AccessControl.User.IsAuthorised(Labman.AccessControl.User.AccessGroupFlags)">
            <summary>
            This method checks whether a specified access group is enabled in this user's access group
            </summary>
            <param name="flagToCheck">The required access level to check</param>
            <returns>True if this user has the appropriate control</returns>
        </member>
        <member name="T:Labman.BaseClass">
            <summary>
            Labman base class
            </summary>
            <remarks>
            The following code example shows the recommended way to setup the base class ready for use:
            
            <code>
            // Initialise cultures
            Labman.CultureSettings.InitializeCultures();
            
            // Setup the base class ready for use
            Labman.BaseClass.SetupBaseClass();
            
            // Load connected hardware devices
            Labman.ConnectedHardware.LoadDevices(@"Config\Hardware\");
            </code>
            </remarks>
            <remarks>
            All of the configured hardware devices can be initialised with the following command:
            
            <code>
            // Initialise all of the configured hardware devices
            Labman.ConnectedHardware.InitialiseAllDevices();
            </code>
            </remarks>
            <remarks>
            Once the class is setup (by calling SetupBaseClass()) a thread runs which monitors the system e/stop state.
            If an e/stop is detected then the 'EStopDetected' ManualResetEvent is Set. The event is Reset when the condition is cleared.
            You can check for an e/stop state in one of the following two ways:
            
            <code>
            // Check for an e/stop
            bool estopState = Labman.BaseClass.ISEStopped();
            
            // Or like this
            bool estopState = Labman.BaseClass.EStopDetected.IsSet;
            </code>
            </remarks>
            <remarks>
            You can query whether the system hardware is in an initialised state as follows.
            This event is Set when the system initialises all hardware successfully and is Reset again if the system is e/stopped.
            
            <code>
            // QueryCommand system initialised state
            bool systemInitialise = Labman.BaseClass.SystemInitialised.IsSet;
            </code>
            </remarks>
            <remarks>
            A static simulation mode flag is available in the base class that flags for all hardware to be simulated.
            This can be set and read via a normal public property:
            
            <code>
            // Read simulation mode flag
            bool simulationMode = Labman.BaseClass.SimulationMode;
            
            // Set simulation mode flag
            Labman.BaseClass.SimulationMode = true;
            </code>
            </remarks>
        </member>
        <member name="P:Labman.BaseClass.EmergencyStopTriggeredAction">
            <summary>
            This event is fired when an emergency stop is triggered
            </summary>
        </member>
        <member name="P:Labman.BaseClass.EmergencyStopReleasedAction">
            <summary>
            This event is fired when an emergency stop is released
            </summary>
        </member>
        <member name="F:Labman.BaseClass._eStopLoop">
            <summary>
            Action which runs until the application is closed.
            It is used to monitor the e/stop state.
            The intention of this thread is to simply flag when an e/stop is pressed,
            not to handle it. The process code should check this e/stop occurred flag
            and handle accordingly by reinitialising etc.
            </summary>
        </member>
        <member name="F:Labman.BaseClass.SystemLogName">
            <summary>The unique name of the main system log</summary>
        </member>
        <member name="F:Labman.BaseClass.DebugLogName">
            <summary>The unique name of the debug log</summary>
        </member>
        <member name="F:Labman.BaseClass.ProcessLogName">
            <summary>The unique name of the process log</summary>
        </member>
        <member name="F:Labman.BaseClass.HardwareLogName">
            <summary>The unique name of the hardware log</summary>
        </member>
        <member name="F:Labman.BaseClass.SystemDatabaseName">
            <summary>The unique name of the main system database</summary>
        </member>
        <member name="P:Labman.BaseClass.DatabasesStorageEngine">
            <summary>The storage engine used to store the database configurations</summary>
        </member>
        <member name="P:Labman.BaseClass.PositionsDatabasesStorageEngine">
            <summary>The storage engine used to store the positions database configurations</summary>
        </member>
        <member name="P:Labman.BaseClass.UsersStorageEngine">
            <summary>The storage engine used to store the users in</summary>
        </member>
        <member name="F:Labman.BaseClass._traceListener">
            <summary>
            Trace listener object
            </summary>
        </member>
        <member name="T:Labman.BaseClass.RunActionDelegate">
            <summary>
            Delegate used to run an action
            </summary>
        </member>
        <member name="F:Labman.BaseClass._estopThread">
            <summary>
            Thread used to run the e/stop monitoring routine
            </summary>
        </member>
        <member name="F:Labman.BaseClass._userAutoLogoutTime">
            <summary>
            The time in seconds before an inactive logged in user gets logged out. This needs to be set before SetupBaseClass is called.
            </summary>
        </member>
        <member name="F:Labman.BaseClass._estopLoopStop">
            <summary>
            Cancellation token source used to bring the estop checking loop to a stop when the applicatione exits
            </summary>
        </member>
        <member name="T:Labman.BaseClass.EStopLoopDelegate">
            <summary>
            Delegate for a estop loop method which should continuously check the estop state until appClosing becomes true
            </summary>
            <param name="appClosing">Cancelled when the application is closing.</param>
        </member>
        <member name="P:Labman.BaseClass.SimulationMode">
            <summary>Flag that is set to indicate when the system is running in simulation mode</summary>
        </member>
        <member name="P:Labman.BaseClass.HardwareHelpVisibility">
            <summary>
            Flag used to hide or show the hardware help files. We can use this to hide the hardware help files when sending the project out to the customer.
            </summary>
        </member>
        <member name="P:Labman.BaseClass.UserAutoLogoutTime">
            <summary>The time in seconds before an inactive logged in user gets logged out. This needs to be set before SetupBaseClass is called.</summary>
        </member>
        <member name="P:Labman.BaseClass.SystemInitialised">
            <summary>
            This flag is set when the system is initialised successfully and cleared when the system is e/stopped
            </summary>
        </member>
        <member name="P:Labman.BaseClass.SystemHasBeenInitialised">
            <summary>
            This flag is set when the system is initialised successfully and is not cleared.
            It can be used to tell if the system has been initialised since the software was started.
            </summary>
            <value>
            The system has been initialised.
            </value>
        </member>
        <member name="P:Labman.BaseClass.EStopDetected">
            <summary>
            This flag can be used to allow process code to catch e/stops that have happened and have not
            been caught. The flag should be cleared once the re-initialisation procedure has been performed.
            </summary>
        </member>
        <member name="P:Labman.BaseClass.ApplicationAuthenticator">
            <summary>
            The type of application authentication to use
            </summary>
        </member>
        <member name="P:Labman.BaseClass.SoakTestViewModel">
            <summary>
            The view model for the soak test view
            </summary>
        </member>
        <member name="P:Labman.BaseClass.RandomNumber">
            <summary>
            Property that exposes a random number generator
            </summary>
        </member>
        <member name="P:Labman.BaseClass.AppDispatcher">
            <summary>UI thread dispatcher object</summary>
        </member>
        <member name="P:Labman.BaseClass.EmergencyStopChecker">
            <summary>Exposes a reference to the emergency stop checker in use</summary>
        </member>
        <member name="P:Labman.BaseClass.ActivityLogger">
            <summary>
            Exposes a reference to the activity logger
            </summary>
        </member>
        <member name="P:Labman.BaseClass.LogPath">
            <summary>
            Gets or sets the path to store HTML log files in.
            </summary>
        </member>
        <member name="P:Labman.BaseClass.LogFileDuration">
            <summary>
            Gets or sets the duration to store messages in a single log file, once this duration is exceeded a new file is created
            </summary>
        </member>
        <member name="P:Labman.BaseClass.LogFileProjectName">
            <summary>
            Gets or sets project name of to prepend to log file name
            </summary>
        </member>
        <member name="P:Labman.BaseClass.LogFiles">
            <summary>Property that exposes the collection of log files</summary>
        </member>
        <member name="P:Labman.BaseClass.PositionsDatabases">
            <summary>Property that exposes the collection of positions databases</summary>
        </member>
        <member name="P:Labman.BaseClass.DatabaseConnections">
            <summary>Property that exposes the collection of databases</summary>
        </member>
        <member name="P:Labman.BaseClass.ParametersDatabaseConnectionSettings">
            <summary>Property that exposes the parameters database</summary>
        </member>
        <member name="P:Labman.BaseClass.UserAccess">
            <summary>
            Access control (user login) list
            </summary>
        </member>
        <member name="P:Labman.BaseClass.FeatureAccessLevelRequirements">
            <summary>
            The access level requirements for the application
            </summary>
        </member>
        <member name="M:Labman.BaseClass.LoadAvailableUsers">
            <summary>
            Load available users from the storage engine
            </summary>
        </member>
        <member name="M:Labman.BaseClass.Dispose">
            <summary>
            Dispose method is called to stop threads when the application is closing
            </summary>
        </member>
        <member name="M:Labman.BaseClass.BaseApplicationVersion">
            <summary>
            Obtain the version of the application DLL
            </summary>
            <returns>DLL version string</returns>
        </member>
        <member name="M:Labman.BaseClass.StartEStopThread">
            <summary>
            This method is used to start the e/stop thread if it is not running.
            If the thread is already running then the method exits.
            </summary>
        </member>
        <member name="M:Labman.BaseClass.CheckForEstop">
            <summary>
            This method checks if there is an e/stop condition and throws a 
            Labman.Hardware.EmergencyStopException exception when e/stopped
            </summary>
        </member>
        <member name="M:Labman.BaseClass.ISEStopped">
            <summary>
            This method checks if there is an e/stop condition
            </summary>
            <returns>Returns a bool value to indicate if the e/stop is triggered</returns>
        </member>
        <member name="M:Labman.BaseClass.DefaultEstopLoop(System.Threading.CancellationToken)">
            <summary>
            This method runs on the estop thread unless the estop action is overriden
            </summary>
            <param name="appClosing">Whether the application is closing.</param>
        </member>
        <member name="M:Labman.BaseClass.SetupBaseClass(Labman.BaseClass.EStopLoopDelegate)">
            <summary>
            Setup the base class
            </summary>
            <param name="estopLoopOverride">If supplied, overrides the looping estop-checking method.</param>
        </member>
        <member name="M:Labman.BaseClass.LoadDatabaseConnections">
            <summary>
            Loads the configurations
            </summary>
        </member>
        <member name="M:Labman.BaseClass.CheckApplicationAuthentication">
            <summary>
            Checks the application authentication is valid, if not an Exception is thrown
            </summary>
        </member>
        <member name="M:Labman.BaseClass.IsApplicationAuthenticated">
            <summary>
            Determines whether [is application authenticated].
            </summary>
            <returns><c>true</c> if [is application authenticated]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:Labman.BaseClass._lastUniqueRequestID">
            <summary>
            Last issued unique id
            </summary>
        </member>
        <member name="F:Labman.BaseClass._uniqueRequestLock">
            <summary>
            An object to use for a lock around the request id
            </summary>
        </member>
        <member name="M:Labman.BaseClass.GetNextUniqueRequestID">
            <summary>
            This method gets the next unique id in the sequence
            </summary>
            <returns>The unsigned long unique ID</returns>
        </member>
        <member name="M:Labman.BaseClass.LogUserInteraction(System.String,System.String)">
            <summary>
            Logs a user interaction with the system
            </summary>
            <param name="message">The message describing the user interaction</param>
            <param name="targetSite">An indication of where in the code the user interacted. This could be a fully qualified class name, or a human readable string if appropriate. It should be used to uniquely identify an interaction.</param>
            <remarks>This method handles logging of of messages against the current logged in user through the baseapp</remarks>
        </member>
        <member name="M:Labman.BaseClass.LogUserInteraction(System.String)">
            <summary>
            Logs a user interaction with the system
            </summary>
            <param name="message">The message describing the user interaction</param>
            <remarks>
            This method handles logging of of messages against the current logged in user through the baseapp.
            The 'target site' of the activity log message is automatically populated with the class/member that called this method.
            </remarks>
        </member>
        <member name="T:Labman.Communication.BeckhoffAdsConnection">
            <summary>
            This class provides an interface to the Beckhoff ADS DLL and allows connections to be shared amongst multiple module instances
            </summary>
        </member>
        <member name="T:Labman.Communication.BeckhoffAdsConnection.BeckhoffVariableType">
            <summary>
            Types of variables used by Beckhoff ADS commands
            </summary>
        </member>
        <member name="P:Labman.Communication.BeckhoffAdsConnection.IpAddress">
            <summary>
            The IP address of the Beckhoff device to connect to
            </summary>
        </member>
        <member name="P:Labman.Communication.BeckhoffAdsConnection.AdsPort">
            <summary>
            The ADS port number to connect to
            </summary>
        </member>
        <member name="P:Labman.Communication.BeckhoffAdsConnection.ConnectionKey">
            <summary>
            A unique connection key string used to get the client connection for the ip/port combination
            </summary>
        </member>
        <member name="P:Labman.Communication.BeckhoffAdsConnection.AdsClient">
            <summary>
            Property used to return the Ads client connection object
            </summary>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.#ctor(System.String,System.Int32)">
            <summary>
            Create a connection to a Beckhoff device on a given ip address and port
            </summary>
            <param name="ipAddress">The IP address of the device</param>
            <param name="adsPort">The ADS port to connect to</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.Dispose">
            <summary>
            Dispose of the instance of this connection
            </summary>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.CallFunctionBlock(System.UInt32,System.UInt32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Labman.Communication.BeckhoffAdsConnection.BeckhoffVariableType,System.Object}})">
            <summary>
            Call a function block with a list of values
            </summary>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
            <param name="parameters">A list of parameter values to write, this is a list of value/type pairs</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.CallFunctionBlock(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Call a function block with a value
            </summary>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.CallFunctionBlock(System.UInt32,System.UInt32)">
            <summary>
            Call a function block with no parameters
            </summary>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.WriteRegisterValue(System.UInt32,System.UInt32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Labman.Communication.BeckhoffAdsConnection.BeckhoffVariableType,System.Object}})">
            <summary>
            Write a register value / call a function block
            </summary>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
            <param name="parameters">A list of parameter values to write, this is a list of value/type pairs</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.WriteRegisterValue(System.UInt32,System.UInt32,System.Object)">
            <summary>
            Write a register value / call a function block
            </summary>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.ReadRegisterValue``1(System.UInt32,System.UInt32)">
            <summary>
            Read a register value
            </summary>
            <typeparam name="T">The type of value being returned</typeparam>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
            <returns>The register value</returns>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.CallFunctionBlock(System.Int32,System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Labman.Communication.BeckhoffAdsConnection.BeckhoffVariableType,System.Object}})">
            <summary>
            Call a function block with a list of values
            </summary>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
            <param name="parameters">A list of parameter values to write, this is a list of value/type pairs</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.CallFunctionBlock(System.Int32,System.Int32,System.Object)">
            <summary>
            Call a function block with a value
            </summary>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.CallFunctionBlock(System.Int32,System.Int32)">
            <summary>
            Call a function block with no parameters
            </summary>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.WriteRegisterValue(System.Int32,System.Int32,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Labman.Communication.BeckhoffAdsConnection.BeckhoffVariableType,System.Object}})">
            <summary>
            Write a register value / call a function block
            </summary>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
            <param name="parameters">A list of parameter values to write, this is a list of value/type pairs</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.WriteRegisterValue(System.Int32,System.Int32,System.Object)">
            <summary>
            Write a register value / call a function block
            </summary>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.ReadRegisterValue``1(System.Int32,System.Int32)">
            <summary>
            Read a register value
            </summary>
            <typeparam name="T">The type of value being returned</typeparam>
            <param name="indexGroup">The register index group to write to (see Beckhoff documentation)</param>
            <param name="indexOffset">The register index offset to write to (see Beckhoff documentation)</param>
            <returns>The register value</returns>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.ReadRegisterValue``1(System.String)">
            <summary>
            Read a PLC variable value
            </summary>
            <typeparam name="T">The type of variable to read</typeparam>
            <param name="variableName">The name of the variable in the PLC project</param>
            <returns>The variable value</returns>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.WriteRegisterValue(System.String,System.Object)">
            <summary>
            Write a PLC variable value
            </summary>
            <param name="variableName">The name of the variable in the PLC project</param>
            <param name="value">The value to write</param>
        </member>
        <member name="T:Labman.Communication.BeckhoffAdsConnection.ValueWriter">
            <summary>
            Helper class used to create a stream of parameters used to send to the Beckhoff device when calling functions
            </summary>
        </member>
        <member name="P:Labman.Communication.BeckhoffAdsConnection.ValueWriter.Stream">
            <summary>ADS Stream which holds the output value array</summary>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.ValueWriter.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Labman.Communication.BeckhoffAdsConnection.BeckhoffVariableType,System.Object}})">
            <summary>
            Create a new value writer object
            </summary>
            <param name="parameters">A list of parameters to write</param>
        </member>
        <member name="M:Labman.Communication.BeckhoffAdsConnection.ValueWriter.AddValue(Labman.Communication.BeckhoffAdsConnection.BeckhoffVariableType,System.Object)">
            <summary>
            Add the specified value
            </summary>
            <param name="variableType">Value type</param>
            <param name="value">Value</param>
        </member>
        <member name="T:Labman.Communication.Crc16">
            <summary>
            Used to calculate a CRC16 checksum
            copied from: http://sanity-free.org/134/standard_crc_16_in_csharp.html
            </summary>
        </member>
        <member name="M:Labman.Communication.Crc16.ComputeChecksum(System.Byte[])">
            <summary>
            Computes the checksum.
            </summary>
            <param name="bytes">The bytes to calculate the checksum for.</param>
            <returns>the checksum</returns>
        </member>
        <member name="M:Labman.Communication.Crc16.ComputeChecksumBytes(System.Byte[])">
            <summary>
            Computes the checksum in bytes.
            </summary>
            <param name="bytes">The bytes to calculate the checksum for.</param>
            <returns>the checksum as a byte array</returns>
        </member>
        <member name="M:Labman.Communication.Crc16.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Communication.Crc16"/> class. populates lookup tables to save processing later
            </summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.KVaserCANMsg">
            <summary>
            Class that encapsulates a KVaser CAN message.
            </summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.KVaserCANMsg.Id">
            <summary>11/29-Bit CAN-ID</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.KVaserCANMsg.MsgType">
            <summary>Kind of Message</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.KVaserCANMsg.Length">
            <summary>Length of the Message</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.KVaserCANMsg.Data">
            <summary>Data Bytes (0...7)</summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANMsg.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[])">
            <summary>
            CANMsg standard constructor.
            </summary>
            <param name="id">The identifier.</param>
            <param name="msgType">Type of the MSG.</param>
            <param name="length">The length.</param>
            <param name="data">The data.</param>
        </member>
        <member name="T:Labman.Communication.Interfaces.KVaserCANInterface">
            <summary>
            Communications interface for a KVaser CAN converter
            </summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.KVaserCANInterface.BaudRates">
            <summary>
            CAN Baudrates.
            </summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.KVaserCANInterface.DataReceivedDelegate">
            <summary>
            Delegate for the data received event
            </summary>
            <param name="canNodeAddress">Can node address to listen for messages on</param>
            <param name="message">The message that has been received from the interface</param>
        </member>
        <member name="E:Labman.Communication.Interfaces.KVaserCANInterface.DataReceived">
            <summary>
            An event that is fired when data is received from the interface.
            Note that only certain interfaces will support this event.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANInterface.ReceivedMessageThread">
            <summary>
            Thread that runs waiting for new messages to arrive on the CAN bus.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANInterface.GetDeviceIdFromArguments(System.Object)">
            <summary>
            Gets the device id from arguments
            </summary>
            <param name="requestArguments">The request arguments passed in - this should be a byte array packed in an object</param>
            <returns>Device ID</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANInterface.IsMessageReplyValid(System.Object,Labman.Communication.Interfaces.KVaserCANMsg)">
            <summary>
            Checks if a CAN message is the correct response for the supplied request
            </summary>
            <param name="requestArguments">The request arguments passed in - this should be a byte array packed in an object</param>
            <param name="messageReceived">The CAN message received and to be checked</param>
            <returns>True if this message matches the request</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANInterface.Open">
            <summary>
            Open commuincates on KVaser CAN channel 0.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANInterface.Close">
            <summary>
            Close an open CAN connection.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANInterface.ClearBuffers(System.Object)">
            <summary>
            Clear the receive buffers by reading all available data.
            </summary>
            <param name="args">arguments</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANInterface.IsOpen">
            <summary>
            Return the CAN channel connection state.
            </summary>
            <returns>True if the connection is open, else False</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANInterface.IsDataAvailable(System.Object)">
            <summary>
            Returns whether there is data availble to be read for the devices id specified in arguments.
            </summary>
            <param name="args">arguments</param>
            <returns>
            True if data is available, else False
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">Receive Arguments must be set when using the PeakCAN interface.</exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANInterface.Write(System.Byte[])">
            <summary>
            Writes the specified data buffer to the CAN channel.
            </summary>
            <param name="buffer">
            The data buffer to send.
            This must be formatted as follows:
            ID MSB: 1 byte.
            ID LSB: 1 byte.
            LENGTH: 1 byte.
            DATA: 0-8 bytes.
            </param>
        </member>
        <member name="M:Labman.Communication.Interfaces.KVaserCANInterface.ReadExisting(System.Object)">
            <summary>
            Read all existing data for a device id specified in arguments.
            </summary>
            <param name="args">arguments</param>
            <returns>
            A byte array containing the read data, or null if the buffer is empty.
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">
            The port is not open, please open the connection before reading data.
            or
            Receive Arguments must be set when using the KVaser CAN interface.
            </exception>
        </member>
        <member name="T:Labman.Communication.Interfaces.OceanOpticsOmniInterface">
            <summary>
            This class creates a communication interface to provide a gateway to OceanOptics spectrophotometers via the OmniDriver.
            A separate interface class was developed as you can only have ONE instance of the Wrapper class instantiated in your EXE.
            Therefore if there are multiple spectrophotometers they must ALL use the SAME communication interface instance.
            </summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.OceanOpticsOmniInterface.OmniWrapperInstance">
            <summary>
            A public property which exposes the instance of the wrapper interface object which is used to communicate with
            the spectrophotometer
            </summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.OceanOpticsOmniInterface.NetworkIndex">
            <summary>
            A readonly property which provides a key pair of IP address and index number for networked spectrophotometers
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.OceanOpticsOmniInterface.Open">
            <summary>
            Opens the connection to the Trio controller
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.OceanOpticsOmniInterface.Close">
            <summary>
            Closes the connection to the Trio Controller
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.OceanOpticsOmniInterface.IsOpen">
            <summary>
            Checks if the connection to the Omni driver is open
            </summary>
            <returns>Bool - TRUE if open and FALSE otherwise</returns>
        </member>
        <member name="T:Labman.Communication.Interfaces.UDPInterface">
            <summary>
            The UDP class provides a method of communicating with Ethernet based devices that use UDP protocol.
            The class implements the base Communication interface class.
            </summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.UDPInterface._udpClient">
            <summary>The remote UDP client connection.</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.UDPInterface._endPoint">
            <summary>
            IP end point.
            </summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.UDPInterface._isOpen">
            <summary>
            FLag to track client open/closed state.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.UDPInterface.Open">
            <summary>
            Open the network socket.
            The HostName and PortNumber properties must be set before opening the connection.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.UDPInterface.Close">
            <summary>
            Close the UDP connection.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.UDPInterface.ClearBuffers(System.Object)">
            <summary>
            Clear the receive buffers of the UDP connection by reading all available data.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.UDPInterface.IsOpen">
            <summary>
            Return the connected state of the UDP client.
            </summary>
            <returns>True if the connection is open, False otherwise.</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.UDPInterface.IsDataAvailable(System.Object)">
            <summary>
            Returns whether there is data available to be read on the communications interface.
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            True if data is available, False otherwise.
            </returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.UDPInterface.Write(System.Byte[])">
            <summary>
            Send a UDP datagram to a remote host.
            </summary>
            <param name="buffer">The data to send</param>
            <exception cref="T:Labman.Communication.CommunicationException">The buffer specified to write is null.</exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.UDPInterface.ReadExisting(System.Object)">
            <summary>
            Read UDP datagram that was sent by a remote host.
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            The reply from the remote host.
            </returns>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCANInterface">
            <summary>
            Communications interface for the Peak Systems PCAN-USB CAN converter
            </summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCANInterface.DataReceivedDelegate">
            <summary>
            Delegate for the data received event
            </summary>
            <param name="canNodeAddress">Can node address to listen for messages on</param>
            <param name="message">The message that has been received from the interface</param>
        </member>
        <member name="E:Labman.Communication.Interfaces.PeakCANInterface.DataReceived">
            <summary>
            An event that is fired when data is received from the interface.
            Note that only certain interfaces will support this event.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCANInterface.Open">
            <summary>
            Open the communications port
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCANInterface.ReceivedMessageThread">
            <summary>
            Thread that runs waiting for new messages to arrive on the CAN bus
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCANInterface.Close">
            <summary>
            Close an open serial port connection. This can be called even if the port is not yet open.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCANInterface.ClearBuffers(System.Object)">
            <summary>
            Clear the receive buffers of the port by reading all available data
            </summary>
            <param name="args">arguments</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCANInterface.IsOpen">
            <summary>
            Return the connected state of the port
            </summary>
            <returns>True if the connection is open, else False</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCANInterface.IsDataAvailable(System.Object)">
            <summary>
            Returns whether there is data availble to be read on the communications interface
            </summary>
            <param name="args">arguments</param>
            <returns>
            True if data is available, else False
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">Receive Arguments must be set when using the PeakCAN interface.</exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCANInterface.Write(System.Byte[])">
            <summary>
            Writes the specified buffer data to the serial port
            </summary>
            <param name="buffer">
            The data buffer to send.
            This must be formatted as follows:
            ID MSB: 1 byte
            ID LSB: 1 byte
            LENGTH: 1 byte
            DATA: 0-8 bytes
            </param>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCANInterface.ReadExisting(System.Object)">
            <summary>
            Read all existing data from the serial port
            </summary>
            <param name="args">arguments</param>
            <returns>
            A byte array containing the read data, or null if the buffer is empty
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">
            The port is not open, please open the connection before reading data.
            or
            Receive Arguments must be set when using the PeakCAN interface.
            </exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCANInterface.IsMessageReplyValid(System.Object,Labman.Communication.Interfaces.PeakCAN.TCLightMsg)">
            <summary>
            Checks if a CAN message is the correct response for the supplied request
            </summary>
            <param name="requestArguments">The request arguments passed in - this should be a byte array packed in an object</param>
            <param name="messageReceived">The CAN message received and to be checked</param>
            <returns>True if this message matches the request</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCANInterface.GetDeviceIdFromArguments(System.Object)">
            <summary>
            Gets the device id from arguments
            </summary>
            <param name="requestArguments">The request arguments passed in - this should be a byte array packed in an object</param>
            <returns>Device ID</returns>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl">
            <summary>
            Class which references and exposes the DLL function definitions for the PeakSystems PCAN USB Converter
            </summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_INIT_TYPE_EX">
            <summary>Extended Frames</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_INIT_TYPE_ST">
            <summary>Standard Frames</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_MAX_STANDARD_ID">
            <summary>The maximum standard ID</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_MAX_EXTENDED_ID">
            <summary>The maximum extended ID</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.MSGTYPE_STANDARD">
            <summary>Standard Data frame (11-bit ID)</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.MSGTYPE_RTR">
            <summary>1, if Remote Request frame</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.MSGTYPE_EXTENDED">
            <summary>1, if Extended Data frame (CAN 2.0B, 29-bit ID)</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.MSGTYPE_STATUS">
            <summary>1, if Status information</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_BAUD_1M">
            <summary>1 MBit/sec</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_BAUD_500K">
            <summary>500 KBit/sec</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_BAUD_250K">
            <summary>250 KBit/sec</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_BAUD_125K">
            <summary>125 KBit/sec</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_BAUD_100K">
            <summary>100 KBit/sec</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_BAUD_50K">
            <summary>50 KBit/sec</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_BAUD_20K">
            <summary>20 KBit/sec</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_BAUD_10K">
            <summary>10 KBit/sec</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.CAN_BAUD_5K">
            <summary>5 KBit/sec</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_OK">
            <summary>No error</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_XMTFULL">
            <summary>Transmit buffer in CAN controller is full</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_OVERRUN">
            <summary>CAN controller was read too late</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_BUSLIGHT">
            <summary>Bus error: an error counter reached the 'light' limit</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_BUSHEAVY">
            <summary>Bus error: an error counter reached the 'heavy' limit  </summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_BUSOFF">
            <summary>Bus error: the CAN controller is in bus-off state</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_QRCVEMPTY">
            <summary>Receive queue is empty</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_QOVERRUN">
            <summary>Receive queue was read too late</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_QXMTFULL">
            <summary>Transmit queue ist full</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_REGTEST">
            <summary>Test of the CAN controller hardware registers failed (no hardware found)</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_NOVXD">
            <summary>Driver not loaded</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_NODRIVER">
            <summary>Driver not loaded</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERRMASK_ILLHANDLE">
            <summary>Mask for all handle errors</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_HWINUSE">
            <summary>Hardware already in use by a Net</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_NETINUSE">
            <summary>a Client is already connected to the Net</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_ILLHW">
            <summary>Hardware handle is invalid</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_ILLNET">
            <summary>Net handle is invalid</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_ILLCLIENT">
            <summary>Client handle is invalid</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_RESOURCE">
            <summary>Resource (FIFO, Client, timeout) cannot be created</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_ILLPARAMTYPE">
            <summary>Invalid parameter</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_ILLPARAMVAL">
            <summary>Invalid parameter value</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_UNKNOWN">
            <summary>Unknown error</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ERR_ANYBUSERR">
            <summary>Any bus error</summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANMsg">
            <summary>
            CAN message
            </summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANMsg.ID">
            <summary>11/29 bit identifier</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANMsg.MSGTYPE">
            <summary>Bits from MSGTYPE_*</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANMsg.LEN">
            <summary>Data Length Code of the Msg (0..8)</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANMsg.DATA">
            <summary>Data 0 .. 7</summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANTimestamp">
            <summary>
            Timestamp of a receive/transmit event
            Total microseconds = micros + 1000 * millis + 0xFFFFFFFF * 1000 * millis_overflow
            </summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANTimestamp.millis">
            <summary>Base-value: milliseconds: 0.. 2^32-1</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANTimestamp.millis_overflow">
            <summary>Roll-arounds of millis</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANTimestamp.micros">
            <summary>Microseconds: 0..999</summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.Init(System.UInt16,System.Int32)">
             <summary>
             Initializes the Pcan USB Control.
             </summary>
             <remarks>
             This function make the following:
               - Activate a Hardware
               - Make a Register Test of 82C200/SJA1000
               - Allocate a Send buffer and a Hardware handle
               - Programs the configuration of the transmit/receive driver
               - Set the Baudrate register
               - Set the Controller in RESET condition
            
             If CANMsgType=0  ---> ID 11Bit
             If CANMsgType=1  ---> ID 11/29Bit 
            
             Possible Errors: NOVXD ILLHW REGTEST RESOURCE
             </remarks>
             <param name="BTR0BTR1">The bt r0 bt r1.</param>
             <param name="CANMsgType">Type of the can MSG.</param>
             <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.Close">
            <summary>
            This function terminate and release the configured hardware and all.
            allocated resources
            
            Possible Errors: NOVXD
            </summary>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.Status">
            <summary>
            This function request the current status of the hardware (b.e. BUS-OFF)
            
            Possible Errors: NOVXD BUSOFF BUSHEAVY OVERRUN
            </summary>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.Write(Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANMsg@)">
            <summary>
            This function Place a CAN message into the Transmit Queue of the CAN Hardware
            
            Possible Errors: NOVXD RESOURCE BUSOFF QXMTFULL
            </summary>
            <param name="msg">The MSG.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.Read(Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANMsg@)">
             <summary>
              This function get the next message or the next error from the Receive Queue of 
              the CAN Hardware.  
              REMARK:
               - Check always the type of the received Message (MSGTYPE_STANDARD,MSGTYPE_RTR,
               MSGTYPE_EXTENDED,MSGTYPE_STATUS)
               - The function will return ERR_OK always that you receive a CAN message successfully 
               although if the messages is a MSGTYPE_STATUS message.  
               - When a MSGTYPE_STATUS mesasge is got, the ID and Length information of the message 
               will be treated as indefined values. Actually information of the received message
               should be interpreted using the first 4 data bytes as follow:
                 
               Data0	Data1	Data2	Data3	Kind of Error
               0x00	0x00	0x00	0x02	CAN_ERR_OVERRUN         0x0002      CAN Controller was read to late
               0x00	0x00	0x00	0x04	CAN_ERR_BUSLIGHT        0x0004      Bus Error: An error counter limit reached (96)
               0x00	0x00	0x00	0x08	CAN_ERR_BUSHEAVY        0x0008      Bus Error: An error counter limit reached (128)
               0x00	0x00	0x00	0x10	CAN_ERR_BUSOFF          0x0010      Bus Error: Can Controller went "Bus-Off"
               - If a CAN_ERR_BUSOFF status message is received, the CAN Controller must to be 
               initialized again using the Init() function.  Otherwise, will be not possible 
               to send/receive more messages. 
               - The message will be written to 'msgbuff'.
            
              Possible Errors: NOVXD  QRCVEMPTY
            
             </summary>
             <param name="msg">The message.</param>
             <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ReadEx(Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANMsg@,Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANTimestamp@)">
             <summary>
              This function get the next message or the next error from the Receive Queue of 
              the CAN Hardware and the time when the message arrived. 
              REMARK:
            		- Check always the type of the received Message (MSGTYPE_STANDARD,MSGTYPE_RTR,
            		  MSGTYPE_EXTENDED,MSGTYPE_STATUS)
            		- The function will return ERR_OK always that you receive a CAN message successfully 
            		  although if the messages is a MSGTYPE_STATUS message.  
            		- When a MSGTYPE_STATUS mesasge is got, the ID and Length information of the message 
            		  will be treated as indefined values. Actually information of the received message
            		  should be interpreted using the first 4 data bytes as follow:
            			*	Data0	Data1	Data2	Data3	Kind of Error
            				0x00	0x00	0x00	0x02	CAN_ERR_OVERRUN		0x0002	CAN Controller was read to late
            				0x00	0x00	0x00	0x04	CAN_ERR_BUSLIGHT	0x0004  Bus Error: An error counter limit reached (96)
            				0x00	0x00	0x00	0x08	CAN_ERR_BUSHEAVY	0x0008	Bus Error: An error counter limit reached (128)
            				0x00	0x00	0x00	0x10	CAN_ERR_BUSOFF		0x0010	Bus Error: Can Controller went "Bus-Off"
            		- If a CAN_ERR_BUSOFF status message is received, the CAN Controller must to be 
            		  initialized again using the Init() function.  Otherwise, will be not possible 
            		  to send/receive more messages. 
            		- The message will be written to 'msgbuff'.
            		Since Version 2.x the Ext. Version is available - new Parameter:
            		-  Receive timestamp
            
              Possible Errors: NOVXD  QRCVEMPTY
            
             </summary>
             <param name="msg">The MSG.</param>
             <param name="timestamp">The timestamp.</param>
             <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.VersionInfo(System.Text.StringBuilder)">
            <summary>
            This function get the Version and copyright of the hardware as text 
            
            (max. 255 characters)
            
            Possible Errors:  NOVXD
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>Teh result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.DLLVersionInfo(System.Text.StringBuilder)">
            <summary>
            This function is used to get the Version and copyright of the 
            
            DLL as text (max. 255 characters)
            
             Possible Errors: -1 for NULL-Pointer parameters :-)
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.SpecialFunktion(System.UInt32,System.UInt32)">
            <summary>
            This function is an special function to be used "ONLY" for distributors
            
             Return: 1 - the given parameters and the parameters in the hardware agree 
                     0 - otherwise
                     
            Possible Errors:  NOVXD
            </summary>
            <param name="distributorcode">The distributorcode.</param>
            <param name="codenumber">The codenumber.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ResetClient">
            <summary>
            This function delete the both queues (Transmit,Receive) of the CAN Controller 
            using a RESET
            
            Possible Errors: ERR_ILLCLIENT ERR_NOVXD
            </summary>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.MsgFilter(System.UInt32,System.UInt32,System.Int32)">
             <summary>
              This function set the receive message filter of the CAN Controller.
              REMARK:
            		- A quick register of all messages is possible using the parameters FromID and ToID = 0
            		- Every call of this function maybe cause an extention of the receive filter of the 
            		  CAN controller, which one can go briefly to RESET
            		- New in Ver 2.x:
            			* Standard frames will be put it down in the acc_mask/code as Bits 28..13
            			* Hardware driver for 82C200 must to be moved to Bits 10..0 again!
            	WARNING: 
            		It is not guaranteed to receive ONLY the registered messages.
            
              Possible Errors: NOVXD ILLCLIENT ILLNET REGTEST
             </summary>
             <param name="FromID">From identifier.</param>
             <param name="ToID">To identifier.</param>
             <param name="Type">The type.</param>
             <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.ResetFilter">
            <summary>
            This function close completely the Message Filter of the Hardware.
            
            They will be no more messages received.
            
            Possible Errors: NOVXD
            </summary>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.SetUSBDeviceNr(System.UInt32)">
            <summary>
            This function set an identification number to the USB CAN hardware
            
            Possible Errors: NOVXD ILLHW ILLPARAMTYPE ILLPARAMVAL REGTEST
            </summary>
            <param name="DevNum">The dev number.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.GetUSBDeviceNr(System.UInt32@)">
            <summary>
            This function read the device number of a USB CAN Hardware
            
            Possible Errors: NOVXD ILLHW ILLPARAMTYPE
            </summary>
            <param name="DevNum">The dev number.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.SetRcvEvent(System.IntPtr)">
            <summary>
            This function is used to set the Event for the Event Handler
            
            Possible Errors: ILLCLIENT ILLPARAMTYPE ILLPARAMVAL NOVXD
            </summary>
            <param name="hEvent">The h event.</param>
            <returns>The result</returns>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.FrameType">
            <summary>
            Kind of Frame - Message Type
            </summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.MaxIDValues">
            <summary>
            Maximal values for the ID of a CAN Message
            </summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.MsgTypes">
            <summary>
            Kind of CAN Message
            </summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.Baudrates">
            <summary>
            CAN Baudrates
            </summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.CANResult">
            <summary>
            CAN Error and status values
            </summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.TCLightMsg">
            <summary>
            Class to managing the multiple definition of a TPCANMsg structure 
            between the different PCANLIGHT Classes/Dlls
            </summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.TCLightMsg.ID">
            <summary>11/29-Bit CAN-ID</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.TCLightMsg.MsgType">
            <summary>Kind of Message</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.TCLightMsg.Len">
            <summary>Length of the Message</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.PeakCAN.TCLightMsg.Data">
            <summary>Data Bytes (0...7)</summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.TCLightMsg.#ctor">
            <summary>
            TCLightMsg standard constructor
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.TCLightMsg.#ctor(Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANMsg)">
            <summary>
            TCLightMsg constructor
            </summary>
            <param name="msg">A TCANMsg structure defined in the PCanUsbControl Class</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.TCLightMsg.op_Implicit(Labman.Communication.Interfaces.PeakCAN.TCLightMsg)~Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANMsg">
            <summary>
            Overloaded Type Casting to a TCANMsg structure defined in the PCanUsbControl class
            </summary>
            <param name="msg">Instance of the TCLightMsg Class to cast</param>
            <returns>A corresponding TCANMsg structure, defined in PCanUsbControl Class</returns>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.TCLightTimestamp">
            <summary>
            Class to managing the multiple definition of a TPCANTimestamp structure 
            between the different PCANLIGHT Classes/Dlls
            </summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.PeakCAN.TCLightTimestamp.Millis">
            <summary>Base-value: milliseconds: 0.. 2^32-1</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.PeakCAN.TCLightTimestamp.MillisOverflow">
            <summary>Roll-arounds of milliseconds</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.PeakCAN.TCLightTimestamp.Micros">
            <summary>Microseconds: 0..999</summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.TCLightTimestamp.#ctor">
            <summary>
             TCLightTimestamp standard constructor
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.TCLightTimestamp.#ctor(Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANTimestamp)">
            <summary>
            TCLightTimestamp constructor
            </summary>
            <param name="rcvTime">A TPCANTimestamp structure defined in the PCanUsbControl Class</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.TCLightTimestamp.op_Implicit(Labman.Communication.Interfaces.PeakCAN.TCLightTimestamp)~Labman.Communication.Interfaces.PeakCAN.PCanUsbControl.TPCANTimestamp">
            <summary>
            Overloaded Type Casting to a TPCANTimestamp structure defined in the PCanUsbControl class
            </summary>
            <param name="rcvTime">Instance of the TCLightTimestamp Class to cast</param>
            <returns>A corresponding TPCANTimestamp structure, defined in PCanUsbControl Class</returns>
        </member>
        <member name="T:Labman.Communication.Interfaces.PeakCAN.PCanUsb">
            <summary>
            Interfacing class to the PCAN Light Dlls
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.Initialise(Labman.Communication.Interfaces.PeakCAN.Baudrates,Labman.Communication.Interfaces.PeakCAN.FrameType)">
            <summary>
            Open the PCAN interface connection
            </summary>
            <param name="baudRate">The baud rate to use</param>
            <param name="messageType">Define if the message type is standard or extended</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.Close">
            <summary>
            Close the PCAN interface connection
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.Status">
            <summary>
            PCANLight Status Function
            This function request the current status of the hardware (b.e. BUS-OFF)
            </summary>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.Write(Labman.Communication.Interfaces.PeakCAN.TCLightMsg)">
            <summary>
            PCANLight Write function
            This function Place a CAN message into the Transmit Queue of the CAN Hardware
            </summary>
            <param name="msgToSend">The TCLightMsg message to be written</param>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.Read(Labman.Communication.Interfaces.PeakCAN.TCLightMsg@)">
            <summary>
            PCANLight Read function
            This function get the next message or the next error from the Receive Queue of 
            the CAN Hardware.  
            REMARK:
            	- Check always the type of the received Message (MSGTYPE_STANDARD,MSGTYPE_RTR,
            	  MSGTYPE_EXTENDED,MSGTYPE_STATUS)
            	- The function will return ERR_OK always that you receive a CAN message successfully 
            	  although if the messages is a MSGTYPE_STATUS message.  
            	- When a MSGTYPE_STATUS mesasge is got, the ID and Length information of the message 
            	  will be treated as indefined values. Actually information of the received message
            	  should be interpreted using the first 4 data bytes as follow:
            		*	Data0	Data1	Data2	Data3	Kind of Error
            			0x00	0x00	0x00	0x02	CAN_ERR_OVERRUN		0x0002	CAN Controller was read to late
            			0x00	0x00	0x00	0x04	CAN_ERR_BUSLIGHT	0x0004  Bus Error: An error counter limit reached (96)
            			0x00	0x00	0x00	0x08	CAN_ERR_BUSHEAVY	0x0008	Bus Error: An error counter limit reached (128)
            			0x00	0x00	0x00	0x10	CAN_ERR_BUSOFF		0x0010	Bus Error: Can Controller went "Bus-Off"
            	- If a CAN_ERR_BUSOFF status message is received, the CAN Controller must to be 
            	  initialized again using the Init() function.  Otherwise, will be not possible 
            	  to send/receive more messages.
            </summary>
            <param name="msg">The TCLightMsg structure to store the CAN message</param>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.ReadEx(Labman.Communication.Interfaces.PeakCAN.TCLightMsg@,Labman.Communication.Interfaces.PeakCAN.TCLightTimestamp@)">
            <summary>
            PCANLight ReadEx function
            This function get the next message or the next error from the Receive Queue of 
            the CAN Hardware and the time when the message arrived.  
            REMARK:
            	- Check always the type of the received Message (MSGTYPE_STANDARD,MSGTYPE_RTR,
            	  MSGTYPE_EXTENDED,MSGTYPE_STATUS)
            	- The function will return ERR_OK always that you receive a CAN message successfully 
            	  although if the messages is a MSGTYPE_STATUS message.  
            	- When a MSGTYPE_STATUS mesasge is got, the ID and Length information of the message 
            	  will be treated as indefined values. Actually information of the received message
            	  should be interpreted using the first 4 data bytes as follow:
            		*	Data0	Data1	Data2	Data3	Kind of Error
            			0x00	0x00	0x00	0x02	CAN_ERR_OVERRUN		0x0002	CAN Controller was read to late
            			0x00	0x00	0x00	0x04	CAN_ERR_BUSLIGHT	0x0004  Bus Error: An error counter limit reached (96)
            			0x00	0x00	0x00	0x08	CAN_ERR_BUSHEAVY	0x0008	Bus Error: An error counter limit reached (128)
            			0x00	0x00	0x00	0x10	CAN_ERR_BUSOFF		0x0010	Bus Error: Can Controller went "Bus-Off"
            	- If a CAN_ERR_BUSOFF status message is received, the CAN Controller must to be 
            	  initialized again using the Init() function.  Otherwise, will be not possible 
            	  to send/receive more messages.
            </summary>
            <param name="msg">The TCLightMsg structure to store the CAN message</param>
            <param name="rcvTime">The TCLightTimestamp structure to store the timestamp of the CAN message</param>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.VersionInfo(System.String@)">
            <summary>
            PCANLight VersionInfo function
            This function get the Version and copyright of the hardware as text 
            (max. 255 characters)
            </summary>
            <param name="strInfo">String variable to return the hardware information</param>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.DllVersionInfo(System.String@)">
            <summary>
            PCANLight DllVersionInfo function
            This function get the Version information of the used PCAN-Light DLL. (max. 255 characters)
            </summary>
            <param name="strInfo">String buffer to return the DLL information</param>
            <returns>A CANResult value generated after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.ResetClient">
            <summary>
            PCANLight ResetClient function
            This function delete the both queues (Transmit,Receive) of the CAN Controller 
            using a RESET
            </summary>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.MsgFilter(System.UInt32,System.UInt32,Labman.Communication.Interfaces.PeakCAN.MsgTypes)">
            <summary>
            PCANLigth MsgFilter function
            This function set the receive message filter of the CAN Controller.
            REMARK:
            	- A quick register of all messages is possible using the parameters From and To as 0
            	- Every call of this function maybe cause an extention of the receive filter of the 
            	  CAN controller, which one can go briefly to RESET
            	- New in Ver 2.x:
            		* Standard frames will be put it down in the acc_mask/code as Bits 28..13
            		* Hardware driver for 82C200 must to be moved to Bits 10..0 again!
            WARNING: 
            	It is not guaranteed to receive ONLY the registered messages.
            </summary>
            <param name="from">First/Start Message ID - It muss be smaller than the "To" parameter</param>
            <param name="to">Last/Finish Message ID - It muss be bigger than the "From" parameter</param>
            <param name="msgType">Kind of Frame - Standard or Extended</param>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.ResetFilter">
            <summary>
            PCANLigth ResetFilter function
            This function close completely the Message Filter of the Hardware.
            They will be no more messages received.
            </summary>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.SetUSBDeviceNr(System.UInt32)">
            <summary>
            PCANLight SetUSBDeviceNr function 
            This function set an identification number to the USB CAN hardware 
            </summary>
            <param name="deviceNumber">Value to be set as Device Number</param>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.GetUSBDeviceNr(System.UInt32@)">
            <summary>
            PCANLight GetUSBDeviceNr function
            This function read the device number of a USB CAN Hardware
            </summary>
            <param name="deviceNumber">Variable to return the Device Number value</param>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.PeakCAN.PCanUsb.SetRcvEvent(System.Threading.EventWaitHandle)">
            <summary>
            PCANLight SetRcvEvent function
            This function read the device number of a USB CAN Hardware
            </summary>
            <param name="eventHandle">The handle (ID) of the event to be set</param>
            <returns>A CANResult value - Error/status of the hardware after execute the function</returns>
        </member>
        <member name="T:Labman.Communication.Interfaces.SiasCANInterface">
            <summary>
            This class opens a connection to the SIAS CAN Drivers. Each device which communicates on the CAN network which this interface connects to
            will have its own base CAN device which will execute communications over this driver interface class
            </summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.SiasCANInterface.CANDevice">
            <summary>
            Gets or sets the CAN device.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.SiasCANInterface.Open">
            <summary>
            Opens the connection to the CAN drivers
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.SiasCANInterface.Close">
            <summary>
            Closes the connection to the CAN drivers
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.SiasCANInterface.IsOpen">
            <summary>
            Checks if the connection to the CAN drivers is open
            </summary>
            <returns>Bool - TRUE if open and FALSE otherwise</returns>
        </member>
        <member name="T:Labman.Communication.Interfaces.Interface">
            <summary>
            Abstract base class that provides common functionality for communication with serial protocol devices
            </summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.Interface.CommunicationInterfaceSettings">
            <summary>
            Communication Settings to use to connect to the required device
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.Open">
            <summary>
            Open communications with the device
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.Close">
            <summary>
            Close communications
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.WriteLine(System.String)">
            <summary>
            Write the specified buffer data to the device, followed by a CRLF
            </summary>
            <param name="buffer">The data to send</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.WriteLine(System.Byte[])">
            <summary>
            Write the specified buffer data to the device, followed by a CRLF
            </summary>
            <param name="buffer">The data to send</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.Write(System.String)">
            <summary>
            Write the specified buffer data to the device
            </summary>
            <param name="buffer">The data to send</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.Write(System.Byte[])">
            <summary>
            Write the specified buffer data to the device
            </summary>
            <param name="buffer">The data to send</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.ReadExistingString(System.Object)">
            <summary>
            Read any available data from the device
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            An ASCII string of the reply from the device
            </returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.ReadExistingString">
            <summary>
            Read any available data from the device
            </summary>
            <returns>An ASCII string of the reply from the device</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.ReadExisting(System.Object)">
            <summary>
            Read any available data from the device
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            The reply from the device
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">This method has not been implemented by this type of communications interface</exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.ReadExisting">
            <summary>
            Read any available data from the device
            </summary>
            <returns>The reply from the device</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.ClearBuffers">
            <summary>
            Clear the receive buffer
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.ClearBuffers(System.Object)">
            <summary>
            Clear the receive buffer
            </summary>
            <param name="args">The arguments.</param>
            <exception cref="T:Labman.Communication.CommunicationException">This method has not been implemented by this type of communications interface</exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.IsOpen">
            <summary>
            Determines whether the connection is open
            </summary>
            <returns>
            True if open, else False
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">This method has not been implemented by this type of communications interface</exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.IsDataAvailable(System.Object)">
            <summary>
            Determines whether data is available from the device
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            True is data to read, else False
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">This method has not been implemented by this type of communications interface</exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.Interface.IsDataAvailable">
            <summary>
            Determines whether data is available from the device
            </summary>
            <returns>True is data to read, else False</returns>
        </member>
        <member name="T:Labman.Communication.Interfaces.InterfaceSettings">
            <summary>
            Settings class used to define the settings for hardware communications
            </summary>
        </member>
        <member name="E:Labman.Communication.Interfaces.InterfaceSettings.CommunicationTypeChanged">
            <summary>
            Occurs when [communication type changed].
            </summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.CommunicationType">
            <summary>Property that exposes the type of communication interface in use</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.HostName">
            <summary>Property that exposes the hostname or IP address for a TCPIP connection or the client name when using a SIAS CAN connection</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.CANNetName">
            <summary>Property that exposes the CAN Net name</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.MODBUSAddress">
            <summary>Property that exposes the address of the device for MODBUS communications</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.PortNumber">
            <summary>Property that exposes the port number to connect to. For RS232 comms this relates to the physical port number in the PC. For TCPIP comms this relates to the socket port to connect to (default 23 for telnet).</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.BaudRate">
            <summary>Property that exposes the baud rate to communicate with for RS232 comms</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.DataBits">
            <summary>Property that exposes the number of databits to use for RS232 comms</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.StopBits">
            <summary>Property that exposes the number of stopbits to use for RS232 comms</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.Parity">
            <summary>Property that exposes the parity to use for RS232 comms</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.Handshake">
            <summary>Property that exposes the handshaking type to use for RS232 comms</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.RtsEnable">
            <summary>Gets or sets a value indicating whether Request To Send (RTS) is enabled during serial communication</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.DtrEnable">
            <summary>Gets or sets a value indicating whether Data Terminal Ready (DTR) is enabled during serial communication</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.PeakCanBaudRate">
            <summary>Gets or sets the PEAK CAN Baud Rate</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.KVaserCanBaudRate">
            <summary>Gets or sets the KVaser CAN Baud Rate</summary>
        </member>
        <member name="P:Labman.Communication.Interfaces.InterfaceSettings.ReceiveLoopSleepDuration">
            <summary>
            Gets or sets the duration of the receive loop sleep.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.InterfaceSettings.#ctor">
            <summary>
            Constructor for the interface settings class
            </summary>
        </member>
        <member name="T:Labman.Communication.Interfaces.RS232Interface">
            <summary>
            The Serial class provides a method of communicating with RS232 based devices.
            The class implements the base Communication class.
            </summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.RS232Interface._serialPort">
            <summary>The RS232 connection</summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.RS232Interface.Open">
            <summary>
            Open the serial port.
            The BaudRate, PortNumber, Parity, DataBits and StopBits properties must be set before opening the connection.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.RS232Interface.Close">
            <summary>
            Close an open serial port connection. This can be called even if the port is not yet open.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.RS232Interface.ClearBuffers(System.Object)">
            <summary>
            Clear the receive buffers of the port by reading all available data
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.RS232Interface.IsOpen">
            <summary>
            Return the connected state of the port
            </summary>
            <returns>True if the connection is open, else False</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.RS232Interface.IsDataAvailable(System.Object)">
            <summary>
            Returns whether there is data availble to be read on the communications interface
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            True if data is available, else False
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">The serial port is null, please open the connection before reading data.
            or
            The serial port is not open, please open the connection before reading data.</exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.RS232Interface.Write(System.Byte[])">
            <summary>
            Writes the specified buffer data to the serial port
            </summary>
            <param name="buffer">The buffer to send</param>
            <exception cref="T:Labman.Communication.CommunicationException">
            The buffer specified to write is null.
            or
            The serial port is null, please open the connection before writing data.
            or
            The serial port is not open, please open the connection before reading data.
            </exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.RS232Interface.ReadExisting(System.Object)">
            <summary>
            Read all existing data from the serial port
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            A byte array containing the read data, or null if the buffer is empty
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">
            The serial port is null, please open the connection before reading data.
            or
            The serial port is not open, please open the connection before reading data.
            </exception>
        </member>
        <member name="T:Labman.Communication.Interfaces.TCPIPInterface">
            <summary>
            The TCPIP class provides a method of communicating with Ethernet based devices.
            The class implements the base Communication class.
            </summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.TCPIPInterface._tcpClient">
            <summary>The remote TCP client connection</summary>
        </member>
        <member name="F:Labman.Communication.Interfaces.TCPIPInterface._networkStream">
            <summary>The network stream that data to written to / read from</summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.TCPIPInterface.Open">
            <summary>
            Open the network socket.
            The HostName and PortNumber properties must be set before opening the connection.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.TCPIPInterface.Close">
            <summary>
            Close an open network stream connection. This can be called even if the socket is not yet open.
            </summary>
        </member>
        <member name="M:Labman.Communication.Interfaces.TCPIPInterface.ClearBuffers(System.Object)">
            <summary>
            Clear the receive buffers of the socket by reading all available data
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.Communication.Interfaces.TCPIPInterface.IsOpen">
            <summary>
            Return the connected state of the TCP client
            </summary>
            <returns>True if the connection is open, else False</returns>
        </member>
        <member name="M:Labman.Communication.Interfaces.TCPIPInterface.IsDataAvailable(System.Object)">
            <summary>
            Returns whether there is data availble to be read on the communications interface
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            True if data is available, else False
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">The network stream is null, please open the connection before reading data.</exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.TCPIPInterface.Write(System.Byte[])">
            <summary>
            Writes the specified buffer data to the network stream
            </summary>
            <param name="buffer">The buffer to send</param>
            <exception cref="T:Labman.Communication.CommunicationException">
            The buffer specified to write is null.
            or
            The network stream is null, please open the connection before writing data.
            </exception>
        </member>
        <member name="M:Labman.Communication.Interfaces.TCPIPInterface.ReadExisting(System.Object)">
            <summary>
            Read all existing data from the network stream
            </summary>
            <param name="args">The arguments.</param>
            <returns>
            A byte array containing the read data, or null if the buffer is empty
            </returns>
            <exception cref="T:Labman.Communication.CommunicationException">The network stream is null, please open the connection before reading data.</exception>
        </member>
        <member name="T:Labman.Communication.Connection">
            <summary>
            The generic comms class provides a generic object that can be used to communicate using different physical interfaces
            </summary>
        </member>
        <member name="T:Labman.Communication.Connection.CommunicationClasses">
            <summary>
            Enumeration of the possible communication interfaces that are currently available
            </summary>
        </member>
        <member name="F:Labman.Communication.Connection.CommunicationClasses.RS232">
            <summary>RS232 Communication</summary>
        </member>
        <member name="F:Labman.Communication.Connection.CommunicationClasses.TCPIP">
            <summary>Ethernet Communication</summary>
        </member>
        <member name="F:Labman.Communication.Connection.CommunicationClasses.SNMP">
            <summary>Simple Network Messaging Protocol Communication</summary>
        </member>
        <member name="F:Labman.Communication.Connection.CommunicationClasses.SiasCAN">
            <summary>Sias CAN Net device - could be replaced with a generic CAN device connection in the future</summary>
        </member>
        <member name="F:Labman.Communication.Connection.CommunicationClasses.PeakCAN">
            <summary>Peak Systems CAN Interface</summary>
        </member>
        <member name="F:Labman.Communication.Connection.CommunicationClasses.OceanOpticsOmni">
            <summary>Connection to an Ocean Optics Omni device</summary>
        </member>
        <member name="F:Labman.Communication.Connection.CommunicationClasses.TrioPCMotion">
            <summary>Connection to a TRIO Motion controller</summary>
        </member>
        <member name="F:Labman.Communication.Connection.CommunicationClasses.KVaserCAN">
            <summary>KVaser CAN Interface.</summary>
        </member>
        <member name="F:Labman.Communication.Connection.CommunicationClasses.UDP">
            <summary>UDP communication.</summary>
        </member>
        <member name="P:Labman.Communication.Connection.Interface">
            <summary>
            The property that exposes the communications interface class.
            NOTE: ACCESSING METHODS DIRECTLY ON THE INTERFACE ARE NOT THREAD SAFE. USE THE SEND/RECEIVE METHODS IN THIS CLASS INSTEAD.
            </summary>
        </member>
        <member name="P:Labman.Communication.Connection.InterfaceTransactionLock">
            <summary>
            Object just for locking against for multi-message transactions
            </summary>
        </member>
        <member name="P:Labman.Communication.Connection.PacketStxCharacters">
            <summary>
            Property that gets or sets the STX character to use for the communications protocol
            </summary>
        </member>
        <member name="P:Labman.Communication.Connection.PacketEtxCharacters">
            <summary>
            Property that gets or sets the ETX character to use for the communications protocol
            </summary>
        </member>
        <member name="P:Labman.Communication.Connection.PacketDefaultTimeoutMilliSeconds">
            <summary>
            Property that gets or sets the default timeout to use when sending packets and waiting for responses
            </summary>
        </member>
        <member name="P:Labman.Communication.Connection.PacketDefaultRetryAttempts">
            <summary>
            Property that gets or sets the default retry attempts to use when sending packets and waiting for expected responses
            </summary>
        </member>
        <member name="P:Labman.Communication.Connection.PacketAddStxEtxOnTransmittedPackets">
            <summary>
            Property that gets or sets whether the specified STX/ETX characters should be added to transmitted packets. False assumes that they are being added by the calling code.
            </summary>
        </member>
        <member name="P:Labman.Communication.Connection.PacketDelayBetweenRetries">
            <summary>
            Property that gets or sets the delay in milliseconds between retries of sending packets to a device
            </summary>
        </member>
        <member name="P:Labman.Communication.Connection.PacketDefaultExpectedResponses">
            <summary>
            Property that gets or sets the default expected responses for sending packets
            </summary>
        </member>
        <member name="P:Labman.Communication.Connection.PacketValidationMethod">
            <summary>
            Property that exposes the packet validation method. This allows a custom method to be defined that validates the packet before it is returned
            </summary>
        </member>
        <member name="F:Labman.Communication.Connection._communicationsInterfacesCollection">
            <summary>
            Static collection of interfaces that have been opened, this allows the same connection to be found 
            and returned to multiple devices
            </summary>
        </member>
        <member name="M:Labman.Communication.Connection.CreateConnectionEndpointKey(Labman.Communication.Interfaces.InterfaceSettings)">
            <summary>
            Creates the endpoint key for the supplied interface settings.
            </summary>
            <param name="interfaceSettings">The interface settings.</param>
            <returns>Endpoint key</returns>
            <exception cref="T:Labman.Communication.CommunicationException">The specified communications type is not supported:  + interfaceSettings.CommunicationType.ToString()</exception>
        </member>
        <member name="M:Labman.Communication.Connection.GetInterface(Labman.Communication.Interfaces.InterfaceSettings)">
            <summary>
            This method gets a connection for the specified endpoint.
            If the connection already exists then it will be returned from a collection.
            If the connection is new it will be created and added to the collection for future use.
            This method allows the same connection to be returned for multiple devices.
            </summary>
            <param name="interfaceSettings">The interface settings to look up for</param>
            <returns>The connection object</returns>
        </member>
        <member name="F:Labman.Communication.Connection._communicationsInterfaceTransactionLockCollection">
            <summary>
            Static collection of interface transaction locks, this allows the same connection transaction lock to be found 
            and returned to multiple devices
            </summary>
        </member>
        <member name="M:Labman.Communication.Connection.GetInterfaceTransactionLock(Labman.Communication.Interfaces.InterfaceSettings)">
            <summary>
            Gets the interface transaction lock object for the specified interface settings.
            </summary>
            <param name="interfaceSettings">The interface settings.</param>
            <returns>Interface transaction</returns>
        </member>
        <member name="M:Labman.Communication.Connection.InitialisationComplete">
            <summary>
            Method that is called when initialisation has been completed.
            This triggers events on the comms devices that must be done only when all devices have been initialised,
            such as the CANOpen NMT start command.
            </summary>
        </member>
        <member name="M:Labman.Communication.Connection.#ctor(Labman.Communication.Interfaces.InterfaceSettings)">
            <summary>
            Class constructor, lookups up the chosen communications interface and creates a new instance of it
            </summary>
            <param name="interfaceSettings">The interface settings class that represents what settings to use to connect</param>
        </member>
        <member name="M:Labman.Communication.Connection.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Labman.Communication.Connection.GetCommsErrorMessage(System.Byte[])">
            <summary>
            Gets a human readable error message when sending data has failed
            </summary>
            <param name="packetData">The packet data sent</param>
            <returns>String error message</returns>
        </member>
        <member name="M:Labman.Communication.Connection.GetCommsErrorMessage(System.Byte[],System.Byte[])">
            <summary>
            Gets a human readable error message when sending data has failed
            </summary>
            <param name="packetData">The packet data sent</param>
            <param name="receivedData">The received data</param>
            <returns>String error message</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendPacket(System.Byte[],System.Int32,System.Byte[][])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device. A timeout of less than or equal to 0 will NOT wait for a reply.</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[],System.Int32)">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            This implementation looks for the default expected responses in the reply.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            This implementation looks for the default expected responses in the reply.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.String,System.Int32)">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            This implementation looks for the default expected responses in the reply.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.String)">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            This implementation looks for the default expected responses in the reply.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[],System.Int32,System.Byte[][])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[],System.Int32,System.String[])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[],System.Int32,System.Byte[])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[],System.Int32,System.String)">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device</param>
            <param name="expectedReply">An expected reply string from the device. The reply will be checked to see if it CONTAINS the specified response.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[],System.Byte[][])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[],System.String[])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[],System.Byte[])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[],System.String)">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="expectedReply">An expected reply string from the device. The reply will be checked to see if it CONTAINS the specified response.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.String,System.Int32,System.Byte[][])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.String,System.Int32,System.String[])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.String,System.Int32,System.Byte[])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.String,System.Int32,System.String)">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="timeoutMilliSeconds">The timeout in milliseconds to wait for a response from the device</param>
            <param name="expectedReply">An expected reply string from the device. The reply will be checked to see if it CONTAINS the specified response.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.String,System.Byte[][])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.String,System.String[])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.String,System.Byte[])">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="expectedReplys">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.String,System.String)">
            <summary>
            Sends a packet to the connected device and expects to receive a reply back from it.
            If packet STX/ETX characters have been set then only replies that fit within that structure will be checked and returned.
            This method IS thread safe.
            </summary>
            <param name="packetData">The packet data to transmit to the connected device</param>
            <param name="expectedReply">An expected reply string from the device. The reply will be checked to see if it CONTAINS the specified response.</param>
            <returns>The reply received from the device</returns>
        </member>
        <member name="M:Labman.Communication.Connection.SendAndReceivePacket(System.Byte[],System.String,System.Int32)">
            <summary>
            Sends the and receive racket.
            </summary>
            <param name="packetData">The packet data.</param>
            <param name="endChar">The end character.</param>
            <param name="count">The count.</param>
            <returns>The device reply as a contiguous string</returns>
        </member>
        <member name="T:Labman.Communication.CommunicationException">
            <summary>
            This class defines a specific type of exceptions for use only by Balances
            </summary>
        </member>
        <member name="M:Labman.Communication.CommunicationException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Communication.CommunicationException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Communication.Protocols.ModBusTCPProtocol">
            <summary> 
            A derived class from the TCPIPInterface which implements the MODBUS protocol over a TCPIP connection
            </summary>
        </member>
        <member name="F:Labman.Communication.Protocols.ModBusTCPProtocol.ReadCoilsFunctionCode">
            <summary>
            The read coils function code FC1
            </summary>
        </member>
        <member name="F:Labman.Communication.Protocols.ModBusTCPProtocol.ReadDiscreteInputFunctionCode">
            <summary>
            The read discrete input function code FC2
            </summary>
        </member>
        <member name="F:Labman.Communication.Protocols.ModBusTCPProtocol.ReadHoldingRegistersFunctionCode">
            <summary>
            The read holding registers function code FC3
            </summary>
        </member>
        <member name="F:Labman.Communication.Protocols.ModBusTCPProtocol.ReadInputRegisterFunctionCode">
            <summary>
            The read input register function code
            </summary>
        </member>
        <member name="F:Labman.Communication.Protocols.ModBusTCPProtocol.WriteSingleCoilFunctionCode">
            <summary>
            The write single coil function code
            </summary>
        </member>
        <member name="F:Labman.Communication.Protocols.ModBusTCPProtocol.WriteSingleRegisterFunctionCode">
            <summary>
            The write single register function code
            </summary>
        </member>
        <member name="F:Labman.Communication.Protocols.ModBusTCPProtocol.WriteMultipleCoilsFunctionCode">
            <summary>
            The write multiple coils function code FC15
            </summary>
        </member>
        <member name="F:Labman.Communication.Protocols.ModBusTCPProtocol.WriteMultipleRegistersFunctionCode">
            <summary>
            The write multiple registers function code FC16
            </summary>
        </member>
        <member name="F:Labman.Communication.Protocols.ModBusTCPProtocol.ReadWriteMultipleRegistersFunctionCode">
            <summary>
            The read write multiple registers function code FC23
            </summary>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.#ctor(Labman.Communication.Connection,System.Byte)">
            <summary>
            Creates a new instance of the protocol
            </summary>
            <param name="connection">The communications connection to use</param>
            <param name="address">The address.</param>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.WriteRegisterValue(System.Int32,System.Int32)">
            <summary>
            Writes a value to a specified MODBUS device register
            </summary>
            <param name="registerAddress">The address of the register to write to</param>
            <param name="registerValue">The value to write into the register</param>
            <returns>Boolean TRUE for success and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.WriteMultipleRegisters(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Writes multiple values (int - two bytes each) to a specified MODBUS device registers - TO BE REVIEWED 
            </summary>
            <param name="registerAddress">The address of the first register to write to</param>
            <param name="numberofRegisters">The number of registers</param>
            <param name="registerValues">The values of the registers</param>
            <returns>Boolean TRUE for success and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.WriteRawData(System.Int32,System.Byte[])">
            <summary>
            To review
            </summary>
            <param name="registerAddress">The register address</param>
            <param name="data">The data</param>
            <returns>bool</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.ReadExceptionStatus">
            <summary>
            Reads the exception status
            </summary>
            <returns>The exception value (0x00 is no error)</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.ReadRegisterValue(System.Int32,System.Byte,System.Int32)">
            <summary>
            Reads a value from a MODBUS device register
            </summary>
            <param name="registerAddress">The address of the register to write to</param>
            <param name="registersToRead">The number of registers to read</param>
            <param name="registerReplyOffset">If multiple registers are being read this offset will ensure the correct register is returned</param>
            <returns>The register value</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.ReadMultipleRegisterValues(System.Int32,System.Byte)">
            <summary>
            Reads a value from a MODBUS device register. TO REVIEW
            </summary>
            <param name="registerAddress">The address of the register to start reading from</param>
            <param name="registersToRead">The number of registers to read</param>
            <returns>The register value</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.ReadCoilValue(System.Int32)">
            <summary>
            Reads the current value of a coil.
            </summary>
            <param name="coilAddress">The coil address.</param>
            <returns>The current value of the coil</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.WriteCoilValue(System.Int32,System.Boolean)">
            <summary>
            Updates a coil value.
            </summary>
            <param name="coilAddress">The coil address.</param>
            <param name="coilValue">if set to <c>true</c> [coil value].</param>
            <returns>The result of the write operation</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.ReadDiscreteInputValue(System.Int32)">
            <summary>
            Reads the discrete input value.
            This function differs to ReadCoil as some devices (moxa e1k) list the digital
            inputs under function 2 (ReadDiscreteInputFunctionCode).
            </summary>
            <param name="inputAddress">The input address.</param>
            <returns> A boolean representing the digital input state.</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.ReadRegisterValue(System.Int32,System.Byte,System.Int32,System.Byte)">
            <summary>
            Reads a value from a MODBUS device register using the given function code.
            </summary>
            <param name="registerAddress">The address of the register to write to</param>
            <param name="registersToRead">The number of registers to read</param>
            <param name="registerReplyOffset">If multiple registers are being read this offset will ensure the correct register is returned</param>
            <param name="functionCode">The required function code</param>
            <returns>The register value</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.ModBusTCPProtocol.SendModbusPacket(System.Byte,System.Byte[]@)">
            <summary>
            Sends a MODBUS packet to the specified device using the given function code and obtains a response packet back
            </summary>
            <param name="functionCode">The function code.</param>
            <param name="data">The data.</param>
            <returns>the response</returns>
        </member>
        <member name="T:Labman.Communication.Protocols.CANOpen">
            <summary>
            Class which implements the CANOpen protocol
            </summary>
        </member>
        <member name="T:Labman.Communication.Protocols.CANOpen.SdoDataTypes">
            <summary>
            Possible SDO request data types
            </summary>
        </member>
        <member name="T:Labman.Communication.Protocols.CANOpen.NMTCommand">
            <summary>
            NMT Commands
            </summary>
        </member>
        <member name="P:Labman.Communication.Protocols.CANOpen.CommunicationConnection">
            <summary>
            Property that exposes the communication connection this protocol is using
            </summary>
        </member>
        <member name="P:Labman.Communication.Protocols.CANOpen.CustomErrorCodes">
            <summary>
            Collection of custom error codes
            </summary>
        </member>
        <member name="M:Labman.Communication.Protocols.CANOpen.#ctor(Labman.Communication.Connection,System.String)">
            <summary>
            Class constructor
            </summary>
            <param name="communicationConnection">Connection object to use</param>
            <param name="nodeDescription">Node description</param>
        </member>
        <member name="M:Labman.Communication.Protocols.CANOpen.ClearInitialisationResetFlag">
            <summary>
            Clears the initialisation reset flag
            </summary>
        </member>
        <member name="M:Labman.Communication.Protocols.CANOpen.CheckForErrorInSdoReply(System.Byte[])">
            <summary>
            Checks for an error in the reply
            </summary>
            <param name="data">The data to check</param>
        </member>
        <member name="M:Labman.Communication.Protocols.CANOpen.SendSdoRequest(System.Int32,Labman.Communication.Protocols.CANOpen.SdoDataTypes,System.Int32,System.Int32)">
            <summary>
            Transmits an SDO command
            </summary>
            <param name="nodeAddress">Node address to send to</param>
            <param name="dataType">Type of the data being sent/requested</param>
            <param name="commandIndex">Command Index</param>
            <param name="commandSubIndex">Command subindex</param>
            <returns>The response</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.CANOpen.SendSdoCommand(System.Int32,Labman.Communication.Protocols.CANOpen.SdoDataTypes,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transmits an SDO command
            </summary>
            <param name="nodeAddress">Node address to send to</param>
            <param name="dataType">Type of the data being sent/requested</param>
            <param name="commandIndex">Command Index</param>
            <param name="commandSubIndex">Command subindex</param>
            <param name="value">The numeric value to send</param>
            <returns>The response</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.CANOpen.SendNmtCommand(System.Int32,Labman.Communication.Protocols.CANOpen.NMTCommand,System.Boolean)">
            <summary>
            Sends an NMT command to set the operational state of the device
            </summary>
            <param name="nodeAddress">Node address to send to</param>
            <param name="command">The state command to send</param>
            <param name="broadcast">Broadcast message to all devices</param>
        </member>
        <member name="M:Labman.Communication.Protocols.CANOpen.SendPdoRequest(System.Int32,System.Int32)">
            <summary>
            Send a PDO request to the specified address
            </summary>
            <param name="nodeAddress">Node address to send to</param>
            <param name="pdoAddress">PDO address to query</param>
            <returns>The value of the register</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.CANOpen.SendPdoCommand(System.Int32,Labman.Communication.Protocols.CANOpen.SdoDataTypes,System.Int32,System.Int64)">
            <summary>
            Transmits an PDO command
            </summary>
            <param name="nodeAddress">Node address to send to</param>
            <param name="dataType">Type of the data being sent/requested</param>
            <param name="pdoAddress">The PDO address to send to</param>
            <param name="value">The numeric value to send</param>
        </member>
        <member name="M:Labman.Communication.Protocols.CANOpen.SendLSSCommand(System.Int32,System.Byte[])">
            <summary>
            Sends an LSS CANOpen command
            </summary>
            <param name="command">The command</param>
            <param name="data">The data to send</param>
        </member>
        <member name="T:Labman.Communication.Protocols.LmaPcbCommunication">
            <summary>
            This class provides an interface to devices communicating using the Labman LMA PCB communication protocol.
            This is usually over Ethernet to an mbed microprocessor.
            </summary>
        </member>
        <member name="M:Labman.Communication.Protocols.LmaPcbCommunication.#ctor(Labman.Communication.Connection)">
            <summary>
            Constructor sets up communication parameters
            </summary>
            <param name="connection">The communication connection to use</param>
        </member>
        <member name="M:Labman.Communication.Protocols.LmaPcbCommunication.SendPacket(System.Int32,System.Byte[],System.Double)">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <param name="returnValueRatio">A ratio value to multiply the return value by</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.LmaPcbCommunication.SendPacket(System.Int32,System.Byte[],System.Boolean)">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <param name="invertReply">Inverts the reply value</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.LmaPcbCommunication.SendPacket(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="command">The command to send</param>
            <param name="value">The value to send with the command</param>
            <param name="invertReply">Inverts the reply value</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.LmaPcbCommunication.SendPacket(System.Int32,System.Byte[])">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.LmaPcbCommunication.SendPacket(System.Int32,System.Int32)">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="command">The command to send</param>
            <param name="value">The value to send with the command</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.LmaPcbCommunication.TransmitPacket(System.Int32,System.Byte[])">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.LmaPcbCommunication.DecodeBase128(System.Byte[])">
            <summary>
            Decodes a base 128 reply
            </summary>
            <param name="buffer">The encoded value in base 128 format (exactly 5 bytes long)</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:Labman.Communication.Protocols.LmaPcbCommunication.EncodeBase128(System.Int32)">
            <summary>
            Encodes a value into base128 format
            </summary>
            <param name="value">The value to encode</param>
            <returns>The base128 byte array</returns>
        </member>
        <member name="T:Labman.Database.LinqConnectDataContextContainer`1">
            <summary>
            Container for a Devart LinqConnect data context
            </summary>
            <typeparam name="T">The type of the generic database context to use</typeparam>
        </member>
        <member name="P:Labman.Database.LinqConnectDataContextContainer`1.DataContext">
            <summary>
            Data Context property
            </summary>
        </member>
        <member name="P:Labman.Database.LinqConnectDataContextContainer`1.AllowSubmitsWithoutChanges">
            <summary>
            Whether unchanged rows can be submitted without throwing errors.
            </summary>
        </member>
        <member name="M:Labman.Database.LinqConnectDataContextContainer`1.#ctor">
            <summary>
            Create a new data context container for the default system database
            </summary>
        </member>
        <member name="M:Labman.Database.LinqConnectDataContextContainer`1.#ctor(System.String)">
            <summary>
            Create a new data context container for the specified database connection
            </summary>
            <param name="databaseName">The name of the database connection that is already stored in the BaseClass DatabaseConnections list</param>
        </member>
        <member name="M:Labman.Database.LinqConnectDataContextContainer`1.Dispose">
            <summary>
            Dispose method ensures the data context is disposed of
            </summary>
        </member>
        <member name="M:Labman.Database.LinqConnectDataContextContainer`1.GetConnectionString(System.String)">
            <summary>
            Get the connection string of the specified system database connection
            </summary>
            <param name="databaseName">The name of the database connection that is already stored in the BaseClass DatabaseConnections list</param>
            <returns>The connection string for the Devart connection</returns>
        </member>
        <member name="M:Labman.Database.LinqConnectDataContextContainer`1.GetConnectionString">
            <summary>
            Get the connection string of the default system database connection
            </summary>
            <returns>The connection string for the Devart connection</returns>
        </member>
        <member name="T:Labman.Database.Providers.SqlServerProvider">
            <summary>
            This class communicates with a Sql Server database
            </summary>
        </member>
        <member name="F:Labman.Database.Providers.SqlServerProvider._databaseConnection">
            <summary>
            Database connection object
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.SqlServerProvider.#ctor(Labman.Database.Providers.ProviderSettings)">
            <summary>
            Constructor for the MySQL DB class stores the associated settings
            </summary>
            <param name="providerSettings">Settings used to open a connection to the database</param>
        </member>
        <member name="M:Labman.Database.Providers.SqlServerProvider.Open">
            <summary>
            Opens a MySQL database connection
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.SqlServerProvider.Close">
            <summary>
            Closes a database connection if it is open
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.SqlServerProvider.Update(System.String)">
            <summary>
            Updates the database with the specified SQL command
            </summary>
            <param name="sqlCommand">The SQL command to execute</param>
            <returns>An integer value that indicates the number of records that have been affected by this command</returns>
        </member>
        <member name="M:Labman.Database.Providers.SqlServerProvider.InsertBinaryObjects(System.String,System.Byte[][])">
            <summary>
            Inserts a binary object into a database field.
            </summary>
            <param name="sqlCommand">The SQL command to execute.</param>
            <param name="objectData">Specifies the objects to add.</param>
            <returns>An integer value that indicates the number of records that have been affected by this command.</returns>
            <remarks>Useage: build your SQL query using @Object1, @Object2... @Objectn to represent the binary objects to insert for example: 
            INSERT INTO table(FIELD1, FIELD2, FIELD3) values (@Object1, @Object2, @Object3) 
            and then pass the three objects as an array of 3 byte arrays.</remarks>
        </member>
        <member name="M:Labman.Database.Providers.SqlServerProvider.QueryDataTable(System.String)">
            <summary>
            Queries the database using the given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to execute</param>
            <returns>A datatable containing the results of the query</returns>
        </member>
        <member name="M:Labman.Database.Providers.SqlServerProvider.ConvertDateToSQL(System.DateTime)">
            <summary>
            Convert date to a MySQL formatted date string
            </summary>
            <param name="date">The date to convert</param>
            <returns>MySQL formatted date string</returns>
        </member>
        <member name="M:Labman.Database.Providers.SqlServerProvider.KillStaleConnections">
            <summary>
            Execute a command on the database server to close ('kill') any stale connections
            </summary>
        </member>
        <member name="T:Labman.Database.Providers.MySqlProvider">
            <summary>
            This class communicates with a MySQL database
            </summary>
        </member>
        <member name="F:Labman.Database.Providers.MySqlProvider._databaseConnection">
            <summary>
            Database connection object
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.MySqlProvider.#ctor(Labman.Database.Providers.ProviderSettings)">
            <summary>
            Constructor for the MySQL DB class stores the associated settings
            </summary>
            <param name="providerSettings">Settings used to open a connection to the database</param>
        </member>
        <member name="M:Labman.Database.Providers.MySqlProvider.Open">
            <summary>
            Opens a MySQL database connection
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.MySqlProvider.Close">
            <summary>
            Closes a database connection if it is open
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.MySqlProvider.Update(System.String)">
            <summary>
            Updates the database with the specified SQL command
            </summary>
            <param name="sqlCommand">The SQL command to execute</param>
            <returns>An integer value that indicates the number of records that have been affected by this command</returns>
        </member>
        <member name="M:Labman.Database.Providers.MySqlProvider.InsertBinaryObjects(System.String,System.Byte[][])">
            <summary>
            Inserts a binary object into a database field.
            </summary>
            <param name="sqlCommand">The SQL command to execute.</param>
            <param name="objectData">Specifies the objects to add.</param>
            <returns>An integer value that indicates the number of records that have been affected by this command.</returns>
            <remarks>Useage: build your SQL query using @Object1, @Object2... @Objectn to represent the binary objects to insert for example: 
            INSERT INTO table(FIELD1, FIELD2, FIELD3) values (@Object1, @Object2, @Object3) 
            and then pass the three objects as an array of 3 byte arrays.</remarks>
        </member>
        <member name="M:Labman.Database.Providers.MySqlProvider.QueryDataTable(System.String)">
            <summary>
            Queries the database using the given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to execute</param>
            <returns>A datatable containing the results of the query</returns>
        </member>
        <member name="M:Labman.Database.Providers.MySqlProvider.ConvertDateToSQL(System.DateTime)">
            <summary>
            Convert date to a MySQL formatted date string
            </summary>
            <param name="date">The date to convert</param>
            <returns>MySQL formatted date string</returns>
        </member>
        <member name="M:Labman.Database.Providers.MySqlProvider.KillStaleConnections">
            <summary>
            Execute a command on the database server to close ('kill') any stale connections
            </summary>
        </member>
        <member name="T:Labman.Database.Providers.OleDBProvider">
            <summary>
            This class communicates with a generic OLE database
            </summary>
        </member>
        <member name="F:Labman.Database.Providers.OleDBProvider._databaseConnection">
            <summary>
            Database connection object
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.OleDBProvider.#ctor(Labman.Database.Providers.ProviderSettings)">
            <summary>
            Constructor for the OleDB class stores the associated settings.
            </summary>
            <param name="providerSettings">Settings used to open a connection to the database.</param>
        </member>
        <member name="M:Labman.Database.Providers.OleDBProvider.Open">
            <summary>
            Opens an OLEDB database connection.
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.OleDBProvider.Close">
            <summary>
            Closes a database connection if it is open
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.OleDBProvider.Update(System.String)">
            <summary>
            Updates the database with the specified SQL command.
            </summary>
            <param name="sqlCommand">The SQL command to execute.</param>
            <returns>An integer value that indicates the number of records that have been affected by this command.</returns>
        </member>
        <member name="M:Labman.Database.Providers.OleDBProvider.InsertBinaryObjects(System.String,System.Byte[][])">
            <summary>
            Inserts a binary object into a database field.
            </summary>
            <param name="sqlCommand">The SQL command to execute.</param>
            <param name="objectData">Specifies the objects to add.</param>
            <returns>An integer value that indicates the number of records that have been affected by this command.</returns>
            <remarks>Useage: build your SQL query using @Object1, @Object2... @Objectn to represent the binary objects to insert for example: 
            INSERT INTO table(FIELD1, FIELD2, FIELD3) values (@Object1, @Object2, @Object3) 
            and then pass the three objects as an array of 3 byte arrays.</remarks>
        </member>
        <member name="M:Labman.Database.Providers.OleDBProvider.QueryDataTable(System.String)">
            <summary>
            Queries the database using the given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to execute.</param>
            <returns>A datatable containing the results of the query.</returns>
        </member>
        <member name="M:Labman.Database.Providers.OleDBProvider.ConvertDateToSQL(System.DateTime)">
            <summary>
            Convert date to a OLEDB formatted date string.
            </summary>
            <param name="date">The date to convert.</param>
            <returns>OLEDB formatted date string.</returns>
        </member>
        <member name="T:Labman.Database.Providers.SqlLiteProvider">
            <summary>
            This class communicates with an SQLLite database
            </summary>
        </member>
        <member name="F:Labman.Database.Providers.SqlLiteProvider._databaseConnection">
            <summary>
            Database connection object
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.SqlLiteProvider.#ctor(Labman.Database.Providers.ProviderSettings)">
            <summary>
            Constructor for the SqlLite class stores the associated settings.
            </summary>
            <param name="providerSettings">Settings used to open a connection to the database.</param>
        </member>
        <member name="M:Labman.Database.Providers.SqlLiteProvider.Open">
            <summary>
            Opens a SQLite database connection.
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.SqlLiteProvider.Close">
            <summary>
            Closes the SQLite database connection.
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.SqlLiteProvider.Update(System.String)">
            <summary>
            Updates the database with the specified SQL command.
            </summary>
            <param name="sqlCommand">The SQL command to execute.</param>
            <returns>An integer value that indicates the number of records that have been affected by this command.</returns>
        </member>
        <member name="M:Labman.Database.Providers.SqlLiteProvider.InsertBinaryObjects(System.String,System.Byte[][])">
            <summary>
            Inserts a binary object into a database field.
            </summary>
            <param name="sqlCommand">The SQL command to execute.</param>
            <param name="objectData">Specifies the objects to add.</param>
            <returns>An integer value that indicates the number of records that have been affected by this command.</returns>
            <remarks>Useage: build your SQL query using @Object1, @Object2... @Objectn to represent the binary objects to insert for example: 
            INSERT INTO table(FIELD1, FIELD2, FIELD3) values (@Object1, @Object2, @Object3) 
            and then pass the three objects as an array of 3 byte arrays.</remarks>
        </member>
        <member name="M:Labman.Database.Providers.SqlLiteProvider.QueryDataTable(System.String)">
            <summary>
            Queries the database using the given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to execute</param>
            <returns>A datatable containing the results of the query</returns>
        </member>
        <member name="M:Labman.Database.Providers.SqlLiteProvider.ConvertDateToSQL(System.DateTime)">
            <summary>
            Convert date to a SQLite formatted date string
            </summary>
            <param name="date">The date to convert</param>
            <returns>SQLite formatted date string</returns>
        </member>
        <member name="T:Labman.Database.Providers.Provider">
            <summary>
            Base class for database providers, defines the generic methods that are applicable to all database connection types
            </summary>
        </member>
        <member name="P:Labman.Database.Providers.Provider.ProviderSettings">
            <summary>
            Provider settings used to connect to the database
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.Provider.Dispose">
            <summary>
            Class dispose method closes an open connection
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.Provider.Open">
            <summary>
            Open a database connection, using the existing connection details set as properties
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.Provider.Close">
            <summary>
            Close an open database connection. If the connection is not open then nothing happens.
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.Provider.Update(System.String)">
            <summary>
            Updates the database with the specified SQL command
            </summary>
            <param name="sqlCommand">The SQL command to execute</param>
            <returns>An integer value that indicates the number of records that have been affected by this command</returns>
        </member>
        <member name="M:Labman.Database.Providers.Provider.InsertBinaryObjects(System.String,System.Byte[][])">
            <summary>
            Inserts a binary object into a database field
            </summary>
            <param name="sqlCommand">The SQL command to execute</param>
            <param name="objectData">The object data.</param>
            <returns>result</returns>
            <exception cref="T:Labman.BaseException">This method has not been implemented yet</exception>
            <remarks>
            Useage: build your SQL query using @Object1, @Object2... @Objectn to represent the binary objects to insert for example:
            INSERT INTO table(FIELD1, FIELD2, FIELD3) values (@Object1, @Object2, @Object3)
            and then pass the three objects as an array of 3 byte arrays
            </remarks>
        </member>
        <member name="M:Labman.Database.Providers.Provider.QueryDataTable(System.String)">
            <summary>
            Queries the database using the given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to execute</param>
            <returns>A datatable containing the results of the query</returns>
        </member>
        <member name="M:Labman.Database.Providers.Provider.QuerySingleValue(System.String)">
            <summary>
            Queries the database using the given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to execute. The query should contain only one field to obtain the value for.</param>
            <returns>The string representation of the first field in the first record returned. Returns an empty string if no data was returned.</returns>
        </member>
        <member name="M:Labman.Database.Providers.Provider.QueryRecord(System.String)">
            <summary>
            Queries the database using the given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to execute. It is expected that only one record is returned, if not the first record found is returned.</param>
            <returns>A sorted list of field names as KEYS and field values as VALUES for the first record returned from the query. If no data returned then a collection is still returned with no items in (count=0).</returns>
        </member>
        <member name="M:Labman.Database.Providers.Provider.QueryRecords(System.String)">
            <summary>
            Queries the database using the given SQL query.
            </summary>
            <param name="sqlQuery">The SQL query to execute</param>
            <returns>A list of records, each item containing a sorted list of field names as KEYS and field values as VALUES. If no data returned then a collection is still returned with no items in (count=0).</returns>
        </member>
        <member name="M:Labman.Database.Providers.Provider.ConvertDateToSQL(System.DateTime)">
            <summary>
            Convert date to a formatted date string
            </summary>
            <param name="date">The date to convert</param>
            <returns>Formatted date string</returns>
        </member>
        <member name="M:Labman.Database.Providers.Provider.ConvertDateFromSQL(System.String)">
            <summary>
            Converts a date from SQL format to .NET
            </summary>
            <param name="date">SQL formatted date string</param>
            <returns>DateTime object</returns>
        </member>
        <member name="M:Labman.Database.Providers.Provider.KillStaleConnections">
            <summary>
            Execute a command on the database server to close ('kill') any stale connections
            </summary>
        </member>
        <member name="T:Labman.Database.Providers.ProviderSettings">
            <summary>
            Settings class used to define the settings for a database provider
            </summary>
        </member>
        <member name="T:Labman.Database.Providers.ProviderSettings.ProviderType">
            <summary>
            Enumeration of the possible database providers that are currently available
            </summary>
            <remarks>
            Whenever a new provider class is developed you must ensure that it is added to this enumration
            list and also ensure that you modify the GetProvider method accordingly.
            </remarks>
        </member>
        <member name="F:Labman.Database.Providers.ProviderSettings.ProviderType.MySQL">
            <summary>A MySQL database</summary>
        </member>
        <member name="F:Labman.Database.Providers.ProviderSettings.ProviderType.SQLite">
            <summary>An SQLLite database</summary>
        </member>
        <member name="F:Labman.Database.Providers.ProviderSettings.ProviderType.OLEDB">
            <summary>An OLE database</summary>
        </member>
        <member name="F:Labman.Database.Providers.ProviderSettings.ProviderType.SQLSERVER">
            <summary>An SQLServer database</summary>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.TypeOfProvider">
            <summary>Property that exposes the type of provider in use</summary>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.ConnectionName">
            <summary>Property that exposes the unique name for this connection</summary>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.HostName">
            <summary>Property that exposes the hostname or IP address for the database connection</summary>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.Username">
            <summary>Property that exposes the username to use to connect to the database</summary>
            <remarks>This is not necessary for all database providers, check the documentation for the individual provider to determine whether it is required or not</remarks>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.Password">
            <summary>Property that exposes the password to use to connect to the database</summary>
            <remarks>This is not necessary for all database providers, check the documentation for the individual provider to determine whether it is required or not</remarks>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.Schema">
            <summary>Property that exposes the database schema to connect to</summary>
            <remarks>This is not necessary for all database providers, check the documentation for the individual provider to determine whether it is required or not</remarks>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.MaxConnectionPoolSize">
            <summary>
            Property that exposes the maximum number of pooled database connections
            A null value does not put this in the connection string at all
            </summary>
            <remarks>This is not necessary for all database providers, check the documentation for the individual provider to determine whether it is required or not</remarks>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.DisableSSLMode">
            <summary>
            Flag disables SSL mode, this is defaulted on as normally this is not required
            A null value does not put this in the connection string at all
            </summary>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.EnableConnectionPooling">
            <summary>
            Flag allows connection pooling to be enabled, defaults to false.
            A null value does not put this in the connection string at all
            </summary>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.ConnectionString">
            <summary>Property that exposes the connection string to use to connect to the database</summary>
            <remarks>This is not necessary for all database providers, check the documentation for the individual provider to determine whether it is required or not</remarks>
        </member>
        <member name="P:Labman.Database.Providers.ProviderSettings.UniqueKey">
            <summary>
            Unique key used when saving/loading this settings object
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.ProviderSettings.#ctor">
            <summary>
            Constructor for the provider settings class
            </summary>
        </member>
        <member name="M:Labman.Database.Providers.ProviderSettings.#ctor(Labman.Database.Providers.ProviderSettings.ProviderType,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for the provider settings class
            </summary>
            <param name="providerType">Type of the provider.</param>
            <param name="connectionName">Name of the connection.</param>
            <param name="hostName">Name of the host.</param>
            <param name="userName">Name of the user.</param>
            <param name="password">The password.</param>
            <param name="schema">The schema.</param>
        </member>
        <member name="M:Labman.Database.Providers.ProviderSettings.Serialize(Labman.Database.Providers.ProviderSettings)">
            <summary>
            Static method to serialise the specified provider settings class instance into an XML string
            </summary>
            <param name="providerSettings">Specifies the object to serialize.</param>
            <returns>The serialised XML string.</returns>
        </member>
        <member name="M:Labman.Database.Providers.ProviderSettings.Serialize(System.String)">
            <summary>
            Serialise the current instance of the provider settings class to a file.
            </summary>
            <param name="filename">Specifies the filename.</param>
        </member>
        <member name="T:Labman.Database.DataModelCodeGenerator">
            <summary>
            This class is used to auto-generate a code file which represents the data model for a relationally
            linked database structure. The data structure created is fully navigatable between table relationships.
            </summary>
            <remarks>
            Current rules for database table design:
            1) Tables must be prefixed with tbl_ (defined in the TablePrefix constant in the DataModelCodeGenerator class).
            2) Tables must have a single primary key field named 'id' which should be an auto-incremented field.
            3) You cannot use C# reserved words for table or field names (e.g. string, int, new, List, etc...).
            4) Field names cannot contain spaces or start with numbers.
            
            Example code usage to generate a class file is as follows:
            <code>
            // Create a new data-model code-generator object. Pass in a reference to an open database connection that has full access to the required schema.
            Database.DataModelCodeGenerator modelGen = new Database.DataModelCodeGenerator(BaseClass.DatabaseConnections[BaseClass.SystemDatabaseName]);
            // Generate a database model for the 'hitsbac' database schema
            modelGen.GenerateClassFile("hitsbac");
            </code>
            
            The model file is outputted to the 'DataModels' directory within the 'Source Code' folder. The file is named the same as the schema name.
            Usage of the data model after creation is as follows:
            <code>
            // QueryCommand the database using the model
            var qry = from item in DataModels.HITSBAC.Tables.Pots where item.Recipe.Campaignid == 48 select item;
            // Loop through results from the LINQ query
            foreach (DataModels.HITSBAC.tbl_pots pot in qry)
            {
                    System.Diagnostics.Trace.WriteLine(pot.Barcode);
            }
            </code>
            </remarks>
        </member>
        <member name="F:Labman.Database.DataModelCodeGenerator.TablePrefix">
            <summary>
            Constant used as the postfix for key fields
            </summary>
        </member>
        <member name="F:Labman.Database.DataModelCodeGenerator.KeyFieldPostFix">
            <summary>
            Constant used as the postfix for key fields
            </summary>
        </member>
        <member name="F:Labman.Database.DataModelCodeGenerator._databaseField">
            <summary>
            Path to the database connection in the outputted class
            </summary>
        </member>
        <member name="F:Labman.Database.DataModelCodeGenerator._schemaName">
            <summary>
            The database schema to analyse
            </summary>
        </member>
        <member name="F:Labman.Database.DataModelCodeGenerator._databaseConnection">
            <summary>
            The database connection to use
            </summary>
        </member>
        <member name="F:Labman.Database.DataModelCodeGenerator._tableDetails">
            <summary>
            A collection of table details, sorted by tablename and contain a class instance detailing that table
            </summary>
        </member>
        <member name="F:Labman.Database.DataModelCodeGenerator._checkedTables">
            <summary>
            A collection of tables that have been checked when searching for table links
            </summary>
        </member>
        <member name="F:Labman.Database.DataModelCodeGenerator._links">
            <summary>
            A stack of table links that make up the path from one table to another
            </summary>
        </member>
        <member name="F:Labman.Database.DataModelCodeGenerator._addIgnoreDataMemberAttribute">
            <summary>
            Flag that is set when we want to flag all public properties generated with the IgnoreDataMemberAttribute
            </summary>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.#ctor(Labman.Database.Connection)">
            <summary>
            Class constructor sets required field ready to analyse the database
            </summary>
            <param name="databaseConnection">The database connection to use</param>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.GenerateClassFile(System.String,System.Boolean)">
            <summary>
            Generates the class file for the given schema
            </summary>
            <param name="schemaName">The name of the schema to generate the class for</param>
            <param name="addIgnoreDataMemberAttribute">Flag that is set when we want to flag all public properties generated with the IgnoreDataMemberAttribute</param>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.GenerateClassFile(System.String)">
            <summary>
            Generates the class file for the given schema
            </summary>
            <param name="schemaName">The name of the schema to generate the class for</param>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.Analyse">
            <summary>
            Analyse the selected schema and determine the table links before exporting the class file
            </summary>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.Generate">
            <summary>
            This method generates the data structure file.
            This must be called after calling Analyse().
            </summary>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.GenerateTableClass(System.String)">
            <summary>
            Generates the output class string for the specified table name
            </summary>
            <param name="tableToExport">The table name to generate the class for</param>
            <returns>A string containing a C# class for this tables data model</returns>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.FindPrimaryKeyForField(Labman.Database.DataModelCodeGenerator.TableField,System.String,System.String,System.String)">
            <summary>
            This function is used to find the appropriate linked field (foreign or primary key field) that allows the
            'source table' to internally create an instance of the 'reference table'.
            We are looking up the name of the field in the source table that references the
            referencedFieldToLookupFor.FieldName field in the reference table.
            </summary>
            <param name="referencedFieldToLookupFor">The field to search for in the reference table</param>
            <param name="sourceTable">The source table name</param>
            <param name="referenceTable">The reference table name</param>
            <param name="fieldName">Name of the field.</param>
            <returns>
            The key field(s) required to create the child object
            </returns>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.FindTableField(System.String,System.String,System.String)">
            <summary>
            Finds the link from one table field to another.
            This function is called recursively and builds up a path from the two tables that may stretch across multiple tables.
            </summary>
            <param name="startPointTable">The table to start looking from</param>
            <param name="endPointTable">The reference table</param>
            <param name="endPointField">The reference table field to link to</param>
            <returns>True if a link was found, else False</returns>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.BuildKeys">
            <summary>
            Processes the stack of links from one table to another that have been built up using the find table field function
            </summary>
            <returns>The key fields values that are used to create the link from one table class to another</returns>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.CapitaliseName(System.String)">
            <summary>
            Ensures the specified field names are all capitalised the same
            </summary>
            <param name="name">The name to capitalise</param>
            <returns>The capitalised field name</returns>
        </member>
        <member name="T:Labman.Database.DataModelCodeGenerator.TableDetail">
            <summary>
            Table detail class that is used to store the table structure and linkage for a single table in the database
            </summary>
        </member>
        <member name="P:Labman.Database.DataModelCodeGenerator.TableDetail.Fields">
            <summary>
            Collection of fields in this table
            </summary>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.TableDetail.#ctor">
            <summary>
            Table detail constructor creates a new list of fields for this table
            </summary>
        </member>
        <member name="T:Labman.Database.DataModelCodeGenerator.TableField">
            <summary>
            Table field class that holds all information relating to a single field in a table
            </summary>
        </member>
        <member name="T:Labman.Database.DataModelCodeGenerator.TableField.FieldLinkType">
            <summary>
            Enumeration of possible field link types
            </summary>
        </member>
        <member name="T:Labman.Database.DataModelCodeGenerator.TableField.FieldType">
            <summary>
            Enumeration of supported field types
            </summary>
        </member>
        <member name="T:Labman.Database.DataModelCodeGenerator.TableField.KeyType">
            <summary>
            Enuemration of the different key field types
            </summary>
        </member>
        <member name="P:Labman.Database.DataModelCodeGenerator.TableField.Name">
            <summary>
            The name of this field
            </summary>
        </member>
        <member name="P:Labman.Database.DataModelCodeGenerator.TableField.Type">
            <summary>
            The type of this field
            </summary>
        </member>
        <member name="P:Labman.Database.DataModelCodeGenerator.TableField.CSharpTypeDefinition">
            <summary>
            This property returns the Type field as a C# type definition
            </summary>
        </member>
        <member name="P:Labman.Database.DataModelCodeGenerator.TableField.FieldKeyType">
            <summary>
            The type of the field's key
            </summary>
        </member>
        <member name="P:Labman.Database.DataModelCodeGenerator.TableField.LinkType">
            <summary>
            The type of link the field is
            </summary>
        </member>
        <member name="P:Labman.Database.DataModelCodeGenerator.TableField.DefaultValue">
            <summary>
            The default value for this field
            </summary>
        </member>
        <member name="P:Labman.Database.DataModelCodeGenerator.TableField.IsAutoIncrement">
            <summary>
            Flag that indicates if this field is an auto-increment field
            </summary>
        </member>
        <member name="P:Labman.Database.DataModelCodeGenerator.TableField.LinkedTables">
            <summary>
            A collection of linked tables: key=tablename, value=fieldname
            </summary>
        </member>
        <member name="M:Labman.Database.DataModelCodeGenerator.TableField.#ctor">
            <summary>
            Table field constructor sets default values for the properties
            </summary>
        </member>
        <member name="T:Labman.Database.LinqToSql`1">
            <summary>
            Generic query provider class that is used to convert LINQ queries to SQL queries.
            The class is designed to interact with database classes created by the database class creation tool.
            </summary>
            <typeparam name="T">template type parameter</typeparam>
            <remarks>
            Usage:
            You can query a data model created using the DataModelCodeGenerator using LINQ.
            Example usage:
            <code>
            var qry = from item in DataModels.HITSBAC.Tables.Pots where item.Recipe.Campaignid == 48 select item;
            foreach (DataModels.HITSBAC.tbl_pots pot in qry)
            {
            // Do something...
            }
            </code>
            LIMITATIONS:
            Currently you can't use 'Count()' on a sub table in the query itself, you must evaluate this when looping through the results.
            e.g. you can NOT do:
            <code>
            var qry = from item in DataModels.HITSBAC.Tables.Pots where item.Panels.Count() &gt; 0 select item;
            </code>
            Instead you must do:
            <code>
            var qry = from item in DataModels.HITSBAC.Tables.Pots select item;
            foreach (DataModels.HITSBAC.tbl_pots pot in qry)
            {
            if (pot.Panels.Count &gt; 0)
            {
            // Do something...
            }
            }
            </code>
            </remarks>
        </member>
        <member name="F:Labman.Database.LinqToSql`1._expressionTree">
            <summary>This variable holds the expression tree to be translated into a query</summary>
        </member>
        <member name="F:Labman.Database.LinqToSql`1._databaseConnection">
            <summary>Reference to the database connection object that is already open and ready for queries</summary>
        </member>
        <member name="F:Labman.Database.LinqToSql`1._typeProperties">
            <summary>Array of properties for the current object type</summary>
        </member>
        <member name="F:Labman.Database.LinqToSql`1._queryLogFile">
            <summary>QueryCommand Log file location, or blank to not log queries</summary>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.#ctor(Labman.Database.Connection@,System.String)">
            <summary>
            Class constructor, sets the reference to the open database connection
            </summary>
            <param name="databaseConnection">Reference to the database connection object that is already open and ready for queries</param>
            <param name="queryLogFile">Location of the query log file, or leave blank to not log</param>
        </member>
        <member name="P:Labman.Database.LinqToSql`1.System#Linq#IQueryable#Provider">
            <summary>
            Property that returns the provider of the IQueryable interface
            </summary>
        </member>
        <member name="P:Labman.Database.LinqToSql`1.System#Linq#IQueryable#ElementType">
            <summary>
            Property that returns the type of the object class we are working with (table class)
            </summary>
        </member>
        <member name="P:Labman.Database.LinqToSql`1.System#Linq#IQueryable#Expression">
            <summary>
            Property that returns the expression constant
            </summary>
        </member>
        <member name="P:Labman.Database.LinqToSql`1.Connection">
            <summary>
            Property that exposes the database connection object
            </summary>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
            <summary>
            This method is called when the query call is started
            </summary>
            <typeparam name="S">template type parameter</typeparam>
            <param name="expressionTree">The expression tree that needs to be converted</param>
            <returns>
            The generic IQueryable interface of this object
            </returns>
            <exception cref="T:System.Exception">Only  + typeof(T).FullName +  objects are supported.</exception>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
            <summary>
            This method is called when the query call is started and calls the generic CreateQuery method
            </summary>
            <param name="expressionTree">The expression tree that needs to be converted</param>
            <returns>The generic IQueryable interface of this object</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
            <summary>
            This method is run when the query is executed and calls the generic type Execute command
            </summary>
            <param name="expressionTree">The expression tree to execute</param>
            <returns>The result of the generic Execute command</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets the query enumerator that allows results to be iterated through
            </summary>
            <returns>The IEnumerator of the result</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the query enumerator that allows results to be iterated through
            </summary>
            <returns>The IEnumerator of the result</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
            <summary>
            The main Execute method parses the expression tree and runs the query on the database, returning the results.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="expressionTree">The expression tree to convert</param>
            <returns>
            The result of the query
            </returns>
        </member>
        <member name="T:Labman.Database.LinqToSql`1.QueryTranslator">
            <summary>
            QueryCommand translator class that is used to perform the actual conversion from the expression tree into an SQL query string that can be executed.
            Note that this class inherits from the ExpressionVisitor class which defines which expression types need parsing by which methods (unary, method, binary, etc).
            </summary>
        </member>
        <member name="F:Labman.Database.LinqToSql`1.QueryTranslator._queryStringBuilder">
            <summary>Main string builder query that is built up as the query is created</summary>
        </member>
        <member name="F:Labman.Database.LinqToSql`1.QueryTranslator._isSubQueryDefined">
            <summary>Flag that is set when a sub-query is defined and a closing set of brackets is required in the query</summary>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.QueryTranslator.#ctor">
            <summary>
            Class constructor - nothing needed to be done here
            </summary>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.QueryTranslator.Translate(System.Linq.Expressions.Expression)">
            <summary>
            The translate method is the main exposed method that is called to perform this conversion.
            </summary>
            <param name="objExpression">The expression tree to parse</param>
            <returns>The result SQL query string</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.QueryTranslator.StripQuotes(System.Linq.Expressions.Expression)">
            <summary>
            Strip the quotes from the expression tree
            </summary>
            <param name="objExpression">The expression tree to parse</param>
            <returns>The expression tree with quotes stripped off</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.QueryTranslator.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Parses a method call within the expression tree
            </summary>
            <param name="objMethod">The method call expression to parse</param>
            <returns>The expression tree that was passed in</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.QueryTranslator.AddMethodValue(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Adds the value for a method call, checks whether the value needs to be obtained from a variable or from a coded string
            </summary>
            <param name="objMethod">The object method.</param>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.QueryTranslator.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary.
            </summary>
            <param name="u">The u.</param>
            <returns>The expression</returns>
            <exception cref="T:System.NotSupportedException">Expression type not supported</exception>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.QueryTranslator.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary.
            </summary>
            <param name="b">The b.</param>
            <returns>The expression</returns>
            <exception cref="T:System.NotSupportedException">Expression type not supported</exception>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.QueryTranslator.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns>The expression</returns>
            <exception cref="T:System.NotSupportedException">Expression type not supported</exception>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.QueryTranslator.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access.
            </summary>
            <param name="m">The m.</param>
            <returns>The expression</returns>
            <exception cref="T:System.NotSupportedException">Expression type not supported</exception>
        </member>
        <member name="T:Labman.Database.LinqToSql`1.ExpressionVisitor">
            <summary>
            Expression Visitor Class provides some overloaded methods for visitting and parsing different types
            of objects and types within the expression tree.
            It is not expected that this class needs to be modified.
            </summary>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Database.LinqToSql`1.ExpressionVisitor"/> class.
            </summary>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visits the specified expression.
            </summary>
            <param name="exp">The exp.</param>
            <returns>The expression</returns>
            <exception cref="T:System.Exception">Unoken express</exception>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns>Member binding</returns>
            <exception cref="T:System.Exception">Expression type not supported</exception>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the element initializer.
            </summary>
            <param name="initializer">The initializer.</param>
            <returns>The emlement initializer</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the unary.
            </summary>
            <param name="u">The u.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the binary.
            </summary>
            <param name="b">The b.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the type is.
            </summary>
            <param name="b">The b.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the constant.
            </summary>
            <param name="c">The c.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the conditional.
            </summary>
            <param name="c">The c.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the parameter.
            </summary>
            <param name="p">The p.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access.
            </summary>
            <param name="m">The m.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the method call.
            </summary>
            <param name="m">The m.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
            Visits the expression list.
            </summary>
            <param name="original">The original.</param>
            <returns>Expression list</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the member assignment.
            </summary>
            <param name="assignment">The assignment.</param>
            <returns>Member assignment</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the member member binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns>Member member binding</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits the member list binding.
            </summary>
            <param name="binding">The binding.</param>
            <returns>Member list binding</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>
            Visits the binding list.
            </summary>
            <param name="original">The original.</param>
            <returns>binding list</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>
            Visits the element initializer list.
            </summary>
            <param name="original">The original.</param>
            <returns>Element initializer list</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits the lambda.
            </summary>
            <param name="lambda">The lambda.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the new.
            </summary>
            <param name="nex">The nex.</param>
            <returns>The new expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the member initialize.
            </summary>
            <param name="init">The initialize.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the list initialize.
            </summary>
            <param name="init">The initialize.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the new array.
            </summary>
            <param name="na">The na.</param>
            <returns>The expression</returns>
        </member>
        <member name="M:Labman.Database.LinqToSql`1.ExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the invocation.
            </summary>
            <param name="iv">The iv.</param>
            <returns>The expression</returns>
        </member>
        <member name="T:Labman.Database.Connection">
            <summary>
            This class handles the connection to a database provider.
            It returns connections on a per-thread basis, with each thread creating it's own provider object.
            </summary>
        </member>
        <member name="F:Labman.Database.Connection._providerSettings">
            <summary>
            Set the in the constructor, this stores the settings we should use to open connections
            to the database
            </summary>
        </member>
        <member name="F:Labman.Database.Connection._databaseProviders">
            <summary>
            A collection of database providers which can be used to provide a connection
            </summary>
        </member>
        <member name="F:Labman.Database.Connection._databaseProviderLastUsed">
            <summary>
            A collection of times to indicate when a provider was last used
            </summary>
        </member>
        <member name="F:Labman.Database.Connection._databaseProviderCollectionLock">
            <summary>
            A writer lock used to make access to the collection thread safe
            </summary>
        </member>
        <member name="P:Labman.Database.Connection.Provider">
            <summary>
            This property returns the provider object
            </summary>
        </member>
        <member name="P:Labman.Database.Connection.TypeOfProvider">
            <summary>
            Returns the type of database provider
            </summary>
        </member>
        <member name="P:Labman.Database.Connection.ConnectionString">
            <summary>
            Returns the provider connection string
            </summary>
        </member>
        <member name="M:Labman.Database.Connection.#ctor">
            <summary>
            Class Constructor. The provider settings must be set before use.
            </summary>
        </member>
        <member name="M:Labman.Database.Connection.#ctor(Labman.Database.Providers.ProviderSettings)">
            <summary>
            Constructor creates a new connection object
            </summary>
            <param name="providerSettings">The settings to use for creating connections with the database provider</param>
        </member>
        <member name="M:Labman.Database.Connection.GetProvider">
            <summary>
            Returns a provider which can be used to transfer data to and from an underlying database
            </summary>
            <remarks>
            If a new provider class is added then you must ensure that you add the provider to the switch inside this function which
            determines what type of database provider to create
            </remarks>
            <returns>An object of the specific type of provider determined in the provider settings used</returns>
        </member>
        <member name="T:Labman.Data.Colour">
            <summary>
            Class which provides calculations for colour (usually measured with a spectrophotometer)
            </summary>
        </member>
        <member name="T:Labman.Data.Colour.LABData">
            <summary>
            LAB data structure
            </summary>
        </member>
        <member name="F:Labman.Data.Colour.LABData.L">
            <summary>The L value</summary>
        </member>
        <member name="F:Labman.Data.Colour.LABData.a">
            <summary>The a value</summary>
        </member>
        <member name="F:Labman.Data.Colour.LABData.b">
            <summary>The b value</summary>
        </member>
        <member name="M:Labman.Data.Colour.LABData.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Data.Colour.LABData"/> struct.
            </summary>
            <param name="LabchValues">The labch values.</param>
        </member>
        <member name="T:Labman.Data.Colour.LCHData">
            <summary>
            The LCH data structure
            </summary>
        </member>
        <member name="F:Labman.Data.Colour.LCHData.L">
            <summary>The L value</summary>
        </member>
        <member name="F:Labman.Data.Colour.LCHData.C">
            <summary>The C value</summary>
        </member>
        <member name="F:Labman.Data.Colour.LCHData.H">
            <summary>The H value</summary>
        </member>
        <member name="M:Labman.Data.Colour.GetObserverData(System.String)">
            <summary>
            Get observer data from the database
            </summary>
            <param name="observerData">Observer data which is a comma seperated list of the data split into multiple lines</param>
            <returns>An array of observer data to be used in calculations</returns>
        </member>
        <member name="M:Labman.Data.Colour.CalculateLabchValues(System.Double[]@,System.Double[0:,0:]@)">
            <summary>
            Calculates Labch values for a refelectance curve
            </summary>
            <param name="reflectanceCurve">The reflectance curve to calculate values for</param>
            <param name="observerData">The observer data for the calculation, loaded using the GetObserverData method</param>
            <returns>An array of values: L a b c h</returns>
        </member>
        <member name="M:Labman.Data.Colour.CalculateLab(System.Double[]@,System.Double[0:,0:]@)">
            <summary>
            Calculates Lab values for the specified spectra
            </summary>
            <param name="reflectanceCurve">The reflectance curve to process</param>
            <param name="observerData">The observer data for the calculation, loaded using the GetObserverData method</param>
            <returns>LAB data</returns>
        </member>
        <member name="M:Labman.Data.Colour.CalculateDE2K(Labman.Data.Colour.LABData,Labman.Data.Colour.LABData)">
            <summary>
            Calculates the delta E2K of two samples.
            </summary>
            <param name="sLAB">Specifies first Lab.</param>
            <param name="bLAB">Specifies second Lab.</param>
            <returns>The Delta E2K of the two measurements.</returns>
        </member>
        <member name="M:Labman.Data.Colour.CalculateDE2K(System.Double[]@,System.Double[]@,System.Double[0:,0:]@)">
            <summary>
            Calculates the delta E2K of two reflectance curves
            </summary>
            <param name="reflectanceCurve1">First reflectance curve</param>
            <param name="reflectanceCurve2">Seconds reflectance curve</param>
            <param name="observerData">The observer data for the calculation, loaded using the GetObserverData method</param>
            <returns>The Delta E2K of the two measurements</returns>
        </member>
        <member name="M:Labman.Data.Colour.LAB_LCH(Labman.Data.Colour.LABData)">
            <summary>
            Converts LAB to LCH
            </summary>
            <param name="LAB">LAB data</param>
            <returns>LCH data</returns>
        </member>
        <member name="M:Labman.Data.Colour.CalculateXYZTristimulusValues(System.Double[]@,System.Double[0:,0:]@)">
            <summary>
            Calculates the XYZ tristimulus values for a refelectance curve
            </summary>
            <param name="reflectanceCurve">The reflectance curve to calculate values for</param>
            <param name="observerData">The observer data for the calculation, loaded using the GetObserverData method</param>
            <returns>An array of values: X Y Z</returns>
        </member>
        <member name="M:Labman.Data.Colour.CalculateCIEWhiteness(System.Double[])">
            <summary>
            Calculate the CIE Whiteness
            </summary>
            <param name="tristimulusValues">Tristimulus XYZ values</param>
            <returns>CIE Whiteness</returns>
        </member>
        <member name="M:Labman.Data.Colour.CalculateCIEYellowness(System.Double[])">
            <summary>
            Calculate the CIE Yellowness
            </summary>
            <param name="tristimulusValues">Tristimulus XYZ values</param>
            <returns>CIE Yellowness</returns>
        </member>
        <member name="T:Labman.Data.Mathematical">
            <summary>
            Static class of standard useful mathematical methods
            </summary>
        </member>
        <member name="M:Labman.Data.Mathematical.LinearRegression(System.Double[],System.Double[],System.Double@,System.Double@,System.Double@)">
            <summary>
            Fits a line to a collection of (x,y) points.
            </summary>
            <param name="xVals">The x-axis values.</param>
            <param name="yVals">The y-axis values.</param>
            <param name="rsquared">The r^2 value of the line.</param>
            <param name="yintercept">The y-intercept value of the line (i.e. y = ax + b, yintercept is b).</param>
            <param name="slope">The slope of the line (i.e. y = ax + b, slope is a).</param>
        </member>
        <member name="M:Labman.Data.Mathematical.TrendMethod(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Double[])">
            <summary>
            Emulates the Excel TREND function to calculate the Y values of given X values based on a trend of known input data
            </summary>
            <param name="knownYvalues">Known Y values</param>
            <param name="knownXvalues">Known X values</param>
            <param name="requiredNewXvalues">Required X values to fit to the data</param>
            <returns>Calculated new Y values for the trend of input data</returns>
        </member>
        <member name="M:Labman.Data.Mathematical.LeastSquaresFitLinear(System.Collections.Generic.List{System.Double},System.Collections.Generic.List{System.Double},System.Double@,System.Double@)">
            <summary>
            Performs the least squares method of linear line fitting
            </summary>
            <param name="knownYvalues">Known Y values to calculate from</param>
            <param name="knownXvalues">Known X values to calculate from</param>
            <param name="mVal">M output</param>
            <param name="cVal">C output</param>
        </member>
        <member name="T:Labman.Data.PolarCoordinate">
            <summary>
            A representation of a position in terms of distance from a point and angle from a vector
            </summary>      
        </member>
        <member name="P:Labman.Data.PolarCoordinate.Radius">
            <summary>
            The straight line distance from the origin / reference point
            </summary>
        </member>
        <member name="P:Labman.Data.PolarCoordinate.Theta">
            <summary>
            The angle in degrees from the reference vector
            </summary>
        </member>
        <member name="M:Labman.Data.PolarCoordinate.#ctor">
            <summary>
            Default constructor - leaves properties initialised to zero
            </summary>
        </member>
        <member name="M:Labman.Data.PolarCoordinate.#ctor(System.Double,System.Double)">
            <summary>
            Basic constructor, setting both properties of the coordinate
            </summary>
            <param name="radius">The straight line distance from the reference point</param>
            <param name="theta">The angle in degrees from the refrence point</param>
        </member>
        <member name="T:Labman.Data.PolarCoordinateExtensions">
            <summary>
            Static helper methods for working with polar coordinates and other types
            </summary>
        </member>
        <member name="M:Labman.Data.PolarCoordinateExtensions.ToPolar(System.Windows.Point,System.Windows.Point)">
            <summary>
            Construct a polar coordinate from two cartesian coordinates
            </summary>
            <param name="point">The cartesian coordinate to create a polar representation of</param>
            <param name="reference">The cartesian origin of the polar coordinate</param>
            <returns>A <see cref="T:Labman.Data.PolarCoordinate"/> representation of the point from the given reference</returns>
        </member>
        <member name="M:Labman.Data.PolarCoordinateExtensions.ToPolar(System.Windows.Point)">
            <summary>
            Construct a polar coordinate from a single cartesian coordinate and the origin
            </summary>
            <param name="point">The cartesian coordinate to create a polar representation of</param>   
            <returns>A <see cref="T:Labman.Data.PolarCoordinate"/> representation of the point from the origin</returns>
        </member>
        <member name="T:Labman.Data.Strings">
            <summary>
            Class of methods for strings
            </summary>
        </member>
        <member name="M:Labman.Data.Strings.ToPascalCaseWithSpaces(System.String,System.Boolean)">
            <summary>
            Add spaces before each word in a pascal case string.
            </summary>
            <param name="input">The input string.</param>
            <param name="capitaliseFirstLetter">false to force the first letter to be lower case, true for upper</param>
            <returns>The input string in pascal case form with spaces between words.</returns>
        </member>
        <member name="M:Labman.Data.Strings.AddSpacesToPascalCase(System.String)">
            <summary>
            Add spaces before each word in a pascal case string
            </summary>
            <param name="input">The input string</param>
            <returns>The output string</returns>
        </member>
        <member name="M:Labman.Data.Strings.AddSpacesToPascalCase(System.String,System.Boolean)">
            <summary>
            Add spaces before each word in a pascal case string
            </summary>
            <param name="input">The input string</param>
            <param name="capitaliseFirstLetter">Flag to capitalise the first letter of the string</param>
            <returns>The output string</returns>
        </member>
        <member name="M:Labman.Data.Strings.ToCamelCaseWithoutSpaces(System.String,System.Boolean)">
            <summary>
            Creates a camel case string, removing spaces between words and capitalising each word.
            Optionally doesn't capitalise the first word.
            </summary>
            <param name="input">The sentence to transform to camel case.</param>
            <param name="capitaliseFirstLetter">false to force the first letter to be lower case, true for upper</param>
            <returns>The string sentence as a camel case string without spaces</returns>
        </member>
        <member name="M:Labman.Data.Strings.ToUpper(System.Char)">
            <summary>
            Converts a character to upper case
            </summary>
            <param name="input">The character to convert to upper case</param>
            <returns>The given character in upper case</returns>
        </member>
        <member name="M:Labman.Data.Strings.ToLower(System.Char)">
            <summary>
            Converts a character to lower case
            </summary>
            <param name="input">The character to convert to lower case</param>
            <returns>The given character in lower case</returns>
        </member>
        <member name="M:Labman.Data.Strings.NthIndexOf(System.String,System.String,System.Int32)">
            <summary>Finds the nth index of the given string within this string</summary>
            <param name="input">The input string</param>
            <param name="value">The string to seek</param>
            <param name="nth">The number of the occurrence of the <paramref name="value"/> to find</param>
            <returns>The index of the nth occurrence of <paramref name="value"/> within the <paramref name="input"/></returns>
        </member>
        <member name="T:Labman.Data.ByteArray">
            <summary>
            This class provides a set of methods that can be used to manipulate byte arrays
            </summary>
        </member>
        <member name="M:Labman.Data.ByteArray.ToReadableString(System.Byte[])">
            <summary>
            Converts a byte array into a more readable string. 
            Output string will be comma separated. E.G: 0,0,0,0,0,0,0
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <returns>The readable string value.</returns>
        </member>
        <member name="M:Labman.Data.ByteArray.CombineByteArrays(System.Byte[]@,System.Byte[]@)">
            <summary>
            Combines two bytes arrays
            </summary>
            <param name="buffer1">The first byte array to combine</param>
            <param name="buffer2">The second byte array to combine</param>
            <returns>The combined byte array</returns>
        </member>
        <member name="M:Labman.Data.ByteArray.SubByte(System.Byte[]@,System.Int32,System.Int32)">
            <summary>
            Extracts and returns a sub-section of the byte array
            </summary>
            <param name="buffer">The input array</param>
            <param name="offset">The start index within the array to parse</param>
            <param name="length">Optional length of bytes to copy. Blank or 0 to copy to end of array.</param>
            <returns>
            The sub section of the array
            </returns>
            <exception cref="T:Labman.BaseException">
            The start index used is outside the array bounds
            or
            The length used is greater than the size of the array
            </exception>
        </member>
        <member name="M:Labman.Data.ByteArray.Append(System.Byte[]@,System.Byte[]@)">
            <summary>
            Appends data onto the end of the input byte array
            </summary>
            <param name="buffer">The input byte array to append to</param>
            <param name="bytesToAppend">Byte array to append</param>
            <returns>
            The new appended byte array
            </returns>
        </member>
        <member name="M:Labman.Data.ByteArray.Append(System.Byte[]@,System.Byte)">
            <summary>
            Appends data onto the end of the input byte array
            </summary>
            <param name="buffer">The input byte array to append to</param>
            <param name="byteToAppend">Single byte to append</param>
            <returns>
            The new appended byte array
            </returns>
        </member>
        <member name="M:Labman.Data.ByteArray.Append(System.Byte[]@,System.String)">
            <summary>
            Appends data onto the end of the input byte array
            </summary>
            <param name="buffer">The input byte array to append to</param>
            <param name="stringToAppend">String to append</param>
            <returns>
            The new appended byte array
            </returns>
        </member>
        <member name="M:Labman.Data.ByteArray.Split(System.Byte[]@,System.Byte)">
            <summary>
            Splits the byte array into a collection of byte arrays based on a seperator character
            </summary>
            <param name="buffer">The input array to split</param>
            <param name="splitChar">The character to split by</param>
            <returns>
            A collection of byte arrays
            </returns>
        </member>
        <member name="M:Labman.Data.ByteArray.InStr(System.Byte[]@,System.Byte[],System.Int32)">
            <summary>
            Checks for the position within the input buffer of the specified input byte array
            </summary>
            <param name="buffer">The input byte array</param>
            <param name="searchBytes">The string to look for</param>
            <param name="startIndex">The index within the input array to start searching at</param>
            <returns>
            The position in the input byte array where the search string starts. -1 if search string not found.
            </returns>
        </member>
        <member name="M:Labman.Data.ByteArray.InStr(System.Byte[]@,System.String,System.Int32)">
            <summary>
            Checks for the position within the input buffer of the specified input byte array
            </summary>
            <param name="buffer">The input byte array</param>
            <param name="searchString">The string to look for</param>
            <param name="startIndex">The index within the input array to start searching at</param>
            <returns>
            The position in the input byte array where the search string starts. -1 if search string not found.
            </returns>
        </member>
        <member name="M:Labman.Data.ByteArray.InStr(System.Byte[]@,System.Byte,System.Int32)">
            <summary>
            Checks for the position within the input buffer of the specified input byte array
            </summary>
            <param name="buffer">The input byte array</param>
            <param name="searchByte">The byte to look for</param>
            <param name="startIndex">The index within the input array to start searching at</param>
            <returns>
            The position in the input byte array where the search string starts. -1 if search string not found.
            </returns>
        </member>
        <member name="M:Labman.Data.ByteArray.Contains(System.Byte[]@,System.Byte[])">
            <summary>
            Checks whether the input byte array contains a specified search byte array
            </summary>
            <param name="buffer">Input byte array to check</param>
            <param name="searchBytes">Search bytes</param>
            <returns>
            True if input buffer contains search bytes, else False
            </returns>
        </member>
        <member name="T:Labman.DebugLog">
            <summary>
            The static system log class exposes the debug log file for the application and is used
            as a shortcut to the log file object in the baseclass
            </summary>
        </member>
        <member name="M:Labman.DebugLog.AddLogMessage(System.String,Labman.Logging.LogMessage.LogType)">
            <summary>
            This method queues a log message to be saved to the log file.
            Messages are queued and processed in a seperate thread to keep processing time low.
            </summary>
            <param name="message">The message text to log</param>
            <param name="logType">The type of log to add</param>
        </member>
        <member name="M:Labman.DebugLog.AddLogMessage(Labman.Logging.LogMessage)">
            <summary>
            This method queues a log message to be saved to the log file.
            Messages are queued and processed in a seperate thread to keep processing time low.
            </summary>
            <param name="messageToLog">The message to log</param>
        </member>
        <member name="M:Labman.DebugLog.LogException(System.Exception)">
            <summary>
            Logs an exception as a critical fault.
            The log message includes the origin of the exception.
            </summary>
            <param name="ex">The exception to log</param>
        </member>
        <member name="T:Labman.EmergencyStop.IEmergencyStopChecker">
            <summary>
            This interface provides a generic structure for checking emergency stops
            </summary>
        </member>
        <member name="M:Labman.EmergencyStop.IEmergencyStopChecker.IsEStopped">
            <summary>
            Check for an E/Stopped state
            </summary>
            <returns>True if E/Stopped</returns>
        </member>
        <member name="P:Labman.EmergencyStop.IEmergencyStopChecker.CheckInterval">
            <summary>
            How often to check for an E/Stopped state in millisecconds
            </summary>
        </member>
        <member name="T:Labman.EmergencyStop.IODeviceEmergencyStopChecker">
            <summary>
            Provides an emergency stop checker that checks the e/stop state of an input
            </summary>
        </member>
        <member name="P:Labman.EmergencyStop.IODeviceEmergencyStopChecker.InputName">
            <summary>
            The name of the input to check
            </summary>
        </member>
        <member name="P:Labman.EmergencyStop.IODeviceEmergencyStopChecker.CheckInterval">
            <summary>
            How often to check for an E/Stopped state in milliseconds
            </summary>
        </member>
        <member name="M:Labman.EmergencyStop.IODeviceEmergencyStopChecker.#ctor(System.String)">
            <summary>
            Creates a new checker instance looking at an input
            </summary>
            <param name="inputName">The name of the input to check the e/stop on</param>
        </member>
        <member name="M:Labman.EmergencyStop.IODeviceEmergencyStopChecker.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new checker instance looking at an input
            </summary>
            <param name="inputName">The name of the input to check the e/stop on</param>
            <param name="checkInterval">How often to call IsEStopped</param>
        </member>
        <member name="M:Labman.EmergencyStop.IODeviceEmergencyStopChecker.IsEStopped">
            <summary>
            Check for an E/Stopped state
            </summary>
            <returns>True if E/Stopped</returns>
        </member>
        <member name="T:Labman.EmergencyStop.MotorControllerEmergencyStopChecker">
            <summary>
            Provides an emergency stop checker that checks the e/stop state of a motor controller
            </summary>
        </member>
        <member name="P:Labman.EmergencyStop.MotorControllerEmergencyStopChecker.AxisName">
            <summary>
            The name of the axis to check the e/stop on
            </summary>
        </member>
        <member name="P:Labman.EmergencyStop.MotorControllerEmergencyStopChecker.ListOfAxesToCheckOn">
            <summary>
            A list of axis names to check the estop on
            </summary>
        </member>
        <member name="P:Labman.EmergencyStop.MotorControllerEmergencyStopChecker.CheckInterval">
            <summary>
            How often to check for an E/Stopped state in milliseconds
            </summary>
        </member>
        <member name="M:Labman.EmergencyStop.MotorControllerEmergencyStopChecker.#ctor(System.String)">
            <summary>
            Creates a new checker instance looking at one axis
            </summary>
            <param name="axisName">The name of the axis to check the e/stop on</param>
        </member>
        <member name="M:Labman.EmergencyStop.MotorControllerEmergencyStopChecker.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new checker instance looking at one axis
            </summary>
            <param name="axisName">The name of the axis to check the e/stop on</param>
            <param name="checkInterval">How often to call IsEStopped</param>
        </member>
        <member name="M:Labman.EmergencyStop.MotorControllerEmergencyStopChecker.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Creates a new checker instance looking at each axis in turn (ONE FOR EACH CALL) to distribute the load
            </summary>
            <param name="listOfAxesToCheckOn">A list of axis names to check the estop on</param>
        </member>
        <member name="M:Labman.EmergencyStop.MotorControllerEmergencyStopChecker.#ctor(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Creates a new checker instance looking at each axis in turn (ONE FOR EACH CALL) to distribute the load
            </summary>
            <param name="listOfAxesToCheckOn">A list of axis names to check the estop on</param>
            <param name="checkInterval">How often to call IsEStopped</param>
        </member>
        <member name="M:Labman.EmergencyStop.MotorControllerEmergencyStopChecker.IsEStopped">
            <summary>
            Check for an E/Stopped state
            </summary>
            <returns>True if E/Stopped</returns>
        </member>
        <member name="T:Labman.Hardware.Balances.MettlerBase">
            <summary>Base class for Mettler balances</summary>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerBase.Dispose">
            <summary>
            Dispose method closes comms
            </summary>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerBase.Initialise">
            <summary>
            Initialise the balance, ensuring that communications are open and ready and then set up balance parameters
            </summary>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerBase.Zero(Labman.Hardware.Balances.Balance.WaitForCompletion,Labman.Hardware.Balances.Balance.ZeroType,System.Int32)">
            <summary>
            Zeros the balance
            </summary>
            <remarks>
            If you do not wait for the command to complete then this method will not check any return values from the balance it will
            simply send the command to zero and carry on regardless, assuming that the balance has received/executed the command
            successfully
            </remarks>
            <param name="waitForCompletion">Indicates whether or not you wish to wait for completion</param>
            <param name="zeroType">Indicates the type of zero you require</param>
            <param name="timeoutInSeconds">Timeout interval in seconds</param>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerBase.Calibrate(System.Int32)">
            <summary>
            Runs the balance's internal calibration routine
            </summary>
            <param name="timeoutInSeconds">Timeout interval in seconds</param>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerBase.GetBalanceWeight(Labman.Hardware.Balances.Balance.Stability,System.Int32,System.Double)">
            <summary>
            Obtains a weight from the balance
            </summary>
            <param name="stabilityType">The type of stability required when reading the weight</param>
            <param name="timeoutInSeconds">The timeout in seconds</param>
            <param name="simulatedWeight"> Optional Simulated weight</param>
            <returns>The weight returned from the balance in grams</returns>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerBase.ProcessBalanceResponse(System.String)">
            <summary>
            Given a response from the balance as a string this function compares it against known responses and takes action accordingly. It contains all possible
            responses for the commands used in this module as documented in the Mettler Standard Interface Command Set (SICS) manual.
            </summary>
            <param name="response">The response received from the balance</param>
        </member>
        <member name="T:Labman.Hardware.Balances.MettlerMoistureAnalyser">
            <summary>Hardware class for Mettle moisture analyser and balance.</summary>
        </member>
        <member name="T:Labman.Hardware.Balances.MettlerMoistureAnalyser.DoorPosition">
            <summary>positions the door can be in</summary>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerMoistureAnalyser.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Labman.Hardware.Balances.MettlerMoistureAnalyser"/> class.</summary>
        </member>
        <member name="P:Labman.Hardware.Balances.MettlerMoistureAnalyser.MettlerMoistureAnalyserSettings">
            <summary>The custom settings for the device</summary>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerMoistureAnalyser.CancelCommand">
            <summary>Cancels any commands currently running.</summary>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerMoistureAnalyser.CheckDoorPosition">
            <summary>Checks the current door position.</summary>
            <returns>DoorPosition.</returns>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerMoistureAnalyser.OpenDoor">
            <summary>Opens the door.</summary>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerMoistureAnalyser.CloseDoor">
            <summary>Closes the door.</summary>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerMoistureAnalyser.GetDryingData">
            <summary>Gets data relating to the current or most recent drying operations</summary>
            <returns>MettlerMoistureAnalyserDryingData.</returns>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerMoistureAnalyser.RunMeasurement(System.Int32)">
            <summary>Runs the loaded measurement method and returns the drying data</summary>
            <param name="timeoutSeconds">How long the measurement is allowed to run before timing out (in seconds)</param>
            <returns>The drying data for this measurement.</returns>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerMoistureAnalyser.StopDryingProcess">
            <summary>Stops an ongoing drying process</summary>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerMoistureAnalyser.SetDryingMethod(System.String)">
            <summary>Sets the drying method</summary>
            <param name="methodName">The name of the method pre-configured in the device</param>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerMoistureAnalyser.GoToBaseState">
            <summary>Set the device to the base state</summary>
        </member>
        <member name="T:Labman.Hardware.Balances.MettlerMoistureAnalyserDryingData">
            <summary>Class for holding the drying data of a Mettler Moisture Analyser</summary>
        </member>
        <member name="T:Labman.Hardware.Balances.MettlerMoistureAnalyserDryingData.Status">
            <summary>Possible drying states</summary>
        </member>
        <member name="T:Labman.Hardware.Balances.MettlerMoistureAnalyserDryingData.Unit">
            <summary>Units for the drying result</summary>
        </member>
        <member name="P:Labman.Hardware.Balances.MettlerMoistureAnalyserDryingData.CurrentStatus">
            <summary>Status of the drying operation</summary>
            <value>The status.</value>
        </member>
        <member name="P:Labman.Hardware.Balances.MettlerMoistureAnalyserDryingData.CurrentUnit">
            <summary>The unit the result is shown in</summary>
            <value>The unit.</value>
        </member>
        <member name="P:Labman.Hardware.Balances.MettlerMoistureAnalyserDryingData.WetWeight">
            <summary>The weight of the sample before drying. Set to 0 if no drying exists</summary>
            <value>The wet weight.</value>
        </member>
        <member name="P:Labman.Hardware.Balances.MettlerMoistureAnalyserDryingData.CurrentWeight">
            <summary>Current weight, or final weight if the drying is complete. Set to 0 if no drying exists</summary>
            <value>The current weight.</value>
        </member>
        <member name="P:Labman.Hardware.Balances.MettlerMoistureAnalyserDryingData.Result">
            <summary>Result in the requested unit. Set to 0 if no drying exists</summary>
            <value>The result.</value>
        </member>
        <member name="P:Labman.Hardware.Balances.MettlerMoistureAnalyserDryingData.DryingDuration">
            <summary>Duration of the drying in seconds. Set to 0 if no drying exists</summary>
            <value>The duration of the drying.</value>
        </member>
        <member name="T:Labman.Hardware.Balances.MettlerBalance">
            <summary>
            This class communicates with a Mettler laboratory weighing balance.
            </summary>
            <remarks>
            This module is not compatible with the older AT range of balances. It should be compatible with all SAG's, XP and WXS ranges.
            </remarks>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerBalance.SetBalanceStability(Labman.Hardware.Balances.Balance.StabilitySetting)">
            <summary>
            Changes the stability setting of the balance (Value Release in Mettler manual)
            </summary>
            <param name="stabilitySetting">The stability setting to use</param>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerBalance.SetKeypadEnabledState(Labman.Hardware.Balances.Balance.EnabledState)">
            <summary>
            Sets the enabled state of the keypad
            </summary>
            <param name="enabledState">The state you wish to set the keypad to</param>
        </member>
        <member name="M:Labman.Hardware.Balances.MettlerBalance.SetWeighingParameters(Labman.Hardware.Balances.Balance.StabilitySetting)">
             <summary>
             Sets the balance waighing parameters based on the stability setting.
             This method used to be used to set the stability within Merlin, but was depriceated in favour of a more direct approach.
             </summary>
             <remarks>
             The balance stability setting should be tailored to the environment in which the balance will be operating
             along with the reliability of the weight you require. All but one of the weighing parameters are defaulted
             as below:
            
             VIBRATION ADAPTER = 2
             1=Low - Rapid stabilization, unstable if disturbances appear. Use for stable environments.
             2=Medium -Average
             3=High - Slow stabilization, use in unstable environments
             
             WEIGHIING PROCESS ADAPTOR = 3
             0=AdaptOff - Weight values have a fixed relation to the weight change with respect to time. Suitable for controlled dispensing systems.
             1=Fill - Display reacts quickly to small weight changes. Suitable for uncontrolled dispensing systems.
             2=Normal - Rapid/Coarse dispensing systems
             3=Check - Highly non-linear, load dependant behaivour. Suitable for rapid weight acquisition with very stable final value.
            
             REPROSET - Defined by the stability setting (off is ignored)
             0=Off - only 2 consecutive values are compared
             1=Std - 3 readings compared
             2=Good - 5 readings compared
             3=Excellent - 7 readings compared
             4=Best - 9 readings compared
            
             WEIGHT UNIT 1 = 0 (g)
             0=g , 1=kg , 2=t , 3=lb , 4=oz , 5=ozt , 6=GN , 7=dwt , 8=ct , 9=mg , 10=ug , 11=mo , 12=msg
             
             AUTOZERO = 1 (ON)
             0=off
             1=on
            
             READABILITY = 1 (10d)
             0=1d - max accuracy
             1=10d - faster
            
             WEIGH UNIT 2 = 0 (g)
             0=g , 1=kg , 2=t , 3=lb , 4=oz , 5=ozt , 6=GN , 7=dwt , 8=ct , 9=mg , 10=ug , 11=mo , 12=msg
            
             PRESET TARE = 0 (off)
             0=off, 1=on
             
             ACTIVATE FREE PROGRAMMABLE UNIT = 0 (off)
             0=off, 1=on
             
             DECIMAL PLACES OF FREE PROGRAMMABLE UNIT = 2 (not DP of balance!)
             
             FACTOR OF FREE PROGRAMMABLE UNIT = 1 (ignore)
             
             NAME OF FREE PROGRAMMABLE UNIT = 0 (ignore)
             
             MENU LANGUAGE = 0 (English)
             0=English, 1=German, 2=French, 3=Spanish, 4=Italian, 5=Russian, 6=Japanese
             </remarks>
             <param name="stabilitySetting">The setting for the stability of the balance</param>
        </member>
        <member name="T:Labman.Hardware.Balances.Balance">
            <summary>
            Balance Standard Module Definition.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Balances.Balance.CommunicationInterface">
            <summary>
            The balance classes have access to a communications interface
            </summary>
        </member>
        <member name="T:Labman.Hardware.Balances.Balance.WaitForCompletion">
            <summary>
            Enumeration of possible states for waiting for Completion of a task
            </summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.WaitForCompletion.Wait">
            <summary>Wait until the action completes</summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.WaitForCompletion.DoNotWait">
            <summary>Do not wait for completion</summary>
        </member>
        <member name="T:Labman.Hardware.Balances.Balance.Stability">
            <summary>
            Enumeration of possible states for Stable or Unstable weights
            </summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.Stability.Stable">
            <summary>Stable weighing gets a stable value from the balance</summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.Stability.Unstable">
            <summary>Unstable weighing gets an instant value from the balance</summary>
        </member>
        <member name="T:Labman.Hardware.Balances.Balance.ZeroType">
            <summary>
            Enumeration of possible states for Zeroing Types
            </summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.ZeroType.Stable">
            <summary>Stable zeroing mode instructs the balance to zero and ensure it is stable at zero</summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.ZeroType.Quick">
            <summary>Quick zeroing mode, instantly zeros the balance</summary>
        </member>
        <member name="T:Labman.Hardware.Balances.Balance.EnabledState">
            <summary>
            Enumeration of possible states for Enabled States
            </summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.EnabledState.Disabled">
            <summary>Disabled state</summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.EnabledState.Enabled">
            <summary>Enabled state</summary>
        </member>
        <member name="T:Labman.Hardware.Balances.Balance.StabilitySetting">
            <summary>
            Enumeration of possible states for Balance Stability Settings
            </summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.StabilitySetting.VeryFast">
            <summary>Very Fast Stability</summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.StabilitySetting.Normal">
            <summary>Normal Stability</summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.StabilitySetting.Slow">
            <summary>Slow Stability</summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.StabilitySetting.VerySlow">
            <summary>Very Slow Stability</summary>
        </member>
        <member name="T:Labman.Hardware.Balances.Balance.SartoriusType">
            <summary>
            Enumeration of possible Sartorius balance types
            </summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.SartoriusType.WZA">
            <summary>WZA Type balance</summary>
        </member>
        <member name="F:Labman.Hardware.Balances.Balance.SartoriusType.Cubis">
            <summary>Cubis type balance</summary>
        </member>
        <member name="P:Labman.Hardware.Balances.Balance.BalanceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Balances.Balance.#ctor">
            <summary>
            Balance type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Balances.Balance.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Balances.Balance.Zero(Labman.Hardware.Balances.Balance.WaitForCompletion,Labman.Hardware.Balances.Balance.ZeroType)">
            <summary>
            Zeros the balance, re-setting its weight to zero
            </summary>
            <param name="waitForCompletion">Wait for completion type</param>
            <param name="zeroType">The type of zero to perform</param>
        </member>
        <member name="M:Labman.Hardware.Balances.Balance.Zero(Labman.Hardware.Balances.Balance.WaitForCompletion,Labman.Hardware.Balances.Balance.ZeroType,System.Int32)">
            <summary>
            Zeros the balance, re-setting its weight to zero
            </summary>
            <param name="waitForCompletion">Wait for completion type</param>
            <param name="zeroType">The type of zero to perform</param>
            <param name="timeoutInSeconds">The timeout in seconds to wait for this operation</param>
        </member>
        <member name="M:Labman.Hardware.Balances.Balance.Calibrate(System.Int32)">
            <summary>
            Calibrates the balance using its internal calibration weight
            </summary>
            <param name="timeoutInSeconds">The timeout in seconds to wait for this operation</param>
        </member>
        <member name="M:Labman.Hardware.Balances.Balance.GetBalanceWeight(Labman.Hardware.Balances.Balance.Stability,System.Int32,System.Double)">
            <summary>
            Gets a weight from the balance
            </summary>
            <param name="stabilityType">The type of weight stability required</param>
            <param name="timeoutInSeconds">The timeout in seconds to wait for this operation</param>
            <param name="simulatedWeight"> Optional simulated weight </param>
            <returns>The balance weight obtained</returns>
        </member>
        <member name="M:Labman.Hardware.Balances.Balance.GetBalanceWeight(Labman.Hardware.Balances.Balance.Stability)">
            <summary>
            Gets a weight from the balance
            </summary>
            <param name="stabilityType">The type of weight stability required</param>
            <returns>The balance weight obtained</returns>
        </member>
        <member name="M:Labman.Hardware.Balances.Balance.SetKeypadEnabledState(Labman.Hardware.Balances.Balance.EnabledState)">
            <summary>
            Enables or Disables the balance display keypad
            </summary>
            <param name="enabledState">The enabled state</param>
        </member>
        <member name="M:Labman.Hardware.Balances.Balance.SetBalanceStability(Labman.Hardware.Balances.Balance.StabilitySetting)">
            <summary>
            Changes the stability setting of the balance
            </summary>
            <param name="stabilitySetting">The stability setting to use</param>
        </member>
        <member name="T:Labman.Hardware.Balances.SartoriusBalance">
            <summary>
            This class communicates with a Sartorius laboratory weighing balance
            </summary>
        </member>
        <member name="M:Labman.Hardware.Balances.SartoriusBalance.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Balances.SartoriusBalance.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Balances.SartoriusBalance.Initialise">
            <summary>
            Initialise the balance, ensuring that communications are open and ready and then set up balance parameters
            </summary>
        </member>
        <member name="M:Labman.Hardware.Balances.SartoriusBalance.Zero(Labman.Hardware.Balances.Balance.WaitForCompletion,Labman.Hardware.Balances.Balance.ZeroType,System.Int32)">
            <summary>
            Zeros the balance
            </summary>
            <param name="waitForCompletion">Indicates whether or not you wish to wait for completion</param>
            <param name="zeroType">Indicates the type of zero you require</param>
            <param name="timeoutInSeconds">Timeout interval in seconds</param>
        </member>
        <member name="M:Labman.Hardware.Balances.SartoriusBalance.Calibrate(System.Int32)">
            <summary>
            Runs the balance's internal calibration routine
            </summary>
            <param name="timeoutInSeconds">Timeout interval in seconds</param>
        </member>
        <member name="M:Labman.Hardware.Balances.SartoriusBalance.GetBalanceWeight(Labman.Hardware.Balances.Balance.Stability,System.Int32,System.Double)">
            <summary>
            Obtains a weight from the balance
            </summary>
            <param name="stabilityType">The type of stability required when reading the weight</param>
            <param name="timeoutInSeconds">Reply timeout in seconds</param>
            <param name="simulatedWeight"> Optional Simulated weight </param>
            <returns>The weight returned from the balance in grams</returns>
        </member>
        <member name="M:Labman.Hardware.Balances.SartoriusBalance.GetBalanceWeight(Labman.Hardware.Balances.Balance.Stability,System.Int32,System.Boolean)">
            <summary>
            Obtains a weight from the balance
            </summary>
            <param name="stabilityType">The type of stability required when reading the weight</param>
            <param name="timeoutInSeconds">Reply timeout in seconds</param>
            <param name="afterTare">Flag to indicate if this is being called after a tare request</param>
            <returns>The weight returned from the balance in grams</returns>
        </member>
        <member name="M:Labman.Hardware.Balances.SartoriusBalance.SetBalanceStability(Labman.Hardware.Balances.Balance.StabilitySetting)">
            <summary>
            Sets the balance stability setting
            </summary>
            <remarks>
            The balance stability setting should be tailored to the environment in which the balance will be operating
            along with the reliability of the weight you require.
            </remarks>
            <param name="stabilitySetting">The setting for the stability of the balance</param>
        </member>
        <member name="M:Labman.Hardware.Balances.SartoriusBalance.SetKeypadEnabledState(Labman.Hardware.Balances.Balance.EnabledState)">
            <summary>
            Sets the enabled state of the keypad
            </summary>
            <param name="enabledState">The state you wish to set the keypad to</param>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.MettlerMoistureAnalyserSettings">
            <summary>Settings for the mettler moisture analyser</summary>
            <seealso cref="T:Labman.Hardware.DeviceSettings.BalanceSettings"/>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.MettlerMoistureAnalyserSettings.Units">
            <summary>Units for the drying result</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.MettlerMoistureAnalyserSettings.ResultUnit">
            <summary>The unit to get drying result data in</summary>
            <value>The result unit.</value>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.RfIdeasUniversalRfidReaderSettings">
            <summary>
            rfIDEAS Universal RFID Reader settings
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.RfIdeasUniversalRfidReaderSettings.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.TracxerReaderSettings">
            <summary>
            Tracxer Reader settings
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TracxerReaderSettings.ApplicationPath">
            <summary>
            The path to the Tracxer application
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.HettichCentrifugeSettings">
            <summary>
            Settings class for the Hettich Centrifuge
            </summary>
            <seealso cref="T:Labman.Hardware.DeviceSettings.CentrifugeSettings" />
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.HettichCentrifugeSettings.Address">
            <summary>The centrifuge address</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.HettichCentrifugeSettings.AddressCharacter">
            <summary>The address of the centrifuge. Default is 0x5D</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.HettichCentrifugeSettings.NumberOfPositions">
            <summary>The number of rotor positions</summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.ElectricGripperSettings">
            <summary>
            This class defines all of the settings that are relevant for grippers
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.ElectricGripperSettings.CommunicationSettings">
            <summary>
            The communications settings to use for the gripper
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.ElectricGripperSettings.DeviceId">
            <summary>
            The gripper device ID 
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.ElectricGripperSettings.MaxGripCurrent">
            <summary>
            The maximum grip strength in Amps
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.ElectricGripperSettings.Velocity">
            <summary>
            The maximum grip strength in Amps
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.ElectricGripperSettings.Acceleration">
            <summary>
            The maximum grip strength in Amps
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.ElectricGripperSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.NtiEnviromuxEMicroTrhEnvironmentSensorSettings">
            <summary>
            Settings for the NTI Enviromux E-Micro TRH(P) Environment Sensor device class
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.NtiEnviromuxEMicroTrhEnvironmentSensorSettings.UserName">
            <summary>
             The Username
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.NtiEnviromuxEMicroTrhEnvironmentSensorSettings.Password">
            <summary>
            The Password
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FlavourSpecInstrumentSettings">
            <summary>
            Settings class for FlavourSpec instrument
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FlavourSpecInstrumentSettings.WaitForReadyTimeout">
            <summary>The time in milliseconds that is waited for the device to be ready when sending commands</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FlavourSpecInstrumentSettings.WaitForReadyPollingInterval">
            <summary>The pause in milliseconds between querying the ready state during WaitForReady commands. Should be less than <see cref="P:Labman.Hardware.DeviceSettings.FlavourSpecInstrumentSettings.WaitForReadyTimeout"/></summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FlavourSpecInstrumentSettings.MovementTimeout">
            <summary>The time in milliseconds that is allowed for the gantry to do moves.</summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.OmniKey5022RfidReaderSettings">
            <summary>
            OmniKey 5022 Rfid Reader settings
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.OmniKey5022RfidReaderSettings.Serial">
            <summary>
            Device serial number
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.OmniKey5022RfidReaderSettings.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings">
            <summary>
            Device Settings for Sartorius Biohit.
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.Models">
            <summary>
            Enumeration of possible models.
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings"/> class.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.PipettorAddress">
            <summary>
            Pipettor address.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.Model">
            <summary>
            The RLine model.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.DriveTimeout">
            <summary>
            The amount of time to wait for the drive to finish a move, in milliseconds.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.AspirateSpeed">
            <summary>
            The aspirate speed, 1-6.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.DispenseSpeed">
            <summary>
            The dispense speed 1-6.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.MinimumVolume">
            <summary>
            The minimum volume the pipettor can aspirate/dispense, in µL.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.MaximumVolume">
            <summary>
            The maximum volume the pipettor can aspirate/dipsense, in µL.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.VolumePerStep">
            <summary>
            The amount of liquid moved per step, in µL.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.HomePosition">
            <summary>
            The home position, in steps.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.MaxPosition">
            <summary>
            The maximum position, in steps.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SartoriusBiohitSettings.TipEjectPosition">
            <summary>
            The tip eject position, in steps.
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings">
            <summary>
            Custom settings class for the SIC EC1 Engraver
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.MarkingSpeed">
            <summary>
            Gets or sets the marking speed. Must be between 1 and 9 inclusive. Default is 1
            </summary>
            <value>The marking speed.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.FastSpeed">
            <summary>
            Gets or sets the fast speed. Must be between 1 and 9 inclusive. Default is 1
            </summary>
            <value>The fast speed.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.TextAngle">
            <summary>
            Gets or sets the text angle in hundredths of a degree. Must be between -1800 and 1800 inclusive. Default is 0
            </summary>
            <value>The text angle.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.CharacterSpacing">
            <summary>
            Gets or sets the character spacing. Must be between 0 and 50 inclusive. Default is 1
            </summary>
            <value>The character spacing.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.EngravingForce">
            <summary>
            Gets or sets the engraving force. Must be between 1 and 9 inclusive. Default is 1
            </summary>
            <value>The engraving force.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.EngravingQuality">
            <summary>
            Gets or sets the engraving quality. Must be between 1 and 9 inclusive. Default is 1
            </summary>
            <value>The engraving quality.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.CrossZeros">
            <summary>
            Gets or sets a value indicating whether zeros will be engraves with a line through. Default is true
            </summary>
            <value><c>true</c> if line through; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.TextXCoordinate">
            <summary>
            The X coordinate of where to start engraving. Default is 0
            </summary>
            <value>The text x coordinate.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.TextYCoordinate">
            <summary>
            The Y coordinate of where to start engraving. Default is 0
            </summary>
            <value>The text y coordinate.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.TextZCoordinate">
            <summary>
            The Z coordinate of where to start engraving. Default is 0
            </summary>
            <value>The text z coordinate.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.TextWidth">
            <summary>
            The width of each character. Default is 5
            </summary>
            <value>The width of the text.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.TextHeight">
            <summary>
            The height of each character. Default is 7
            </summary>
            <value>The height of the text.</value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SicEC1EngraverInstrumentSettings.TextRadius">
            <summary>
            The radius of the text. If set above 0 the text will be curved
            </summary>
            <value>The text radius.</value>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.QuasarRGBLEDControllerSettings">
            <summary>
            Class for QuasarRGBLEDControllerSettings
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.QuasarRGBLEDControllerSettings.RedScalar">
            <summary>
            The red scalar value
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.QuasarRGBLEDControllerSettings.GreenScalar">
            <summary>
            The green scalar value
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.QuasarRGBLEDControllerSettings.BlueScalar">
            <summary>
            The blue scalar value
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.QuasarRGBLEDControllerSettings.ModuleAddress">
            <summary>
            The module address, range 76(default) - 90
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.QuasarRGBLEDControllerSettings.#ctor">
            <summary>
            Default scalars = 1
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.Videojet1550InstrumentSettings">
            <summary>
            Class that implements the instrument settings from the Videojet printer
            </summary>
            <seealso cref="T:Labman.Hardware.DeviceSettings.InstrumentSettings" />
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.Videojet1550InstrumentSettings.FieldNames">
            <summary>
            Gets or sets the field names
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.Videojet1550InstrumentSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.DeviceSettings.Videojet1550InstrumentSettings"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.BaumerSettings">
            <summary>
            Device settings for a Baumer camera.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BaumerSettings.ColourImages">
            <summary>
            Flag to determine whether to take colour images
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BaumerSettings.SerialNumber">
            <summary>
            The serial number of the camera.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BaumerSettings.SimulationImagesFolder">
            <summary>
            Folder to get test images from in simulation mode
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BaumerSettings.ImageCaptureTimeoutMilliseconds">
            <summary>
            How long to wait for the image to return from the camera in milliseconds before the next retry.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BaumerSettings.CaptureRetries">
            <summary>
            The number of times to retry image capture before throwing an exception.
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.CameraSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.CameraSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.CameraSettings.DeviceIndex">
            <summary>
            The index of the camera in the controller/interface
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.CameraSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.CentrifugeCameraSettings">
            <summary>
            Settings class for centrifugecamera
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.CentrifugeCameraSettings.MarkerColour">
            <summary>
            The colour of the markers to be detected by the camera
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.CentrifugeCameraSettings.CameraId">
            <summary>
            The unique identifier of the camera this obtains images from
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.CentrifugeCameraSettings.BinaryThreshold">
            <summary>
            The threshold for binarising the image (the pixel value at which above a pixel is set to 255 and below to 0)
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.CentrifugeCameraSettings.CentrePoint">
            <summary>
            The point of rotation of the centrifuge in the image
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.CentrifugeCameraSettings.InnerMaskRadius">
            <summary>
            The radius of the inner masked area
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.CentrifugeCameraSettings.OuterMaskRadius">
            <summary>
            The radius of the outer masked area
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.CentrifugeCameraSettings.MarkColour">
            <summary>
            The colour of the markers to be detected by the camera
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.CentrifugeCameraSettings.#ctor">
            <summary>
            Constructor, sets some defaults to prevent null exceptions
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.CentrifugeSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.CentrifugeSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.CentrifugeSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.WeedtechWtpctmCounterInstrumentSettings">
            <summary>
            Class that implements the instrument settings from the Weedtech WTPCTM counter
            </summary>
            <seealso cref="T:Labman.Hardware.DeviceSettings.InstrumentSettings" />
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.WeedtechWtpctmCounterInstrumentSettings.DeviceIndex">
            <summary>
            Gets or sets the index of the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.WeedtechWtpctmCounterInstrumentSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.DeviceSettings.WeedtechWtpctmCounterInstrumentSettings"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.BeckhoffPlcLinkedIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.BeckhoffPlcLinkedIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BeckhoffPlcLinkedIODeviceSettings.PlcVariableListFilename">
            <summary>
            The Variable List filename within the PLC
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.BeckhoffIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.BeckhoffIODeviceSettings.BeckhoffIODeviceType">
            <summary>
            Enumeration of supported io device types
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BeckhoffIODeviceSettings.IndexOffset">
            <summary>
            The ADS IndexOffset for this module
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BeckhoffIODeviceSettings.IndexGroup">
            <summary>
            The ADS IndexGroup for this module
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BeckhoffIODeviceSettings.DeviceType">
            <summary>
            The Terminal/Box Type
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.BeckhoffIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FESTOAnalogInputModuleTypes">
            <summary>
            Enumumeration of FESTO Analog Input Module Types
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FestoCANAnalogInputDeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANAnalogInputDeviceSettings.CanNodeAddress">
            <summary>
            The CAN bus node address for this module
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANAnalogInputDeviceSettings.CPXModuleNumber">
            <summary>
            The CPX slice/module number.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANAnalogInputDeviceSettings.CPXModuleType">
            <summary>
            Gets or sets the type of the CPX module.
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.FestoCANAnalogInputDeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FestoCANAnalogOutputDeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANAnalogOutputDeviceSettings.CanNodeAddress">
            <summary>
            The CAN bus node address for this module
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANAnalogOutputDeviceSettings.CPXModuleNumber">
            <summary>
            The CPX slice/module number.
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.FestoCANAnalogOutputDeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FestoCANCPXCPStringDoubleValveBankIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXCPStringDoubleValveBankIODeviceSettings.CanNodeAddress">
            <summary>
            The CAN bus node address for this module
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXCPStringDoubleValveBankIODeviceSettings.OutputIndexOffset">
            <summary>
            Gets or sets the offset that is to be applied to index values.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXCPStringDoubleValveBankIODeviceSettings.CPStringNumber">
            <summary>
            Which CP string to address for this IO device (usually 4 strings on a CPX-CP-4-FB module)
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.FestoCANCPXCPStringDoubleValveBankIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FestoCANCPXCPStringIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXCPStringIODeviceSettings.CanNodeAddress">
            <summary>
            The CAN bus node address for this module
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXCPStringIODeviceSettings.CPStringNumber">
            <summary>
            Which CP string to address for this IO device (usually 4 strings on a CPX-CP-4-FB module)
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.FestoCANCPXCPStringIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.TemperatureMeasurementUnit">
            <summary>Enumumeration of temperature units</summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.MainsFrequencyInterferenceSuppressionMode">
            <summary>The mains frequency for interference supression.</summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.PT100WiringConfiguration">
            <summary>The wiring configuration</summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FestoCANCPXTemperaturePT100DeviceSettings">
            <summary>This class defines all of the settings that are relevant for this device type</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXTemperaturePT100DeviceSettings.CanNodeAddress">
            <summary>The CAN bus node address for this module</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXTemperaturePT100DeviceSettings.CPXModuleNumber">
            <summary>The CPX slice/module number.</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXTemperaturePT100DeviceSettings.FrequencyInterferenceSuppressionMode">
            <summary>The mains frequency for interference supression.</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXTemperaturePT100DeviceSettings.TemperatureUnit">
            <summary>Enumumeration of temperature units</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXTemperaturePT100DeviceSettings.Channel1WiringConfiguration">
            <summary>The wiring configuration of channel 1</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXTemperaturePT100DeviceSettings.Channel2WiringConfiguration">
            <summary>The wiring configuration of channel 2</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXTemperaturePT100DeviceSettings.Channel3WiringConfiguration">
            <summary>The wiring configuration of channel 3</summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXTemperaturePT100DeviceSettings.Channel4WiringConfiguration">
            <summary>The wiring configuration of channel 4</summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.FestoCANCPXTemperaturePT100DeviceSettings.#ctor">
            <summary>Settings constructor sets default parameters</summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.PhidgetsIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PhidgetsIODeviceSettings.SerialNumber">
            <summary>
            The serial number of the module
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PhidgetsIODeviceSettings.NumberOfAnalogueInputs">
            <summary>
            The number of analogue inputs attached to the device
            </summary>            
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.PhidgetsIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FestoCANCPXIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANCPXIODeviceSettings.CanNodeAddress">
            <summary>
            The CAN bus node address for this module
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.FestoCANCPXIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FestoCANDoubleValveBankIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANDoubleValveBankIODeviceSettings.CanNodeAddress">
            <summary>
            The CAN bus node address for this module
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANDoubleValveBankIODeviceSettings.OutputIndexOffset">
            <summary>
            Gets or sets the offset that is to be applied to index values.
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.FestoCANDoubleValveBankIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FestoCANValveBankIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FestoCANValveBankIODeviceSettings.CanNodeAddress">
            <summary>
            The CAN bus node address for this module
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.FestoCANValveBankIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.MoxaIOLogikE1242IODeviceSettings">
            <summary>
            Moxa IO Logik E1242IO Device Settings.
            </summary>
            <seealso cref="T:Labman.Hardware.DeviceSettings.IODeviceSettings" />
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.MoxaIOLogikE1242IODeviceSettings.Address">
            <summary>
            Gets or sets the address.
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.MoxaIOLogikE1242IODeviceSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.DeviceSettings.MoxaIOLogikE1242IODeviceSettings"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.PILZPNOZMulti2IODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.PILZPNOZMulti2IODeviceSettings.DeviceTypes">
            <summary>
            Enum of types of PILZPNOZMulti2IO safety controllers this class can target.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PILZPNOZMulti2IODeviceSettings.DeviceType">
            <summary>
            The type of device this instance should target.
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.PILZPNOZMulti2IODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.PositionIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PositionIODeviceSettings.DeviceAddress">
            <summary>
            The address for this module
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PositionIODeviceSettings.ParentAxis">
            <summary>
            The axis to control
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PositionIODeviceSettings.OffPosition">
            <summary>
            The position to move the axis to when IO is off
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PositionIODeviceSettings.OnPosition">
            <summary>
            The position to move the axis to when IO is on
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.PositionIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.LaserSettings">
            <summary>
            This class defines all of the settings that are relevant for lasers
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.LaserSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this laser
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.LaserSettings.LaserEnginePath">
            <summary>
            The path to the laser engine exe
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.LaserSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.MicrowaveDigesterSettings">
            <summary>
            Microwave digester settings
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.MicrowaveDigesterSettings.CommunicationSettings">
            <summary>
            Communication settings object
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.MicrowaveDigesterSettings.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.TrinamicMotorControllerSettings">
            <summary>Storage settings for a trinamic motor controller></summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TrinamicMotorControllerSettings.NodeAddress">
            <summary>The node address of this controller. When not using RS485, this can remain as 1</summary>
            // TODO: Is it the address of the controller or axis?
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.RecirculatingCoolerSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.RecirculatingCoolerSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.RecirculatingCoolerSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required.
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.EnvironmentSensorSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.EnvironmentSensorSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.EnvironmentSensorSettings.DeviceAddress">
            <summary>
            The address of the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.EnvironmentSensorSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.ADAMIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.ADAMIODeviceSettings.DeviceAddress">
            <summary>
            The address for this module
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.ADAMIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FestoCPXCoDeSysEmbeddedControllerIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.FestoCPXCoDeSysEmbeddedControllerIODeviceSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.InstrumentSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.InstrumentSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.InstrumentSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.LumbergFieldBusIODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.LumbergFieldBusIODeviceSettings.CanNodeAddress">
            <summary>
            The CAN bus node address for this module
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.LumbergFieldBusIODeviceSettings.#ctor">
            <summary>
            Settings constructor sets default parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.AntonPaarSettings">
            <summary>
            Settings for the device along with Anton paar specific settings
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.AntonPaarSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.BrookfieldSettings">
            <summary>
            A class to store the Rheometer device settings along with the specific settings for the Brookfield class
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.BrookfieldSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.EpsonRobotArmSettings">
            <summary>
            Class that implements the settings for the Epson robot arm
            </summary>
            <seealso cref="T:Labman.Hardware.DeviceSettings.RobotArmSettings" />
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.EpsonRobotArmSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.DeviceSettings.EpsonRobotArmSettings"/> class.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.EpsonRobotArmSettings.ProjectPath">
            <summary>
            The path to the Epson RC+ project file.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.EpsonRobotArmSettings.EnableOnInitialise">
            <summary>
            Gets or sets a flag to enable the motors on initialise.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.EpsonRobotArmSettings.SingularityAvoidance">
            <summary>
            Gets or sets a flag to enable Singularity Avoidance mode on the controller.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.EpsonRobotArmSettings.ConnectionNumber">
            <summary>
            The connection number in the project to use when connecting to this arm
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.FanucRobotArmSettings">
            <summary>
            Class that implements the settings for the Fanuc robot arm
            </summary>
            <seealso cref="T:Labman.Hardware.DeviceSettings.RobotArmSettings" />
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.FanucRobotArmSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.DeviceSettings.FanucRobotArmSettings"/> class.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FanucRobotArmSettings.CommsTimeout">
            <summary>
            Gets or sets comms timeout in ms
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FanucRobotArmSettings.UopDigitalIoStart">
            <summary>
            Gets or Sets the IO Index of the digital IO on the controller that the UOP Signals are mapped to.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.FanucRobotArmSettings.EnableOnInitialise">
            <summary>
            Gets or sets a flag to enable the motors on initialise.
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.RobotArmSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.RobotArmSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.RobotArmSettings.SpeedOverridePercentage">
            <summary>
            Robot speed override percentage
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.RobotArmSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.HachDR3900SpectrophotometerSettings">
            <summary>
            Custom Settings class for use with the Hach DR3900 Spectrophotometer
            </summary>
            <seealso cref="T:Labman.Hardware.DeviceSettings.SpectrophotometerSettings" />
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.HachDR3900SpectrophotometerSettings.DeviceName">
            <summary>
            Gets or sets the name of the device.
            </summary>
            <value>
            The name of the device.
            </value>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.HachDR3900SpectrophotometerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.DeviceSettings.HachDR3900SpectrophotometerSettings"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.SpectrophotometerSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SpectrophotometerSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.SpectrophotometerSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.KloehnSyringeSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.KloehnSyringeSettings.SyringePlungerForce">
            <summary>
            The plunger force of the syringe
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.KloehnSyringeSettings.ValveInitialisationSequence">
            <summary>
            The initialisation sequence of the valve
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.KloehnSyringeSettings.NodeAddress">
            <summary>
            The node address of the syringe as set on the address jumper on the unit
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.KloehnSyringeSettings.ValveEndPosition">
            <summary>
            The valve end position after initialisation
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.KloehnSyringeSettings.ValvePresent">
            <summary>
            Indicates if a valve is present on the syringe
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.KloehnSyringeSettings.FineResolution">
            <summary>
            The fine resolution for the syringe - normally 24000 for XL3000, 48000 for XLP6000
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.KloehnSyringeSettings.ResetOnInitialise">
            <summary>
            Flag to reset the syringe barrel on initialise
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.KloehnSyringeSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.TecanAirDisplacementPipettorSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanAirDisplacementPipettorSettings.NodeAddress">
            <summary>
            The node address of the syringe as set on the address jumper on the unit
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanAirDisplacementPipettorSettings.ResetOnInitialise">
            <summary>
            Flag to reset the syringe barrel on initialise
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.TecanAirDisplacementPipettorSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.TecanSmartValveSettings">
            <summary>
            Device Settings for the Tecan Smart Valve
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanSmartValveSettings.NodeAddress">
            <summary>
            The node address of the syringe as set on the address jumper on the unit
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanSmartValveSettings.ValveConfiguration">
            <summary>
            The valve configuration of the valve
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.TecanSmartValveSettings.#ctor">
            <summary>
            Constructor for the Smart Valve Settings. Sets up the default settings
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.TecanCentrisSyringeSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.TorqueTransducerSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type.
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TorqueTransducerSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.TorqueTransducerSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required.
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.TurbidityMeterSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TurbidityMeterSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.TurbidityMeterSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.PIDSettings">
            <summary>
            This class defines all of the settings that are relevant for balances
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PIDSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this balance
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.PIDSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PIDSettings.UnitNumber">
            <summary>
            Used to store the unit number of E5ZN
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PIDSettings.ChannelOneEnabled">
            <summary>
            Channel one enabled on E5ZN
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PIDSettings.ChannelTwoEnabled">
            <summary>
            Channel two enabled on E5ZN
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.PIDSettings.Resolution">
            <summary>
            Gets or sets the resolution.
            </summary>
            <value>
            The resolution. 1 or 0.1
            </value>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.RheometerSettings">
            <summary>
            This class defines all of the settings that are relevant for rheometers
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.RheometerSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this rheometer
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.RheometerSettings.KGamma">
            <summary>
            Gets or sets the k gamma.
            </summary>
            <value>
            The k gamma.
            </value>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.RheometerSettings.KTau">
            <summary>
            Gets or sets the k tau.
            </summary>
            <value>
            The k tau.
            </value>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.RheometerSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.TecanSyringeSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanSyringeSettings.SyringePlungerForce">
            <summary>
            The plunger force of the syringe
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanSyringeSettings.ValveInitialisationSequence">
            <summary>
            The initialisation sequence of the valve
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanSyringeSettings.NodeAddress">
            <summary>
            The node address of the syringe as set on the address jumper on the unit
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanSyringeSettings.ValveEndPosition">
            <summary>
            The valve end position after initialisation
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanSyringeSettings.ValvePresent">
            <summary>
            Indicates if a valve is present on the syringe
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanSyringeSettings.FineResolution">
            <summary>
            The fine resolution for the syringe - normally 24000 for XL3000, 48000 for XLP6000
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanSyringeSettings.ResetOnInitialise">
            <summary>
            Flag to reset the syringe barrel on initialise
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.TecanSyringeSettings.DispenseTimeout">
            <summary>
            Gets or sets the dispense timeout.
            </summary>
            <value>The dispense timeout.</value>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.TecanSyringeSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.BalanceSettings">
            <summary>
            This class defines all of the settings that are relevant for balances
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BalanceSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this balance
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BalanceSettings.StableWeightTimeout">
            <summary>
            Time out in seconds used when getting a stable weight from the balance
            </summary>
            <remarks>
            The stable weight timeout defaults to 90s (1.5 minutes) unless you set it otherwise
            </remarks>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BalanceSettings.ZeroTolerance">
            <summary>
            Tolerance in grams, used when taring the balance
            </summary>
            <remarks>
            If the zeroweight (where zeroweight = 0 + zero tolerance) is less than the current weight reading on the balance then the 
            zero method will re-attempt the zero until the weight reading falls below zeroweight, or a timeout occurs. This value is
            defaulted to 0 i.e. the balance reading has to be exactly 0 unless you set it otherwise
            </remarks>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BalanceSettings.PostTareGetWeightPacketTimeout">
            <summary>
            The packet timeout when attempting to get a weight from the balance, only used after a tare in the sartorius module
            </summary>
            <remarks>
            Sartorius balances require a zero weight from the balance to accept it has tared successfully, the default timeout is 2 seconds.
            This means we poll the balance continously and get lots of comm errors in log. This timeout allows you to set a time to allow the zero 
            to return without hammering the balance with get weight requests
            </remarks>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BalanceSettings.Stability">
            <summary>
            Balance stability setting
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BalanceSettings.SartoriusType">
            <summary>
            Balance sartorius type setting
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.BalanceSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.BarcodeReaderSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BarcodeReaderSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BarcodeReaderSettings.ReplyStxAsciiValue">
            <summary>
            An Stx character value to use when parsing replies from the barcode reader (use 0 to disable STX).
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.BarcodeReaderSettings.ReplyEtxAsciiValue">
            <summary>
            An Etx character value to use when parsing replies from the barcode reader (use 0 to disable ETX).
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.BarcodeReaderSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.IODeviceSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.IODeviceSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.IODeviceSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.IODeviceSettings.NumberOfInputsConnected">
            <summary>
            The number of inputs on the connected board
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.IODeviceSettings.NumberOfOutputsConnected">
            <summary>
            The number of outputs on the connected board
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.IODeviceSettings.NumberOfAnalogInputsConnected">
            <summary>
            The number of analog inputs on the connected board
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.IODeviceSettings.NumberOfAnalogOutputsConnected">
            <summary>
            The number of analog outputs on the connected board
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.MotorControllerSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.MotorControllerSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.MotorControllerSettings.NumberOfConnectedAxes">
            <summary>
            The number of axes connected to this device
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.MotorControllerSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.DeviceSettings.SyringeSettings">
            <summary>
            This class defines all of the settings that are relevant for this device type
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SyringeSettings.CommunicationSettings">
            <summary>
            The communications settings to use for this device
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SyringeSettings.Volume">
            <summary>
            Volume of the syringe in uL
            </summary>
        </member>
        <member name="P:Labman.Hardware.DeviceSettings.SyringeSettings.DefaultSpeed">
            <summary>
            The default speed of the syringe 1-20
            </summary>
        </member>
        <member name="M:Labman.Hardware.DeviceSettings.SyringeSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.DeviceMode">
            <summary>
            The modes the device can be in.
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.LeuzeSymbologyType">
            <summary>
            Code symbology supported by the Leuze DCR200i
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.LeuzeDCR200iAutoSetupResult">
            <summary>
            Class representing the result of a Leuze DCR200i barcode reader auto setup routine.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iAutoSetupResult.#ctor(System.String,Labman.Hardware.BarcodeReaders.LeuzeSymbologyType,System.Int32)">
            <summary>
            Class representing the result of a Leuze DCR200i barcode reader auto setup routine.
            </summary>
            <param name="codeData">The data in the code detected.</param>
            <param name="symbol">The type of symbol the code detected is.</param>
            <param name="numberOfDigits">The number of digits in the code detected.</param>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.LeuzeDCR200iAutoSetupResult.CodeData">
            <summary>
            The data in the code detected.
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.LeuzeDCR200iAutoSetupResult.NumberOfDigits">
            <summary>
            The number of digits in the code detected.
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.LeuzeDCR200iAutoSetupResult.Symbol">
            <summary>
            The type of symbol the code detected is.
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.LeuzeDCR200iDeviceStatus">
            <summary>
            Class representing the device status.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iDeviceStatus.#ctor(Labman.Hardware.BarcodeReaders.DeviceMode,System.Boolean,System.Boolean)">
            <summary>
            Class representing the device status.
            </summary>
            <param name="operatingMode">The mode the device is in.</param>
            <param name="hasFault">Flag indicating if the device has a fault.</param>
            <param name="isBusy">Flag indicating if the device is currently busy.</param>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.LeuzeDCR200iDeviceStatus.HasFault">
            <summary>
            Flag indicating if the device has a fault.
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.LeuzeDCR200iDeviceStatus.IsBusy">
            <summary>
            Flag indicating if the device is currently busy.
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.LeuzeDCR200iDeviceStatus.OperatingMode">
            <summary>
            The mode the device is in.
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface">
            <summary>
            Control class for operating a Leuze DCR200i 2D barcode reader using the Leuze XML interface.
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.CommandType">
            <summary>
            Types of XML command to send.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.#ctor">
            <summary>
            Control class for operating a Leuze DCR200i 2D barcode reader using the Leuze XML interface.
            Constructor sets the port number to a default value of 10004.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.AddCodeSymbolToDecoderTable(Labman.Hardware.BarcodeReaders.LeuzeSymbologyType,System.Collections.Generic.List{System.Int32})">
            <summary>
            Adds a new code symbol to the devices decoder table.
            </summary>
            <param name="symbol">The code type to add.</param>
            <param name="codeLengths">The code lengths to support.</param>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.AutoSetupBarcodeReader">
            <summary>
            Runs the barcode reader's Auto Setup routine.
            This attempts to identify any codes currently presented to the barcode reader and stores the code types in the devices internal codes table.
            This also sets up illumination and exposure settings.
            Note that this will clear the known code types table if called regardless of success.
            </summary>
            <returns>
            A value tuple of the code, symbol type and number of digits in the code detected in the auto setup routine.
            Returns null if no code is detected.
            </returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.Dispose">
            <summary>
            Disposes of this barcode reader.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.GetDeviceStatus">
            <summary>
            Gets the status of the device.
            </summary>
            <returns>The operating mode, fault and busy flags as a LeuzeDCR200iDeviceStatus.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.GetDeviceVersion">
            <summary>
            Gets the devices version number.
            </summary>
            <returns>The version number of the device.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.GetExposureTime">
            <summary>
            Gets the currently set exposure time of the devices camera in micro seconds.
            </summary>
            <returns>The exposure time in micro seconds.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.GetGainSetting">
            <summary>
            Gets the gain setting of the sensor. This will be an int between 1-7.
            </summary>
            <returns>The gain setting value.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.GetIlluminationOnOff">
            <summary>
            Gets if the illumination has been enabled during code capture.
            </summary>
            <returns>True if illumination is enabled.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.GetLastImage">
            <summary>
            Gets the last image that the barcode reader captured
            This is the same as the preview shown in the web interface
            </summary>
            <returns>The last image the barcode reader captured</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.GetOperatingMode">
            <summary>
            Gets the operating mode of the barcode reader.
            </summary>
            <returns>The operating mode the device is in.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.GetParameter``1(System.String)">
            <summary>
            Gets the value of a parameter from the device.
            </summary>
            <typeparam name="T">The data type the parameter should be parsed to.</typeparam>
            <param name="parameterName">The name of the parameter to get.</param>
            <returns>The value of the requested parameter.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.HasDeviceFaulted">
            <summary>
            Gets if the device's fault flag has been set.
            </summary>
            <returns>True if the device's fault flag has been set.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.Initialise">
            <summary>
            Connects to the device (no confirmation of connection, only opens the interface).
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.IsDeviceBusy">
            <summary>
            Gets if the device is currently busy.
            </summary>
            <returns>True if the device is busy.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.ReadBarcode(System.Int32)">
            <summary>
            Instructs the device to read a barcode.
            </summary>
            <param name="timeoutMs">How long to wait for a barcode in milliseconds before returning NOREAD</param>
            <returns>The barcode scanned or NOREAD if no code is found.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.SetExposureTime(System.Double)">
            <summary>
            Sets the exposure time of the devices camera in microseconds.
            </summary>
            <param name="exposureTimeMicroseconds">The exposure rate to set in microseconds.</param>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.SetGain(System.Int32)">
            <summary>
            Sets the gain setting of the sensor. This will be an int between 1-7.
            </summary>
            <param name="gainValue">The gain value to set between 1 and 7.</param>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.SetIllumination(System.Boolean)">
            <summary>
            Sets whether or not illumination is enabled during code capture on the device.
            </summary>
            <param name="illuminationEnabled">Set true if illumination should be enabled. False if not.</param>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.TriggerRead">
            <summary>
            TriggerRead has not been implemented on this device. Instead, use the ReadBarcode method.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.ParseDataFromCommandResult(System.Xml.Linq.XDocument)">
            <summary>
            Gets any data (under XML tag "DAT") in the response received. This will also decode the values of each data element if they are base64 encoded.
            </summary>
            <param name="response">The response to parse.</param>
            <returns>The data in the response.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeDCR200iXmlInterface.SetParameter(System.String,System.Object)">
            <summary>
            Sets a parameter on the barcode reader to a value.
            </summary>
            <param name="parameterName">The name of the parameter to set.</param>
            <param name="value">The value to set the parameter to.</param>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.LeuzeSerialBarcodeReader">
            <summary>
            Hardware class for control of a RS232 based Leuze Barcode reader E.G CR55.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeSerialBarcodeReader.Dispose">
            <summary>
            Disposes of this instance of the reader. Closes communications interface.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeSerialBarcodeReader.Initialise">
            <summary>
            Initializes the serial reader. Only opens communications. 
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeSerialBarcodeReader.TriggerRead">
            <summary>
            TriggerRead has not been implemented on this device. Please use the ReadBarcode method instead.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeSerialBarcodeReader.ReadBarcode(System.Int32)">
            <summary>
            Instructs the reader to start scanning for a code. If one is found before the timeout exceeds, it stops reading and returns it.
            </summary>
            <param name="timeoutMilliseconds">The time to scan for a code in milliseconds before timing out and returning NO_READ.</param>
            <returns>The barcode found or "No Read" if no code is found within the timeout passed.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeSerialBarcodeReader.ScanForData">
            <summary>
            Looks at the data buffer to see if there has been any barcode data returned.
            </summary>
            <returns>Anything found in the data buffer.</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeSerialBarcodeReader.SendHostTriggerCommand(System.String)">
            <summary>
            Sends a host trigger command to the barcode reader.
            This method is required as the replies do not always contain the STX and ETX characters, so the baseapp STX/ETX implementation doesn't quite work for all cases.
            </summary>
            <param name="command">The command to send.</param>
            <returns>The reply received in response to the command. Should usually start with 0x06 (ASCII Acknowledgment character)</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeSerialBarcodeReader.StartBarcodeCapture">
            <summary>
            Sends a command to start code capture on the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.LeuzeSerialBarcodeReader.StopBarcodeCapture">
            <summary>
            Sends a command to stop code capture on the device.
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader">
            <summary>
            A hardware module for rfIDEAS RFID Readers that are compatible with their Universal SDK
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.usbConnect">
            <summary>
            Connects to a USB Reader
            </summary>
            <returns>Non-Zero on success, Zero otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.getPartNumberString">
            <summary>
            Gets the part number as a string
            </summary>
            <returns>The part number</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.GetLUID">
            <summary>
            Gets the LUID
            </summary>
            <returns>The LUID</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.GetDevCnt">
            <summary>
            Gets the device count
            </summary>
            <returns>The number of connected devices</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.GetVidPidVendorName">
            <summary>
            Gets the VID, PID, and Vendor Name
            </summary>
            <returns>The VID, PID, and Vendor Name</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.GetLibVersion(System.Int16@,System.Int16@,System.Int16@)">
            <summary>
            Gets the library version number
            </summary>
            <param name="major">Reference variable set by the method for the major version number</param>
            <param name="minor">Reference variable set by the method for the minor version number</param>
            <param name="ver">Reference variable set by the method for the revision number</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.GetActiveID32(System.IntPtr,System.Int16)">
            <summary>
            Gets the 32-bit ID of the active tag
            </summary>
            <param name="result1">The result</param>
            <param name="buffSize">The size of the data buffer</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.SetDevTypeSrch(System.Int16)">
            <summary>
            Sets the device type to search for
            </summary>
            <param name="srchType">The device type</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.GetDID">
            <summary>
            Gets the firmware version
            </summary>
            <returns>The version number encoded in a 16-bit word</returns>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.PRXDEVTYP_USB">
            <summary>
            The device type enum value for USB
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.ReaderSettings">
            <summary>
            Device settings
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.Dispose">
            <summary>
            Class destructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.Initialise">
            <summary>
            Establishes connection to hardware
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.ReadBarcode(System.Int32)">
            <summary>
            Read the RFID Tag's ID
            </summary>
            <param name="timeout">The timeout (Not used)</param>
            <returns>The tag's ID</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.GetSdkVersion">
            <summary>
            Gets the SDK Version Number
            </summary>
            <returns>The 3-part version number (Major, Minor, and Revision)</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader.GetFirmwareVersion">
            <summary>
            Gets the Firmware Version Number
            </summary>
            <returns>The 3-part version number (Major, Minor, and Revision)</returns>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.TracxerCodeReader">
            <summary>
            Standard hardware module for the Tracxer Code Reader.
            Initial version by CBartzis 04/04/18
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.TracxerCodeReader.WaitForCompletion">
            <summary>
            Enumeration defines the possible wait for completion states
            </summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.TracxerCodeReader.WaitForCompletion.DoNotWait">
            <summary>Do not wait for completion</summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.TracxerCodeReader.WaitForCompletion.Wait">
            <summary>Wait for completion</summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.TracxerCodeReader.RackLayout">
            <summary>
            Enumeration defines the possible rack layouts
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem">
            <summary>
            This class represents a single read position
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.StatusOld">
            <summary>
            The possible states of the code
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.Status">
            <summary>
            Type safe enum pattern of possible states of the code
            </summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.Status.Unknown">
            <summary>
            Unknowm status code
            </summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.Status.NoTube">
            <summary>
            No Tube status code
            </summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.Status.NoCode">
            <summary>
            No barcode status code
            </summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.Status.Success">
            <summary>
            Successful status code
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.Status.#ctor(System.Int32,System.String)">
            <summary>
            Constructor for the status code
            </summary>
            <param name="value">The value associated with the status</param>
            <param name="name">The name associated with the status</param>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.Status.ToString">
            <summary>
            Overridden To String method
            </summary>
            <returns> the name </returns>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem._indexInRack">
            <summary>
            The index position in the rack
            </summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem._positionInRack">
            <summary>
            The string postion in the rack
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.IndexInRack">
            <summary>
            The index position in the rack
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.PositionInRack">
            <summary>
            The string postion in the rack 
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.ReadCode">
            <summary>
            The read code
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.ReadStatus">
            <summary>
            The read status of the item
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.#ctor(System.Int32,System.String,Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.Status)">
            <summary>
            Constructor
            </summary>
            <param name="indexInRack">The index of the position in the rack</param>
            <param name="readCode">The read code, blank string if falilure</param>
            <param name="status">The status of the code</param>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.#ctor(System.String,System.String,Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.Status)">
            <summary>
            Constructor
            </summary>
            <param name="rackPosition">The string position in the rack, eg A01</param>
            <param name="readCode">The read code, blank string if falilure</param>
            <param name="status">The status of the code</param>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.GetPositionFromIndex(System.Int32)">
            <summary>
            Returns the position of a vial in a rack based on its index (E.g 1 = A01, 96 = H12)
            </summary>
            <param name="index">The index of the vial</param>
            <returns>The position in the standard rack format. E.g A01 or H12</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ScannedRackItem.GetIndexFromPosition(System.String)">
            <summary>
            Returns the index from a given position
            </summary>
            <param name="position">The position in the standard rack format. E.g A01 or H12</param>
            <returns>The index of the vial</returns>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.TracxerCodeReader._defaultApplicationPath">
            <summary>
            The default application path for the Tracxer application
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.TracxerCodeReader.DefaultApplicationPath">
            <summary>
            The default application path for the Tracxer application
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.Initialise">
            <summary>
            Initialises the class
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.Dispose">
            <summary>
            Closes all connections and disposes of the object
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.ReadBarcode(System.Int32)">
            <summary>
            Legacy method - Do not use
            Use Scan method to scan all codes
            </summary>
            <param name="timeout">Not used</param>
            <returns>Not used</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.Scan(System.Int32)">
            <summary>
            Starts a scan of the rack
            </summary>
            <param name="timeout">The timeout in ms</param>
            <returns>A list of ScannedRackItems each representing a single read position</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.SetLayout(Labman.Hardware.BarcodeReaders.TracxerCodeReader.RackLayout)">
            <summary>
            Sets the rack layout, for example 8x12 for 96 vial racks
            </summary>
            <param name="layout">The layout to set the device to scan</param>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.TracxerCodeReader.CheckConnection">
            <summary>
            Checks the connection to the scanner
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.ImpinjRFID">
            <summary>
            Class to communicate with an impinj rfid reader
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.ImpinjRFID.BarcodeReaderSettings">
            <summary>
            An attempt to get around the settings issues
            </summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.ImpinjRFID._rfidReader">
            <summary>
            Ocatane SDK reader object
            </summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.ImpinjRFID._impinjSettingsObj">
            <summary>
            Octane SDK Impinj Settings
            </summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.ImpinjRFID._tags">
            <summary>
            Tags are added to this queue as and when they are reported
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.ImpinjRFID.ImpinjiObj">
            <summary>
            Exposes the impinj settings
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.ImpinjRFID.Initialise">
            <summary>
            Initialises the device ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.ImpinjRFID.Dispose">
            <summary>
            Frees up resources used by the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.ImpinjRFID.ApplySettings">
            <summary>
            Applies the settings to the reader
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.ImpinjRFID.ReadTags(System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads a set number of tags and returns an array of strings representing the UPCs of the tags
            </summary>
            <param name="numberOfTags">Number of tags to read</param>
            <param name="timeoutLength">Time in milliseconds until the read times out</param>
            <param name="period">Time period to sleep for while waiting before checking if the tags have been read.</param>
            <returns>an array of strings representing the UPCs of the tags</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.ImpinjRFID.StartReading">
            <summary>
            Starts the reader for a bulk read. The read tags are then returned after StopReading() is called
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.ImpinjRFID.StopReading">
            <summary>
            Stops a bulk read in progress and returns all the found tags.
            </summary>
            <returns>An array of the EPCs of the read rfid tags</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.ImpinjRFID.ReadBarcode(System.Int32)">
            <summary>
            Reads a single RFID tag, made to integrate into the baseapp as a barcode reader
            </summary>
            <param name="timeout">time in milliseconds without a valid read until a timeout exception is thrown</param>
            <returns>a string representing the tag's UPC</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.ImpinjRFID.#ctor">
            <summary>
            creates an instance of the ImpinjRFID class
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.ImpinjRFID.OnTagsReported(Impinj.OctaneSdk.ImpinjReader,Impinj.OctaneSdk.TagReport)">
            <summary>
            Event handler, called asynchronously when tag reports are available, processes tag report
            </summary>
            <param name="sender">The reader which generated the report.</param>
            <param name="report">The report containting the tag.</param>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.KeyenceBL1300">
            <summary>
            Class that is used to communicate with an Keyence BL1300 barcode reader
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.KeyenceBL1300.ReadBarcode(System.Int32)">
            <summary>
            Read a barcode from the barcode reader.
            </summary>
            <param name="timeout">The timeout in milliseconds to wait for a barcode read</param>
            <returns>
            The barcode
            </returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.KeyenceBL1300.Initialise">
            <summary>
            Initialises communications with the barcode reader.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.KeyenceBL1300.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.KeyenceSR650">
            <summary>
            Barcode reader class that can be used with any barcode reader that simply sends a string barcode when it is read
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.KeyenceSR650.ReadBarcode(System.Int32)">
            <summary>
            Read a barcode from the barcode reader.
            </summary>
            <param name="timeout">The timeout in milliseconds to wait for a barcode read</param>
            <returns>
            The barcode
            </returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.KeyenceSR650.Initialise">
            <summary>
            Initialises communications with the barcode reader.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.KeyenceSR650.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.GenericBarcodeReader">
            <summary>
            Barcode reader class that can be used with any barcode reader that simply sends a string barcode when it is read
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.GenericBarcodeReader.ReadBarcode(System.Int32)">
            <summary>
            Read a barcode from the barcode reader.
            </summary>
            <param name="timeout">The timeout in milliseconds to wait for a barcode read</param>
            <returns>
            The barcode
            </returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.GenericBarcodeReader.Initialise">
            <summary>
            Initialises communications with the barcode reader.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.GenericBarcodeReader.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.IFMBarcodeReader">
            <summary>
            Class that is used to communicate with an IFM barcode reader
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.IFMBarcodeReader.Initialise">
            <summary>
            Initialises communications with the barcode reader.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.IFMBarcodeReader.SetConfig(System.Int32)">
            <summary>
            Sets the barcode reader configuration to use.
            </summary>
            <param name="config">Specifies the config number to use.</param>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.IFMBarcodeReader.TriggerRead">
            <summary>
            Sends a single trigger to the barcode reader.
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.IFMBarcodeReader.ReadBarcode(System.Int32)">
            <summary>
            Read a barcode from the IFM barcode reader.
            </summary>
            <param name="timeout">The timeout in milliseconds to wait for a barcode read</param>
            <returns>
            The barcode
            </returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.IFMBarcodeReader.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaders.BarcodeReader">
            <summary>
            BarcodeReader Standard Module Definition.
            </summary>
        </member>
        <member name="F:Labman.Hardware.BarcodeReaders.BarcodeReader.NO_READ">
            <summary>
            The string to be returned by ALL barcodes if no barcode was read
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.BarcodeReader.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.BarcodeReaders.BarcodeReader.BarcodeReaderSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.BarcodeReader.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.BarcodeReader.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.BarcodeReader.ReadBarcode(System.Int32)">
            <summary>
            Read a barcode from the device
            </summary>
            <param name="timeout">The timeout in milliseconds to wait for a barcode read</param>
            <returns>The barcode</returns>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaders.BarcodeReader.TriggerRead">
            <summary>
            Method used to trigger a barcode read
            </summary>
        </member>
        <member name="T:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera">
            <summary>
            Hardware class for the labman linescan camera
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera._frameWidth">
            <summary>
            The frame width
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera._syncDegrees">
            <summary>
            The number of degrees to move per sync pulse
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera.#ctor">
            <summary>
            Type contructuctor, initialises setting file ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera.Initialise">
            <summary>
            Initialise the camera ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera.Dispose">
            <summary>
            Remove the instance
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera.SetExposure(System.Int32)">
            <summary>
            Set the camera exposure
            </summary>
            <param name="exposure">Exposure time in microseconds </param>
        </member>
        <member name="M:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera.CaptureImage">
            <summary>
            Captures an image. 
            Frame width and motor degrees per line can be set via public properties 
            </summary>
            <returns>Bitmap image</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera.GetBitmap(System.Int32,System.Int32,System.Byte[][])">
            <summary>
            Convert a byte array into a bitmap image
            </summary>
            <param name="width">Width of the image</param>
            <param name="height">Height of the image</param>
            <param name="imageData">The image data as a 2 byte array (array of arrays)</param>
            <returns>The captured image as a bitmap</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera.GetLine">
            <summary>
            Gets a single line from the camera
            </summary>
            <returns>The line as a byte array</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.LabmanLMA201717LineScanCamera.SetLEDColour(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the LED brightness channels on the camera board
            </summary>
            <param name="red">Red channel 0-1024</param>
            <param name="green">Green channel 0-1024</param>
            <param name="blue">Blue channel 0-1024</param>
        </member>
        <member name="T:Labman.Hardware.Cameras.BaumerCamera">
            <summary>
            Class used to communicate with a Baumer Ethernet Camera
            </summary>
        </member>
        <member name="T:Labman.Hardware.Cameras.BaumerCamera.CameraFrameSize">
            <summary>
            Camera Frame Size Settings
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera.SetImageSize(Labman.Hardware.Cameras.BaumerCamera.CameraFrameSize)">
            <summary>
            Sets the size of the image
            </summary>
            <param name="size">The size</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera.SetExposure(System.Int32)">
            <summary>
            Sets the camera exposure
            </summary>
            <param name="exposure">The camera exposure setting</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera.SetAutoExposure(System.Boolean)">
            <summary>
            Enabled or disables automatic exposure.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera.SetAutoGain(System.Boolean)">
            <summary>
            Sets the automatic gain.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera.CaptureImage">
            <summary>
            Captures an image from the camera
            </summary>
            <returns>A bitmap image that was captured</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera.GetSerialNumber">
            <summary>
            Gets the serial number for the camera on this index
            </summary>
            <returns>The camera serial number text</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera.SetWhiteBalance(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Sets the white balance.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <param name="red">red value.</param>
            <param name="green">green value</param>
            <param name="blue">blue value.</param>
        </member>
        <member name="T:Labman.Hardware.Cameras.BaumerCamera2">
            <summary>
            Baumer camera class that uses the Baumer GAPI2 
            </summary>
        </member>
        <member name="T:Labman.Hardware.Cameras.BaumerCamera2.BalanceWhiteMode">
            <summary>
            The possible white balance modes the camera can be put in.
            Once will perform white balance correction on the next image it takes and then automatically switch the white balance mode to off.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.#ctor">
            <summary>
            Baumer camera class that uses the Baumer GAPI2 
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.BaumerCamera2.CameraSettings">
            <summary>
            The settings of the camera.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.GetBalanceWhiteGainValues">
            <summary>
            Gets the current white balance gain coefficients from the camera.
            This will vary from camera to camera. 
            Colour cameras will likely have an All, Blue, GreenBlue, GreenRed and Red gain value.
            </summary>
            <returns>A dictionary containing all the available white balance coefficients.</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.SetBalanceWhiteMode(Labman.Hardware.Cameras.BaumerCamera2.BalanceWhiteMode)">
            <summary>
            Sets the white balance mode of the camera.
            Once will perform white balance correction on the next image the camera takes and then automatically switch the white balance mode to off.
            </summary>
            <param name="mode">The white balance mode to put the camera in.</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.CaptureImage">
            <summary>
            Captures an image and converts it to a bitmap
            </summary>
            <returns>A bitmap of the captured image</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.CaptureImageInTifFormat(System.String)">
            <summary>
            Captures an image and converts it to the tif format
            </summary>
            <param name="filename">File name to save the file as</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.SaveRGB8ImageToTiff(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Saves RGB8 Image to Tiff format
            </summary>
            <param name="fileName">Filename</param>
            <param name="bytearray">Byte array</param>
            <param name="imagewidth">Image width</param>
            <param name="imageheight">Image height</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.Dispose">
            <summary>
            Closes the data stream and device and sets isinitialised to false
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.GetExposure">
            <summary>
            Gets the current exposure time for the camera in us
            </summary>
            <returns>The exposure time of the camera in us</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.GetSerialNumber">
            <summary>
            Gets the serial number for the camera on this index
            </summary>
            <returns>The camera serial number text</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.Initialise">
            <summary>
            Initialise the interface (if it isn't already initialized), initialise the device and opens the data stream
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.SetAutoExposure(System.Boolean)">
            <summary>
            Enable/disable auto exposure
            </summary>
            <param name="enable">True to enable, false to disable</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.SetAutoGain(System.Boolean)">
            <summary>
            Sets auto gain property
            </summary>
            <param name="enable">true to enable false to disable</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.SetExposure(System.Int32)">
            <summary>
            Sets the exposure time in us
            </summary>
            <param name="exposure">Esposure time in us</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.SetGain(System.Double)">
            <summary>
            Sets the exposure time in us
            </summary>
            <param name="gain">Gain in dB</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.SetWhiteBalance(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Sets the white balance
            </summary>
            <param name="enable">Enable</param>
            <param name="red">Red balance value</param>
            <param name="green">Green balance value</param>
            <param name="blue">Blue balance value</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.SetGainValues(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets Gain Values
            </summary>
            <param name="all">Gain all value</param>
            <param name="blue">Gain blue value</param>
            <param name="greenBlue">Gain green blue value</param>
            <param name="greenRed">Gain green red value</param>
            <param name="red">Gain red value</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.BaumerCamera2.SetGamma(System.Double)">
            <summary>
            Sets the gamma
            </summary>
            <param name="gamma">The value to set the gamma to</param>
        </member>
        <member name="T:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface">
            <summary>
            This class provides a hardware interface with any connected Baumer Cameras
            </summary>
            <remarks>
            The Baumer camera should be connected to the PC using an Ethernet cross over cable.
            The following network settings should be set on the PC:
            IP Address: 169.254.0.1
            Subnet Mask: 255.255.0.0
            </remarks>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface._instance">
            <summary>
            Provides a singleton instance of the BaumerCameraInterface
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface._instancelock">
            <summary>
            Lock used to ensure only a single instance is created in a multi-threaded environment
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface._objInterface">
            <summary>
            Baumer Camera System NIC camera interface
            </summary>
            <remarks>
            We are only interested in cameras that are connected via Ethernet
            </remarks>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface._camerasList">
            <summary>
            List of connected cameras
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface._testImages">
            <summary>
            Array of test image used in simulation mode
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface._testImageIndex">
            <summary>
            The index of the current test image being displayed
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.#ctor">
            <summary>
            Prevents a default instance of the <see cref="T:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface"/> class from being created.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.Cameras">
            <summary>
            Property that exposes the cameras collection
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.Instance">
            <summary>
            Gets the single BaumerCameraInterface instance.
            </summary>            
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.Initialise">
            <summary>
            Initialises this instance.
            </summary>
            <returns>A value indicating whether the interface was successfully initialised</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.GetCameraCount">
            <summary>
            Gets the number of connected cameras.
            </summary>
            <returns>Camera count</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.GetCameraImage(System.Int32)">
            <summary>
            Gets a snapshot image from the specified image
            </summary>
            <param name="cameraIndex">Index of the camera.</param>
            <returns>Current snapshot image</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.ReleaseResources">
            <summary>
            Releases the interface and camera resources.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera">
            <summary>
            Class that provides an interface to a single Baumer Cameraw
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera.CaptureImageTimeout">
            <summary>
            The amount of time (in seconds) that we wait to recieve an image from the camera
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera.Camera">
            <summary>
            The Baumer Camera object
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera._colourCamera">
            <summary>
            Flag that indicates whether this is a colour camera
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera._lastCameraImage">
            <summary>
            The last image taken by the camera
            </summary>
        </member>
        <member name="F:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera._capturingImage">
            <summary>
            Flag that indicates if we are currently capturing an image.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera.SerialNumber">
            <summary>
            Gets or sets the camera's serial number.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera.#ctor(BGAPI.System,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera"/> class.
            </summary>
            <param name="objInterface">The system object interface.</param>
            <param name="cameraIndex">Index of the camera.</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera.GrabSingleImage">
            <summary>
            Takes a snapshot and returns the image
            </summary>
            <returns>The snapshot image. NULL if the image couldn't be taken</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera.StartCameraCapture">
            <summary>
            Starts the camera capturing images.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera.StopCameraCapture">
            <summary>
            Stops the camera capturing images.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera.SetupCamera(BGAPI.System,System.Int32)">
            <summary>
            Initialises the specified camera.
            </summary>
            <param name="objInterface">The obj interface.</param>
            <param name="cameraIndex">Index of the camera.</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface.BaumerCamera.ImageCallback(System.Object,BGAPI.Image@)">
            <summary>
            Callback function for when a new image is available from the camera
            </summary>
            <param name="callBackOwner">The call back owner.</param>
            <param name="image">The image.</param>
            <returns>Returns a result indicating whether the image was successfully recieved</returns>
        </member>
        <member name="T:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface2">
            <summary>
            Class to interface with Baumer camera using BGAPI2 initially only over ethernet though some of the groundwork is added for USB3
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface2.IsInitialised">
            <summary>
            Indicates if the interface has been initialised yet
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface2.Devices">
            <summary>
            Contains all the devices found at initialisation
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface2.DevicesById">
            <summary>
            Contains all the devices found at initialisation by ID
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface2.DevicesBySN">
            <summary>
            Contains all the devices found at initialisation by serial no.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface2.Initialise">
            <summary>
            Initialises the interface
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Baumer.BaumerCameraInterface2.Dispose">
            <summary>
            Releases resources and uninitialises
            </summary>
        </member>
        <member name="T:Labman.Hardware.Cameras.Camera">
            <summary> 
            Camera interface class
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.Camera.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.Camera.CameraSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Camera.#ctor">
            <summary> 
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Camera.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.Camera.SetExposure(System.Int32)">
            <summary>
            Sets the camera exposure
            </summary>
            <param name="exposure">The camera exposure setting</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.Camera.SetAutoExposure(System.Boolean)">
            <summary>
            Enabled or disables automatic exposure.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.Camera.SetAutoGain(System.Boolean)">
            <summary>
            Enabled or disables automatic gain.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.Camera.CaptureImage">
            <summary>
            Captures an image from the camera
            </summary>
            <returns>A bitmap image that was captured</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.Camera.SetWhiteBalance(System.Boolean,System.Single,System.Single,System.Single)">
            <summary>
            Sets the white balance.
            </summary>
            <param name="enable">if set to <c>true</c> [enable].</param>
            <param name="red">red value.</param>
            <param name="green">green value</param>
            <param name="blue">blue value.</param>
        </member>
        <member name="T:Labman.Hardware.Cameras.TriggerModes">
            <summary>
            The trigger modes for the cognex camera
            </summary>
        </member>
        <member name="T:Labman.Hardware.Cameras.AutoExposureModes">
            <summary>
            the auto exposure modes for the cognex camera
            </summary>
        </member>
        <member name="T:Labman.Hardware.Cameras.LightControlModes">
            <summary>
            the light control modes for the cognex camera
            </summary>
        </member>
        <member name="T:Labman.Hardware.Cameras.CognexCamera">
            <summary>
            Class to communicate with a cognex camera over ethernet
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.CognexCamera.Username">
            <summary>
            Exposes the username used to connect to the camera
            </summary>
        </member>
        <member name="P:Labman.Hardware.Cameras.CognexCamera.Password">
            <summary>
            Exposes the password used to connect to the camera
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.#ctor">
            <summary>
            Sets up instance
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.#ctor(System.String,System.String)">
            <summary>
            Creates instance and sets username and password
            </summary>
            <param name="username">Username to use when connecting to the camera</param>
            <param name="password">Password to use when connecting to the camera</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates instance and sets up hostname, username and password
            </summary>
            <param name="hostName">Host name or ip address of camera</param>
            <param name="username">Username to use when connecting to the camera</param>
            <param name="password">Password to use when connecting to the camera</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.Initialise">
            <summary>
            Sets up and connects to camera
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.GetStringValue(System.String)">
            <summary>
            Gets a string value from the insight spreadsheet
            </summary>
            <param name="address">Cell address or symbolic tag</param>
            <returns>Cell content</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.GetType(System.String)">
            <summary>
            Gets the type of a value in the insight spreadsheet
            </summary>
            <param name="symbolicTag">The sybolic tag of the value</param>
            <returns>The type of the value</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetValue(System.String,System.String)">
            <summary>
            Sets a value of unknown type in the insight spreadsheet
            </summary>
            <param name="symbolicTag">Symbolic tag</param>
            <param name="value">Value to write</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetString(System.String,System.String)">
            <summary>
            Sets a string in the insight spreadsheet
            </summary>
            <param name="symbolicTag">Symbolic tag of the cell</param>
            <param name="value">Value to write</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetInteger(System.String,System.String)">
            <summary>
            Sets an integer in the insight spreadsheet
            </summary>
            <param name="symbolicTag">Symbolic tag of the cell</param>
            <param name="value">Value to write</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetInteger(System.String,System.Int32)">
            <summary>
            Sets an integer value in the insight spreadsheet
            </summary>
            <param name="symbolicTag">Symbolic tag of the cell</param>
            <param name="value">Value to write</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetFloat(System.String,System.String)">
            <summary>
            Sets a float in the insight spreadsheet
            </summary>
            <param name="symbolicTag">Symbolic tag of the cell</param>
            <param name="value">Value to write</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetFloat(System.String,System.Single)">
            <summary>
            Sets a float in the insight spreadsheet
            </summary>
            <param name="symbolicTag">Symbolic tag of the cell</param>
            <param name="value">Value to write</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetRegion(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Sets a region in the insight spreadsheet
            </summary>
            <param name="symbolicTag">Symbolic tag of the cell</param>
            <param name="row">The x-offset of the origin, in fixture coordinates</param>
            <param name="col">The y-offset of the origin, in fixture coordinates</param>
            <param name="high">The dimension along the region's y-axis</param>
            <param name="wide">The dimension along the region's x-axis</param>
            <param name="angle">The orientatoin, in fixture coordinates</param>
            <param name="curve">The angular deviation between the region's x-axis and the opposing boundary line</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetBoolean(System.String,System.Boolean)">
            <summary>
            Sets a boolean value in the insight spreadsheet
            </summary>
            <param name="symbolicTag">Symbolic tag of the cell</param>
            <param name="value">Value to set in the cell</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.GetIntValue(System.String)">
            <summary>
            Gets an integer value from the insight spreadsheet
            </summary>
            <param name="address">Cell address or symbolic tag</param>
            <returns>Cell content</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.GetFloatValue(System.String)">
            <summary>
            Gets a float value from the insight spreadsheet
            </summary>
            <param name="address">Cell address or symbolic tag</param>
            <returns>Cell content</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.GetDoubleValue(System.String)">
            <summary>
            Gets a double value from the insight spreadsheet
            </summary>
            <param name="address">Cell address or symbolic tag</param>
            <returns>Cell content</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.GetBoolValue(System.String)">
            <summary>
            Gets a boolean value from the insight spreadsheet
            </summary>
            <param name="address">Cell address or symbolic tag</param>
            <returns>Cell content</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.TriggerCamera">
            <summary>
            Send a trigger event to the camera and update the in-sight spreadsheet
            </summary>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.CaptureImage">
            <summary>
            Captures an image from the camera
            </summary>
            <returns>A bitmap image from the camera</returns>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetAutoExposure(System.Boolean)">
            <summary>
            Sets the auto exposure to continuous mode or disabled
            </summary>
            <param name="enable">continuous if true, disabled if false</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetAutoExposure(Labman.Hardware.Cameras.AutoExposureModes)">
            <summary>
            Sets the auto exposure
            </summary>
            <param name="mode">Auto exposure mode</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetLightControlMode(Labman.Hardware.Cameras.LightControlModes)">
            <summary>
            Sets the in built light control mode
            </summary>
            <param name="mode">Light control mode</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.SetExposure(System.Int32)">
            <summary>
            Sets the exposure in milliseconds of the camera
            </summary>
            <param name="exposure">Exposure time in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Cameras.CognexCamera.Dispose">
            <summary>
            Releases resources for disposing
            </summary>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.HettichCentrifuge">
            <summary>
            Hardware control class for a Hettich Centrifuge
            </summary>
            <seealso cref="T:Labman.Hardware.Centrifuges.Centrifuge" />
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Centrifuges.HettichCentrifuge"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.HettichCentrifuge.ErrorCode">
            <summary>Error codes</summary>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.HettichCentrifuge.HatchState">
            <summary>The state of the hatch</summary>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.HettichCentrifuge.RotorSpeed">
            <summary>The rotor speed options</summary>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.HettichCentrifuge.RotorState">
            <summary>The rotor states</summary>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.HettichCentrifuge.RunningState">
            <summary>The centrifuge running state</summary>
        </member>
        <member name="P:Labman.Hardware.Centrifuges.HettichCentrifuge.CentrifugeSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.Close(System.Int32)">
            <summary>
            Closes the centrifuge
            </summary>
            <param name="pollPeriod">The period between each check whether the centrifuge is closed</param>
            <exception cref="T:Labman.Hardware.CentrifugeException">Timeout occured waiting for centrifuge to open</exception>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.Dispose">
            <summary>
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.GetErrorCode">
            <summary>
            Gets the current error codes
            </summary>
            <returns>The current error codes</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.GetHatchState(Labman.Hardware.Centrifuges.HettichCentrifuge.HatchState)">
            <summary>
            Determines whether the centrifuge is open.
            </summary>
            <param name="simulationState">The result to return when simulating</param>
            <returns>Whether the centrifuge is open</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.GetRotorState">
            <summary>
            Gets the state of the rotor.
            </summary>
            <returns>The movement state of the rotor</returns>
            <exception cref="T:Labman.Hardware.CentrifugeException">Failed to read Hettich centrifuge rotor positioning state</exception>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.GetRunningState(Labman.Hardware.Centrifuges.HettichCentrifuge.RunningState)">
            <summary>Determines whether the centrifuge is running.</summary>
            <param name="simulatedValue">The value to return when simulating</param>
            <returns>Whether the centrifuge is running</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
            <exception cref="T:Labman.Hardware.CentrifugeException">The communication settings have not yet been setup for this device</exception>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.MoveToPosition(System.Int32,Labman.Hardware.Centrifuges.HettichCentrifuge.RotorSpeed,System.Boolean,System.Int32)">
            <summary>
            Moves the rotor to a position.
            </summary>
            <param name="position">The position.</param>
            <param name="speed">The speed to move at</param>
            <param name="waitForCompletion">if set to <c>true</c> [wait for completion].</param>
            <param name="timeout">The timeout [ms]</param>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.Open(System.Int32)">
            <summary>
            Opens the centrifuge
            </summary>
            <param name="pollPeriod">The period between completion checks [ms]</param>
            <exception cref="T:Labman.Hardware.CentrifugeException">Timeout occured waiting for centrifuge to open</exception>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.SetSpeed(System.Int32)">
            <summary>Sets the run speed of the centrifuge</summary>
            <param name="speed">The speed at which to run the centrifuge in RPM</param>
            <returns>TRUE if the centrifuge was started OK and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.Start(System.Int32)">
            <summary>
            Starts the centrifuge
            </summary>
            <param name="speed">The speed at which to run the centrifuge in RPM</param>
            <returns>
            Bool - TRUE if the centrifuge was started OK and FALSE otherwise
            </returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.Start">
            <summary>
            Starts the centrifuge
            </summary>
            <returns>
            Bool - TRUE if the centrifuge was started OK and FALSE otherwise
            </returns>
            <exception cref="T:Labman.Hardware.CentrifugeException">Timeout occured waiting for centrifuge to start</exception>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.Stop(Labman.Hardware.Centrifuges.Centrifuge.WaitUntilStopped)">
            <summary>
            Stops the centrifuge
            </summary>
            <param name="wait">The wait.</param>
            <returns>
            Bool - TRUE if the centrifuge was stopped OK and FALSE otherwise
            </returns>
            <exception cref="T:Labman.Hardware.CentrifugeException">Timeout occured waiting for centrifuge to stop</exception>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HettichCentrifuge.StopRotorPositioning">
            <summary>
            Terminates rotor positioning, therefore disengaging the magnetic brake or indexing motor
            </summary>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker">
            <summary>
            Hardware control functionality for QInstruments' BioShake 3000 Shaker
            </summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.MaximumSpeed">
            <summary>
            The maximum achievable speed of this model of shaker [rpm]
            </summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.MinimumSpeed">
            <summary>
            The minimum achievable speed of this model of shaker [rpm]
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.ShakeState">
            <summary>
            Enumeration of shaker operation states
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.Dispose">
            <summary>
            Closes comms to device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.GetErrors">
            <summary>
            Gets a list of active error codes from the shaker
            </summary>
            <returns>A list of active error codes</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.GetShakeState">
            <summary>
            Gets the current shaking status of the shaker
            </summary>
            <returns>The current shaking status of the shaker</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.Home(Labman.Hardware.Centrifuges.Centrifuge.WaitUntilStopped)">
            <summary>
            Home the shaker to its stop position
            </summary>
            <param name="wait">Whether to wait for the home to finish</param>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.SetSpeed(System.Int32)">
            <summary>
            Sets the speed of the shaker
            Can be used while shaking
            </summary>
            <param name="speed">The speed to set [RPM]</param>
            <returns>true</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.Start">
            <summary>
            Starts the shaker spinning at the currently set speed
            </summary>
            <returns>true</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.Stop(Labman.Hardware.Centrifuges.Centrifuge.WaitUntilStopped)">
            <summary>
            Stops the shaker spinning and homes it
            </summary>
            <param name="wait">Whether to wait for the deceleration and home to finish</param>
            <returns>true</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.QInstrumentsBioShake3000Shaker.SendAndReceiveCommand(System.String)">
            <summary>
            Sends a command to the device and strips the \r\n from the reply
            </summary>
            <param name="command">The command to send</param>
            <returns>The command reply</returns>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.Centrifuge">
            <summary>
            Centrifuge standard module definition
            </summary>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.Centrifuge.WaitUntilStopped">
            <summary>
            Enumeration defines the possible wait for centrifuge stop states
            </summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.Centrifuge.WaitUntilStopped.DoNotWait">
            <summary>Do not wait for centrifuge to stop</summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.Centrifuge.WaitUntilStopped.Wait">
            <summary>Wait for centrifuge to stop</summary>
        </member>
        <member name="P:Labman.Hardware.Centrifuges.Centrifuge.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.Centrifuges.Centrifuge.CentrifugeSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.Centrifuge.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.Centrifuge.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.Centrifuge.Start">
            <summary>
            Starts the centrifuge
            </summary>
            <returns>Bool - TRUE if the centrifuge was started OK and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.Centrifuge.Start(System.Int32)">
            <summary>
            Starts the centrifuge
            </summary>
            <param name="speed">The speed at which to run the centrifuge in RPM</param>
            <returns>Bool - TRUE if the centrifuge was started OK and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.Centrifuge.Stop(Labman.Hardware.Centrifuges.Centrifuge.WaitUntilStopped)">
            <summary>
            Stops the centrifuge
            </summary>
            <param name="wait">The wait.</param>
            <returns>
            Bool - TRUE if the centrifuge was started OK and FALSE otherwise
            </returns>
            <exception cref="T:Labman.Hardware.CentrifugeException">This method has not been implemented by this type of centrifuge</exception>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.Centrifuge.SetSpeed(System.Int32)">
            <summary>
            Sets the run speed of the centrifuge
            </summary>
            <param name="speed">The speed at which to run the centrifuge in RPM</param>
            <returns>Bool - TRUE if the centrifuge was started OK and FALSE otherwise</returns>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.HauschildDAC400">
            <summary>
            This module is used to control a Haudchild dual axis centrifuge (DAC).
            </summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.HauschildDAC400.ErrorStatusOk">
            <summary>
            The error status returned from the mixer when everything is ok
            </summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.HauschildDAC400.RunStatusRunning">
            <summary>
            The run status returned from the mixer when the mixer is running
            </summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.HauschildDAC400.RunStatusStopped">
            <summary>
            The run status returned from the mixer when the mixer has stopped running
            </summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.HauschildDAC400.ReadyStatusOk">
            <summary>
            The ready status ok
            </summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.HauschildDAC400.WaitTimeout">
            <summary>
            The max amount of time (seconds) that we wait for the DAC to successfully start or stop running
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.Initialise">
            <summary>
            Initialises the communication link to the DAC and tests the link is working correctly by sending the ON command
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.Start">
            <summary>
            Sends a command to start the centrifuge at the most recently set speed
            </summary>
            <returns>TRUE if successful and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.Stop(Labman.Hardware.Centrifuges.Centrifuge.WaitUntilStopped)">
            <summary>
            Sends a command to stop the centrifuge
            </summary>
            <param name="wait">The wait.</param>
            <returns>
            TRUE if successful and FALSE otherwise
            </returns>
            <exception cref="T:Labman.Hardware.CentrifugeException">
            Failed to receive a valid reply after sending the stop command
            or
            There was an error on the DAC when attempting to stop
            </exception>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.SetSpeed(System.Int32)">
            <summary>
            Sends a command to set the speed to the value passed to the function
            </summary>
            <param name="speed">The speed in RPM, must be between 800 and 2800 RPM</param>
            <returns>TRUE if successful and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.SendONCommand">
            <summary>
            Sends a command to the centrifuge to activate the computer communications interface
            </summary>
            <returns>TRUE if successful and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.ClearError">
            <summary>
            Clears the error status of the centrifuge
            </summary>
            <returns>TRUE if successful and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.SendInitDriveCommand">
            <summary>
            Sends the initialize drive command.
            </summary>
            <returns>TRUE if successful and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.ReadyStatus">
            <summary>
            Returns the current ready status of the DAC
            </summary>
            <returns>The ready status code as a number</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.ErrorStatus">
            <summary>
            Returns the current error status of the DAC
            </summary>
            <returns>The error status code as a number</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.HauschildDAC400.RunStatus">
            <summary>
            Returns the current run status of the DAC
            </summary>
            <returns>The run status code as a number</returns>
        </member>
        <member name="T:Labman.Hardware.Centrifuges.SiasIxion">
            <summary>
            Implements an interface class for the Sias Ixion centrifuge
            </summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.SiasIxion.NoError">
            <summary>No error</summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.SiasIxion.ConnectError">
            <summary>Connect error: Unable to connect to can net</summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.SiasIxion.NoDevice">
            <summary>No device error: unable to create a CanDevice instance</summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.SiasIxion.NoSerial">
            <summary>No serial: Unable to find device on can bus</summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.SiasIxion.PrepareTimeout">
            <summary>Prepare timeout: Timeout while waiting for prepared</summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.SiasIxion.StartTimeout">
            <summary>Start timeout: Timeout while waiting for not prepared</summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.SiasIxion.ExecuteTimeout">
            <summary>Prepare timeout: timeout while waiting for end of execution</summary>
        </member>
        <member name="F:Labman.Hardware.Centrifuges.SiasIxion.ModuleError">
            <summary>Module error: module reported an error on execution</summary>
        </member>
        <member name="P:Labman.Hardware.Centrifuges.SiasIxion.ModuleID">
            <summary>
            Gets or sets the module identifier.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Centrifuges.SiasIxion.ModuleName">
            <summary>
            Gets or sets the name of the module.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.#ctor">
            <summary>
            Initialises a new instance of the Sias centrifuge class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.Initialise">
            <summary>
            Initialises the centrifuge and opens up the communication interface
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.Stop(Labman.Hardware.Centrifuges.Centrifuge.WaitUntilStopped)">
            <summary>
            Sends a stop command to the centrifuge
            </summary>
            <param name="wait">Defines whether execution progress should wait for the centrifuge to stop before continuing</param>
            <returns>True if the centrifuge stop command was issued OK and false otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.Dispose">
            <summary>
            Called when disposing of the object
            </summary>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.Start(System.Int16,System.Int16,System.Int16)">
            <summary>
            Starts the centrifuge for a specified time period at a defined speed
            </summary>
            <param name="speed">The speed in RPM to run the centrifuge</param>
            <param name="ramp">The acceleration rate of the centrifuge</param>
            <param name="time">The time in seconds to run the centrifuge at full speed for</param>
            <returns>Flag indicating whether the centrifue was started</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.RequestModuleInformation">
            <summary>
            Request module information 
            </summary>
            <returns>True if a module was found on CAN Bus otherwise false</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.ErrorText(System.Int32)">
            <summary>
            Translate error code to readable text
            </summary>
            <param name="code">error code</param>
            <returns>readable text</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.OpenLid">
            <summary>
            Opens the centrifuge lid
            </summary>
            <returns>An integer representing an error code, if 0 then no error</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.CloseLid">
            <summary>
            Closes the centrifuge lid
            </summary>
            <returns>An integer representing an error code, if 0 then no error</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.GetSpeed">
            <summary>
            Gets the current speed of the centrifuge
            </summary>
            <returns>An integer representing the current speed in RPM</returns>
        </member>
        <member name="M:Labman.Hardware.Centrifuges.SiasIxion.MoveToPosition(System.Byte)">
            <summary>
            Moves the centrifuge to a specific position, the centrifuge has two positions A and B
            </summary>
            <param name="position">The position.</param>
            <returns>
            An integer representing an error code, if 0 then no error
            </returns>
        </member>
        <member name="T:Labman.Hardware.ElectricGrippers.ElectricGripper">
            <summary>
            ElectricGripper hardware module base class
            </summary>
        </member>
        <member name="T:Labman.Hardware.ElectricGrippers.ElectricGripper.GripDirection">
            <summary>
            Enumeration defines possible directions to grip
            </summary>
        </member>
        <member name="T:Labman.Hardware.ElectricGrippers.ElectricGripper.GripperStatus">
            <summary>
            Gripper status struct
            </summary>
        </member>
        <member name="F:Labman.Hardware.ElectricGrippers.ElectricGripper.GripperStatus.Position">
            <summary>
            Position of the gripper
            </summary>
        </member>
        <member name="F:Labman.Hardware.ElectricGrippers.ElectricGripper.GripperStatus.Referenced">
            <summary>
            Boolean indicating wether gripper is referenced
            </summary>
        </member>
        <member name="F:Labman.Hardware.ElectricGrippers.ElectricGripper.GripperStatus.InMotion">
            <summary>
            Boolean indicating wether gripper is in motion
            </summary>
        </member>
        <member name="F:Labman.Hardware.ElectricGrippers.ElectricGripper.GripperStatus.ProgramSequence">
            <summary>
            Program sequence bit
            </summary>
        </member>
        <member name="F:Labman.Hardware.ElectricGrippers.ElectricGripper.GripperStatus.Warning">
            <summary>
            Boolean indicating wether a warning is present
            </summary>
        </member>
        <member name="F:Labman.Hardware.ElectricGrippers.ElectricGripper.GripperStatus.Error">
            <summary>
            Boolean indicating wether an error is present
            </summary>
        </member>
        <member name="F:Labman.Hardware.ElectricGrippers.ElectricGripper.GripperStatus.Brake">
            <summary>
            Boolean indicating wether the brake is active
            </summary>
        </member>
        <member name="F:Labman.Hardware.ElectricGrippers.ElectricGripper.GripperStatus.MotionBlocked">
            <summary>
            Boolean indicating wether motion is blocked (object gripped)
            </summary>
        </member>
        <member name="F:Labman.Hardware.ElectricGrippers.ElectricGripper.GripperStatus.PositionReached">
            <summary>
            Boolean indicating wether the target position has been reached
            </summary>
        </member>
        <member name="P:Labman.Hardware.ElectricGrippers.ElectricGripper.CommunicationInterface">
            <summary>
            The gripper classes have access to a communcations interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.ElectricGrippers.ElectricGripper.ElectricGripperSettings">
            <summary>
            The settings property exposes the device isntance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.ElectricGripper.#ctor">
            <summary>
            Type constructor, initilises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.ElectricGripper.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.ElectricGripper.Home(System.Boolean,System.Int32)">
            <summary>
            Home the gripper (zero position)
            </summary>
            <param name="waitForCompletion">Wait for completion</param>
            <param name="timeout">The time to wait in seconds</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.ElectricGripper.StopMovement">
            <summary>
            Stops the gripper movement
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.ElectricGripper.Grip(Labman.Hardware.ElectricGrippers.ElectricGripper.GripDirection,System.Double)">
            <summary>
            Starts gripping
            </summary>
            <param name="direction">The direction to grip</param>
            <param name="gripStrength">% Strength to grip</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.ElectricGripper.GetStatus">
            <summary>
            Gets the current status
            </summary>
            <returns>The status of the gripper</returns>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.ElectricGripper.Move(System.Double,System.Boolean,System.Int32)">
            <summary>
            Moves jaws to speficied width
            </summary>
            <param name="targetPosition">The target position</param>
            <param name="waitForMoveToComplete">Wait for move to complete</param>
            /// <param name="timeout">The time in seconds to wait</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.ElectricGripper.Reboot(System.Byte[])">
            <summary>
            Reboots the device
            </summary>
            <param name="previousCommand">The previous command</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.ElectricGripper.SyncIO">
            <summary>
            Syncs the IO
            </summary>
        </member>
        <member name="T:Labman.Hardware.ElectricGrippers.SchunkElectricGripper">
            <summary>
            Control class for Schunk Gripper
            </summary>
            <remarks>Schunk Gripper ID must be set. This can be done in the the device settings</remarks>
        </member>
        <member name="T:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.Commands">
            <summary>
            Enumeration of possible commands
            </summary>
        </member>
        <member name="T:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.Messages">
            <summary>
            Enumeration of status messages
            </summary>
        </member>
        <member name="T:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.Errors">
            <summary>
            Enumeration of error codes
            </summary>
        </member>
        <member name="F:Labman.Hardware.ElectricGrippers.SchunkElectricGripper._errorCodes">
            <summary>
            Define device error codes 
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.#ctor">
            <summary>
            Type constructor, initialises setting file ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to use
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.Move(System.Double,System.Boolean,System.Int32)">
            <summary>
            Moves the jaws to the specified width
            </summary>
            <param name="targetWidth">Width to move jaws to</param>
            <param name="waitForMoveToComplete">Wait for move to complete</param>
            <param name="timeout">The time in seconds to wait</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.Home(System.Boolean,System.Int32)">
            <summary>
            Homes the gripper.This will close the gripper until it feels resistance and set the zero.
            </summary>
            <param name="waitForCompletion">Wait for completion</param>
            <param name="timeout">The time to wait in seconds</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.StopMovement">
            <summary>
            This will stop whatever process the gripper is currently doing. If gripping it will set current to 0.
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.Reboot(System.Byte[])">
            <summary>
            This will restart the device
            </summary>
            <param name="previousCommand">The previous command</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.Grip(Labman.Hardware.ElectricGrippers.ElectricGripper.GripDirection,System.Double)">
            <summary>
            This will initiate a grip. The jaws will move until they encounter a resistance that generates the strength limit as provided. Negative values will perform the same operation in reverse, opening them until resistance is met. A limit of 1-2 Amps should be adequate for most gripping applications. Anything higher may generate excess waste heat.
            </summary>
            <param name="direction">The direction to grip</param>
            <param name="gripStrengthPercentage">The % grip strength</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.OpenGripper(System.Boolean,System.Int32)">
            <summary>
            Opens the gripper to maximum width
            </summary>
            <param name="waitForCompletion">Wait for completion</param>
            <param name="timeout">The time to wait for completion</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.GetStatus">
            <summary>
            Gets the gripper position in mm
            </summary>
            <returns>The gripper position (width between jaws) in mm</returns>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.ClearErrors">
            <summary>
            Clears errors/warnings on the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.GetIOState(System.Int32)">
            <summary>
            Gets the Input state of an IO port
            </summary>
            <param name="ioInput">The port to get</param>
            <returns>True if high, false if low</returns>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.SetIOState(System.Int32,System.Boolean)">
            <summary>
            Sets the output state of an IO output port
            </summary>
            <param name="ioInput">The output port to get</param>
            <param name="value">The state to set the pin. True for high, false for low.</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.SyncIO">
            <summary>
            Sync the device IO with controller
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.SetVelocity(System.Double)">
            <summary>
            Sets the velocity
            </summary>
            <param name="speed">Speed in mm/s</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.SetAcceleration(System.Double)">
            <summary>
            Sets the acceleration
            </summary>
            <param name="acceleration">Acceleration in mm/s^2</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.SetCurrent(System.Double)">
            <summary>
            Sets the current
            </summary>
            <param name="current">The current in Amps</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.ProcessGripperResponse(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Checks the reponse from the gripper is within bounds (no errors etc)
            </summary>
            <param name="response">The response from the gripper</param>
            <param name="originalCommand">The original command</param>
            <param name="critical">Whether to throw an error on bad packet</param>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.ValidatePacket(System.Byte[])">
            <summary>
            Validates the packet via CRC16 checksum
            </summary>
            <param name="data">The data to check</param>
            <returns>True if valid packet, false if not</returns>
        </member>
        <member name="M:Labman.Hardware.ElectricGrippers.SchunkElectricGripper.FormatCommand(System.Byte[])">
            <summary>
            Formats the command ready to send to the gripper
            </summary>
            <param name="command">The command and parameter bytes</param>
            <returns>The full command including header and checksum</returns>
        </member>
        <member name="T:Labman.Hardware.ElectricGripperException">
            <summary>
            This class defines a speficic type of exceptions for use only by grippers
            </summary>
        </member>
        <member name="M:Labman.Hardware.ElectricGripperException.#ctor(System.String)">
            <summary>
            The constructor overrides the base labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies the the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.ElectricGripperException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor">
            <summary>
            Hardware Class for the NTI Enviromux E-Micro TRH(P) Environment Sensor
            </summary>
        </member>
        <member name="T:Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor.SensorType">
            <summary>
            Enumeration of possible sensor types
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="P:Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor.EnvironmentSensorSettings">
            <summary>
            Device Settings
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor.Initialise">
            <summary>
            Initialises the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor.Dispose">
            <summary>
            Disposes of the instance
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor.Temperature">
            <summary>
            Gets the current temperature using the internal sensor
            </summary>
            <returns>The temperature, the units can be configured using the device web interface</returns>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor.Humidity">
            <summary>
            Gets the current humidity using the internal sensor
            </summary>
            <returns>The humidity</returns>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor.GetDeviceInfo">
            <summary>
            Gets all of the device info. This is presented in the same format as the JSON returned by the API.
            </summary>
            <returns>The device info</returns>
        </member>
        <member name="T:Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT">
            <summary>
            The Rotronic HL-NT datalogger device software model
            </summary>
            <seealso cref="T:Labman.Hardware.EnvironmentSensors.EnvironmentSensor" />
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
            <exception cref="T:System.NotImplementedException">Clear up all the memory space</exception>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT.Temperature(System.Int32)">
            <summary>
            Temperatures the specified channel number.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <returns>The temperature from the selected sensor channel</returns>
            <exception cref="T:Labman.Hardware.EnvironmentSensorException">
            Channel number out of range! Please specify channel 1 - 7
            or
            Choose channel number from 1 to 7
            or
            Response from the device was not in the expected format
            </exception>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT.Humidity(System.Int32)">
            <summary>
            Humidities the specified channel number.
            </summary>
            <param name="channelNumber">The channel number.</param>
            <returns>The humidity from the selected sensor channel</returns>
            <exception cref="T:Labman.Hardware.EnvironmentSensorException">
            Channel number out of range! Please specify channel 1 - 7
            or
            Choose channel number from 1 to 7
            or
            Response from the device was not in the expected format
            </exception>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT.CloseDevice">
            <summary>
            Closes the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT.SendReceiveData(System.Byte[])">
            <summary>
            Sends the receive data.
            </summary>
            <param name="command">The command.</param>
            <returns>The byte array response from the device</returns>
        </member>
        <member name="T:Labman.Hardware.EnvironmentSensors.CometT7511EnvironmentSensor">
            <summary>
            Provides functionality to communicate with a Comet T7511 environment sensor. Further information on this sensor can be
            found at http://www.cometsystem.cz/products/reg-T7511#download
            </summary>
        </member>
        <member name="F:Labman.Hardware.EnvironmentSensors.CometT7511EnvironmentSensor.TemperatureRegisterAddress">
            <summary>
            The hexadecimal location of the temperature address
            </summary>
        </member>
        <member name="F:Labman.Hardware.EnvironmentSensors.CometT7511EnvironmentSensor.PressureRegisterAddress">
            <summary>
            The hexadecimal location of the pressure address
            </summary>
        </member>
        <member name="F:Labman.Hardware.EnvironmentSensors.CometT7511EnvironmentSensor.HumidityRegisterAddress">
            <summary>
            The hexadecimal location of the humidity address
            </summary>
        </member>
        <member name="F:Labman.Hardware.EnvironmentSensors.CometT7511EnvironmentSensor._modBusProtocol">
            <summary>
            Stores the underlying connection to the device as a MODBUS connection to allow access to register functions
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.CometT7511EnvironmentSensor.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.CometT7511EnvironmentSensor.Temperature">
            <summary>
            Queries the temperature from the device and returns it
            </summary>
            <returns>The current measured temperature</returns>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.CometT7511EnvironmentSensor.AtmosphericPressure">
            <summary>
            Queries the pressure from the device and returns it
            </summary>
            <returns>The current measured pressure</returns>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.CometT7511EnvironmentSensor.Humidity">
            <summary>
            Queries the humidity from the device and returns it
            </summary>
            <returns>The current measured humidity</returns>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.CometT7511EnvironmentSensor.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.EnvironmentSensors.EnvironmentSensor">
            <summary>
            Environment Sensor standard module definition. Environment sensors are anything which monitor physical properties of the robot environment
            such as temperature, humidity, pressure etc..
            </summary>
        </member>
        <member name="P:Labman.Hardware.EnvironmentSensors.EnvironmentSensor.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.EnvironmentSensors.EnvironmentSensor.EnvironmentSensorSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.EnvironmentSensor.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.EnvironmentSensor.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.EnvironmentSensor.Temperature">
            <summary>
            Reads the temperature from the device
            </summary>
            <returns>The temperature</returns>
            <exception cref="T:Labman.Hardware.EnvironmentSensorException">This method has not been implemented by this type of EnvironmentSensor</exception>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.EnvironmentSensor.Humidity">
            <summary>
            Reads the humidity from the device
            </summary>
            <returns>The humidity</returns>
            <exception cref="T:Labman.Hardware.EnvironmentSensorException">This method has not been implemented by this type of EnvironmentSensor</exception>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.EnvironmentSensor.AtmosphericPressure">
            <summary>
            Reads the atmospheric pressure from the device
            </summary>
            <returns>The pressure</returns>
            <exception cref="T:Labman.Hardware.EnvironmentSensorException">This method has not been implemented by this type of EnvironmentSensor</exception>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.EnvironmentSensor.NitrogenContent">
            <summary>
            Reads the nitrogen content from the device
            </summary>
            <returns>Teh nitrogen content</returns>
            <exception cref="T:Labman.Hardware.EnvironmentSensorException">This method has not been implemented by this type of EnvironmentSensor</exception>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.EnvironmentSensor.OxygenContent">
            <summary>
            Reads the oxygen content from the device
            </summary>
            <returns>The oxygen content</returns>
            <exception cref="T:Labman.Hardware.EnvironmentSensorException">This method has not been implemented by this type of EnvironmentSensor</exception>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensors.EnvironmentSensor.CarbonDioxideContent">
            <summary>
            Reads the carbon dioxide content from the device
            </summary>
            <returns>Teh carbon dioxide content</returns>
            <exception cref="T:Labman.Hardware.EnvironmentSensorException">This method has not been implemented by this type of EnvironmentSensor</exception>
        </member>
        <member name="T:Labman.Hardware.Instruments.BeckhoffPlc">
            <summary>
            Class to read/write variables in a Beckhoff PLC program
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.BeckhoffPlc.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.BeckhoffPlc.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.BeckhoffPlc.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.BeckhoffPlc.ReadVariable``1(System.String)">
            <summary>
            Read a PLC variable value.
            </summary>
            <typeparam name="T">The type of variable to read</typeparam>
            <param name="variableName">The name of the variable in the PLC project</param>
            <returns>The variable value</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.BeckhoffPlc.WriteVariable(System.String,System.Object)">
            <summary>
            Write a PLC variable value
            </summary>
            <param name="variableName">The name of the variable in the PLC project</param>
            <param name="value">The value to write</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.CANCoder">
            <summary>
            Device control class for CANCoder encoder boards.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.CANCoder.Settings">
            <summary>
            Settings for the CANcoders
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.CANCoder.EncoderCount">
            <summary>
            The encoder count from last time the encoders sent a TPDO2 object (count data from the encoder)
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.CANCoder.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.CANCoder.OnDataReceived(System.Int32,Labman.Communication.Interfaces.KVaserCANMsg)">
            <summary>
            Event handle for when data is recived by the KVaser. In this handle, we are looking for the TPDO2 with our encoder count data.
            </summary>
            <param name="canNodeAddress">The can address of the node when sent the data.</param>
            <param name="message">The CAN message sent.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CANCoder.Initialise">
            <summary>
            Initialises the CANCoders. Opens communication, registers events, etc.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.CANCoder.Dispose">
            <summary>
            Disposes of the CANCoders object.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.CANCoder.GetEncoderCount">
            <summary>
            Gets the encoder count applying an encoder ratio from the device settings
            NOTE: The register on the CANCoder device which hosts the encoder count is an unsigned int, therefore going negative (backwards) will cause it to rollover.
            </summary>
            <returns>The encoder count with encoder ratio from the device settings applied.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CANCoder.GetRawEncoderCount">
            <summary>
            Gets the raw encoder count from the device.
            NOTE: The register on the CANCoder device which hosts the encoder count is an unsigned int, therefore going negative (backwards) will cause it to rollover.
            </summary>
            <returns>The raw encoder count from the device.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CANCoder.ResetEncodeCount">
            <summary>
            Resets the device zeroing the encoder count.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.CANCoderSettings">
            <summary>
            Settings class for the CANCoder device.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.CANCoderSettings.CANAddress">
            <summary>
            The CAN address of the device this instance is interfacing with.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.CANCoderSettings.EncoderRatio">
            <summary>
            The encoder ratio to apply to the encoder count.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.CombiPal">
            <summary>
            A class for CombiPal
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.CombiPal.FlavourSpecSettings">
            <summary>
            A property holding settings for FlavourSpec
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.CombiPal.Commands">
            <summary>
            Listing of available commands
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.CombiPal.Status">
            <summary>
            Possible status values
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.#ctor">
            <summary>Constructor for FlavourSpec</summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.Initialise">
            <summary>
            Initilise communication interface
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.Dispose">
            <summary>
            Dispose of the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.CleanUp(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Basically like a homing routine where different options can be enabled.
            </summary>
            <param name="washStationObjectName">Wash station. Used for cleaning the syringe if the syringe is not empty.</param>
            <param name="resetInjectors">If an injector has a valve referenced, the valve is switched to standby position.</param>
            <param name="resetTemperatures">All temperatures are set to standby temperature.</param>
            <param name="resetXyz">All three axis are referenced.</param>
            <param name="resetNeedleGuide">Needle guide blocking is released.</param>
            <param name="resetSyringe">The syringe plunger zero position is initialized by moving the plunger down until it is blocked.
            If the syringe is not empty when CLEANUP is called, before initializing the PAL moves to the waste position that is referenced in the passed Wash Station and ejects the syringe content.
            Then the syringe is cleaned at the passed Wash Station using the wash stations “Clean Cnt” for the number of cleaning cycles.</param>
            <param name="closeTray">If any stack drawer is open it will be closed.</param>
            <param name="moveToHome">The injection unit moves to the Home position. This is usually at 0,0,0 but can be moved to any position by changing the object “Home”.</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">How long to wait for the operation before erroring</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.MoveToHome(Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the gantry to the preconfigured "home" object.
            </summary>
            <param name="waitType">Whether to wait for the system to home</param>
            <param name="timeoutInMilliseconds">The timeout when waiting for the system to be ready and for the home to happen</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.GetSample(System.String,System.Int32,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Extracts a sample of fluid with the needle
            </summary>
            <param name="source">The object name of the source location</param>
            <param name="index">The index in the source location</param>
            <param name="sampleVolume">The volume to extract TODO: correct?</param>
            <param name="waitType">Whether to wait for the action to complete</param>
            <param name="timeoutInMilliseconds">How long to wait for the action to complete</param>
            <param name="airVolume">The volume of air to extract before the sample TODO: correct?</param>
            <param name="penetration">Needle penetration in μm units</param>
            <param name="fillVolume">Fill volume in nl</param>
            <param name="fillSpeed">Fill speed in nl/s</param>
            <param name="pullupDelay">Pull up delay in ms</param>
            <param name="ejectSpeed">Eject speed in nl/s</param>
            <param name="fillStrokes">Number of strokes to fill</param>
            <param name="needleBlocking">TODO: What does this parameter do?</param>
            <param name="waitForTimer">Whether to wait for a timer and if so which one</param>
            <param name="waitTime">How long to wait for any given timer TODO: correct?</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.InjectSample(System.String,System.String,System.String,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Inject a sample at the given location
            </summary>
            <param name="injector">The object name of class INJECTOR of the injection location</param>
            <param name="syncSignal">The object name of class SYNC_SIGNAL </param>
            <param name="injectedSignal">The object name of Injected Signal</param>
            <param name="waitType">Whether to wait for the action to complete</param>
            <param name="timeoutInMilliseconds">How long to wait for the action to complete in milliseconds</param>
            <param name="penetration">Needle penetration in μm units</param>
            <param name="sampleVolume">The volume to extract TODO: correct?</param>
            <param name="preInjectDelay">Time delay before injection</param>
            <param name="injectSpeed">Injection speen in TODO: units</param>
            <param name="postInjectDelay">Time delay after injection</param>
            <param name="startTimer">Whether to start a timer on the devce, and which timer if so</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.TransportVial(System.String,System.Int32,System.String,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Transports a vial
            </summary>
            <param name="fromTray">Object name of class TRAY from which to pick</param>
            <param name="fromIndex">The index in the tray from which to pick</param>
            <param name="toTray">The object name of class TRAY from which to pick</param>
            <param name="toIndex">The index in the destination to in which to place</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">How long to wait for the operation before erroring</param>
            <param name="startTimer">Whether to start a timer on the devce, and which timer if so</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.MoveToObject(System.String,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Moves the tip to the position of the object
            </summary>
            <param name="objectName">The destination object name</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">Movement timeout in milliseconds</param>
            <param name="index">The index in the destination object if applicable</param>
            <param name="penetration">Whether to penetrate the destination position with the needle and if so by how many μm units</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.MoveAbsolute(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Move the gantry to a position
            </summary>
            <param name="absX">The position in the X dimension in μm</param>
            <param name="absY">The position in the Y dimension in μm</param>
            <param name="absZ">The position in the Z dimension in μm</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">Movement timeout in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.MoveRelative(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Move the gantry relative to the current position
            </summary>
            <param name="relX">The distance in the X dimension in μm</param>
            <param name="relY">The distance in the Y dimension in μm</param>
            <param name="relZ">The distance in the Z dimension in μm</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">Movement timeout in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.SetTemperature(System.String,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Sets the temerature of the specified object to the given accuracy
            </summary>
            <param name="objectName">The object at which the temerature is to be set</param>
            <param name="temperature">The temperature in °C</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">Operation timeout in milliseconds</param>
            <param name="accuracy">The desired accuracy in °C. The default value is 1°C</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.SetAgitator(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Sets settings on the specified agitator
            </summary>
            <param name="agitator">The object name of the agitator of type TRAY</param>
            <param name="state">The desired state of the agitator</param>
            <param name="speed">The desired speed of the agitator in rpm</param>
            <param name="onTimeInSeconds">The on time for the agitator (0-99s)</param>
            <param name="offTimeInSeconds">The off time for the agitator  (0-99s)</param>
            <param name="startTimer">Whether to start a timer and which timer if so</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.Beep(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Instructs the unit to emmit a tone, or tones with the given characteristics.
            </summary>
            <param name="frequency">The pitch of the tone</param>
            <param name="durationInMilliseconds">The duration of each tone</param>
            <param name="pause">The pause between successive tones</param>
            <param name="count">The number of tones</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.StartFlush(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves plunger to 122% of syringe scale length. Activates Syringe Flush Valve for the specified time.
            After this time the valve is deactivated, but the plunger remains in the flush position.
            Optionally waits for the CombiPal to confirm it is flushing.
            </summary>
            <param name="flushTimeInSeconds">The flush time in seconds (0-86399)</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">Operation timeout in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.StopFlush(Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Deactivates Syringe Flush Valve if Flush Time did not yet expire. Moves plunger to zero position.
            </summary>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">Operation timeout in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.SetOutput(System.String,Labman.Hardware.IODevices.IODevice.OutputState,System.Nullable{System.Int32})">
            <summary>
            Switches the given output, to the specified state for the given time.
            </summary>
            <param name="outputSignal">The output index to switch</param>
            <param name="signalState">The state to switch to</param>
            <param name="pulseTime">The duration to switch to the desired state (0-999ms) (0 = indefinitely) TODO: This is a guess, test what does 0 do</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.GetStat">
            <summary>
            Gets the current status
            </summary>
            <returns>The current status</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.GetAtomInformation">
            <summary>
            Gets the current atom state, prefixed by a "@". If no atom is running, only "@" is returned.
            </summary>
            <returns>The current atom state, prefixed by a "@". If no atom is running, only "@" is returned</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.Cancel">
            <summary>
            Stops execution of current routine.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.GetTemperature(System.String)">
            <summary>
            Get the temperature in °C of the specified object.
            </summary>
            <param name="objectName">The name of the object of which to get the temperature</param>
            <returns>The temperature in °C of the specified object</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.GetPositions">
            <summary>
            Gets the current positions of the XYZ, plunger, Aux1 and Aux2 axes in μm.
            </summary>
            <returns>The current positions of the XYZ, plunger, Aux1 and Aux2 axes in μm</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.GetObjectPosition(System.String)">
            <summary>
            Returns the XYZ position of the named object in μm.
            </summary>
            <param name="objectName">The object of which to find the position</param>
            <returns>The XYZ position of the object in μm</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.SetObjectPosition(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the XYZ position of the given object. TODO: Untested
            </summary>
            <param name="objectName">The object of which to set the position</param>
            <param name="posX">The X position in μm</param>
            <param name="posY">The Y position in μm</param>
            <param name="posZ">The Z position in μm</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.GetTrayTypes(System.String)">
            <summary>
            Returns valid tray types for the requested tray
            </summary>
            <param name="trayName">The tray for which to query valid tray types</param>
            <returns>Valid tray types for the requested tray</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.SetTrayType(System.String,System.String)">
            <summary>
            Set the tray type for the given tray. TODO: Untested
            </summary>
            <param name="trayName">The tray for which to set the tray type</param>
            <param name="trayTypeName">The tray type</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.GetInjectionCount">
            <summary>
            Returns the total number of injections
            </summary>
            <returns>The total number of injections</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.GetClasses">
            <summary>
            Returns the class definitions for all objects.
            Output is a list of strings with what seems to be prefixes to indicate level.
            </summary>
            <returns>The class definitions for all objects</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.GetObjects">
            <summary>
            Returns the objects.
            Output is a list of strings with what seems to be prefixes to indicate level.
            </summary>
            <returns>A list of object names</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.ReportReady(System.Boolean)">
            <summary>
            Determines how the device reacts to serial commands.
            </summary>
            <param name="state">
            When set to true, the device returns a "|" when the command syntax is verified (proceeded by any other command response).
            It then returns and "@\r" when the command has finished executing.
            When set to false. TODO: Manual doesn't specify behaviour in OFF mode
            </param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.WaitForReady(System.Int32,System.Int32)">
            <summary>
            Waits for the given timeout for the device to be in the READY state
            </summary>
            <param name="timeoutInMilliseconds">The timeout in ms</param>
            <param name="simulateDelayMs">The time to delay during simulation</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.CombiPal.WaitForCommandComplete(System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Waits for the given timeout to get the "@\r" response inidicating a command has been executed.
            </summary>
            <param name="timeoutInMilliseconds">The timeout in ms</param>
            <param name="simulateDelayMs">The time to delay during simulation</param>
            <param name="message">Message</param>
            <param name="messageIntervalInMilliseconds">Message interval in milliseconds</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.DlogicNanoNfcReader">
            <summary>
            Digital Logic µFR Nano NFC RFID reader / writer.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.DlogicNanoNfcReader.DL_STATUS">
            <summary>Device API error codes</summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.DlogicNanoNfcReader.PacketHeader">
            <summary>Packet type header codes</summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.DlogicNanoNfcReader.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.Hardware.Instruments.DlogicNanoNfcReader"/></summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.DlogicNanoNfcReader.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.DlogicNanoNfcReader.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.DlogicNanoNfcReader.GetReaderSerialNumber">
            <summary>Gets the serial number of the reader</summary>
            <returns>The serial number of the device as a string</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DlogicNanoNfcReader.ReadUid">
            <summary>
            Reads the UID from the card
            </summary>
            <returns>The UID of the card as a string</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DlogicNanoNfcReader.ReadDataFromTag(System.Byte)">
            <summary>
            Reads data from the tag
            </summary>
            <param name="numberOfBytesToRead">The number of bytes of data to read</param>
            <returns>A byte array of data</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DlogicNanoNfcReader.WriteNdefPlainTextToTag(System.String,System.Int16)">
            <summary>
            Writes the given text to the given address
            </summary>
            <param name="text">The text to write</param>
            <param name="address">The address to which to write</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DlogicNanoNfcReader.WriteToTag(System.Byte[],System.Int16)">
            <summary>
            Writes the given data to the given address
            </summary>
            <param name="data">The data to write</param>
            <param name="address">The address to write to</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet">
            <summary>
            A hardware control class for controlling any ASCCI command set version of the DSC load
            cell embedded digitizer by Mantracourt.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.#ctor">
            <summary>
            A hardware control class for controlling any ASCCI command set version of the DSC
            load cell embedded digitizer by Mantracourt.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.OutputUpdateRate">
            <summary>
            Enumeration of output rates supported by the board. Enum is set up to match a table
            of enum values supported by the board (pg 25 in DSC manual).
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.Settings">
            <summary>
            The specific hardware settings required to operate the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.Dispose">
            <summary>
            Disposes of this device. Closes comms etc.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetCellGain">
            <summary>
            Gets the gain applied internally in the device to the temperature compensated mV/V
            (CMVV) to convert it to the raw cell output (CRAW). (CMVV * Cell Gain) - Cell Offset
            </summary>
            <returns>The current value of CGAI on the device.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetCellOffset">
            <summary>
            Gets the offset applied internally in the device to the temperature compensated mV/V
            (CMVV) to convert it to the raw cell output (CRAW). (CMVV * Cell Gain) - Cell Offset
            </summary>
            <returns>The current value of COFS on the device.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetCellRangeMax">
            <summary>
            Gets the maximum value the raw cell output (CRAW) can be (CMAX). Measurements of
            CRAW higher than this value will be clamped to this value and a warning flag will be
            raised when the devices status is queried. Usually this will be in N or kN.
            </summary>
            <returns>The current value of CMAX on the device.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetCellRangeMin">
            <summary>
            Gets the minimum value the raw cell output (CRAW) can be (CMIN). Measurements of
            CRAW lower than this value will be clamped to this value and a warning flag will be
            raised when the devices status is queried.
            </summary>
            <returns>The current value of CMIN on the device.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetFirmwareVersion">
            <summary>
            Reads the firmware version from the device.
            </summary>
            <returns>The firmware version of the device.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetSerialNumber">
            <summary>
            Gets the serial number of the device. The serial number is determined by two int
            parameters on the device with a calculation which converts them into the overall
            serial number. The calculation implemented can be found in the manual for the DSC device.
            </summary>
            <returns>The serial number of the device.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetSystemGain">
            <summary>
            Gets the gain applied internally in the device to the cell output (CELL) to convert
            it to the system output (SYS). (CELL * System Gain) - System Offset
            </summary>
            <returns>The system gain (SGAI)</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetSystemOffset">
            <summary>
            Gets the offset applied internally in the device to the cell output (CELL) to
            convert it to the system output (SYS). (CELL * System Gain) - System Offset
            </summary>
            <returns>The system offset (SOFS)</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetSystemOutputRate">
            <summary>
            Gets the output rate of the device. This is the frequency of data capture.
            Internally the device is always sampling at a high frequency (4.8Khz) and uses this
            output rate to determine how much averaging should be done.
            </summary>
            <returns>The current output rate setting.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetSystemRangeMax">
            <summary>
            Gets the maximum value the raw system output (SRAW) can be (SMAX). Measurements of
            SRAW higher than this value will be clamped to this value and a warning flag will be
            raised when the devices status is queried.
            </summary>
            <returns>The current value of SMAX on the device</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetSystemRangeMin">
            <summary>
            Gets the minimum value the raw system output (SRAW) can be (SMIN). Measurements of
            SRAW lower than this value will be clamped to this value and a warning flag will be
            raised when the devices status is queried.
            </summary>
            <returns>The current value of SMIN on the device</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.GetSystemZero">
            <summary>
            Gets the current system zero offset (SZ).
            </summary>
            <returns>The value of the current system zero offset</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.Initialise">
            <summary>
            Initializes the device. Queries serial number and firmware version to confirm the
            device is communicating.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.ReadCellOutput">
            <summary>
            Reads the output of cell (usually in N or kN depending on cell calibration) after
            linear correction has occurred (CELL).
            </summary>
            <returns>The output of the cell after linear correction.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.ReadForce">
            <summary>
            Reads the force output of the devices selected output (After internal system correction)
            </summary>
            <returns>The force output of the strain gauge</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.ReadRawCellOutput">
            <summary>
            Reads the output of cell (usually in N or kN depending on cell calibration) before
            linear correction has occurred (CRAW).
            </summary>
            <returns>The output of the cell before linear correction.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.ReadRawSystemOutput">
            <summary>
            Reads the force output of the device before the system zero offset is applied (SRAW).
            </summary>
            <returns>
            The force output as scaled by the system correction factors (SGAI and SOFS)
            </returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.ReadSystemOutput">
            <summary>
            Reads the force output of the devices selected output (After internal system correction)
            </summary>
            <returns>
            The force output as scaled by the system correction factors (SZ, SGAI and SOFS)
            </returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.ReadTemperatureCompensatedMillivoltsPerVolt">
            <summary>
            Reads the temperature compensated mV/V from the strain gauge.
            </summary>
            <returns>The temperature compensated mV/V from the strain gauge.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SendCalibrationData">
            <summary>
            Transmits all of the calibration data stored in this devices settings over to the
            physical device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SetCellGain(System.Single)">
            <summary>
            Sets the gain applied internally in the device to the temperature compensated mV/V
            (CMVV) to convert it to the raw cell output (CRAW). (CMVV * Cell Gain) - Cell Offset
            </summary>
            <param name="cellGain">The gain to apply to the CMVV</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SetCellOffset(System.Single)">
            <summary>
            Sets the offset applied internally in the device to the temperature compensated mV/V
            (CMVV) to convert it to the raw cell output (CRAW). (CMVV * Cell Gain) - Cell Offset
            </summary>
            <param name="cellOffset">The offset to apply to the CMVV</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SetCellRangeMax(System.Single)">
            <summary>
            Sets the maximum value the raw cell output (CRAW) can be. Measurements of CRAW
            higher than this value will be clamped to this value and a warning flag will be
            raised when the devices status is queried. Usually this will be in N or kN.
            </summary>
            <param name="cellMax">The maximum value the cell output should be.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SetCellRangeMin(System.Single)">
            <summary>
            Sets the minimum value the raw cell output (CRAW) can be. Measurements of CRAW lower
            than this value will be clamped to this value and a warning flag will be raised when
            the devices status is queried. Usually this will be in N or kN.
            </summary>
            <param name="cellMin">The minimum value the cell output should be.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SetSystemGain(System.Single)">
            <summary>
            Sets the gain applied internally in the device to the cell output (CELL) to convert
            it to the system output (SYS). (CELL * System Gain) - System Offset
            </summary>
            <param name="systemGain">The gain to apply to the CELL</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SetSystemOffset(System.Single)">
            <summary>
            Sets the offset applied internally in the device to the cell output (CELL) to
            convert it to the system output (SYS). (CELL * System Gain) - System Offset
            </summary>
            <param name="systemOffset">The offset to apply to the CELL</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SetSystemOutputRate(Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.OutputUpdateRate)">
            <summary>
            Sets the output rate of the device. This is the frequency of data capture.
            Internally the device is always sampling at a high frequency (4.8Khz) and uses this
            output rate to determine how much averaging should be done.
            </summary>
            <param name="rate">The output rate to set.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SetSystemRangeMax(System.Single)">
            <summary>
            Sets the maximum value the raw system output (SRAW) can be (SMAX). Measurements of
            SRAW higher than this value will be clamped to this value and a warning flag will be
            raised when the devices status is queried.
            </summary>
            <param name="systemMax">The value to set SMAX to.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SetSystemRangeMin(System.Single)">
            <summary>
            Sets the minimum value the raw system output (SRAW) can be (SMIN). Measurements of
            SRAW lower than this value will be clamped to this value and a warning flag will be
            raised when the devices status is queried.
            </summary>
            <param name="systemMin">The value to set SMIN to.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SetSystemZero(System.Single)">
            <summary>
            Sets the zero point of the system. The scaled raw system output (SRAW) will be
            subtracted by this to give a zeroed output. SRAW - SZ
            </summary>
            <param name="zero">The value to set the system zero to</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.SwitchOutput(Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the DSC devices digital output state.
            </summary>
            <param name="state">
            The state to set the digital output to. High Impedance state will switch the output off.
            </param>
        </member>
        <member name="M:Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet.Zero">
            <summary>
            Zeros the main system output (SYS and therefore SOUT) by taking the raw system value
            (SRAW) and setting the system zero (SZ) to it. SRAW - SZ
            WARNING: This writes the zero offset to the devices EEPROM. Calling this excessively (every test for example) will cause the EEPROM to wear out. 
            Consider using a software based zeroing technique and reserve the usage of this zero call for calibration.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.DscLoadCellConverterSettings">
            <summary>
            Settings for the DSC Load Cell Digitizer device.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.DscLoadCellConverterSettings.CellGain">
            <summary>
            The gain coefficient of the cell calibration stage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.DscLoadCellConverterSettings.CellMax">
            <summary>
            The max output of the cell calibration stage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.DscLoadCellConverterSettings.CellMin">
            <summary>
            The minimum output of the cell calibration stage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.DscLoadCellConverterSettings.CellOffset">
            <summary>
            The offset of the cell calibration stage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.DscLoadCellConverterSettings.StationAddress">
            <summary>
            Relevant for RS485 only. Indicates the device to address on a multidrop RS485 bus.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.DscLoadCellConverterSettings.SystemGain">
            <summary>
            The gain coefficient of the system calibration stage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.DscLoadCellConverterSettings.SystemMax">
            <summary>
            The maximum output of the system calibration stage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.DscLoadCellConverterSettings.SystemMin">
            <summary>
            The minimum output of the system calibration stage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.DscLoadCellConverterSettings.SystemOffset">
            <summary>
            The offset of the system calibration stage.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker">
            <summary>
            Class providing functionality to operate a Edmund Buhler KS 15 control Orbital Shaker
            </summary>
            <seealso cref="T:Labman.Hardware.Instruments.Instrument" />
        </member>
        <member name="T:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.ShakerStatus">
            <summary>
            Shaker Status' available in a reply from the shaker
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.ErrorCodes">
            <summary>
            Shaker error codes, that are reported from the shaker
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.ShakingDirection">
            <summary>
            The two directions the shaker can shake in
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.InstrumentSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.GetStatus">
            <summary>
            Gets the status.
            </summary>
            <returns>The status of the shaker</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.StartShaking">
            <summary>
            Starts the shaking.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.StopShaking">
            <summary>
            Stops the shaking.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.SetShakingSpeed(System.Int32)">
            <summary>
            Sets the shaking speed.
            </summary>
            <param name="speed">The speed.</param>
            <exception cref="T:System.ArgumentException">Shaking speed is not in the acceptable range</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.QueryShakingSpeed">
            <summary>
            Queries the shaking speed.
            </summary>
            <returns>The set speed (RPM) that the shaker is programmed to run at</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.SetShakingDirection(Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.ShakingDirection)">
            <summary>
            Sets the shaking direction.
            </summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.QueryShakingDirection">
            <summary>
            Queries the shaking direction.
            </summary>
            <returns>The direction the shaker is programmed to shake in</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.QueryActualShakingDirection">
            <summary>
            Queries the actual shaking direction.
            </summary>
            <returns>The actual direction the shaker is shaking at currently</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker.QueryActualSpeed">
            <summary>
            Queries the actual speed.
            </summary>
            <returns>The speed (in RPM) that the device is currently at</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.FlavourSpecInstrument">
            <summary>
            Class for FlavourSpecinstument
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.#ctor">
            <summary>
            Constructor, set up device control and device settings
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects">
            <summary>
            Objects within the FlavourSpec
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.ObjectNameToString(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects)">
            <summary>Converts an Enum object typoe to it's string representation</summary>
            <param name="theObject">The enum type</param>
            <returns>It's string representation</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.CleanUp(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Basically like a homing routine where different options can be enabled.
            </summary>
            <param name="objectName">Wash station. Used for cleaning the syringe if the syringe is not empty.</param>
            <param name="resetInjectors">If an injector has a valve referenced, the valve is switched to standby position.</param>
            <param name="resetTemperatures">All temperatures are set to standby temperature.</param>
            <param name="resetXyz">All three axis are referenced.</param>
            <param name="resetNeedleGuide">Needle guide blocking is released.</param>
            <param name="resetSyringe">The syringe plunger zero position is initialized by moving the plunger down until it is blocked.
            If the syringe is not empty when CLEANUP is called, before initializing the PAL moves to the waste position that is referenced in the passed Wash Station and ejects the syringe content.
            Then the syringe is cleaned at the passed Wash Station using the wash stations “Clean Cnt” for the number of cleaning cycles.</param>
            <param name="closeTray">If any stack drawer is open it will be closed.</param>
            <param name="moveToHome">The injection unit moves to the Home position. This is usually at 0,0,0 but can be moved to any position by changing the object “Home”.</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">How long to wait for the operation before erroring</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.GetSample(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,System.Int32,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Extracts a sample of fluid with the needle
            </summary>
            <param name="objectName">The object name of the source location</param>
            <param name="index">The index in the source location</param>
            <param name="sampleVolume">The volume to extract TODO: correct?</param>
            <param name="waitType">Whether to wait for the action to complete</param>
            <param name="timeoutInMilliseconds">How long to wait for the action to complete</param>
            <param name="airVolume">The volume of air to extract before the sample TODO: correct?</param>
            <param name="penetration">Needle penetration in μm units</param>
            <param name="fillVolume">Fill volume in nl</param>
            <param name="fillSpeed">Fill speed in nl/s</param>
            <param name="pullupDelay">Pull up delay in ms</param>
            <param name="ejectSpeed">Eject speed in nl/s</param>
            <param name="fillStrokes">Number of strokes for filling</param>
            <param name="needleBlocking">TODO: What does this do?</param>
            <param name="waitForTimer">Whether to wait for a timer and if so which one</param>
            <param name="waitTime">How long to wait for any given timer TODO: correct?</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.InjectSample(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Inject a sample at the given location
            </summary>
            <param name="injector">The object name of class INJECTOR of the injection location</param>
            <param name="syncSignal">The object name of class SYNC_SIGNAL </param>
            <param name="injectedSignal">The object name of Injected Signal</param>
            <param name="waitType">Whether to wait for the action to complete</param>
            <param name="timeout">How long to wait for the action to complete</param>
            <param name="penetration">Needle penetration in μm units</param>
            <param name="sampleVolume">The volume to extract TODO: correct?</param>
            <param name="preInjectDelay">Time delay before injection</param>
            <param name="injectSpeed">Injection speen in TODO: units</param>
            <param name="postInjectDelay">Time delay after injection</param>
            <param name="startTimer">Whether to start a timer on the devce, and which timer if so</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.TransportVial(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,System.Int32,Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Transports a vial
            </summary>
            <param name="fromTray">Object name of class TRAY from which to pick</param>
            <param name="fromIndex">The index in the tray from which to pick</param>
            <param name="toTray">The object name of class TRAY from which to pick</param>
            <param name="toIndex">The index in the destination to in which to place</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">How long to wait for the operation before erroring</param>
            <param name="startTimer">Whether to start a timer on the devce, and which timer if so</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.MoveToObject(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Moves the tip to the position of the object
            </summary>
            <param name="objectName">The destination object name</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">Movement timeout in milliseconds</param>
            <param name="index">The index in the destination object if applicable</param>
            <param name="penetration">Whether to penetrate the destination position with the needle and if so by how many μm units</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.SetTemperature(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Sets the temerature of the specified object to the given accuracy
            </summary>
            <param name="objectName">The object at which the temerature is to be set</param>
            <param name="temperature">The temperature in °C</param>
            <param name="waitType">Whether to wait for the operation</param>
            <param name="timeoutInMilliseconds">MEasurement timeout in milliseconds</param>
            <param name="accuracy">The desired accuracy in °C. The default value is 1°C</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.SetAgitator(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Sets the agitator
            </summary>
            <param name="agitator">The object name of the agitator of type TRAY</param>
            <param name="state">The desired state of the agitator</param>
            <param name="speed">The desired speed of the agitator in rpm</param>
            <param name="onTime">The on time for the agitator (0-99s)</param>
            <param name="offTime">The off time for the agitator  (0-99s)</param>
            <param name="startTimer">Whether to start a timer and which timer if so</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.GetTemperature(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects)">
            <summary>
            Get the temperature in °C of the specified object.
            </summary>
            <param name="objectName">The name of the object of which to get the temperature</param>
            <returns>The temperature in °C of the specified object</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.GetObjectPosition(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects)">
            <summary>
            Returns the XYZ position of the named object in μm.
            </summary>
            <param name="objectName">The object of which to find the position</param>
            <returns>The XYZ position of the object in μm</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.SetObjectPosition(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the XYZ position of the given object. TODO: Untested
            </summary>
            <param name="objectName">The object of which to set the position</param>
            <param name="posX">The X position in μm</param>
            <param name="posY">The Y position in μm</param>
            <param name="posZ">The Z position in μm</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.SetTrayType(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects,System.String)">
            <summary>
            Set the tray type for the given tray.
            </summary>
            <param name="trayName">The tray for which to set the tray type</param>
            <param name="trayTypeName">The tray type</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.FlavourSpecInstrument.GetTrayTypes(Labman.Hardware.Instruments.FlavourSpecInstrument.FlavourSpecObjects)">
            <summary>
            Returns valid tray types for the requested tray
            </summary>
            <param name="trayName">The tray for which to query valid tray types</param>
            <returns>Valid tray types for the requested tray</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.HidenMassSpectrometer">
            <summary>
            Class providing functionality to operate a Hiden Mass Spectrometer
            </summary>
            <seealso cref="T:Labman.Hardware.Instruments.Instrument" />
        </member>
        <member name="T:Labman.Hardware.Instruments.HidenMassSpectrometer.Status">
            <summary>
            Status enumeration
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.Status.Available">
            <summary>
            Ready to be used.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.Status.Unavailable">
            <summary>
            Not ready, no communication
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.Status.StoppedShutdown">
            <summary>
            Stopped after acquisition
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.Status.StoppedActive">
            <summary>
            The experiment file has stopped running and the MSIU is in the current mode (ie not shutdown)
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.Status.StartingActive">
            <summary>
            Experiment file has been downloaded to the MSIU and started running but has yet to receive any data
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.Status.ScanningActive">
            <summary>
            Axquiring data
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.Status.StoppingActive">
            <summary>
            Acquisition will finish at the end of the current cycle
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.Status.Degas">
            <summary>
            Degassing
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.Status.Disconnected">
            <summary>
            Running independently from MASsoft
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters">
            <summary>
            Help Parameters enumeration
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters.FileVersion">
            <summary>
            The file version
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters.CompanyName">
            <summary>
            The company name
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters.FileDescription">
            <summary>
            The file description
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters.LegalCopyright">
            <summary>
            The legal copyright
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters.LegalTrademakes">
            <summary>
            The legal trademakes
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters.ProductName">
            <summary>
            The product name
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters.ProductVersion">
            <summary>
            The product version
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters.Comments">
            <summary>
            The comments
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters.Help">
            <summary>
            The help
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.HidenMassSpectrometer"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
            <exception cref="T:System.NotImplementedException">Exception thrown from the device</exception>
        </member>
        <member name="P:Labman.Hardware.Instruments.HidenMassSpectrometer.InstrumentSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.OpenFile(System.String)">
            <summary>
            Opens the file.
            </summary>
            <param name="filePath">The file path.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">
            No reply from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.ActivateMSIU(System.Int32)">
            <summary>
            Activates the msiu.
            </summary>
            <param name="interfaceUnitNumber">The interface unit number.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">
            Failed to activate MSIU
            or
            No reply from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.GetStatus">
            <summary>
            Gets the status of the device.
            </summary>
            <returns>Status string</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.ExecuteStart">
            <summary>
            Executes the start.
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">
            Failed to execute start command
            or
            No reply from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.ExecuteStart(System.String)">
            <summary>
            Executes the start.
            </summary>
            <param name="filename">The filename.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">
            Failed to execute start command
            or
            No reply from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.Abort">
            <summary>
            Aborts this instance.
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">
            Failed to abort the current experiment
            or
            No reply from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.GetFilename">
            <summary>
            Gets the filename.
            </summary>
            <returns>The filename associated with the Mass Spec</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">
            Failed to get the filename of the experiment
            or
            No reply from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.Close">
            <summary>
            Closes this instance.
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">
            Failed to close the current file open, the current file will stay open
            or
            No reply from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.ExportData">
            <summary>
            Exports the data.
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">
            Failed to export data from the current experiment
            or
            No reply from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.HidenMassSpectrometer.GetHelp(Labman.Hardware.Instruments.HidenMassSpectrometer.HelpParameters)">
            <summary>
            Gets the help.
            </summary>
            <param name="helpParameters">The help parameters.</param>
            <returns>The relevant help</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">
            Failed to export data from the current experiment
            or
            No reply from the device
            </exception>
        </member>
        <member name="T:Labman.Hardware.Instruments.Animation">
            <summary>
            Animations which can be applied to a group.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.Command">
            <summary>
            Commands the controller recognizes.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.ByteSetting">
            <summary>
            Byte settings the device stores in EEPROM which can be queried or set.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.IntSetting">
            <summary>
            Int settings the device stores in EEPROM which can be queried or set.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.StatusCode">
            <summary>
            Status codes the controller can respond with.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.LMA201916ANeopixelLedController">
            <summary>
            Controls a LMA2019-16A-REVB board.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.#ctor">
            <summary>
            Constructs the controller.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.Settings">
            <summary>
            The specific hardware settings required to operate the controller
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.AnimateGroup(System.Byte,Labman.Hardware.Instruments.Animation,System.Windows.Media.Color,System.Byte[])">
            <summary>
            Applies an animation to a group. ApplyChanges() must be called after this to see pixels update.
            </summary>
            <param name="groupIndex">The index of the group to set (zero indexed).</param>
            <param name="animation">The animation to run on the group.</param>
            <param name="colour">The colour this animation should run with.</param>
            <param name="parameters">Any additional parameters required for this animation</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.ApplyChanges">
            <summary>
            Applies any changes made, displaying any new colours/animations on the pixels.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.Dispose">
            <summary>
            Disposes of the controller (closes comms etc)
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.FillGroupSolidColour(System.Byte,System.Windows.Media.Color)">
            <summary>
            Sets all of the pixels in a group to a solid colour. ApplyChanges() must be called after this to see pixels update.
            </summary>
            <param name="groupIndex">The index of the group to set (zero indexed).</param>
            <param name="colour">The colour to set the group to.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.GetFirmwareVersion">
            <summary>
            Requests the firmware version from the device.
            </summary>
            <returns>The firmware version</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.GetByteSetting(Labman.Hardware.Instruments.ByteSetting)">
            <summary>
            Gets the current value of a byte setting in the device's EEPROM.
            </summary>
            <param name="setting">The setting to get the value for.</param>
            <returns>The value of the specified setting.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.GetIntSetting(Labman.Hardware.Instruments.IntSetting)">
            <summary>
            Gets the current value of an int setting in the device's EEPROM.
            </summary>
            <param name="setting">The setting to get the value for.</param>
            <returns>The value of the specified setting.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.Initialise">
            <summary>
            Connects to the device and ensures that it is communicating.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.ModifyGroup(System.Byte,System.Byte,System.Byte)">
            <summary>
            Changes the starting index and length of a group. This will be saved in EEPROM and will be remembered if the device is powered off.
            Note: The device will check if the new length and index clashes with another group. If it does, it will respond with an InvaliedIndex response.
            </summary>
            <param name="groupNumber">The group to modify (zero indexed).</param>
            <param name="startingIndex">The pixel index this group should start at.</param>
            <param name="lengthOfGroup">How long this group is.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.SetPixelSolidColour(System.Int32,System.Windows.Media.Color)">
            <summary>
            Sets a single pixel to a solid colour. ApplyChanges() must be called after this to see pixels update.
            </summary>
            <param name="pixelIndex">The index of the pixel to set (zero indexed).</param>
            <param name="colour">The colour to set the pixel to.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.StoreGroupSettingsToEEPROM">
            <summary>
            Saves the starting index and length of each group to the devices EEPROM so that it doesn't need reconfiguring when power cycled.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.StoreByteSetting(Labman.Hardware.Instruments.ByteSetting,System.Byte)">
            <summary>
            Sets a byte setting value on the devices EEPROM.
            </summary>
            <param name="setting">The setting to set.</param>
            <param name="value">The value to set it to.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.LMA201916ANeopixelLedController.StoreIntSetting(Labman.Hardware.Instruments.IntSetting,System.Int32)">
            <summary>
            Sets an int setting value on the devices EEPROM.
            </summary>
            <param name="setting">The setting to set.</param>
            <param name="value">The value to set it to.</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.LMA201916ANeopixelLedControllerSettings">
            <summary>
            The settings for a LMA201916ANeopixelLedController device.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.LMA201916ANeopixelLedControllerSettings.FadeIncrement">
            <summary>
            How much the device should fade per animation cycle when running a fade animation.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.LMA201916ANeopixelLedControllerSettings.NodeAddress">
            <summary>
            The RS485 Address the device is on. If incorrect, the device will not respond.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.LMA201916ANeopixelLedControllerSettings.NumberOfGroups">
            <summary>
            The number of groups the controller should manage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.LMA201916ANeopixelLedControllerSettings.NumberOfLeds">
            <summary>
            The number of LEDs the controller should manage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.LMA201916ANeopixelLedControllerSettings.RefreshRate">
            <summary>
            The frequency the device should run animations at.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.LMA201916ANeopixelLedControllerSettings.RotateTrail">
            <summary>
            How long the trail of LED's decaying in brightness should be behind the leading pixel in a rotate animation.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument">
            <summary>
            Class for Masterflex L/S Digital Pump Instrument.
            </summary>
            <seealso cref="T:Labman.Hardware.Instruments.Instrument" />
        </member>
        <member name="T:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.MotorDirection">
            <summary>
            Enum for motor directions
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument"/>
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.StartPumpContinuous">
            <summary>
            Starts the pump continuously
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">Thrown if the device returns an error</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.StartPump(System.Double,System.Boolean)">
            <summary>
            Runs the pump for the specified number of revolutions
            </summary>
            <param name="revolutions">the number of revs to run for. Must be more than 0</param>
            <param name="waitForComplete">Whether to wait for the pump to stop.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">Thrown if the device returns an error</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.StopPump">
            <summary>
            Stops the pump.
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">Thrown if the device returns an error</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.GetRemainingRevolutions">
            <summary>
            Gets the number of remaining revolutions for this run
            </summary>
            <returns>System.Double.</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">Thrown if the device returns an error</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.SetRevolutions(System.Double)">
            <summary>
            Set the amount of revolutions to run the pump for
            </summary>
            <param name="revolutions">The revolutions.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">Thrown if the device returns an error</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.GetMotorDirection">
            <summary>
            Gets the current motor direction.
            </summary>
            <returns>Either forwards or backwards</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">Thrown if the device returns an error</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.GetMotorSpeed">
            <summary>
            Gets the current motor speed.
            </summary>
            <returns>The speed.</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">Thrown if the device returns an error</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.GetStatus">
            <summary>
            Gets the device status.
            </summary>
            <returns>Status object</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">Thrown if the device returns an error</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.SetMotorDirection(Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.MotorDirection)">
            <summary>
            Sets the motor direction.
            </summary>
            <param name="direction">The direction.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">Thrown if the device returns an error</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument.SetMotorSpeed(System.Int32)">
            <summary>
            Sets the motor speed in RPM.
            </summary>
            <param name="speed">The speed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">speed - speed must be between 0 and 9999</exception>
            <exception cref="T:Labman.Hardware.InstrumentException">Thrown if the device returns an error</exception>
        </member>
        <member name="T:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject">
            <summary>
            Class to show the status of the pump
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.OperatingStatus">
            <summary>
            Whether the pump is operating in local or remote mode
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.AuxillaryOutput1Status">
            <summary>
            Possible states the auxillary output can be in
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.AuxillaryInputStatus">
            <summary>
            Possible states the auxillary input can be in
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.CommunicationStatus">
            <summary>
            Possible states the pump can give for communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.PumpStatus">
            <summary>
             Possible states of the pump
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.CurrentOperatingStatus">
            <summary>
            The current operating status
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.CurrentAuxOutput1Status">
            <summary>
            The current auxillary output 1 status
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.CurrentAuxInputStatus">
            <summary>
            The current auxillary input status
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.CurrentCommunicationStatus">
            <summary>
            The current communication status
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.CurrentPumpStatus">
            <summary>
            The current pump status
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrumentStatusObject.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for MasterflexLSDigitalPumpInstrumentStatusObject class. Assigns values to properties from parameters
            </summary>
            <param name="operatingStatus">The operating status</param>
            <param name="output1Status">The auxillary output 1 status</param>
            <param name="inputStatus">The auxillary input status</param>
            <param name="communicationStatus">The commnunication status</param>
            <param name="pumpStatus">The pump status</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.NewportSolarSimulator">
            <summary>
            Class providing functionality to operate a Newport Oriel Sol3a Class AAA Solar Simulator
            </summary>
            <seealso cref="T:Labman.Hardware.Instruments.Instrument" />
        </member>
        <member name="T:Labman.Hardware.Instruments.NewportSolarSimulator.PanelKeyAccess">
            <summary>
            Enumeration for locking the keys on the front of the power supply
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.NewportSolarSimulator.Status">
            <summary>
            Status keywords returned by the device
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.NewportSolarSimulator.ErrorCodes">
            <summary>
            Error codes returned from the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.NewportSolarSimulator"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
            <exception cref="T:System.NotImplementedException">Exception thrown from the device</exception>
        </member>
        <member name="P:Labman.Hardware.Instruments.NewportSolarSimulator.InstrumentSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetStatus">
            <summary>
            Gets the status of the device - mimmicks the LEDs on the front panel.
            </summary>
            <returns>Status string</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No data received from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetErrorCode">
            <summary>
            Gets the error code from the device.
            </summary>
            <returns>Error string</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No data recieved back from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetCurrent">
            <summary>
            Gets the current.
            </summary>
            <returns>
            The current used by the device
            </returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No reply from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetVoltage">
            <summary>
            Gets the voltage.
            </summary>
            <returns>The voltage being used</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No reply from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetWatts">
            <summary>
            Gets the watts.
            </summary>
            <returns>The power being used</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No reply from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetRunningLampHours">
            <summary>
            Gets the running lamp hours.
            </summary>
            <returns>The number of hours the bulb has been running</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No reply from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetCurrentLimit">
            <summary>
            Gets the current limit.
            </summary>
            <returns>The current limit set on the device</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No reply from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetPowerLimit">
            <summary>
            Gets the power limit.
            </summary>
            <returns>The power limit on the device</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No reply from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetPowerSupplyModelNumber">
            <summary>
            Gets the power supply model number.
            </summary>
            <returns>
            The power supply model number
            </returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No reply from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.Start">
            <summary>
            Starts the device.
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">
            No data recieved back from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.Stop">
            <summary>
            Stops the device.
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">
            No data recieved back from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.ResetLampHours">
            <summary>
            Resets the lamp hours.
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">
            No data recieved back from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.ControlToggle(Labman.Hardware.Instruments.NewportSolarSimulator.PanelKeyAccess)">
            <summary>
            Locks/unlocks front panel keys.
            </summary>
            <param name="access">The access.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">
            No data recieved back from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.SetCurrent(System.Double)">
            <summary>
            Sets the current.
            </summary>
            <param name="current">The current.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">
            No data recieved back from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.SetPower(System.Int32)">
            <summary>
            Sets the power.
            </summary>
            <param name="power">The power.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">
            No data recieved back from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.SetCurrentLimit(System.Double)">
            <summary>
            Sets the current limit.
            </summary>
            <param name="currentLimit">The current limit.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">
            No data recieved back from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.SetPowerLimit(System.Int32)">
            <summary>
            Sets the power limit.
            </summary>
            <param name="powerLimit">The power limit.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">
            No data recieved back from the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetCurrentPresetValue">
            <summary>
            Gets the current preset value.
            </summary>
            <returns>The current preset value</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No data recieved back from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.GetPowerPresetValue">
            <summary>
            Gets the power preset value.
            </summary>
            <returns>The power preset value</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">No data recieved back from the device</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.HexToBinary(System.String)">
            <summary>
            Converts the Hexadecimal reply to binary.
            </summary>
            <param name="hexValue">The hexadecimal value.</param>
            <returns>8 bit binary string</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.CheckBit(System.Byte,System.Int32)">
            <summary>
            Checks the bit.
            </summary>
            <param name="b">The bit.</param>
            <param name="pos">The position.</param>
            <returns> true or false, dependent on the state of the bit</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.CheckErrorRegister(System.Collections.Generic.Dictionary{System.Int32,System.Boolean})">
            <summary>
            Checks the error register.
            </summary>
            <param name="checkBits">The check bits.</param>
            <returns> A Dictionary of error codes </returns>
            <exception cref="T:System.ArgumentException"> thrown if the bit cannot be matched to an error code</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NewportSolarSimulator.CheckStatusRegister(System.Collections.Generic.Dictionary{System.Int32,System.Boolean})">
            <summary>
            Checks the status register.
            </summary>
            <param name="checkBits">The check bits.</param>
            <returns>A Dictionary of Status codes</returns>
            <exception cref="T:System.ArgumentException"> thrown if the status bit cannot be mapped to a status code</exception>
        </member>
        <member name="T:Labman.Hardware.Instruments.OmniKey5022RfidReader">
            <summary>
            A hardware module for OmniKey 5022 RFID Reader
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.OmniKey5022RfidReader.ReaderSettings">
            <summary>
            Device settings
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OmniKey5022RfidReader.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OmniKey5022RfidReader.Dispose">
            <summary>
            Class destructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OmniKey5022RfidReader.Initialise">
            <summary>
            Establishes connection to hardware
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OmniKey5022RfidReader.EnumerateDevices">
            <summary>
            Get list of attached devices
            </summary>
            <returns>A collection of the devices</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.OmniKey5022RfidReader.GetSerialNumber(System.String,System.String)">
            <summary>
            Get serial number of the reader
            </summary>
            <param name="readerName">Name of the reader</param>
            <param name="simulatedResponse">Simulation mode value</param>
            <returns>Serial number</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.OmniKey5022RfidReader.Read(System.String)">
            <summary>
            Read RFID tag
            </summary>
            <param name="simulatedResponse">Simulation mode response</param>
            <returns>RFID tag data</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.SartoriusBiohitPipettor">
            <summary>
            Class that controls a single Sartorius Biohit pipettor.
            </summary>
            <remarks>
            Documentation used: T:\Hardware Reference\Sartorius\rLINE pipetting module\Manual\Sartorius rLine technical user manual v1.1.pdf
            </remarks>
        </member>
        <member name="T:Labman.Hardware.Instruments.SartoriusBiohitPipettor.Status">
            <summary>
            Enumeration of possible module statuses.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.SartoriusBiohitPipettor.Errors">
            <summary>
            Enumeration of possible error conditions.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.SartoriusBiohitPipettor"/> class.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.SartoriusBiohitPipettor.SartoriusBiohitSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.Aspirate(System.Int32)">
            <summary>
            Aspirate a given volume.
            </summary>
            <param name="volume">The volume to aspirate, in µL.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.Blowoff">
            <summary>
            Perform a blowoff.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.Dispense(System.Int32)">
            <summary>
            Dispense a given volume.
            </summary>
            <param name="volume">The volume to dispense, in µL.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.Dispose">
            <summary>
            Dispose method closes communications.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.EjectTip">
            <summary>
            Eject the tip.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetAspirateSpeed">
            <summary>
            Get the aspirate speed.
            </summary>
            <returns>The current speed, 1-6.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetCurrentVolume">
            <summary>
            Get the current volume of liquid in the pipette.
            </summary>
            <returns>The current volume, in µL.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetDispenseSpeed">
            <summary>
            Get the dispense speed.
            </summary>
            <returns>The dispense speed, 1-6.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetError">
            <summary>
            Read the errors from the error register.
            </summary>
            <returns>The current errors.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetFirmwareVersion">
            <summary>
            Get the firmware version of the module.
            </summary>
            <returns>The firmware version.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetLifetimeCycles">
            <summary>
            Get the total number of cycles performed by the module.
            </summary>
            <returns>The number of cycles.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetLiquidLevelSensorValue">
            <summary>
            Get the liquid level sensor value.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetModelNumber">
            <summary>
            Get the model number of the module.
            </summary>
            <returns>The model number.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetResolution">
            <summary>
            Get the resolution in nl.
            </summary>
            <returns>The resolution in nl.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetStatus">
            <summary>
            Get the current status of the module.
            </summary>
            <returns>The current status.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.Home">
            <summary>
            Home the pipette, will eject tip during operation.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.MoveToVolume(System.Int32)">
            <summary>
            Move to an absolute volume.
            </summary>
            <param name="volume">The volume to move to, in µL.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.SetAspirateSpeed(System.Int32)">
            <summary>
            Set the aspirate speed.
            </summary>
            <param name="speed">The desired speed, 1-6.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.SetDispenseSpeed(System.Int32)">
            <summary>
            Set the dispense speed.
            </summary>
            <param name="speed">The desired speed, 1-6.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.GetCurrentPosition">
            <summary>
            Get the current drive position.
            </summary>
            <returns>The position, in steps.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SartoriusBiohitPipettor.MoveToPosition(System.Int32)">
            <summary>
            Move to an absolute position.
            </summary>
            <param name="position">The desired position, in steps.</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.SicEC1EngraverInstrument">
            <summary>
            Class for the SIC EC1 Engraver
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SicEC1EngraverInstrument.#ctor">
            <summary>
            Constructor for SicEC1EngraverInstrument class. Creates a new settings instance and sets the user controls
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.SicEC1EngraverInstrument.SicEC1EngraverInstrumentSettings">
            <summary>
            The custom settings for the device
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.SicEC1EngraverInstrument._errorCodes">
            <summary>
            Define device error codes 
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SicEC1EngraverInstrument.GetErrorMessages(System.String)">
            <summary>
            Private method to get the corresponding messages from error codes
            </summary>
            <param name="codes">The numeric codes</param>
            <returns>The error messages</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SicEC1EngraverInstrument.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SicEC1EngraverInstrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SicEC1EngraverInstrument.Home">
            <summary>
            Moves the engraver to home position
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">Device returned error from command: HOMEPOSITION</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.SicEC1EngraverInstrument.EngraveText(System.String,System.Boolean,System.Int32)">
            <summary>
            Engraves the specified text.
            </summary>
            <param name="text">The text to engrave.</param>
            <param name="waitForCompletion">Whether to wait for the engraving to finish before returning</param>
            <param name="timeoutSeconds">How long to wait before throwing a timeout exception</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.SicEC1EngraverInstrument.ClearErrors">
            <summary>
            Clears errors from the device
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.WatersBackPressureRegulator">
            <summary>
            Used to communicate with the Waters Back Pressure Regulator hradware device.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.WatersBackPressureRegulator.NeedlePosition">
            <summary>
            Represents the needle position of the device.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.WatersBackPressureRegulator.CurrentPressure">
            <summary>
            Represents the current pressure in the device.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.WatersBackPressureRegulator.ValveTemperature">
            <summary>
            Represents the temperature of the valve.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.WatersBackPressureRegulator.ExternalHeaterTemperature">
            <summary>
            Represents the external heater tempreature. (if connected)
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.WatersBackPressureRegulator.ControlN">
            <summary>
            ControlN property
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.WatersBackPressureRegulator.AlarmOn">
            <summary>
            Set to true by the device when alarm is on
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.WatersBackPressureRegulator.ValveHeaterOn">
            <summary>
            Set to true by the device when valve heater is on
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.WatersBackPressureRegulator.ExternalHeaterOn">
            <summary>
            Set to true by the device when external heater is on
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.#ctor">
            <summary>
            Creates a Waters Back Pressure Regulaotr class and set the user control.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.Initialise">
            <summary>
            Initialise the controller and ensure communications are open
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.Dispose">
            <summary>
            Dispose method closes comms
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.SetPID(System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
             Sets the PID values of the device
            </summary>
            <param name="proportional">Proportional value</param>
            <param name="integral">Integral value</param>
            <param name="derivative">Derivative value</param>
            <param name="maximumOutput"> Maximum Output Value</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.StartBPR(System.Int16)">
            <summary>
            This command sets the BPR’s pressure control setpoint to the parameter and starts the automated pressure control.
            </summary>
            <param name="pressure">The pressure</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.StopBPR">
            <summary>
            This command stops the automated pressure control.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.StartData(System.UInt16)">
            <summary>
            Tells the device to start sending data to the PC at a set interrval.
            </summary>
            <param name="interval">The update rate in ms.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.StopData">
            <summary>
            This command tells the bpr to stop sending data to the PC.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.SetPressure(System.Int16)">
            <summary>
            Sets the pressure value
            </summary>
            <param name="pressure">The pressure</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.SetValveHeaterTemperature(System.Int16)">
            <summary>
            Set the twmperature of the valve heater
            </summary>
            <param name="temperature">The teperature </param>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.SetExternalHeaterTemperature(System.Int16)">
            <summary>
            Set the temperature of the external heater.
            </summary>
            <param name="temperature">The temperature</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.SetNeedlePosition(System.UInt16)">
            <summary>
            Sets the bpr to an absolute needle position. It is ignored if the bpr is currently controlling the pressure.
            </summary>
            <param name="needlePosition">Absolute needle position</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.ReadPacket(System.Byte[])">
            <summary>
            Updates the poroperties values witht he values form the device.
            </summary>
            <param name="data">Data to be decoded</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.GetData">
            <summary>
            Updates the properties values with the values form the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.CheckCRC(System.Byte[])">
            <summary>
            Verfies the CRC value of a TNET packet
            </summary>
            <param name="bytesRecieved">A TNET packet in bytes.</param>
            <returns>Returns true if the CRC is correct, flase if not.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.SendData(System.Byte[],System.Byte,System.Collections.Generic.List{Labman.Hardware.Instruments.WatersBackPressureRegulator.BitwiseControlProtocols})">
            <summary>
            Helpetr method used to send data to the device using the TNET protcol.
            </summary>
            <param name="data">The data being sent.</param>
            <param name="commandBtye">The command to run.</param>
            <param name="bitwiseControlProtocols">A list of the control protocols.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.BigEndiantToUInt16(System.Byte[],System.Int32)">
            <summary>
            Uses bit converter with Big Endian bytes.
            </summary>
            <param name="arr">The array of bytes</param>
            <param name="index">The starting index.</param>
            <returns>The converted short</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.WatersBackPressureRegulator.BigEndiantToInt16(System.Byte[],System.Int32)">
            <summary>
            Uses bit converter with Big Endian bytes.
            </summary>
            <param name="arr">The array of bytes</param>
            <param name="index">The index to start at.</param>
            <returns>The converted short</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.SheetResistanceUnits">
            <summary>
            Enumeration of sheet resistance units.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.CurrentFlowDirections">
            <summary>
            Enumeration of current flow directions.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.CurrentFlowDirections.Forward">
            <summary>Forward.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.CurrentFlowDirections.Reverse">
            <summary>Reverse.</summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.CurrentUnits">
            <summary>
            Enumeration of current unit types.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.CurrentUnits.nA">
            <summary>Nanoamps.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.CurrentUnits.uA">
            <summary>Microamps.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.CurrentUnits.mA">
            <summary>Milliamps.</summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.VoltageUnits">
            <summary>
            Enumeration of voltage untis.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.VoltageUnits.V">
            <summary>Volts.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.VoltageUnits.mV">
            <summary>Millivolts.</summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.Current">
            <summary>
            Models an electrical curent.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.Current.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.Current.Units">
            <summary>
            Gets or sets the units.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Current.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.Voltage">
            <summary>
            Models an electrical voltage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.Voltage.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.Voltage.Units">
            <summary>
            Gets or sets the units.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Voltage.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.SheetResistance">
            <summary>
            Models a sheet resistance.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.SheetResistance.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.SheetResistance.Units">
            <summary>
            Gets or sets the units.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SheetResistance.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.JandelRM300PlusStatus">
            <summary>
            Models a Jandel RM300 Plus Status.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.JandelRM300PlusStatus.Current">
            <summary>
            Gets or sets the current.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.JandelRM300PlusStatus.Message">
            <summary>
            Gets or sets the message.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.JandelRM300PlusStatus.StatusWord">
            <summary>
            Gets or sets the status word.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM300PlusStatus.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.JandelRM3000PlusOutputData">
            <summary>
            Models Jandel RM 3000 Plus Output Data.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.JandelRM3000PlusOutputData.Current">
            <summary>
            Gets or sets the current.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.JandelRM3000PlusOutputData.Voltage">
            <summary>
            Gets or sets the voltage.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.JandelRM3000PlusOutputData.SheetResistance">
            <summary>
            Gets or sets the sheet resistance.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000PlusOutputData.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.JandelRM3000Plus">
            <summary>
            Class providing functionality to operate a JANDEL RM3000+ resistivity meter.
            </summary>
            <seealso cref="T:Labman.Hardware.Instruments.Instrument" />
        </member>
        <member name="T:Labman.Hardware.Instruments.JandelRM3000Plus.DisplayMessageTypes">
            <summary>
            Enumeration of JANDEL RM3000+ display message types.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.JandelRM3000Plus.DisplayMessageTypes.NoMessage">
            <summary>No message.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.JandelRM3000Plus.DisplayMessageTypes.StandBy">
            <summary>Meter is in stand by.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.JandelRM3000Plus.DisplayMessageTypes.OutOfRange">
            <summary>Reading exceeds the maximum display of the in-built DVM. </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.JandelRM3000Plus.DisplayMessageTypes.ContactLimit">
            <summary>tThe automatic compliance voltage has been reached due to contact resistance.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.JandelRM3000Plus.DisplayMessageTypes.IllegalCurrent">
            <summary>the set current is outside the normal 10nA to 100mA range.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.JandelRM3000Plus.DisplayMessageTypes.CalibrationError">
            <summary>Indicates an error in the factory calibration.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.JandelRM3000Plus.DisplayMessageTypes.AutoRanging">
            <summary> Indicates the meter is auto ranging.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.JandelRM3000Plus.DisplayMessageTypes.Zeroing">
            <summary> Indicates the meter is zeroing.</summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.Initialise">
            <summary>
            The initialize method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.GetStatus">
            <summary>
            Gets the status.
            </summary>
            <returns>JandelRM300PlusStatus.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.GetReading">
            <summary>
            Gets the reading.
            </summary>
            <returns>JandelRM3000PlusOutputData.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.IsContactLimit">
            <summary>
            Determines whether meter is at contact limit.
            </summary>
            <returns>bool, true if at contact limit, false otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.IsAutoRanging">
            <summary>
            Determines whether meter is at auto ranging.
            </summary>
            <returns>bool, true if autoranging, false otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.IsZeroing">
            <summary>
            Determines whether meter is at zeroing.
            </summary>
            <returns>bool, true if zeroing, false otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.IsInStandBy">
            <summary>
            Determines whether meter is in stand by.
            </summary>
            <returns>bool, true if in stand by, false otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.SetCurrent(System.Double,Labman.Hardware.Instruments.CurrentUnits)">
            <summary>
            Sets the current.
            </summary>
            <param name="newCurrent">The new current.</param>
            <param name="units">The units.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">units - null</exception>
            <exception cref="T:Labman.Hardware.InstrumentException">Error</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.StartCurrentFlow(Labman.Hardware.Instruments.CurrentFlowDirections)">
            <summary>
            Starts current flow in the given direction.
            </summary>
            <param name="direction">The direction.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">direction - null</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.AutoRange">
            <summary>
            Perform autorange.
            </summary>
            <exception cref="T:System.TimeoutException">
            Timeout waiting for meter to start auto ranging
            or
            Timeout waiting for meter to stop auto ranging
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.Zero">
            <summary>
            Zeroes this meter.
            </summary>
            <exception cref="T:System.TimeoutException">
            Timeout waiting for meter to start zeroing 
            or
            Timeout waiting for meter to stop zeroing
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.StandBy">
            <summary>
            Put the meter into stand by.
            </summary>
            <exception cref="T:System.TimeoutException">Timeout waiting for meter to go into stand by</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.JandelRM3000Plus"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.JandelRM3000Plus.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MettlerPowderScale">
            <summary>
            This class comnicates with a Mettler Powder dispensing Balance
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MettlerPowderScale.WaitForCompletion">
            <summary>
            Enumeration of possible states for waiting for Completion of a task
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.WaitForCompletion.Wait">
            <summary>Wait until the action completes</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.WaitForCompletion.DoNotWait">
            <summary>Do not wait for completion</summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MettlerPowderScale.DoorState">
            <summary>
            Enumeration of possible states for the doors
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MettlerPowderScale.HeadState">
            <summary>
            Enumeration of possible states for the dispensing heads
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MettlerPowderScale.Stability">
            <summary>
            Enumeration of possible states for Stable or Unstable weights
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.Stability.Stable">
            <summary>Stable weighing gets a stable value from the balance</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.Stability.Unstable">
            <summary>Unstable weighing gets an instant value from the balance</summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MettlerPowderScale.ZeroType">
            <summary>
            Enumeration of possible states for Zeroing Types
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.ZeroType.Stable">
            <summary>Stable zeroing mode instructs the balance to zero and ensure it is stable at zero</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.ZeroType.Quick">
            <summary>Quick zeroing mode, instantly zeros the balance</summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MettlerPowderScale.EnabledState">
            <summary>
            Enumeration of possible states for Enabled States
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.EnabledState.Disabled">
            <summary>Disabled state</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.EnabledState.Enabled">
            <summary>Enabled state</summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.MettlerPowderScale.StabilitySetting">
            <summary>
            Enumeration of possible states for Balance Stability Settings
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.StabilitySetting.VeryFast">
            <summary>Very Fast Stability</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.StabilitySetting.Fast">
            <summary>Fast Stability</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.StabilitySetting.Normal">
            <summary>Normal Stability</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.StabilitySetting.Slow">
            <summary>Slow Stability</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale.StabilitySetting.VerySlow">
            <summary>Very Slow Stability</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale._maxRetries">
            <summary>We retry certain commands three times.</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.MettlerPowderScale._retryWaitTime">
            <summary>The amount of time we wait in milliseconds if we get "another job was running" errors.</summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.#ctor">
            <summary>
            Constructor for the Metter Powder Scale
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.Dispose">
            <summary>
            Dispose method closes comms
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.MettlerPowderScale.InstrumentSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.Initialise">
            <summary>
            Initialise the balance, ensuring that communications are open and ready and then set up balance parameters
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.Zero(Labman.Hardware.Instruments.MettlerPowderScale.WaitForCompletion,Labman.Hardware.Instruments.MettlerPowderScale.ZeroType,System.Int32)">
            <summary>
            Zeros the balance
            </summary>
            <remarks>
            If you do not wait for the command to complete then this method will not check any return values from the balance it will
            simply send the command to zero and carry on regardless, assuming that the balance has received/executed the command
            successfully
            </remarks>
            <param name="waitForCompletion">Indicates whether or not you wish to wait for completion</param>
            <param name="zeroType">Indicates the type of zero you require</param>
            <param name="timeoutInMilliseconds">Timeout interval in millisseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.SetAutoSamplerAttached(System.Boolean,System.Int32)">
            <summary>
            Sets whether the auto sampler is attached
            </summary>
            <param name="isAttached">Whether the auto sampler is attached</param>
            <param name="timeoutInMilliseconds">The timeout to perform the command</param>
            <returns>True on success</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.GetAutoSamplerPosition(System.Int32)">
            <summary>
            Gets the auto sampler position
            </summary>
            <param name="timeoutInMilliseconds">The timeout to perform the command</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.Calibrate(System.Int32)">
            <summary>
            Runs the balance's internal calibration routine
            </summary>
            <param name="timeoutInMilliseconds">Timeout interval in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.GetBalanceWeight(Labman.Hardware.Instruments.MettlerPowderScale.Stability,System.Int32)">
            <summary>
            Obtains a weight from the balance
            </summary>
            <param name="stabilityType">The type of stability required when reading the weight</param>
            <param name="timeoutInMilliseconds">The timeout in milliseconds</param>
            <returns>The weight returned from the balance in grams</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.SetBalanceStability(Labman.Hardware.Instruments.MettlerPowderScale.StabilitySetting)">
            <summary>
            Changes the stability setting of the balance (Value Release in Mettler manual)
            </summary>
            <param name="stabilitySetting">The stability setting to use</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.SetKeypadEnabledState(Labman.Hardware.Instruments.MettlerPowderScale.EnabledState)">
            <summary>
            Sets the enabled state of the keypad
            </summary>
            <param name="enabledState">The state you wish to set the keypad to</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.SetWeighingParameters(Labman.Hardware.Instruments.MettlerPowderScale.StabilitySetting)">
             <summary>
             Sets the balance waighing parameters based on the stability setting.
             This method used to be used to set the stability within Merlin, but was depriceated in favour of a more direct approach.
             </summary>
             <remarks>
             The balance stability setting should be tailored to the environment in which the balance will be operating
             along with the reliability of the weight you require. All but one of the weighing parameters are defaulted
             as below:
            
             VIBRATION ADAPTER = 2
             1=Low - Rapid stabilization, unstable if disturbances appear. Use for stable environments.
             2=Medium -Average
             3=High - Slow stabilization, use in unstable environments
             
             WEIGHIING PROCESS ADAPTOR = 3
             0=AdaptOff - Weight values have a fixed relation to the weight change with respect to time. Suitable for controlled dispensing systems.
             1=Fill - Display reacts quickly to small weight changes. Suitable for uncontrolled dispensing systems.
             2=Normal - Rapid/Coarse dispensing systems
             3=Check - Highly non-linear, load dependant behaivour. Suitable for rapid weight acquisition with very stable final value.
            
             REPROSET - Defined by the stability setting (off is ignored)
             0=Off - only 2 consecutive values are compared
             1=Std - 3 readings compared
             2=Good - 5 readings compared
             3=Excellent - 7 readings compared
             4=Best - 9 readings compared
            
             WEIGHT UNIT 1 = 0 (g)
             0=g , 1=kg , 2=t , 3=lb , 4=oz , 5=ozt , 6=GN , 7=dwt , 8=ct , 9=mg , 10=ug , 11=mo , 12=msg
             
             AUTOZERO = 1 (ON)
             0=off
             1=on
            
             READABILITY = 1 (10d)
             0=1d - max accuracy
             1=10d - faster
            
             WEIGH UNIT 2 = 0 (g)
             0=g , 1=kg , 2=t , 3=lb , 4=oz , 5=ozt , 6=GN , 7=dwt , 8=ct , 9=mg , 10=ug , 11=mo , 12=msg
            
             PRESET TARE = 0 (off)
             0=off, 1=on
             
             ACTIVATE FREE PROGRAMMABLE UNIT = 0 (off)
             0=off, 1=on
             
             DECIMAL PLACES OF FREE PROGRAMMABLE UNIT = 2 (not DP of balance!)
             
             FACTOR OF FREE PROGRAMMABLE UNIT = 1 (ignore)
             
             NAME OF FREE PROGRAMMABLE UNIT = 0 (ignore)
             
             MENU LANGUAGE = 0 (English)
             0=English, 1=German, 2=French, 3=Spanish, 4=Italian, 5=Russian, 6=Japanese
             </remarks>
             <param name="stabilitySetting">The setting for the stability of the balance</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.MoveFrontDoor(Labman.Hardware.Instruments.MettlerPowderScale.DoorState,System.Int32)">
            <summary>
            Moves the front (vertical) door
            </summary>
            <param name="position">Position to move the door to</param>
            <param name="timeoutInMilliseconds">Timeout interval in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.MoveSideDoor(Labman.Hardware.Instruments.MettlerPowderScale.DoorState,System.Int32)">
            <summary>
            Moves the side (horizontal) doors
            </summary>
            <param name="position">Position to move the doors to</param>
            <param name="timeoutInMilliseconds">Timeout interval in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.ToggleHeadLock(Labman.Hardware.Instruments.MettlerPowderScale.HeadState,System.Int32)">
            <summary>
            Toggles the locking of the dose head pin. Must be unlocked to remove the dose head, must be locked to dispense dose.
            </summary>
            <param name="position">Either locked or unlocked</param>
            <param name="timeoutInMilliseconds">Timout interval in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.SetTargetWeight(System.Double,System.Int32)">
            <summary>
            Sets the target weight to dispense 
            </summary>
            <param name="targetWeight">Weight in mg</param>
            <param name="timeoutInMilliseconds">Timeout interval in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.SetTargetPrecision(System.Double,System.Int32)">
            <summary>
            Sets the target weight precision to dispense 
            </summary>
            <param name="targetPrecision">Precision as percent error</param>
            <param name="timeoutInMilliseconds">Timout interval in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.StartDosing(System.Int32)">
            <summary>
            Initiates a dosing
            </summary>
            <param name="timeoutInMilliseconds">Timeout interval in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.CheckPanOccupied(System.Int32)">
            <summary>
            Checks if the pan has something on it. This includes the small metal tray.
            </summary>
            <param name="timeoutInMilliseconds">Timeout interval in milliseconds</param>
            <returns>True if there is something on it, false if empty</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.ReadHead">
            <summary>
            This returns the XML data from the RFID chip on the powder dispensing head
            </summary>
            <returns>XML string</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.CloseMessageWindow(System.Int32)">
            <summary>
            Closes the message window on the device
            </summary>
            <param name="timeoutInMilliseconds">The timeout to perform the command</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.OpenMessageWindow(System.Int32)">
            <summary>
            Opens the message window on the device
            </summary>
            <param name="timeoutInMilliseconds">The timeout</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.Reset(System.Int32)">
            <summary>
            Resets the unit
            </summary>
            <param name="timeoutInMilliseconds">The timeout</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.StopDosing(System.Int32)">
            <summary>
            Stops a dosing.
            </summary>
            <param name="timeoutInMilliseconds">Timeout interval in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.ProcessBalanceResponse(System.String)">
            <summary>
            Given a response from the balance as a string this function compares it against known responses and takes action accordingly. It contains all possible
            responses for the commands used in this module as documented in the Mettler Standard Interface Command Set (SICS) manual.
            </summary>
            <param name="response">The response received from the balance</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.GetErrorStringFromReply(System.String)">
            <summary>
            Converts a balances reply to an error code then to an error string.
            Code is expected to be at the end of the reply string, separated by a space.
            If string can't be parsed or the error code isn't recognized, the reply will be returned with an error message.
            </summary>
            <param name="reply">The reply</param>
            <returns>The error code and the corresponding error string</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.WaitForSuccessfullCommand(System.String,System.Byte[][],System.Int32,System.String[],System.String[],System.Action{System.String},System.Action)">
            <summary>
            Sends a command to the balance and waits for a successful response.
            </summary>
            <param name="command">The command to send to the balance</param>
            <param name="expectedReplies">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <param name="timeoutInMilliseconds">How long to wait before performing <paramref name="timeoutAction"/></param>
            <param name="successfulResponses">If a reply contains one of these, the function will return</param>
            <param name="errorResponses">If a reply contains one of these, the <paramref name="errorAction"/> will be performed with the error string received as the argument</param>
            <param name="errorAction">The action to perform if the reply contains one of the <paramref name="errorResponses"/>. The received string is the Action argument</param>
            <param name="timeoutAction">The action to perform if the <paramref name="timeoutInMilliseconds"/> elapses</param>
            <returns>The balance reply</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.WaitForSuccessfullCommand(System.String,System.Byte[][],System.Int32,System.String[],System.String,System.Action{System.String},System.Action)">
            <summary>
            Sends a command to the balance and waits for a successful response.
            </summary>
            <param name="command">The command to send to the balance</param>
            <param name="expectedReplies">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <param name="timeoutInMilliseconds">How long to wait before performing <paramref name="timeoutAction"/></param>
            <param name="successfulResponses">If a reply contains one of these, the function will return</param>
            <param name="errorResponse">If a reply contains this, the <paramref name="errorAction"/> will be performed with the error string received as the argument</param>
            <param name="errorAction">The action to perform if the reply contains <paramref name="errorResponse"/>. The received string is the Action argument</param>
            <param name="timeoutAction">The action to perform if the <paramref name="timeoutInMilliseconds"/> elapses</param>
            <returns>The balance reply</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.WaitForSuccessfullCommand(System.String,System.Byte[][],System.Int32,System.String,System.String[],System.Action{System.String},System.Action)">
            <summary>
            Sends a command to the balance and waits for a successful response.
            </summary>
            <param name="command">The command to send to the balance</param>
            <param name="expectedReplies">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <param name="timeoutInMilliseconds">How long to wait before performing <paramref name="timeoutAction"/></param>
            <param name="successfulResponse">If a reply contains this, the function will return</param>
            <param name="errorResponses">If a reply contains one of these, the <paramref name="errorAction"/> will be performed with the error string received as the argument</param>
            <param name="errorAction">The action to perform if the reply contains one of the <paramref name="errorResponses"/>. The received string is the Action argument</param>
            <param name="timeoutAction">The action to perform if the <paramref name="timeoutInMilliseconds"/> elapses</param>
            <returns>The balance reply</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.WaitForSuccessfullCommand(System.String,System.Byte[][],System.Int32,System.String,System.String,System.Action{System.String},System.Action)">
            <summary>
            Sends a command to the balance and waits for a successful response.
            </summary>
            <param name="command">The command to send to the balance</param>
            <param name="expectedReplies">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <param name="timeoutInMilliseconds">How long to wait before performing <paramref name="timeoutAction"/></param>
            <param name="successfulResponse">If a reply contains this, the function will return</param>
            <param name="errorResponse">If a reply contains this, the <paramref name="errorAction"/> will be performed with the error string received as the argument</param>
            <param name="errorAction">The action to perform if the reply contains <paramref name="errorResponse"/>. The received string is the Action argument</param>
            <param name="timeoutAction">The action to perform if the <paramref name="timeoutInMilliseconds"/> elapses</param>
            <returns>The balance reply</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.WaitForSuccessfullCommand(System.String,System.Byte[][],System.Int32,System.String[],System.Action)">
            <summary>
            Sends a command to the balance and waits for a successful response.
            </summary>
            <param name="command">The command to send to the balance</param>
            <param name="expectedReplies">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <param name="timeoutInMilliseconds">How long to wait before performing <paramref name="timeoutAction"/></param>
            <param name="successfulResponses">If a reply contains one of these, the function will return</param>
            <param name="timeoutAction">The action to perform if the <paramref name="timeoutInMilliseconds"/> elapses</param>
            <returns>The balance reply</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.MettlerPowderScale.WaitForSuccessfullCommand(System.String,System.Byte[][],System.Int32,System.String,System.Action)">
            <summary>
            Sends a command to the balance and waits for a successful response.
            </summary>
            <param name="command">The command to send to the balance</param>
            <param name="expectedReplies">An array of valid reply strings from the device. The reply will be checked to see if it CONTAINS any one of the specified responses.</param>
            <param name="timeoutInMilliseconds">How long to wait before performing <paramref name="timeoutAction"/></param>
            <param name="successfulResponse">If a reply contains this, the function will return</param>
            <param name="timeoutAction">The action to perform if the <paramref name="timeoutInMilliseconds"/> elapses</param>
            <returns>The balance reply</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraInstrument">
            <summary>
            This class provides an interface to an NDI aurora tracking system.
            Currently, this class can only handle 1 SIU at a time though the device can handle more.
            </summary>
            <seealso cref="T:Labman.Hardware.Instruments.Instrument" />
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraInstrument.DeviceType">
            <summary>
            The possible device types that make up the aurora hardware
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraInstrument.RelativeMode">
            <summary>
            Indicates which source to use as the relative position origin: none, a reference marker probe or a pre assigned origin position
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraInstrument.RecordedMovement">
            <summary>
            Stores the results from a recorded set of positions
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.RecordedMovement.Positions">
            <summary>
            The positions recorded in the move
            </summary>
            <value>
            The positions.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.RecordedMovement.MissingFrames">
            <summary>
            Frames that were missing
            </summary>
            <value>
            The missing frames.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.RecordedMovement.DisabledPortHandles">
            <summary>
            Port handles which were disabled for the recording
            </summary>
            <value>
            The disabled port handles.
            </value>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.RecordedMovement.#ctor(System.Collections.Generic.Dictionary{System.String,Labman.Hardware.Instruments.NDIAuroraInstrument.Position[]},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument.RecordedMovement"/> class.
            </summary>
            <param name="positions">The positions.</param>
            <param name="missingFrames">The missing frames.</param>
            <param name="disabledPortHandles">The disabled port handles.</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraInstrument.ProcessedBXPPacket">
            <summary>
            A single processed binary packet (a single recorded frame)
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.ProcessedBXPPacket.Positions">
            <summary>
            A dictoionary key:Probe handle, value position of probe
            </summary>
            <value>
            The positions.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.ProcessedBXPPacket.MissingFrames">
            <summary>
            A dictionary indicating if any probes were missing frames key:handle, value: frame number
            </summary>
            <value>
            The missing frames.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.ProcessedBXPPacket.DisabledPortHandles">
            <summary>
            List of disabled ports
            </summary>
            <value>
            The disabled port handles.
            </value>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.ProcessedBXPPacket.#ctor(System.Collections.Generic.Dictionary{System.String,Labman.Hardware.Instruments.NDIAuroraInstrument.Position},System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.List{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument.ProcessedBXPPacket"/> class.
            </summary>
            <param name="positions">The positions.</param>
            <param name="missingFrames">The missing frames.</param>
            <param name="disabledPortHandles">The disabled port handles.</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraInstrument.Device">
            <summary>
            Class to represent a device
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Device.Instance">
            <summary>
            The instance of the device
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Device.Type">
            <summary>
            The type of the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.Device.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.Device.#ctor(Labman.Hardware.Instruments.NDIAuroraInstrument.DeviceType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument.Device"/> class.
            </summary>
            <param name="type">The device type.</param>
            <param name="instance">The instance id.</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle">
            <summary>
            Class to represent a port handle and store information about them
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle.Handle">
            <summary>
            The port handle (identifier)
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle.Occupied">
            <summary>
            Gets a value indicating whether this <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle"/> is occupied.
            </summary>
            <value>
              <c>true</c> if occupied; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle.GPIO1Closed">
            <summary>
            Gets a value indicating whether gpio1  is closed.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle.GPIO2Closed">
            <summary>
            Gets a value indicating whether gpio2 is closed.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle.GPIO3Closed">
            <summary>
            Gets a value indicating whether gpio3 is closed.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle.Initialised">
            <summary>
            Gets a value indicating whether this <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle"/> is initialised.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle"/> is enabled.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandle"/> class.
            </summary>
            <param name="handle">The handle (identifier).</param>
            <param name="status">The string status from the PINIT command.</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraInstrument.Position">
            <summary>
            Represents a single position reported by the aurora
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.TX">
            <summary>
            The X location
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.TY">
            <summary>
            The Y location
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.TZ">
            <summary>
            The Z location
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.Q">
            <summary>
            The Rotation Quaternion.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.FrameNumber">
            <summary>
            The frame number the position was recorded at
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.Error">
            <summary>
            The error in the position
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.UInt32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument.Position"/> class.
            </summary>
            <param name="tX">The x position.</param>
            <param name="tY">The y position.</param>
            <param name="tZ">The z position.</param>
            <param name="q0">The q0 quaternion value.</param>
            <param name="qX">The qx quaternion value.</param>
            <param name="qY">The qy quaternion value.</param>
            <param name="qZ">The qz quaternion value.</param>
            <param name="frameNumber">The frame number.</param>
            <param name="error">The error in the position.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.#ctor(System.Double,System.Double,System.Double,System.Windows.Media.Media3D.Quaternion,System.UInt32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument.Position"/> class.
            </summary>
            <param name="tX">The x position.</param>
            <param name="tY">The y position.</param>
            <param name="tZ">The z position.</param>
            <param name="q">The rotation quaternion value.</param>
            <param name="frameNumber">The frame number.</param>
            <param name="error">The error in the position.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument.Position"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.op_Addition(Labman.Hardware.Instruments.NDIAuroraInstrument.Position,Labman.Hardware.Instruments.NDIAuroraInstrument.Position)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.op_Subtraction(Labman.Hardware.Instruments.NDIAuroraInstrument.Position,Labman.Hardware.Instruments.NDIAuroraInstrument.Position)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.Position.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraInstrument.Command">
            <summary>
            The commands for the system
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.NDIAuroraInstrument.ErrorCodes">
            <summary>
            The error codes for the system
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraInstrument.Parameters">
            <summary>
            Holds the parameter addresses as consts
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Devices">
            <summary>
            The devices that make up the aurora system
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.PortHandles">
            <summary>
            Gets the port handles.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.ReferenceMarker">
            <summary>
            Holds the port handle that is the reference marker
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Origin">
            <summary>
            Gets or sets the origin for calculating relative positions.
            </summary>
            <value>
            The origin.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Probes">
            <summary>
            The port handles which are probes
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Tracking">
            <summary>
            Gets a value indicating whether this <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument"/> is in tracking mode.
            </summary>
            <value>
              <c>true</c> if tracking; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.NDIAuroraInstrument.Recording">
            <summary>
            Gets a value indicating whether this <see cref="T:Labman.Hardware.Instruments.NDIAuroraInstrument"/> is recording.
            </summary>
            <value>
              <c>true</c> if recording; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.Dispose">
            <summary>
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.GetDevices">
            <summary>
            Gets the devices connected to the PC.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.GetPortHandles">
            <summary>
            Gets the port handles.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.GetParameter(Labman.Hardware.Instruments.NDIAuroraInstrument.Device,System.String)">
            <summary>
            Gets a parameter.
            </summary>
            <param name="device">The device the parameter belongs to.</param>
            <param name="parameter">The parameter.</param>
            <returns>the value of the parameter</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.GetParameter(System.String)">
            <summary>
            Gets a parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>the value of the parameter</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.GetPortHandles(Labman.Hardware.Instruments.NDIAuroraInstrument.Device)">
            <summary>
            Gets the port handles.
            </summary>
            <param name="siu">The siu instance.</param>
            <returns>the port handles for the siu</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.GetCommandTimeout(Labman.Hardware.Instruments.NDIAuroraInstrument.Command)">
            <summary>
            Gets thetimeout for a command.
            </summary>
            <param name="command">The command.</param>
            <returns>the timeout length</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.SetSystemBeeper(System.Boolean)">
            <summary>
            Sets the system beeper.
            </summary>
            <param name="enabled">if set to <c>true</c> [enabled].</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.StartTracking">
            <summary>
            Starts the system tracking.
            </summary>
            <exception cref="T:Labman.Hardware.Instruments.NDIAuroraException">Invalid response received for command TSTART</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.StopTracking">
            <summary>
            Stops the system tracking.
            </summary>
            <exception cref="T:Labman.Hardware.Instruments.NDIAuroraException">
            Cannot stop tracking while recording
            or
            Invalid response received for command TSTOP
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.GetPositions">
            <summary>
            Gets the positions of any probes in the field.
            </summary>
            <returns>Dictionary of probe handle, position of probe; Dictionary of probe handle, frames probe handle was missing; list of disabled probes</returns>
            <exception cref="T:Labman.Hardware.Instruments.NDIAuroraException">
            Tracking must be started to get position
            or
            Error encountered sending command BX
            or
            Error encountered sending command BX
            or
            Error encountered sending command BX
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.StartRecording">
            <summary>
            Starts the system recording.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.StopRecording(Labman.Hardware.Instruments.NDIAuroraInstrument.RelativeMode)">
            <summary>
            Stops the recording and returns the recorded positions.
            </summary>
            <param name="relativePositions">Type of relative positioning to use</param>
            <returns>the recorded positions, the missing frames, the disabled port handles</returns>
            <exception cref="T:System.InvalidOperationException">System is not recroding</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.RecordPositions">
            <summary>
            Records the positions of the probes. To be ran in 
            </summary>
            <exception cref="T:Labman.Hardware.Instruments.NDIAuroraException">
            Error encountered sending command BX
            or
            Error encountered sending command BX
            or
            Error encountered sending command BX
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.TraverseAndAddToList(System.Object,System.Collections.Generic.List{System.Byte}@)">
            <summary>
            Recursively depth first traverses a potential array of objects converting the nodes to ascii bytes of the string representations and adding them onto a packet
            </summary>
            <param name="item">The object(s) to add to the packet</param>
            <param name="packet">The packet.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraInstrument.CheckErrorBytes(System.Byte[])">
            <summary>
            Checks for ascii error in the first 5 bytes.
            </summary>
            <param name="response">The response.</param>
            <returns>true if the packet contains error</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.NDIAuroraException">
            <summary>
            Custom exception for the NDI aurora
            </summary>
            <seealso cref="T:Labman.Hardware.InstrumentException" />
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.NDIAuroraException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.NDIAuroraException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.NDIAuroraException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.QuasarRGBLEDController">
            <summary>
            Class for Quasar RGB LED Controller
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.QuasarRGBLEDController.Channel">
            <summary>
            Channel enumeration
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.QuasarRGBLEDController.Sequence">
            <summary>
            Sequence enumeration
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.QuasarRGBLEDController.QuasarRGBLEDControllerSettings">
            <summary>
            Custom settings property
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.#ctor">
            <summary>
            Constructor for Quasar RBG LED Controller
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.Dispose">
            <summary>
            Dispose method closes comms
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.Initialise">
            <summary>
            Initialise the controller and ensure communications are open
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.QuasarRGBLEDController.InstrumentSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.SetColour(System.Windows.Media.Color)">
            <summary>
            Sets the colour of the LEDs by system colours
            </summary>
            <param name="colour">The desired colour</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.SetColour(System.Drawing.Color)">
            <summary>
            Sets the colour of the LEDs by system colours
            </summary>
            <param name="colour">The desired colour</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.SetColour(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the colour of the LEDs by RGB value
            </summary>
            <param name="red">The red intensity, 0-250</param>
            <param name="green">The green intensity, 0-250</param>
            <param name="blue">The blue intensity, 0-250</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.StartSequence(Labman.Hardware.Instruments.QuasarRGBLEDController.Sequence)">
            <summary>
            Starts a built in sequence
            </summary>
            <param name="sequence">The sequence type</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.StartSequence(Labman.Hardware.Instruments.QuasarRGBLEDController.Sequence,System.Byte)">
            <summary>
            Starts a built in sequence
            </summary>
            <param name="sequence">The sequence type</param>
            <param name="interval">The speed at which to perform the sequence</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.Off">
            <summary>
            Sets intensity of all colour channels to 0
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.SetSequenceInterval(System.Byte)">
            <summary>
            Sets the sequence interval
            </summary>
            <param name="interval">The interval</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.SetChannelIntensity(Labman.Hardware.Instruments.QuasarRGBLEDController.Channel,System.Int32)">
            <summary>
            Sets the intensity of a channel
            </summary>
            <param name="channel">The channel to set</param>
            <param name="intensity">The intensity to set, 0-250</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.SetAllChannelIntensity(System.Int32)">
            <summary>
            Sets the intensity of all channels
            </summary>
            <param name="intensity">The intensity to set 0-250</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.ValidateByte(System.Byte)">
            <summary>
            Validates an intensity byte is within 0-250 range
            </summary>
            <param name="intensityByte">The byte to validate</param>
            <returns>If byte in > 250, returns 250, else returns original byte</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.QuasarRGBLEDController.SetModuleAddress(System.Byte)">
            <summary>
            Sets the module address
            </summary>
            <param name="newAddress">New module address, range 76(default) - 90</param>
        </member>
        <member name="T:Labman.Hardware.Instruments.Videojet1550Instrument">
            <summary>
            Class to communicate with a Videojet 1550 inkjet printer
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.Videojet1550Instrument.Videojet1550InstrumentSettings">
            <summary>
            Gets or sets the videojet1550 instrument settings.
            </summary>
            <value>
            The videojet1550 instrument settings.
            </value>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.Videojet1550Instrument"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.Print">
            <summary>
            Prints the current job.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.Run">
            <summary>
            Sets the printer head state to running.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.CheckIfRunning">
            <summary>
            Checks if running.
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">Printer is not running</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.CheckForFaults">
            <summary>
            Checks for faults.
            </summary>
            <exception cref="T:Labman.Hardware.InstrumentException">Printer faulted</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.SendString(System.Collections.ObjectModel.ObservableCollection{System.String})">
            <summary>
            Sends the string.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.Retry">
            <summary>
            Retries the previous command.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.SendCommand(System.String,System.Collections.ObjectModel.ObservableCollection{System.String})">
            <summary>
            Sends the command.
            </summary>
            <param name="command">The command.</param>
            <param name="data">The data.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">Printer command failed</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.Videojet1550Instrument.BuildPacket(System.String,System.Collections.ObjectModel.ObservableCollection{System.String})">
            <summary>
            Builds the packet.
            </summary>
            <param name="command">The command.</param>
            <param name="data">The data.</param>
            <returns>The packet</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">
            You must set the field names of this printer in the settings tab.
            or
            You do not have enough fields for this amount of data.
            or
            You must set data for all fields.
            </exception>
        </member>
        <member name="T:Labman.Hardware.Instruments.HachHQ30d">
            <summary>
            Class providing functionality to take and return measurements from a HACH HQ30d Meter.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.HachHQ30d._comHandle">
            <summary>
            The _com handle, use a safe handle here to let .Net manage closing when we are finished with it.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.HachHQ30d.SendCommand(System.String)">
            <summary>
            Sends a command to the Hach HQ30d.
            </summary>
            <param name="command">The command to send.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.HachHQ30d.GetReply(System.String,System.Int32)">
            <summary>
            Gets a reply from the Hach HQ30d.
            </summary>
            <param name="terminator">Specifies a terminator. Method will return once this is found in a reply from the Hach.</param>
            <param name="timeoutSeconds">Specifies a timeout in seconds. If above terminator is not found in reply string within this
            period an exception is thrown.</param>
            <returns>string, reply from Hach.</returns>
            <exception cref="T:System.TimeoutException">Timeout waiting for reply.</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.HachHQ30d.StartAutoSendReadingMode">
            <summary>
            Starts the automatic send reading mode.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.HachHQ30d.Initialise">
            <summary>
            Initialises comms with the Hach HQ30d.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.HachHQ30d.TakeMeasurement(System.Int32)">
            <summary>
            Takes a measurement and returns the result.
            </summary>
            <param name="timeoutSeconds">Specifies a measurement timeout.</param>
            <returns>Refeenc to a HachHQ30dMeasurement is returned.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.HachHQ30d.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.HachHQ30d"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.HachHQ30d.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.HachHQ30d.HachHQ30dMeasurement">
            <summary>
            Class to encapsulate results of a measurement.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.HachHQ30d.HachHQ30dMeasurement.Measurement">
            <summary>
            Gets or sets the meausrement.
            </summary>
            <value>
            The meausrement.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.HachHQ30d.HachHQ30dMeasurement.SecondaryMeasurement">
            <summary>
            Gets or sets the secondary measurement.
            </summary>
            <value>
            The secondary measurement.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.HachHQ30d.HachHQ30dMeasurement.TertiaryMeasurement">
            <summary>
            Gets or sets the tertiary measurement.
            </summary>
            <value>
            The tertiary measurement.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.HachHQ30d.HachHQ30dMeasurement.SampleTemperature">
            <summary>
            Gets or sets the sample temperature.
            </summary>
            <value>
            The sample temperature.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.HachHQ30d.HachHQ30dMeasurement.TimeStamp">
            <summary>
            Gets or sets the time stamp.
            </summary>
            <value>
            The time stamp.
            </value>
        </member>
        <member name="T:Labman.Hardware.Instruments.LthMxd73pHMeterInstrument">
            <summary>
            A Class to talk to the LTH MXD pH and Temperature meter.
            </summary>
            <seealso cref="T:Labman.Hardware.Instruments.Instrument" />
        </member>
        <member name="F:Labman.Hardware.Instruments.LthMxd73pHMeterInstrument._temperaturePacket">
            <summary>
            The temperature packet
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.LthMxd73pHMeterInstrument._pHPacket">
            <summary>
            The ph packet
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LthMxd73pHMeterInstrument.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LthMxd73pHMeterInstrument.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LthMxd73pHMeterInstrument.GetTemperature">
            <summary>
            Gets the temperature.
            </summary>
            <returns>The temperature in whatever units the device is set to.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.LthMxd73pHMeterInstrument.GetPh">
            <summary>
            Gets the pH.
            </summary>
            <returns>The pH (0.00 - 14.00)</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.LthMxd73pHMeterInstrument.ValidatePacket(System.Byte[])">
            <summary>
            Validates the packet.
            </summary>
            <param name="data">The data.</param>
            <returns>true when enough data for a complete packet has been recieved from device</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.SentronPHSI600Instrument">
            <summary>
            Class to communicate with an Omega pH and Temperature meter
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SentronPHSI600Instrument.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SentronPHSI600Instrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.SentronPHSI600Instrument.GetTemperature">
            <summary>
            Gets the temperature from the instrument
            </summary>
            <returns>Temperature value</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.SentronPHSI600Instrument.GetpH">
            <summary>
            Getps the pH from the instrument
            </summary>
            <returns>pH value</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument">
            <summary>
            Class to communicate with a BioChem Fluidics Electric Rotary Valve
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument.WeedtechWtpctmCounterInstrumentSettings">
            <summary>
            Gets or sets the weedtech WTPCTM counter instrument settings.
            </summary>
            <value>
            The weedtech WTPCTM counter instrument settings.
            </value>
        </member>
        <member name="M:Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument.Initialise">
            <summary>
            Opens the communication interface to the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument.GetCount">
            <summary>
            Gets the count.
            </summary>
            <returns>System.Int32.</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">
            Response from counter did not contain a parsable result
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument.SetCount(System.Int32)">
            <summary>
            Sets the count.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument.GenerateHeader">
            <summary>
            Generates the header.
            </summary>
            <returns>System.Char.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument.ValidateDeviceConnection">
            <summary>
            Validates the device connection.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument">
            <summary>
            Class to communicate with a BioChem Fluidics Electric Rotary Valve
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.IndexDirection">
            <summary>
            Direction to index
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.MotorCommands">
            <summary>
            The commands that are used to control the attached motor
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.AxisParameters">
            <summary>
            Axis parameter indexes used during operation of the valve
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.StatusCodes">
            <summary>
            Status code replies from motor
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.CurrentIndex">
            <summary>
            Gets the current index of the valve.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.HomeStateIsValid">
            <summary>
            a flag indicating whether the home state is valid.
            This can be set externally if the home state is actually known.
            </summary>
            <value>
              <c>true</c> if [home state is valid]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.Initialise">
            <summary>
            Opens the communication interface to the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.Home">
            <summary>
            Homes the valve.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.IndexPositive">
            <summary>
            Indexes the valve one position in the positive direction.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.IndexNegative">
            <summary>
            Indexes the valve oneposition in the negative direction.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.GoToIndex(System.Int32)">
            <summary>
            Moves the valve to the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.OverrideHomeState(System.Int32)">
            <summary>
            Sets the valve home state to valid and specifies the current port.
            </summary>
            <param name="portNumber">The port number.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">Index out of range: specified port number does not exist on valve.</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.SetParameter(Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.AxisParameters,System.Int32)">
            <summary>
            Sets the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.GetParameter(Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.AxisParameters)">
            <summary>
            Gets the parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The value of the parameter</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.SendCommand(Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.MotorCommands,System.Int32,System.Byte)">
            <summary>
            Sends a command to the motor.
            </summary>
            <param name="command">The command.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <returns>The result of the command</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.CalculateMoveToIndex(System.Int32)">
            <summary>
            Calculates the move required to reach a specific index from the current position.
            </summary>
            <param name="index">The index.</param>
            <returns>A ValveMove class that contains the direction and number of ports to move</returns>
            <exception cref="T:Labman.Hardware.InstrumentException">Index out of range: specified port number does not exiast on valve.</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.BioChemFluidicsValveInstrument"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.Linx7900PrinterInstrument">
            <summary>
            Class to communicate with a Linx 7900 Printer
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands">
            <summary>
            Enumeration of possible command ID that can be sent
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.StartPrint">
            <summary>Start Print</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.StopPrint">
            <summary>Stop Print</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.StopJet">
            <summary>Stop Jet</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.StartJet">
            <summary>Start Jet</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.TriggerPrint">
            <summary>Trigger Print</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.DownloadRemoteFieldData">
            <summary>Download Remote Field Data</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.DownloadDataSet">
            <summary>Download a data set</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.UploadDataSet">
            <summary>Upload a data set</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.DeleteDataSet">
            <summary>Delete a data set</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.SetPrintDelay">
            <summary>Sets the print delay</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.RequestPrinterStatus">
            <summary>Requests the current printer status</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.MessageData">
            <summary>
            Download a message to print
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands.LoadPrintMessage">
            <summary>
            Loads a message to be printed
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.Linx7900PrinterInstrument.PrinterStatusCodes">
            <summary>
            Enumerations of possible printer status codes (p-status)
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.Linx7900PrinterInstrument.CommandStatusCodes">
            <summary>
            Enumeration of possible command status codes (c-status)
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.Linx7900PrinterInstrument.JetStates">
            <summary>
            Enumeration of possible jet states
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.Linx7900PrinterInstrument.PrinterStates">
            <summary>
            Enumeration of possible printer states
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.Linx7900PrinterInstrument.DataSets">
            <summary>
            Enumeration of data sets used by the printer
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.Linx7900PrinterInstrument.PrinterErrors">
            <summary>
            Flags enumeration of possible printer errors
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.SendStringToPrinter(System.String)">
            <summary>
            Sends the string to printer.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.ClearStringOnPrinter">
            <summary>
            Clears the currently loaded text in the remote buffered field
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.SendLogoToPrinter(System.String,System.Drawing.Bitmap)">
            <summary>
            Sends the logo to printer. The logo must be a 1bpp bitmap.
            </summary>
            <param name="name">The name to store the image as on the printer.</param>
            <param name="image">The image.</param>
            <exception cref="T:Labman.Hardware.InstrumentException">Logo is in an invalid format. The printer requires a monochrome bitmap with 1bpp bit depth.</exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.SendLogoToPrinter(System.String,System.Byte[],System.Int16)">
            <summary>
            Sends the logo to printer.
            </summary>
            <param name="name">The name to store the image as on the printer.</param>
            <param name="data">The pixel data.</param>
            <param name="logoWidth">Width of the logo.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.StartPrint">
            <summary>
            Sends the command to the printer to start print
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.StopPrint">
            <summary>
            Sends the command to the printer to stop print.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.StartJet">
            <summary>
            Sends the command to the printer to start jet
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.StopJet">
            <summary>
            Sends the command to the printer to stop jet.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.TriggerPrint">
            <summary>
            Sends the command to print the current message
            </summary>
            <remarks>
            Printing must be enabled manually or with StartPrint before this is called
            </remarks>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.SetPrintDelay(System.Int32)">
            <summary>
            Sets the print delay on the printer
            </summary>
            <param name="delay">The delay.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.CheckPrinterIsOk">
            <summary>
            Checks Printer is Ok
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.SetPrintMessagae(System.String)">
            <summary>
            Sets the messagae to print.
            </summary>
            <param name="messageName">Name of the message.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.GetDataSets">
            <summary>
            Gets the data sets.
            </summary>
            <returns>The data sets</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.GetJetState">
            <summary>
            Sends a status request command and extracts the Jet status from the reply
            </summary>
            <returns>
            The Jet status byte as a <see cref="T:Labman.Hardware.Instruments.Linx7900PrinterInstrument.JetStates"/>
            </returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.GetPrinterState">
            <summary>
            Gets the printer state
            </summary>
            <returns>The printer state</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.GetPrinterErrors">
            <summary>
            Gets any printer erros
            </summary>
            <returns>A 4 byte flag array of possible errors</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.LowSolvent">
            <summary>
            Sends a status request to the printer and checks for low sovent reply
            </summary>
            <returns>true if solvent is low, otherwise false</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.LowSolvent(Labman.Hardware.Instruments.Linx7900PrinterInstrument.PrinterErrors)">
            <summary>
            Parses an error code to check for low solvent warning
            </summary>
            <param name="errorCode">The PrinterErrors type to check</param>
            <returns>true if solvent is low, otherwise false</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.LowInk">
            <summary>
            Sends a status request to the printer and checks for low sovent reply
            </summary>
            <returns>true if ink is low, otherwise false</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.LowInk(Labman.Hardware.Instruments.Linx7900PrinterInstrument.PrinterErrors)">
            <summary>
            Parses an error code to check for low ink warning
            </summary>
            <param name="errorCode">The PrinterErrors type to check</param>
            <returns>true if ink is low, otherwise false</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.GetPacketToSend(Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands,System.String)">
            <summary>
            Gets the packet data that is to be sent for the supplied command
            </summary>
            <param name="commandToSend">the command to send</param>
            <param name="text">the text to send, this is only used for remote field data</param>
            <returns>The data packet</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.GetPacketToSend(Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands,System.Int32)">
            <summary>
            Builds a packet to send to the device
            </summary>
            <param name="commandToSend">the command to send</param>
            <param name="value">the value to set - this can ony be used for the print delay command</param>
            <returns>The data packet</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.GetPacketToSend(Labman.Hardware.Instruments.Linx7900PrinterInstrument.Commands,System.Int32,System.String,System.Byte[],System.Int16)">
            <summary>
            Builds a packet to send to the device
            </summary>
            <param name="commandToSend">The command to send.</param>
            <param name="value">The value.</param>
            <param name="text">The text.</param>
            <param name="logo">The logo.</param>
            <param name="logoWidth">Width of the logo.</param>
            <returns>
            The packet ready to send
            </returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.ValidateReplyAfterSendingText(System.Byte[])">
            <summary>
            Validates the packet. This is called from the PacketValidationMethod callback from the comms routine.
            </summary>
            <param name="data">The data to check</param>
            <returns>True if the data is valid, else false</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.ValidateReplyAfterSendingStatusRequest(System.Byte[])">
            <summary>
            Validates the packet. This is called from the PacketValidationMethod callback from the comms routine.
            </summary>
            <param name="data">The data to check</param>
            <exception cref="T:Labman.Hardware.InstrumentException">
            The length of the reply was not equal to the expected length of replies of 11
            or
            A printer status error was returned from Linx printer, error code:  + (PrinterStatusCodes)data[1]
            or
            A command status error was returned from Linx printer, error code:  + (CommandStatusCodes)data[2]
            or
            The Jet is not running, current Jet state:  + (JetStates)data[4]
            </exception>
        </member>
        <member name="M:Labman.Hardware.Instruments.Linx7900PrinterInstrument.GenerateHeaderForLogo(System.Byte[],System.String,System.Int16)">
            <summary>
            Generates the header for logo.
            </summary>
            <param name="logoData">The logo data.</param>
            <param name="logoName">Name of the logo.</param>
            <param name="logoWidth">Width of the logo.</param>
            <returns>The header for the logo</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument">
            <summary>
            Class to communicate with a Linx CJ400 Printer
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.Commands">
            <summary>
            Enumeration of possible command ID that can be sent
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.Commands.StartPrint">
            <summary>Start Print</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.Commands.StopPrint">
            <summary>Stop Print</summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.Commands.DownloadRemoteFieldData">
            <summary>Download Remote Field Data</summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.SendStringToPrinter(System.String)">
            <summary>
            Sends the string to printer.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.StartPrint">
            <summary>
            Sends the command to the printer to start print
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.StopPrint">
            <summary>
            Sends the command to the printer to stop print.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.GetTextDataPacketToSend(System.String)">
            <summary>
            Builds a packet to send to the device - this is only for sending text to a remote field
            </summary>
            <param name="text">The text data to send</param>
            <returns>The packet ready to send </returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.GetPacketToSend(Labman.Hardware.Instruments.LinxCJ400PrinterInstrument.Commands)">
            <summary>
            Builds a packet to send to the device
            </summary>
            <param name="commandToSend">The command to send.</param>
            <returns>
            The packet ready to send
            </returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.OrionStarA211Instrument">
            <summary>
            Class to communicate with an Orion Star A2110 pH Meter
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionStarA211Instrument.Initialise">
            <summary>
            Opens the communication interface to the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionStarA211Instrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionStarA211Instrument.GetpH">
            <summary>
            Getps the pH from the instrument
            </summary>
            <returns>pH value</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionStarA211Instrument.SetPrintingFormatToCSV">
            <summary>
            This ensures that the meter is in CSV mode, the meter defaults to 'printer'.  It needs to be in 
            CSV mode for comminicating remotely.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionStarA211Instrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.OrionStarA211Instrument"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement">
            <summary>
            Class to hold pH measurement information retrieved from an 
            Orion VersaStar meter.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>
            The channel.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.pH">
            <summary>
            Gets or sets the pH.
            </summary>
            <value>
            The p h.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.pHUnit">
            <summary>
            Gets or sets the pH unit.
            </summary>
            <value>
            The measurement unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.mVValue">
            <summary>
            Gets or sets the mV value.
            </summary>
            <value>
            The m v value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.mVUnit">
            <summary>
            Gets or sets the mV unit.
            </summary>
            <value>
            The m v unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.Temperature">
            <summary>
            Gets or sets the temperature.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.TemperatureUnit">
            <summary>
            Gets or sets the temperature unit.
            </summary>
            <value>
            The temperature unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.SlopeValue">
            <summary>
            Gets or sets the slope value.
            </summary>
            <value>
            The slope value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.SlopeUnit">
            <summary>
            Gets or sets the slope unit.
            </summary>
            <value>
            The slope unit.
            </value>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarpHMeasurement.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement">
            <summary>
            Class to hold ISE measurement information retrieved from an 
            Orion VersaStar meter.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>
            The channel.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.ElectrodeType">
            <summary>
            Gets or sets the type of the electrode.
            </summary>
            <value>
            The type of the electrode.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.ISEValue">
            <summary>
            Gets or sets the pH value.
            </summary>
            <value>
            The measurement value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.ISEUnit">
            <summary>
            Gets or sets the pH unit.
            </summary>
            <value>
            The measurement unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.mVValue">
            <summary>
            Gets or sets the mV value.
            </summary>
            <value>
            The m v value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.mVUnit">
            <summary>
            Gets or sets the mV unit.
            </summary>
            <value>
            The m v unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.Temperature">
            <summary>
            Gets or sets the temperature.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.TemperatureUnit">
            <summary>
            Gets or sets the temperature unit.
            </summary>
            <value>
            The temperature unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.AverageSlopeValue">
            <summary>
            Gets or sets the average slope value.
            </summary>
            <value>
            The average slope value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.AverageSlopeUnit">
            <summary>
            Gets or sets the average slope unit.
            </summary>
            <value>
            The average slope unit.
            </value>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarISEMeasurement.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement">
            <summary>
            Class to hold conductivity measurement information retrieved from an 
            Orion VersaStar meter.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>
            The channel.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.ConductivityValue">
            <summary>
            Gets or sets the conductivity value.
            </summary>
            <value>
            The conductivity value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.ConductivityUnit">
            <summary>
            Gets or sets the conductivity unit.
            </summary>
            <value>
            The conductivity unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.ConductanceValue">
            <summary>
            Gets or sets the conductance value.
            </summary>
            <value>
            The conductance value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.ConductanceUnit">
            <summary>
            Gets or sets the conductance unit.
            </summary>
            <value>
            The conductance unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.Temperature">
            <summary>
            Gets or sets the temperature.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.TemperatureUnit">
            <summary>
            Gets or sets the temperature unit.
            </summary>
            <value>
            The temperature unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.TemperatureCoefficientValue">
            <summary>
            Gets or sets the temperature coefficient value.
            </summary>
            <value>
            The temperature coefficient value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.TemperatureCoefficientUnit">
            <summary>
            Gets or sets the temperature coefficient unit.
            </summary>
            <value>
            The temperature coefficient unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.TemperatureReferenceValue">
            <summary>
            Gets or sets the temperature reference value.
            </summary>
            <value>
            The temperature reference value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.TemperatureReferenceUnit">
            <summary>
            Gets or sets the temperature reference unit.
            </summary>
            <value>
            The temperature reference unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.CellConstantValue">
            <summary>
            Gets or sets the cell constant value.
            </summary>
            <value>
            The cell constant value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.CellConstantUnit">
            <summary>
            Gets or sets the cell constant unit.
            </summary>
            <value>
            The cell constant unit.
            </value>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarConductivityMeasurement.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement">
            <summary>
            Class to hold TDS measurement information retrieved from an 
            Orion VersaStar meter.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.Channel">
            <summary>
            Gets or sets the channel.
            </summary>
            <value>
            The channel.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
            <value>
            The mode.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.TDSValue">
            <summary>
            Gets or sets the conductivity value.
            </summary>
            <value>
            The conductivity value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.TDSUnit">
            <summary>
            Gets or sets the conductivity unit.
            </summary>
            <value>
            The conductivity unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.ConductanceValue">
            <summary>
            Gets or sets the conductance value.
            </summary>
            <value>
            The conductance value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.ConductanceUnit">
            <summary>
            Gets or sets the conductance unit.
            </summary>
            <value>
            The conductance unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.Temperature">
            <summary>
            Gets or sets the temperature.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.TemperatureUnit">
            <summary>
            Gets or sets the temperature unit.
            </summary>
            <value>
            The temperature unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.TemperatureCoefficientValue">
            <summary>
            Gets or sets the temperature coefficient value.
            </summary>
            <value>
            The temperature coefficient value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.TemperatureCoefficientUnit">
            <summary>
            Gets or sets the temperature coefficient unit.
            </summary>
            <value>
            The temperature coefficient unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.TemperatureReferenceValue">
            <summary>
            Gets or sets the temperature reference value.
            </summary>
            <value>
            The temperature reference value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.TemperatureReferenceUnit">
            <summary>
            Gets or sets the temperature reference unit.
            </summary>
            <value>
            The temperature reference unit.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.TDSFactorValue">
            <summary>
            Gets or sets the TDS factor value.
            </summary>
            <value>
            The TDS factor value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.CellConstantValue">
            <summary>
            Gets or sets the cell constant value.
            </summary>
            <value>
            The cell constant value.
            </value>
        </member>
        <member name="P:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.CellConstantUnit">
            <summary>
            Gets or sets the cell constant unit.
            </summary>
            <value>
            The cell constant unit.
            </value>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarTDSMeasurement.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.OrionVersaStarInstrument">
            <summary>
            Class to communicate with an Orion VersaStar Meter.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarInstrument.CreateChannelMeasurementObject(System.String)">
            <summary>
            Creates the channel measurement object.
            </summary>
            <param name="channelMeasurement">The channel measurement.</param>
            <returns>The channel measuement object</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarInstrument.CreateMultipleChannelMeasurementObject(System.String)">
            <summary>
            Creates the channel measurement object when there is multiple channels
            </summary>
            <param name="channelMeasurement">The channel measurement.</param>
            <returns>The channel measuement object</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarInstrument.Initialise">
            <summary>
            Opens the communication interface to the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarInstrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarInstrument.GetAllChannelMeasurements">
            <summary>
            Gets all channel measurements.
            </summary>
            <returns>List of channel measurements</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarInstrument.GetChannelMeasurement(System.Int32)">
            <summary>
            Gets a single channel measurement.
            </summary>
            <param name="channel">The channel.</param>
            <returns>If successful a OrionVersaStarChannelMeasurement is returned, null
            is returned otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarInstrument.SetPrintingFormatToCSV">
            <summary>
            This ensures that the meter is in CSV mode, the meter defaults to 'printer'.  It needs to be in 
            CSV mode for communicating remotely.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OrionVersaStarInstrument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Instruments.OrionStarA211Instrument"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.TQCAB3000Instrument">
            <summary>
            Class to communicate with a TQC AB3000 PC controlled Automatic Film Applicator
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.TQCAB3000Instrument.Command">
            <summary>
            The used commands with the device
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.TQCAB3000Instrument.CommandControls">
            <summary>
            The possible parts of the device
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.TQCAB3000Instrument.CommandParts">
            <summary>
            Actual values to build up the command packet
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.SetAFAVacuumOff">
            <summary>
            Turning off the vacuum
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.SetAFAVacuumA4">
            <summary>
            Set the vacuum area to A4
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.SetAFAVacuumA3">
            <summary>
            Set the vacuum area to A3
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.SetAFAClampClose">
            <summary>
            Closing the clamp
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.SetAFAClampOpen">
            <summary>
            Opening the clamp
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.SetAFAMovementForward">
            <summary>
            Start a forward movement
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.SetAFAMovementBackward">
            <summary>
            Start a backward movement
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.ReadAFAVacuumValue">
            <summary>
            Reading the vacuum values (1 means A4 is on, 2 means A3 is on)
            </summary>
            <returns>Depending on vacuum status true or false</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.ReadAFAClampValue">
            <summary>
            Reading the clamp values (0 means it is closed)
            </summary>
            <returns>Depending on clamp status true or false</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.ReadAFAMovement">
            <summary>
            Reading the movement values (1 means forward, 2 means backward, false means stopped)
            </summary>
            <returns>Depending on movement status true or false</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.GetPacketToSend(Labman.Hardware.Instruments.TQCAB3000Instrument.Command,Labman.Hardware.Instruments.TQCAB3000Instrument.CommandControls,Labman.Hardware.Instruments.TQCAB3000Instrument.CommandParts)">
            <summary>
            Setting command packet generator
            </summary>
            <param name="commandToSend">The selected command.</param>
            <param name="commandCtrl">What to set.</param>
            <param name="value">With what value.</param>
            <returns>A byte array containing the command set.</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.TQCAB3000Instrument.GetPacketToSend(Labman.Hardware.Instruments.TQCAB3000Instrument.Command,Labman.Hardware.Instruments.TQCAB3000Instrument.CommandControls)">
            <summary>
            Reading command packet generator
            </summary>
            <param name="commandToSend">The selected command.</param>
            <param name="commandCtrl">Which parameter to query.</param>
            <returns>A byte array containing the command set.</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument">
            <summary>
            Class to communicate with a Keyence LKG Laser Profilometer
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.LKIF_FLOATRESULT">
            <summary>
            Possible result status codes from the LKIF DLL
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.LKIF_FLOATVALUE">
            <summary>
            Floating point value from the LKIF DLL, including a value and a status
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.LKIF_FLOATVALUE.FloatResult">
            <summary>
            The float result
            </summary>
        </member>
        <member name="F:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.LKIF_FLOATVALUE.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.LKIF_DataStorageGetData(System.Int32,System.Int32,Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.LKIF_FLOATVALUE@,System.Int32@)">
            <summary>
            Calls the LKIF dll Get Stored Data Method to obtain stored data
            </summary>
            <param name="outputNumber">The output number to read (OUT1 = 0, OUT2 = 1)</param>
            <param name="dataPointsToRead">The number of data points to attempt to read</param>
            <param name="dataBuffer">A pointer to the first element of a data buffer array</param>
            <param name="receivedDataPoints">The number of received data points</param>
            <returns>1 on success</returns>
        </member>
        <member name="F:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument._rawData">
            <summary>
            Buffer for holding result data from the profilometer
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.FilterMode">
            <summary>
            Filter Mode Type
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.Averaging">
            <summary>
            The averaging to use
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.Filtering">
            <summary>
            The filtering to use
            </summary>
        </member>
        <member name="T:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.SamplingRate">
            <summary>
            Sampling rates available
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.Setup(Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.FilterMode,Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.Filtering,Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.SamplingRate)">
            <summary>
            Sets up the profilometer ready for use
            </summary>
            <param name="filterMode">The filtering mode to use</param>
            <param name="averaging">The filtering mode to use</param>
            <param name="samplingRate">The sampling rate to use</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.Setup(Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.FilterMode,Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.Averaging,Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.SamplingRate)">
            <summary>
            Sets up the profilometer ready for use
            </summary>
            <param name="filterMode">The filtering mode to use</param>
            <param name="averaging">The averaging mode to use</param>
            <param name="samplingRate">The sampling rate to use</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.Zero">
            <summary>
            Zero the profilometer output
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.StartMeasurement(System.Int32)">
            <summary>
            Starts the profilometer data capture
            </summary>
            <param name="dataPointsToCapture">The number of data points to capture</param>
        </member>
        <member name="M:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.StopMeasurement">
            <summary>
            Stops the data capture
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.GetNumberOfStoredDataPoints">
            <summary>
            Gets the number of data points stored in memory
            </summary>
            <returns>The number of data points</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.KeyenceLKGProfilometerInstrument.GetStoredData">
            <summary>
            Gets the stored data array values
            </summary>
            <returns>An array of double values that have been stored</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.OmegaPHB21xInstrument">
            <summary>
            Class to communicate with an Omega pH and Temperature meter
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OmegaPHB21xInstrument.Initialise">
            <summary>
            Opens the communication interface to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OmegaPHB21xInstrument.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.OmegaPHB21xInstrument.GetTemperature">
            <summary>
            Gets the temperature from the instrument
            </summary>
            <returns>Temperature value</returns>
        </member>
        <member name="M:Labman.Hardware.Instruments.OmegaPHB21xInstrument.GetpH">
            <summary>
            Getps the pH from the instrument
            </summary>
            <returns>pH value</returns>
        </member>
        <member name="T:Labman.Hardware.Instruments.Instrument">
            <summary> 
            Class which also generic hardware instruments devices to be added to the base app
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.Instrument.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.Instruments.Instrument.InstrumentSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Instrument.#ctor">
            <summary> 
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Instruments.Instrument.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="T:Labman.Hardware.CameraException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.CameraException.#ctor(System.String)">
            <summary> 
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.CameraException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.CentrifugeCameras.CentrifugeCamera">
            <summary>
            Base for a centrifuge camera implementation
            Although not a hardware device, is treated as one for easy set up
            Uses a camera to get the angle of a centrifuge
            </summary>
        </member>
        <member name="P:Labman.Hardware.CentrifugeCameras.CentrifugeCamera.CentrifugeCameraSettings">
            <summary>
            Exposes the devices settings
            </summary>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera.GetAngle">
            <summary>
            Gets the angle of the centrifuge
            </summary>
            <returns>The angle of the centrifuge</returns>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera.GetAngleAndImage">
            <summary>
            Gets the angle of the centrifuge and returns the processed image for debugging
            </summary>
            <returns>Item 1:the angle of the centrifuge, Item 2:The processed image</returns>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera.GetAngleAndRadius">
            <summary>
            Gets the angle of the centrifuge and the distance of the detected marker from the centre in pixel widths
            </summary>
            <returns>A polar coordinate representing angle and distance</returns>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Labman.Hardware.CentrifugeCameras.CentrifugeCamera1Point">
            <summary>
            Implementation of a centrifugecamera pair that uses a single marker to track the angle of the centrifuge
            
            NOTE - Since it isn't a real piece of hardware, it doesn't necessarily require simulation mode, provided the camera simulation is valid
            however, the simulate flag will provide random angles if the images aren't in place if the flag is set and the system is in simulation mode
            </summary>
        </member>
        <member name="P:Labman.Hardware.CentrifugeCameras.CentrifugeCamera1Point.Simulate">
            <summary>
            When used in conjunction with Baseclass simulation mode, will return random numbers to remove the need to simulate the camera
            </summary>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera1Point.Initialise">
            <summary>
            Since this isn't a real piece of hardware, initialisation isn't neccessary
            </summary>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera1Point.Dispose">
            <summary>
            Nothing really to dispose of, all resources should be disposed of after use to preserve memory
            </summary>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera1Point.GetAngle">
            <summary>
            Gets the angle of the centrifuge
            </summary>
            <returns>The abosulte angle of the centrifuge</returns>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera1Point.GetAngleAndImage">
            <summary>
            returns the angle of the centrifuge and the processed image for debugging
            </summary>
            <returns>The angle of the centrifuge and the processed image for debugging</returns>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera1Point.GetImageAndPoint(System.Boolean)">
            <summary>
            Gets the square image bounding the search radius and the coordinates of the found point within it
            </summary>
            <param name="annotateImage">Whether to draw the found angle on the image</param>
            <returns>A square bitmap and a found point within the square</returns>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera1Point.GetAngleAndRadius">
            <summary>
            Gets the angle and distance from the centrifuge centre to the marked point
            </summary>
            <returns>A polar coordinate containing the angle and distance</returns>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameras.CentrifugeCamera1Point.#ctor">
            <summary>
            Calls base constructor
            </summary>
        </member>
        <member name="T:Labman.Hardware.CentrifugeCameraException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameraException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.CentrifugeCameraException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.CentrifugeException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.CentrifugeException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.CentrifugeException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice">
            <summary>
            Class used to communication with a Beckhoff IO Device
            Each instance of this class represents a single Beckhoff IO module (distributed box or terminal slice)
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice.BeckhoffPlcLinkedIODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice.ReadAnalogInput(System.Int32)">
            <summary>
            Reads an analog input.
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned analog input value</returns>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice.ReadAnalogInputDouble(System.Int32)">
            <summary>
            Reads an analog input.
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned analog input value</returns>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice.ReadInput(System.Int32)">
            <summary>
            Reads a digital input
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>
            The returned input state
            </returns>
            <exception cref="T:Labman.Hardware.IODeviceException">The input index must be between 1 and  + base.IODeviceSettings.NumberOfInputsConnected</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice.SetAnalogOutput(System.Int32,System.Int32)">
            <summary>
            Sets an analog output.
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="value">The value.</param>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches a digital output
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="state">The state.</param>
            <exception cref="T:Labman.Hardware.IODeviceException">The output index must be between 1 and  + base.IODeviceSettings.NumberOfOutputsConnected</exception>
        </member>
        <member name="T:Labman.Hardware.IODevices.BeckhoffIODevice">
            <summary>
            Class used to communication with a Beckhoff IO Device
            Each instance of this class represents a single Beckhoff IO module (distributed box or terminal slice)
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.BeckhoffIODevice.BeckhoffIODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffIODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches a digital output
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="state">The state.</param>
            <exception cref="T:Labman.Hardware.IODeviceException">The output index must be between 1 and  + base.IODeviceSettings.NumberOfOutputsConnected</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffIODevice.ReadInput(System.Int32)">
            <summary>
            Reads a digital input
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>
            The returned input state
            </returns>
            <exception cref="T:Labman.Hardware.IODeviceException">The input index must be between 1 and  + base.IODeviceSettings.NumberOfInputsConnected</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffIODevice.SetAnalogOutput(System.Int32,System.Int32)">
            <summary>
            Sets an analog output.
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="value">The value.</param>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffIODevice.ReadAnalogInput(System.Int32)">
            <summary>
            Reads an analog input.
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned analog input value</returns>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.BeckhoffIODevice.ReadAnalogInputDouble(System.Int32)">
            <summary>
            Reads an analog input.
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned analog input value</returns>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="T:Labman.Hardware.IODevices.BoolArrayExtentions">
            <summary>
            Helper class for boolean arrays.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.BoolArrayExtentions.ToByte(System.Boolean[])">
            <summary>
            Converts boolean array to a byte.
            </summary>
            <param name="source">The source.</param>
            <returns>System.Byte.</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANAnalogInputDevice">
            <summary>
            Allows communication with a FESTO analog input module that is part of a CPX system.
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANAnalogInputDevice.READ_ANALOG_INPUT_SDO_INDEX">
            <summary>
            Read analog input SDO index.
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANAnalogInputDevice.SET_MODULE_PARAMETER_SDO_BASE">
            <summary>
            Set module parameter.
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANAnalogInputDevice.PARAMETER_CHANNEL_0_1_SIGNAL_RANGE">
            <summary>
            Signal range parameter for channels 0 and 1.
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANAnalogInputDevice.PARAMETER_CHANNEL_2_3_SIGNAL_RANGE">
            <summary>
            Signal range parameter for channels 2 and 3.
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANAnalogInputDevice._canOpenProtocol">
            <summary>
            The CANOpen open protocol.
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.FestoCANAnalogInputDevice.FestoCANAnalogInputDeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class.
            </summary> 
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANAnalogInputDevice.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANAnalogInputDevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANAnalogInputDevice.Dispose">
            <summary>
            Dispose method closes communications.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANAnalogInputDevice.ReadAnalogInput(System.Int32)">
            <summary>
            Reads an analog input.
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned analog input value</returns>n>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANAnalogOutputDevice">
            <summary>
            Allows communication with a FESTO analog output module that is part of a CPX system.
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANAnalogOutputDevice.WRITE_ANALOG_OUTPUT_SDO_INDEX">
            <summary>
            Read analog input SDO index.
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANAnalogOutputDevice._canOpenProtocol">
            <summary>
            The CANOpen open protocol.
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.FestoCANAnalogOutputDevice.FestoCANAnalogOutputDeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class.
            </summary> 
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANAnalogOutputDevice.#ctor">
            <summary>
            Class constructor.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANAnalogOutputDevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANAnalogOutputDevice.Dispose">
            <summary>
            Dispose method closes communications.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANAnalogOutputDevice.SetAnalogOutput(System.Int32,System.Int32)">
            <summary>
            Sets an analog output.
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice">
            <summary>
            Class to control a 5/2 valve bank on a CP string CPX
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.SetOutputSDOAddress">
            <summary>
            The PDO addres for setting an output
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.FestoCANCPXCPStringDoubleValveBankIODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch (1-xx)</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ReadInput(System.Int32)">
            <summary>
            Read input dummy function
            </summary>
            <param name="inputIndex">Input to read (1-xx)</param>
            <returns>Off all the time</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ErrorRegister">
            <summary>
            Structure that represents the various flags in the error register
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ErrorRegister.GenericError">
            <summary>Generic error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ErrorRegister.CurrentError">
            <summary>Current error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ErrorRegister.VoltageError">
            <summary>Voltage error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ErrorRegister.TemperatureError">
            <summary>Temperature error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ErrorRegister.CommunicationError">
            <summary>Communication error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ErrorRegister.ProfileError">
            <summary>Profile error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ErrorRegister.ManufacturerError">
            <summary>Manufacturer specific error</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ErrorRegister.#ctor(System.Int64)">
            <summary>
            Structure constructor parses the value into each register value
            </summary>
            <param name="registerValue">The current value read from the register</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice.ReadErrorRegister">
            <summary>
            Reads the device's error register
            </summary>
            <returns>An error register structure that represents the various flags in the error register</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice">
            <summary>
            Class to control a CP String FESTO CPX IO Device
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ReadInputSDOAddress">
            <summary>
            The SDO address for reading an input
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.SetOutputSDOAddress">
            <summary>
            The PDO addres for setting an output
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ReadErrorSDOCommandIndex">
            <summary>
            The SDO request command index for reading the error register
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ReadErrorSDOCommandSubIndex">
            <summary>
            The SDO request command sub-index for reading the error register
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice._canOpenProtocol">
            <summary>
            The CANOpen open protocol
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.FestoCANCPXCPStringIODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch (1-xx)</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ReadInput(System.Int32)">
            <summary>
            Read input dummy function
            </summary>
            <param name="inputIndex">Input to read (1-xx)</param>
            <returns>Off all the time</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ErrorRegister">
            <summary>
            Structure that represents the various flags in the error register
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ErrorRegister.GenericError">
            <summary>Generic error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ErrorRegister.CurrentError">
            <summary>Current error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ErrorRegister.VoltageError">
            <summary>Voltage error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ErrorRegister.TemperatureError">
            <summary>Temperature error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ErrorRegister.CommunicationError">
            <summary>Communication error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ErrorRegister.ProfileError">
            <summary>Profile error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ErrorRegister.ManufacturerError">
            <summary>Manufacturer specific error</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ErrorRegister.#ctor(System.Int64)">
            <summary>
            Structure constructor parses the value into each register value
            </summary>
            <param name="registerValue">The current value read from the register</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice.ReadErrorRegister">
            <summary>
            Reads the device's error register
            </summary>
            <returns>An error register structure that represents the various flags in the error register</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device">
            <summary>Allows communication with a FESTO analog input module that is part of a CPX system.</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device.READ_ANALOG_INPUT_SDO_INDEX">
            <summary>Read analog input SDO index.</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device.SET_MODULE_PARAMETER_SDO_BASE">
            <summary>Set module parameter.</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device._canOpenProtocol">
            <summary>The CANOpen open protocol.</summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device.FestoCANTemperatureInputDeviceSettings">
            <summary>The Settings Property exposes the device instance settings class from the main base class.</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device"/>.</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device.Initialise">
            <summary>The initialise method is used to setup the device instance and ensure it is ready to be used.</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device.Dispose">
            <summary>Dispose method closes communications.</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device.ReadAnalogInput(System.Int32)">
            <summary>Reads an analog input.</summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned analog input value</returns>
            n&gt;
        </member>
        <member name="T:Labman.Hardware.IODevices.PhidgetsIODevice">
            <summary>
            This class provides control of Phidgets device connected via ethernet using the Phidgets22 protocol.
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.PhidgetsIODevice._digitalInputs">
            <summary>
            List of digital input classes
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.PhidgetsIODevice._digitalOutputs">
            <summary>
            List of digital output classes
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.PhidgetsIODevice._analogueInputs">
            <summary>
            List of analogue input classes
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.PhidgetsIODevice.PhidgetsSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.IODevices.PhidgetsIODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.PhidgetsIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.PhidgetsIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.PhidgetsIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch (1-xx)</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.PhidgetsIODevice.ReadInput(System.Int32)">
            <summary>
            Read input dummy function
            </summary>
            <param name="inputIndex">Input to read (1-xx)</param>
            <returns>Off all the time</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.PhidgetsIODevice.ReadAnalogInput(System.Int32)">
            <summary>
            Reads a sensor connected to the specified input
            </summary>
            <param name="inputIndex">The index of the input</param>
            <returns>a 12 bit integer (0-4095) representing the value</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoIODeviceOutputStates">
            <summary>
            Class used to hold the current output statates
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.FestoIODeviceOutputStates.CurrentOutputStates">
            <summary>
            Gets or sets the current output states.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoIODeviceOutputStates.#cctor">
            <summary>
            Initializes the <see cref="T:Labman.Hardware.IODevices.FestoIODeviceOutputStates"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANCPXIODevice">
            <summary>
            This class provides control of a Festo CANOpen Bus Node CPX-FB14 IO Device
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.ReadInputPDOAddress">
            <summary>
            The PDO address for reading an input
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.SetOutputPDOAddress">
            <summary>
            The PDO addres for setting an output
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.ReadErrorSDOCommandIndex">
            <summary>
            The SDO request command index for reading the error register
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.ReadErrorSDOCommandSubIndex">
            <summary>
            The SDO request command sub-index for reading the error register
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice._canOpenProtocol">
            <summary>
            The CANOpen open protocol
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.FestoCANCPXIODevice.FestoCANCPXIODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANCPXIODevice.IOStateChangedDelegate">
            <summary>
            Delegate that represents a message used when an IO state changed message has been received
            </summary>
            <param name="newPortState">The new state of the port</param>
        </member>
        <member name="E:Labman.Hardware.IODevices.FestoCANCPXIODevice.IOStateChanged">
            <summary>
            Event that is fired when an IO state has changed
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXIODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch (1-xx)</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXIODevice.ReadInput(System.Int32)">
            <summary>
            Read input dummy function
            </summary>
            <param name="inputIndex">Input to read (1-xx)</param>
            <returns>Off all the time</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANCPXIODevice.ErrorRegister">
            <summary>
            Structure that represents the various flags in the error register
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.ErrorRegister.GenericError">
            <summary>Generic error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.ErrorRegister.CurrentError">
            <summary>Current error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.ErrorRegister.VoltageError">
            <summary>Voltage error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.ErrorRegister.TemperatureError">
            <summary>Temperature error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.ErrorRegister.CommunicationError">
            <summary>Communication error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.ErrorRegister.ProfileError">
            <summary>Profile error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANCPXIODevice.ErrorRegister.ManufacturerError">
            <summary>Manufacturer specific error</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXIODevice.ErrorRegister.#ctor(System.Int64)">
            <summary>
            Structure constructor parses the value into each register value
            </summary>
            <param name="registerValue">The current value read from the register</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANCPXIODevice.ReadErrorRegister">
            <summary>
            Reads the device's error register
            </summary>
            <returns>An error register structure that represents the various flags in the error register</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice">
            <summary>
            This class provides control of a Festo CANOpen Fieldbus IO Device
            </summary>
            <remarks>
            This IODevice is used when each of the values has two separate outputs to fire and retract.
            </remarks>
        </member>
        <member name="P:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.FestoCANDoubleValveBankIODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.IOStateChangedDelegate">
            <summary>
            Delegate that represents a message used when an IO state changed message has been received
            </summary>
            <param name="newPortState">The new state of the port</param>
        </member>
        <member name="E:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.IOStateChanged">
            <summary>
            Event that is fired when an IO state has changed
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch (1-xx)</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ReadInput(System.Int32)">
            <summary>
            Read input dummy function
            </summary>
            <param name="inputIndex">Input to read (1-xx)</param>
            <returns>Off all the time</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ErrorRegister">
            <summary>
            Structure that represents the various flags in the error register
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ErrorRegister.GenericError">
            <summary>Generic error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ErrorRegister.CurrentError">
            <summary>Current error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ErrorRegister.VoltageError">
            <summary>Voltage error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ErrorRegister.TemperatureError">
            <summary>Temperature error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ErrorRegister.CommunicationError">
            <summary>Communication error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ErrorRegister.ProfileError">
            <summary>Profile error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ErrorRegister.ManufacturerError">
            <summary>Manufacturer specific error</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ErrorRegister.#ctor(System.Int64)">
            <summary>
            Structure constructor parses the value into each register value
            </summary>
            <param name="registerValue">The current value read from the register</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice.ReadErrorRegister">
            <summary>
            Reads the device's error register
            </summary>
            <returns>An error register structure that represents the various flags in the error register</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANValveBankIODevice">
            <summary>
            This class provides control of a Festo CANOpen Fieldbus IO Device
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.FestoCANValveBankIODevice.FestoCANValveBankIODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANValveBankIODevice.IOStateChangedDelegate">
            <summary>
            Delegate that represents a message used when an IO state changed message has been received
            </summary>
            <param name="newPortState">The new state of the port</param>
        </member>
        <member name="E:Labman.Hardware.IODevices.FestoCANValveBankIODevice.IOStateChanged">
            <summary>
            Event that is fired when an IO state has changed
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANValveBankIODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANValveBankIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANValveBankIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANValveBankIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch (1-xx)</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ReadInput(System.Int32)">
            <summary>
            Read input dummy function
            </summary>
            <param name="inputIndex">Input to read (1-xx)</param>
            <returns>Off all the time</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ErrorRegister">
            <summary>
            Structure that represents the various flags in the error register
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ErrorRegister.GenericError">
            <summary>Generic error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ErrorRegister.CurrentError">
            <summary>Current error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ErrorRegister.VoltageError">
            <summary>Voltage error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ErrorRegister.TemperatureError">
            <summary>Temperature error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ErrorRegister.CommunicationError">
            <summary>Communication error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ErrorRegister.ProfileError">
            <summary>Profile error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ErrorRegister.ManufacturerError">
            <summary>Manufacturer specific error</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ErrorRegister.#ctor(System.Int64)">
            <summary>
            Structure constructor parses the value into each register value
            </summary>
            <param name="registerValue">The current value read from the register</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCANValveBankIODevice.ReadErrorRegister">
            <summary>
            Reads the device's error register
            </summary>
            <returns>An error register structure that represents the various flags in the error register</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.LabmanEthernetIO">
            <summary>
            Labman Ethernet IO Module.
            Allows communication with a Labman developed ethernet I/O device.
            </summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.LabmanEthernetIO.EthernetSerialSettings">
            <summary>
            Settings class used to define the settings for hardware communications
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.LabmanEthernetIO.EthernetSerialSettings.PortNumber">
            <summary>Property that exposes the port number to connect to.</summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.LabmanEthernetIO.EthernetSerialSettings.BaudRate">
            <summary>Property that exposes the baud rate to communicate with for RS232 comms</summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.LabmanEthernetIO.EthernetSerialSettings.DataBits">
            <summary>Property that exposes the number of databits to use for RS232 comms</summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.LabmanEthernetIO.EthernetSerialSettings.Parity">
            <summary>Property that exposes the parity to use for RS232 comms</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanEthernetIO.EthernetSerialSettings.#ctor(System.Int32,System.Int32,System.Int32,System.IO.Ports.Parity)">
            <summary>
            Constructor
            </summary>
            <param name="portNumber">The port number</param>
            <param name="baudRate">The baud rate</param>
            <param name="dataBits">The databits</param>
            <param name="parity">Parity</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanEthernetIO.EthernetSerialSettings.Validate">
            <summary>
            Validate that all of the settings are valid
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanEthernetIO.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanEthernetIO.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanEthernetIO.SetEthernetSerialPortSettings(Labman.Hardware.IODevices.LabmanEthernetIO.EthernetSerialSettings)">
            <summary>
            Sets the Ethernet serial port settings on the device
            </summary>
            <param name="serialSettings">The settings to send</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanEthernetIO.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches a digital output
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="state">The state.</param>
            <exception cref="T:Labman.Hardware.IODeviceException">The output index must be between 1 and  + base.IODeviceSettings.NumberOfOutputsConnected</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanEthernetIO.ReadInput(System.Int32)">
            <summary>
            Reads a digital input
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>
            The returned input state
            </returns>
            <exception cref="T:Labman.Hardware.IODeviceException">The input index must be between 1 and  + base.IODeviceSettings.NumberOfInputsConnected</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanEthernetIO.ExtractReplyValue(System.Byte[]@)">
            <summary>
            Extracts the reply value from a reply buffer
            </summary>
            <param name="replyBuffer">The reply buffer received</param>
            <returns>A byte array containing the reply after the equals sign in the buffer</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanEthernetIO.ValidateReply(System.Byte[]@,System.String)">
            <summary>
            Checks a response and ensures it is valid
            </summary>
            <param name="replyBuffer">The response to check</param>
            <param name="actionDescription">A description of the action the response is for. This is used for logging purposes.</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanEthernetIO.GetPacketToSend(System.String)">
            <summary>
            Builds a packet to send to the device
            </summary>
            <param name="command">The command data to send</param>
            <returns>The packet ready to send (without STX/ETX)</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.MoxaE1KDigitalIODevice">
            <summary>
            An interface class for a Moxa E1k Digital Ethernet IO device. Device tested with was Moxa E1214.
            CDiver
            </summary>
            <seealso cref="T:Labman.Hardware.IODevices.IODevice" />
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaE1KDigitalIODevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.IODevices.MoxaE1KDigitalIODevice"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaE1KDigitalIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            
            In this case that means connect to the board and store the connection handle.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaE1KDigitalIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches a digital output
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="state">The state to switch to.</param>
            <exception cref="T:Labman.Hardware.IODeviceException">
            SwitchOutput command before device initialisation
            or
            Incorrect output state passed to Moxa device.
            </exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaE1KDigitalIODevice.ReadInput(System.Int32)">
            <summary>
            Reads a digital input
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>
            The returned input state
            </returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaE1KDigitalIODevice.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.MoxaIOLogikE1242IODevice">
            <summary>
            Moxa IO Logik E1242 Device.
            </summary>
            <seealso cref="T:Labman.Hardware.IODevices.IODevice" />
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaIOLogikE1242IODevice.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.IODevices.MoxaIOLogikE1242IODevice"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaIOLogikE1242IODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaIOLogikE1242IODevice.SetAnalogOutput(System.Int32,System.Int32)">
            <summary>
            Sets an analog output.
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaIOLogikE1242IODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches a digital output
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="state">The state.</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaIOLogikE1242IODevice.ReadInput(System.Int32)">
            <summary>
            Reads a digital input
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned input state</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaIOLogikE1242IODevice.ReadAnalogInput(System.Int32)">
            <summary>
            Reads an analog input.
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned analog input value</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.MoxaIOLogikE1242IODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice">
            <summary>
            IO Device to communicate with the PILZ PNOZ Safety Controllers via the ES ETH module
            </summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.PilzDeviceData">
            <summary>
            Stucture to hold Pilz device data
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.PilzDeviceData.SerialNumber">
            <summary>Device serial number</summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.PilzDeviceData.ProductNumber">
            <summary>Device product number</summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.PilzDeviceData.ModifiedDate">
            <summary>The date the firmware was last modified</summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.PilzDeviceData.ProjectChecksum">
            <summary>The safety project checksum</summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.PilzDeviceData.OverallChecksum">
            <summary>The overall device checksum</summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.WatchdogTimerOption">
            <summary>
            Available watchdog timer options
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.PILZPNOZMulti2IODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch (1-xx)</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.ReadInput(System.Int32)">
            <summary>
            Read input function
            </summary>
            <param name="inputIndex">Input to read (1-xx)</param>
            <returns>The input state</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.ReadAllInputs">
            <summary>
            Read all of the input states
            </summary>
            <returns>A list of the input states for all inputs</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.GetPilzDeviceData">
            <summary>
            Gets device data from the PILZ, including serial numbers, modified date and checksums
            </summary>
            <returns>A structure containing device data or null on error</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.ReadProjectInformationTableData(System.Byte,System.Byte)">
            <summary>
            Read project information table data
            </summary>
            <returns>A byte array containing the data of the specified table and segment</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.SetOutputWatchdogTimerMode(Labman.Hardware.IODevices.PILZPNOZMulti2IODevice.WatchdogTimerOption)">
            <summary>
            Sets the watchdog timer setting to use when switching outputs. This setting takes effect the next time an output is set.
            The watchdog resets the virtual inputs into the PILZ to 0 if a message is not received within the specified time.
            </summary>
            <param name="option">The option to use</param>
        </member>
        <member name="T:Labman.Hardware.IODevices.PositionIODevice">
            <summary>
            This class allows using an axis as an IO output. Two positions are set at states, when the output is set the axis will move to the corrisponding position.
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.PositionIODevice.LabmanPositionIODeviceSettings">
            <summary>
            The device settings
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.PositionIODevice.#ctor">
            <summary>
            Device constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.PositionIODevice.Dispose">
            <summary>
            Removes the instance
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.PositionIODevice.Initialise">
            <summary>
            Initialises the instance
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.PositionIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch the IO state
            </summary>
            <param name="outputIndex">Not used</param>
            <param name="state">Boolean output state</param>
        </member>
        <member name="T:Labman.Hardware.IODevices.ADAMIODevice">
            <summary>
            Allows communication with an ADAM IO device
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.ADAMIODevice.ADAMIODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.IODevices.ADAMIODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.ADAMIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.ADAMIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.ADAMIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches a digital output
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="state">The state.</param>
            <exception cref="T:Labman.Hardware.IODeviceException">
            Failed to receive a reply when  + actionDescription
            or
            Failed to execute command when  + actionDescription
            </exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.ADAMIODevice.SetAnalogOutput(System.Int32,System.Int32)">
            <summary>
            Sets the analogue output
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="value">The value.</param>
            <exception cref="T:Labman.Hardware.IODeviceException">
            Failed to receive a reply when  + actionDescription
            or
            Failed to execute command when  + actionDescription
            </exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.ADAMIODevice.ReadInput(System.Int32)">
            <summary>
            Reads a digital input
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>Returned value of the input</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.ADAMIODevice.ReadAllAnalogueInputs">
            <summary>
            Reads all analogue input channelss.
            </summary>
            <returns>The current value from all analog channels</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.ADAMIODevice.ReadAnalogueInput(System.Int32)">
            <summary>
            Reads an analogue input
            </summary>
            <param name="inputIndex">Index of the input (0-7)</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.ADAMIODevice.ReadAnalogInputDouble(System.Int32)">
            <summary>
            Reads a double input
            </summary>
            <param name="inputIndex">index to read from</param>
            <returns>value fead as a double</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.ADAMIODevice.GetModuleName">
            <summary>
            Get the modules name
            </summary>
            <returns>Module name</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice">
            <summary>
            Allows communication with a Festo CPX PLX as an IO device using MODBUS
            </summary>
            <remarks>
            This IODevice is to be used when communicating with an intelligent Festo CPX-CEC with CoDeSys Embedded controller
            running a MODBUS server process.
            </remarks>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice._modBusProtocol">
            <summary>
            Modbus protocol
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice._instancelock">
            <summary>
            Lock used to ensure that onlt a single call is made to the CPX at a time
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice.IODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice.#ctor">
            <summary>
            Constructor overload
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice.ReadInput(System.Int32)">
            <summary>
            Reads a digital input
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>
            The current value of the digital input
            </returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice.SetAnalogOutput(System.Int32,System.Int32)">
            <summary>
            Sets an analog output.
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice.ReadAnalogInput(System.Int32)">
            <summary>
            Reads an analog input.
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The current value of the analot input</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.LMA2012_04IODevice">
            <summary>
            Allows communication with a LMA2012_04 IO device
            </summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.LMA2012_04IODevice.ControllerCommand">
            <summary>
            Enumeration of possible command codes that can be send to the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LMA2012_04IODevice.TransmitPacket(System.Int32,Labman.Hardware.IODevices.LMA2012_04IODevice.ControllerCommand,System.Byte[],System.Boolean,System.Double)">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="axis">The axis number to send the command to</param>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <param name="sendToRabbit">Flag to indicate to send the command to the rabbit instead of the propellers</param>
            <param name="returnValueRatio">A ratio value to multiply the return value by</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LMA2012_04IODevice.TransmitPacket(System.Int32,Labman.Hardware.IODevices.LMA2012_04IODevice.ControllerCommand,System.Byte[])">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="axis">The axis number to send the command to</param>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LMA2012_04IODevice.TransmitPacket(System.Int32,Labman.Hardware.IODevices.LMA2012_04IODevice.ControllerCommand,System.Byte[],System.Boolean)">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="axis">The axis number to send the command to</param>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <param name="sendToRabbit">Flag to indicate to send the command to the rabbit instead of the propellers</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LMA2012_04IODevice.DecodeBase128(System.Byte[])">
            <summary>
            Decodes a base 128 reply
            </summary>
            <param name="buffer">The encoded value in base 128 format (exactly 5 bytes long)</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LMA2012_04IODevice.EncodeBase128(System.Int32)">
            <summary>
            Encodes a value into base128 format
            </summary>
            <param name="value">The value to encode</param>
            <returns>The base128 byte array</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LMA2012_04IODevice.#ctor">
            <summary>
            Constructor overload
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LMA2012_04IODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LMA2012_04IODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LMA2012_04IODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.LMA2012_04IODevice.ReadInput(System.Int32)">
            <summary>
            Read input dummy function
            </summary>
            <param name="inputIndex">Input</param>
            <returns>Off all the time</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.LumbergFieldBusIODevice">
            <summary>
            This class provides control of a Lumberg CANOpen Fieldbus IO Device
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.LumbergFieldBusIODevice.LumbergFieldBusIODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="T:Labman.Hardware.IODevices.LumbergFieldBusIODevice.IOStateChangedDelegate">
            <summary>
            Delegate that represents a message used when an IO state changed message has been received
            </summary>
            <param name="newPortState">The new state of the port</param>
        </member>
        <member name="E:Labman.Hardware.IODevices.LumbergFieldBusIODevice.IOStateChanged">
            <summary>
            Event that is fired when an IO state has changed
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LumbergFieldBusIODevice.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LumbergFieldBusIODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LumbergFieldBusIODevice.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LumbergFieldBusIODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch (1-xx)</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ReadInput(System.Int32)">
            <summary>
            Read input dummy function
            </summary>
            <param name="inputIndex">Input to read (1-xx)</param>
            <returns>Off all the time</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ErrorRegister">
            <summary>
            Structure that represents the various flags in the error register
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ErrorRegister.GenericError">
            <summary>Generic error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ErrorRegister.CurrentError">
            <summary>Current error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ErrorRegister.VoltageError">
            <summary>Voltage error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ErrorRegister.TemperatureError">
            <summary>Temperature error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ErrorRegister.CommunicationError">
            <summary>Communication error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ErrorRegister.ProfileError">
            <summary>Profile error</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ErrorRegister.ManufacturerError">
            <summary>Manufacturer specific error</summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ErrorRegister.#ctor(System.Int64)">
            <summary>
            Structure constructor parses the value into each register value
            </summary>
            <param name="registerValue">The current value read from the register</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.LumbergFieldBusIODevice.ReadErrorRegister">
            <summary>
            Reads the device's error register
            </summary>
            <returns>An error register structure that represents the various flags in the error register</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter">
            <summary> 
            This class communicates with a Labman motor controller
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.#ctor">
            <summary>
            Constructor overload
            </summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.ControllerCommand">
            <summary>
            Enumeration of possible command codes that can be send to the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.TransmitPacket(System.Int32,Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.ControllerCommand,System.Byte[],System.Boolean,System.Double)">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="axis">The axis number to send the command to</param>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <param name="sendToRabbit">Flag to indicate to send the command to the rabbit instead of the propellers</param>
            <param name="returnValueRatio">A ratio value to multiply the return value by</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.TransmitPacket(System.Int32,Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.ControllerCommand,System.Byte[])">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="axis">The axis number to send the command to</param>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.TransmitPacket(System.Int32,Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.ControllerCommand,System.Byte[],System.Boolean)">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="axis">The axis number to send the command to</param>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <param name="sendToRabbit">Flag to indicate to send the command to the rabbit instead of the propellers</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.DecodeBase128(System.Byte[])">
            <summary>
            Decodes a base 128 reply
            </summary>
            <param name="buffer">The encoded value in base 128 format (exactly 5 bytes long)</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.EncodeBase128(System.Int32)">
            <summary>
            Encodes a value into base128 format
            </summary>
            <param name="value">The value to encode</param>
            <returns>The base128 byte array</returns>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches the specified output
            </summary>
            <param name="outputIndex">The output index to switch</param>
            <param name="state">The state to switch to</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.LabmanPneumaticsOutputAdapter.ReadInput(System.Int32)">
            <summary>
            Read input dummy function
            </summary>
            <param name="inputIndex">Input</param>
            <returns>Off all the time</returns>
        </member>
        <member name="T:Labman.Hardware.IODevices.IODevice">
            <summary>
            IODevice Standard Module Definition.
            </summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.IODevice.IODeviceMileageEventHandler">
            <summary>
            Delegate for a mileage event handler.
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The properties of the mileage event</param>
        </member>
        <member name="E:Labman.Hardware.IODevices.IODevice.OutputMileageIncrement">
            <summary>
            An event that is fired when the output mileage of this device increases.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.IODevice.OnOutputMileageIncrement(System.Object,Labman.Hardware.IODevices.IODeviceMileageEventArgs)">
            <summary>
            Event handler, to call when output mileage of a device has increased
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The <see cref="T:Labman.Hardware.IODevices.IODeviceMileageEventArgs"/> specifying the index of the device and increment amount</param>
        </member>
        <member name="M:Labman.Hardware.IODevices.IODevice.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.IODevice.InputState">
            <summary>
            Enumeration of possible states for input states
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.IODevice.InputState.Off">
            <summary>Off input state</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.IODevice.InputState.On">
            <summary>On input state</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.IODevice.InputState.HighImpedance">
            <summary>Input set to high impedance (reserved for future use)</summary>
        </member>
        <member name="T:Labman.Hardware.IODevices.IODevice.OutputState">
            <summary>
            Enumeration of possible states for output states
            </summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.IODevice.OutputState.Off">
            <summary>Off output state</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.IODevice.OutputState.On">
            <summary>On output state</summary>
        </member>
        <member name="F:Labman.Hardware.IODevices.IODevice.OutputState.HighImpedance">
            <summary>Input set to high impedance (reserved for future use)</summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.IODevice.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.IODevice.IODeviceSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.IODevice.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.IODevice.SwitchOutput(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switches a digital output
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="state">The state.</param>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.IODevice.ReadInput(System.Int32)">
            <summary>
            Reads a digital input
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned input state</returns>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.IODevice.SetAnalogOutput(System.Int32,System.Int32)">
            <summary>
            Sets an analog output.
            </summary>
            <param name="outputIndex">Index of the output.</param>
            <param name="value">The value.</param>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.IODevice.ReadAnalogInput(System.Int32)">
            <summary>
            Reads an analog input.
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned analog input value</returns>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="M:Labman.Hardware.IODevices.IODevice.ReadAnalogInputDouble(System.Int32)">
            <summary>
            Reads an analog input.
            </summary>
            <param name="inputIndex">Index of the input.</param>
            <returns>The returned analog input value</returns>
            <exception cref="T:Labman.Hardware.IODeviceException">This method has not been implemented by this type of IODevice</exception>
        </member>
        <member name="T:Labman.Hardware.IODevices.IODeviceMileageEventArgs">
            <summary>
            Transfers the device index and mileage increase amount to the event handler.
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODevices.IODeviceMileageEventArgs.#ctor(System.Int32,System.Double)">
            <summary>
            Constructor for <see cref="T:Labman.Hardware.IODevices.IODeviceMileageEventArgs"/>
            </summary>
            <param name="ioIndex">The device index</param>
            <param name="increment">The mileage increment amount</param>
        </member>
        <member name="P:Labman.Hardware.IODevices.IODeviceMileageEventArgs.IOIndex">
            <summary>
            The index of the device for which the mileage has increased
            </summary>
        </member>
        <member name="P:Labman.Hardware.IODevices.IODeviceMileageEventArgs.Increment">
            <summary>
            The amount by which this mileage has increased
            </summary>
        </member>
        <member name="T:Labman.Hardware.Lasers.Laser">
            <summary>
            Laser hardware module base class
            </summary>
        </member>
        <member name="P:Labman.Hardware.Lasers.Laser.CommunicationInterface">
            <summary>
            The laser classes have access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.Lasers.Laser.LaserSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="T:Labman.Hardware.Lasers.Laser.LaserStatus">
            <summary>
            States the laser may be in
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.Laser.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.Laser.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.Laser.GetVersion">
            <summary>
            This method will return the device version
            </summary>
            <returns>Device version (verbose)</returns>
        </member>
        <member name="M:Labman.Hardware.Lasers.Laser.GetLaserStatus">
            <summary>
            Will return the status of the laser 
            </summary>
            <returns>The status of the laser</returns>
        </member>
        <member name="M:Labman.Hardware.Lasers.Laser.OpenDocument(System.String)">
            <summary>
            This will open a template file from the machine local to the LaserEngine
            </summary>
            <param name="filePath">Full filepath to the template .xlp</param>
        </member>
        <member name="M:Labman.Hardware.Lasers.Laser.SetDataField(System.String,System.String)">
            <summary>
            Sets a data field for a given ID.
            </summary>
            <param name="id">The object ID</param>
            <param name="data">The data to set to</param>
        </member>
        <member name="M:Labman.Hardware.Lasers.Laser.ShowLimits">
            <summary>
            Shows the laser engrave limits (laser outline)
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.Laser.StartMarking">
            <summary>
            This will initiate a marking
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.Laser.StopMarking">
            <summary>
            This will stop any current marking/laser emission
            </summary>
        </member>
        <member name="T:Labman.Hardware.Lasers.UlyxeLaser">
            <summary>
            Control class of a Ulyxe PL laser 
            </summary>
        </member>
        <member name="F:Labman.Hardware.Lasers.UlyxeLaser._errorCodes">
            <summary>
            All the error codes
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.Dispose">
            <summary>
            Dispose method closes
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.GetVersion">
            <summary>
            Gets the device version
            </summary>
            <returns>The device version</returns>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.GetLaserStatus">
            <summary>
            Gets the device status
            </summary>
            <returns>The device status</returns>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.OpenDocument(System.String)">
            <summary>
            Opens the document
            </summary>
            <param name="filePath">The filepath to the .xlp template</param>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.SetDataField(System.String,System.String)">
            <summary>
            Sets the data field on the template
            </summary>
            <param name="id">The field ID</param>
            <param name="data">The text to set it to</param>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.ShowLimits">
            <summary>
            Show the document limits on the target
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.StartMarking">
            <summary>
            Starts the laser marking
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.StopMarking">
            <summary>
            Stops the laser marking
            </summary>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.FormatAndSend(System.Byte[])">
            <summary>
            Formats the command and gets the response 
            </summary>
            <param name="command">The command</param>
            <returns>The response</returns>
        </member>
        <member name="M:Labman.Hardware.Lasers.UlyxeLaser.ByteArrayContains(System.Byte[],System.Byte)">
            <summary>
            Checks if byte exists in byte array
            </summary>
            <param name="haystack">The array to search</param>
            <param name="needle">The value to search for</param>
            <returns>True if found, false if now</returns>
        </member>
        <member name="T:Labman.Hardware.LaserException">
            <summary>
            This class defines a specific type of exception for use only by lasers
            </summary>
        </member>
        <member name="M:Labman.Hardware.LaserException.#ctor(System.String)">
            <summary>
            A laser exception
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Labman.Hardware.LaserException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester">
            <summary>
            Implementation of communication protocol for Discover SP-D Digester
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.Dispose">
            <summary>
            Class destructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.Initialise">
            <summary>
            Open communication link to the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.Abort">
            <summary>
            Sends abort command to microwave digester
            </summary>
            <returns>True if abort was executed, false if ignored</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.GetState">
            <summary>
            Obtain live sensor readings from the microwave digester
            </summary>
            <returns>All possible parameters that are output by the device</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.Download(Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod)">
            <summary>
            Send method to microwave digester
            </summary>
            <param name="method">Method object to send to microwave digester</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.SetCooldownTime(System.Int32)">
            <summary>
            A test function to see if the cooldown time can be set to only one interval
            </summary>
            <param name="cooldownTime">Cooldown time in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.Upload">
            <summary>
            Read current method from device
            </summary>
            <returns>Instance of MIcrowaveDigesterMethod received from the device</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.Start">
            <summary>
            Automated start packet
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.GetError">
            <summary>
            Retrieve current error code from the device
            </summary>
            <returns>Instance of MicrowaveDigesterError class containing error code and error message</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.GetBytes(Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod)">
            <summary>
            Get byte array of a method to send to device
            </summary>
            <param name="method">Instance of MicrowaveDigesterMethod class</param>
            <returns>Byte array representation of a command to send to device</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.SendPressureDeviceCommand(Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.PressureDeviceCommand)">
            <summary>
            Send pressure device command to device
            </summary>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.SendKeyboardCommand(Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.KeypadKeys)">
            <summary>
            Simpulate keypress on device's keypad
            </summary>
            <param name="key">Key to simulate</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.LoadMethodFromFile(System.String)">
            <summary>
            Load serialised method from xml file
            </summary>
            <param name="filename">Name of a file without file extension from which to load the configuration</param>
            <returns>Instance of MicrowaveDigesterMethod class containing all method parameters</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.SaveMethodToFile(Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod,System.String)">
            <summary>
            Serialise method to an XML file for reuse
            </summary>
            <param name="method">Instance of MicrowaveDigesterMthrod class to save to file</param>
            <param name="filename">Namr of file without file extension</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.AddCRC(System.Byte[])">
            <summary>
            Add to CRC bytes to the data to be sent
            </summary>
            <param name="data">Input data</param>
            <returns>Input data with CRC applied</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.DiscoverSPDDigester.ConstructPacket(System.Byte[])">
            <summary>
            Create a data packet to be sent to the microwave digester
            </summary>
            <param name="data">Data to be sent</param>
            <returns>Data with CRC and packet number</returns>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester">
            <summary>
            Microwave Digester standard module definition
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.CommunicationInterface">
            <summary>
            Communication interface object
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.MicrowaveDigesterSettings">
            <summary>
            Device settings object
            </summary>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.StatusMask">
            <summary>
            Masks to AND with the status byte
            </summary>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.CurrentStatus">
            <summary>
            Types of action currently being performed
            </summary>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.MethodStyle">
            <summary>
            Style setting for a method
            </summary>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.StirrerSpeed">
            <summary>
            Speed of a stirrer: Off, High, Med, Low
            </summary>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.ControlType">
            <summary>
            Type of method control
            </summary>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.PressureDeviceCommand">
            <summary>
            Activent operations
            </summary>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.KeypadKeys">
            <summary>
            Keypad keys
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.#ctor">
            <summary>
            Microwave digester class constructor: sets up settings, control and settings views
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.Start">
            <summary>
            Run the last uploaded method on device
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.Abort">
            <summary>
            Stop currently running method
            </summary>
            <returns>Returns true if operation was successful</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.GetState">
            <summary>
            Get real-time data from device, Query function
            </summary>
            <returns>Returns a MicrowaveDigesterQueryResponse object containing all query data from device</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.Download(Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod)">
            <summary>
            Transfer the method to device
            </summary>
            <param name="method">Method to send to the device</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.Upload">
            <summary>
            Retrieve currently running method from device
            </summary>
            <returns>MicrowaveDigesterMethod object containing current method stored on the device</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.GetError">
            <summary>
            Retrieve current error code/message from device
            </summary>
            <returns>MicrowaveDigesterError object containing error code and error message</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.SendPressureDeviceCommand(Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.PressureDeviceCommand)">
            <summary>
            Send pressure device command to device
            </summary>
            <param name="command">Command to execute</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.SendKeyboardCommand(Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.KeypadKeys)">
            <summary>
            Simulate keyboard press
            </summary>
            <param name="key">Key to press</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.GetBytes(Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod)">
            <summary>
            Get byte array of a method to send to the device
            </summary>
            <param name="method">Instance of MicrowaveDigesterMethod class</param>
            <returns>Byte array representing method download command</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.LoadMethodFromFile(System.String)">
            <summary>
            Load method from xml file given its filename
            </summary>
            <param name="filename">Name of file to save without extension</param>
            <returns>MicrowaveDigesterMethod object containing all method parameters loaded from a file</returns>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigester.SaveMethodToFile(Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod,System.String)">
            <summary>
            Save method to file
            </summary>
            <param name="method">Method to save</param>
            <param name="filename">Name of file without extension</param>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterError">
            <summary>
            Represents error receved from device
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterError.ErrorCode">
            <summary>
            Error code received from device
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterError.ErrorMessage">
            <summary>
            Error message received from device
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterError.#ctor(System.Int32,System.String)">
            <summary>
            Class constructor
            </summary>
            <param name="code">Error code</param>
            <param name="message">Error message</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterError.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterError.ToString">
            <summary>
            Produce user-friendly message for error
            </summary>
            <returns>A string representation of the error</returns>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage">
            <summary>
            Class for storing all parameters of a stage
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage.Power">
            <summary>
            Power in watts
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage.HoldPower">
            <summary>
            Hold power in watts, device dependent
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage.RunTime">
            <summary>
            Stage running time in seconds, also known as RampTime
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage.HoldTime">
            <summary>
            Stage holding time in seconds
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage.Temperature">
            <summary>
            Temperature in degrees C * 10
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage.Pressure">
            <summary>
            Pressure in PSI * 10
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage.StirrerOn">
            <summary>
            Stirrer settings: 0 - off, 1 - high, 2 - medium, 3 - low
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage.Cooling">
            <summary>
            Whether or not cooling is enabled
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage.NumberOfVents">
            <summary>
            Number of vents to perform
            </summary>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod">
            <summary>
            A class to store all parameters of a method
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.Name">
            <summary>
            Name of method, max 12 characters, truncated otherwise
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.Style">
            <summary>
            Method style
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.SolventName">
            <summary>
            Name of the solvent, included for compatibility purposes as unused
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.BoilingPoint">
            <summary>
            Boiling point temperature in degrees C
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.MethodVersion">
            <summary>
            Method version
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.PreMixTime">
            <summary>
            Pre mix time in seconds
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.Cycles">
            <summary>
            Number of cycles For Power Cycle Method Type
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.MinTemp">
            <summary>
            Temperature to turn back on for POWERCYCLING in degrees
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.ControlType">
            <summary>
            Method control type
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.Automation">
            <summary>
            Method automation:
            35ML = 0
            10ML = 1 (uses 10ML APD Clampdown Pressure Limit)
            CrimpCap = 3 (Also, see below)
            
            New values for Automation10ml
            Bit 0 = 10mL
            Bit 1 = CrimpCap
            Bit 2 = Quartz Vessel
            Bit 3 = Teflon Liner
            New Value for Easy Prep Vessel (bits 0 through 3 must be zero)
            Bit 4 = Easy Prep Vessel Method (0x10)
            Bit 5 = White bit for Teflon Liner (0x20) so 44 is Quartz with White Teflon Liner, and 40 is Pyrex White Teflon Liner
            Bit 6 is Dual Control (T + P) for White Liner only, else implies Temperature Control only
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.CooldownTime">
            <summary>
            Method cooldown time in seconds
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.Options">
            <summary>
            Delta pressure, 0 - off
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.PressureReleaseLimit">
            <summary>
            Method pressure release limit, zero to use default values
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.TemperatureReleaseLimit">
            <summary>
            Method temperature release limit, zero to use default values
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.Stages">
            <summary>
            List of stages in a method
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod.#ctor">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse">
            <summary>
            A representation of a device response to a query function
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.Status">
            <summary>
            Current device status
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.Temperature">
            <summary>
            Current device temperature in degrees C
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.Pressure">
            <summary>
            Current device temperature in PSI
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.Stage">
            <summary>
            Current stage index, zero indexed
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.CurrentStatus">
            <summary>
            Current device status
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.ElapsedTime">
            <summary>
            Sime since device/method start in seconds
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.StageTime">
            <summary>
            Time remaining in current stage
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.InternalPower">
            <summary>
            Current power consumption
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.IRTemperature">
            <summary>
            IR Temperature
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.FiberOpticsTemperature">
            <summary>
            Fiber Optics Temperature
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PSPICStatus">
            <summary>
            PS PIC status
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PSSecondaryCurrent">
            <summary>
            PS Secondary Current
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.HeatSinkTemperature">
            <summary>
            Heat Sink Temperature
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PSRampDone">
            <summary>
            PS Ramp Done
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PSRampTimer">
            <summary>
            PS Ramp Timer
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PSPICControlVersion">
            <summary>
            PS PIC Control Version
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PSPowerTableIndex">
            <summary>
            PS Power Table Index
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PSSecondaryControl">
            <summary>
            PS Secondary Control
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PSACVolts">
            <summary>
            Input voltage
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PSCurrentPower">
            <summary>
            PS Current Power
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.QueryStatus">
            <summary>
            Query Status
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.CurrentFlowValveSetting">
            <summary>
            Current Flow Valve Setting
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PressureDeviceStatus">
            <summary>
            Pressure Device Status
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.InternalAccessoryConnected">
            <summary>
            Internal Accessory Connected
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.InternalVersionNumber">
            <summary>
            InterNal Version Number
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.ReleaseTemperature">
            <summary>
            Method release temperature
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.ReleasePressure">
            <summary>
            Release Pressure in PSI
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.CurrentPressureDeviceCode">
            <summary>
            CurrentPressure Device Code
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.OpenVesselFlag">
            <summary>
            Open VEssel Flag
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PCSystemError">
            <summary>
            Current error code
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.BasicSClassFlags">
            <summary>
            Basic S-Class Flags
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.ActiveStirrerSpeed">
            <summary>
            Active Stirrer Speed
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PowerCycleCount">
            <summary>
            Power Cycle Count
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.AverageIRHeadTemperature">
            <summary>
            Average IR HEad Temperature
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.RawCalibrationPressure">
            <summary>
            Raw Calibration Pressure
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.AttenuatorType">
            <summary>
            Attenuator Type
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.CooldownTime">
            <summary>
            Method cooldown time
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.TenthOfaWattPower">
            <summary>
            Tenth of a Watt Power below 10 Watts
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.PSHighVoltage">
            <summary>
            PS High Voltage
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.TotalNumberOfVents">
            <summary>
            PS Total Number Of Vents
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.CurrentVentIndex">
            <summary>
            Current Vent Index and Disable Rapid Pressure Test in Top Bit Byte
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.MaxVentCount">
            <summary>
            Maximum Vent Count for this Index Byte
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.AttenuatorSensorBits">
            <summary>
            Attenuator Sensor Bits and CFR-11 Flags Byte
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.SpecialConfigurationBits">
            <summary>
            Special Configuration Bits
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterQueryResponse.GetOtherStatistics">
            <summary>
            Get some possibly less relevant statistics and put them into a string
            </summary>
            <returns>A string representation of the remaining statistics</returns>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus">
            <summary>
            Status of pressure device
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.PressureDeviceInError">
            <summary>
            Error in activent
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.PressureDeviceOpen">
            <summary>
            Activent is open
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.PressureDeviceClosed">
            <summary>
            Activent is closed
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.PressureDeviceInMotionOrError">
            <summary>
            Activent is moving
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.FlowValveInstalled">
            <summary>
            Flow valve installed
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.Vessel80mlAttached">
            <summary>
            80ml vessel attached
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.LargePacketBit">
            <summary>
            Large packet bit
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.UniversalAccBoxConnected">
            <summary>
            Universal Acc Box Connected
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.#ctor(System.Byte)">
            <summary>
            Class constructor
            </summary>
            <param name="statusByte">Status byte to parse</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.PressureDeviceStatus.ToString">
            <summary>
            Convert class properties to string
            </summary>
            <returns>String representation of this class</returns>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesters.BasicSClass">
            <summary>
            Extra information about pressure device
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.BasicSClass.ApdOK">
            <summary>
            APD ok
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.BasicSClass.AirOn">
            <summary>
            Air On
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.BasicSClass.Force10ML">
            <summary>
            Force 10ml
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.BasicSClass.PressureDeviceDetected">
            <summary>
            Pressure device detected
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.BasicSClass.PressureDeviceAndAttenuatorOK">
            <summary>
            Pressure device and attenuator ok
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.BasicSClass.FoundFiberOptic">
            <summary>
            Found fiberoptic
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.BasicSClass.FiberOpticEnabled">
            <summary>
            Fiberoptic enabled
            </summary>
        </member>
        <member name="P:Labman.Hardware.MicrowaveDigesters.BasicSClass.OkToCountdown">
            <summary>
            Ok to countdown
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.BasicSClass.#ctor(System.Byte)">
            <summary>
            Constrctor
            </summary>
            <param name="flags">byte containing basic S-Class flags</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.BasicSClass.#ctor">
            <summary>
            Empty constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesters.BasicSClass.ToString">
            <summary>
            Convert class properties to string
            </summary>
            <returns>Sting representation of a class</returns>
        </member>
        <member name="T:Labman.Hardware.MicrowaveDigesterException">
            <summary>
            Exception class for Microwave Digester
            </summary>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesterException.#ctor(System.String)">
            <summary>
            Class constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:Labman.Hardware.MicrowaveDigesterException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor for rethrowing exception
            </summary>
            <param name="message">Exception message</param>
            <param name="innerException">Previous exception</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.BeckhoffMotorController">
            <summary>
            This class controls Beckhoff IPC motor controller axes (NC Axes)
            </summary>
            <remarks>
            https://infosys.beckhoff.com/index_en.htm
            TwinCAT 3 -> TE1000 XAE -> Technologies -> ADS -> Specification for ADS devices -> Specification of the NC
            </remarks>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.AxisType">
            <summary>The type of axis this motor controller supports</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.BeckhoffMotorController.BrakeState">
            <summary>
            Axis Brake States
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.BeckhoffMotorController.MoveType">
            <summary>
            Move types that are used to add to the log file
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.BeckhoffMotorController.AxisStartType">
            <summary>
            Axis start command types
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.BeckhoffMotorController.EncoderDetails">
            <summary>
            Structure used to return encoder details
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.EncoderDetails.EncoderPosition">
            <summary>
            Gets or sets the encoder position
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.EncoderDetails.ModuloPosition">
            <summary>
            Gets or sets the modulo position
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.EncoderDetails.ModuloRotation">
            <summary>
            Gets or sets the modulo rotation
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord">
            <summary>
            Structure used to return axis status flags
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.Operational">
            <summary>
            Gets or sets a flag indicating if the axis is operational
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.Homed">
            <summary>
            Gets or sets a flag indicating if the axis has been homed
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.NotMoving">
            <summary>
            Gets or sets a flag indicating that the axis is not moving
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.InPositionArea">
            <summary>
            Gets or sets a flag indicating if the axis is in its position area
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.InTargetPosition">
            <summary>
            Gets or sets a flag indicating if the axis is in its target position
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.Protected">
            <summary>
            Gets or sets a flag indicating if the axis is protected
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.ErrorPropogationDelayed">
            <summary>
            Gets or sets a flag indicating if the error propagation is delayed
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.HasBeenStopped">
            <summary>
            Gets or sets a flag indicating if the axis has been stopped
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.HasJob">
            <summary>
            Gets or sets a flag indicating if the axis has a job
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.PositiveDirection">
            <summary>
            Gets or sets a flag indicating if the axis is moving in the positive direction
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.NegativeDirection">
            <summary>
            Gets or sets a flag indicating if the axis is moving in the negative direction
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.HomingBusy">
            <summary>
            Gets or sets a flag indicating if the axis is busy homing
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.ConstantVelocity">
            <summary>
            Gets or sets a flag indicating if the 
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.Compensating">
            <summary>
            Gets or sets a flag indicating if the axis is compensating
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.EstSetPointGenEnabled">
            <summary>
            Gets or sets a parameter indicating if the EST set point gen is enabled
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.PhasingActive">
            <summary>
            Gets or sets a flag indicating if phasing is active
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.ExternalLatchValid">
            <summary>
            Gets or sets a flag indicating if the external latch is valid
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.NewTargetPos">
            <summary>
            Gets or sets a flag indicating if the axis has a new target position
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.ContinuousMotion">
            <summary>
            Gets or sets a flag indicating if the axis is moving continuously
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.ControlLoopClosed">
            <summary>
            Gets or sets a flag indicating if the control loop is closed
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.CamTableQueued">
            <summary>
            Gets or sets a flag indicating if the cam table is queued
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.CamDataQueued">
            <summary>
            Gets or sets a flag indicating if cam data is queued
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.CamScalingPending">
            <summary>
            Gets or sets a flag indicating if cam scaling is pending
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.CamBuffered">
            <summary>
            Gets or sets a flag indicating if the cam is buffered
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.PtpMode">
            <summary>
            Gets or sets a flag indicating if the unit is in PTP mode
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.SoftLimitMinExceeded">
            <summary>
            Gets or sets a flag indicating if the minimum soft limit is exceeded
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.SoftLimitMaxExceeded">
            <summary>
            Gets or sets a flag indicating if the minimum soft limit is exceeded
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.DriveDeviceError">
            <summary>
            Gets or sets a flag indicating if there is a drive device error
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.MotionCommandsLocked">
            <summary>
            Gets or sets a flag indicating if the motion commands are locked
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.IoDataInvalid">
            <summary>
            Gets or sets a flag indicating if the IO data is invalid
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.Error">
            <summary>
            Gets or sets a flag indicating if there is an error
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.StatusDoubleWord.#ctor(System.UInt32)">
            <summary>
            Default constructor for the status class
            </summary>
            <param name="value">The value of the status word</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>Flag indicating if the motor is e-stopped</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.IsServoInPosition(System.Int32)">
            <summary>
            Determines if the servo axis is reporting it is in position
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if in position, else false</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the logical position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the encoder position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position - note encoder positions are NOT checked after the move
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.EmergencyStopException">
            Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped
            </exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">
            Failed to start axis moving
            or
            or
            Axis move failed as the controller processor was reset
            </exception>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped</exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">Failed to start axis moving
            or
            Axis move failed as the operation timed out
            or
            Axis move failed as the controller processor was reset</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.MoveModulo(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis using the Modulo Command
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Set the encoder ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetDriveSpeed(System.Int32,System.Double)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetJerkValue(System.Int32,System.Double)">
            <summary>
            Sets the jerk value of an axis
            </summary>
            <param name="axis">The axis index</param>
            <param name="jerk">The jerk value</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.ToggleEnableLine(System.Int32)">
            <summary>
            Toggles the axis enable line, this is used to disable and enable some motors to reset faults
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch an auxillary output on the controller
            </summary>
            <param name="axis">The axis number to switch the output on</param>
            <param name="output">The output index to switch</param>
            <param name="state">The aux output state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Get the current homing status from the controller, this indicates which stage in the homing process the controller is in
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The current home state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.CheckForServoFaults(System.Int32)">
            <summary>
            Checks for a fault on the motor controller
            </summary>
            <param name="axis">axis number</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetAxisStatus(System.Int32)">
            <summary>
            Get the axis state, which includes flags representing whether the axis is moving, in error etc
            </summary>
            <param name="axis">The axis to check</param>
            <returns>A structure containing all axis state flags</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetErrorCode(System.Int32)">
            <summary>
            Get any axis errors
            </summary>
            <param name="axis">The axis index</param>
            <returns>Axis error code. 0 = NoError</returns>
            <remarks>
            Lookup all error codes here:
            https://download.beckhoff.com/download/Document/automation/twincat3/TwinCAT_NC_Error_Codes_EN.pdf
            </remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.EnableAxis(System.Int32)">
            <summary>
            Enable the axis (power up)
            </summary>
            <param name="axis">Axis number</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.DisableAxis(System.Int32)">
            <summary>
            Disable the axis (power off)
            </summary>
            <param name="axis">Axis number</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetBrakeState(System.Int32,Labman.Hardware.MotorControllers.BeckhoffMotorController.BrakeState)">
            <summary>
            Manually set the state of the axis brake
            </summary>
            <param name="axis">Axis number</param>
            <param name="state">Brake state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.PrepareForMove(System.Int32,Labman.Hardware.MotorControllers.BeckhoffMotorController.MoveType)">
            <summary>
            Prepare the axis for moving, ensuring it is error free and enabled
            </summary>
            <param name="axis">The axis number</param>
            <param name="type">The move type to prepare for</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.SetMotorRatedCurrent(System.Int32,System.Double)">
            <summary>
            Sets the motor's rated current
            </summary>
            <param name="axis">The axis index</param>
            <param name="current">The current</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetEncoderDetails(System.Int32)">
            <summary>
            Get encoder details, which includes the position and modulo position (angle of the shaft)
            </summary>
            <param name="axis">The axis number</param>
            <returns>The encoder details</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetActualAxisSpeed(System.Int32)">
            <summary>
            Get actual axis speed
            </summary>
            <param name="axis">Axis number</param>
            <returns>Axis speed in NC axis units</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetMaxAxisSpeed(System.Int32)">
            <summary>
            Get the maximum allowed speed for the axis
            </summary>
            <param name="axis">Axis number</param>
            <returns>Max speed</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetMaxAxisAcceleration(System.Int32)">
            <summary>
            Get the maximum allowed acceleration for the axis
            </summary>
            <param name="axis">Axis number</param>
            <returns>Max acceleration</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetMaxAxisDeceleration(System.Int32)">
            <summary>
            Get the maximum allowed deceleration for the axis
            </summary>
            <param name="axis">Axis number</param>
            <returns>Max deceleration</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetCurrentCurrent(System.Int32)">
            <summary>
            Gets the motor current
            </summary>
            <param name="axisNo">The axis number</param>
            <returns>The current</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.BeckhoffMotorController.GetTorqueParameters">
            <summary>
            Gets the torque parameters
            </summary>
            <returns>The torque parameters</returns>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.BeckhoffMotorController.TorqueParams">
            <summary>
            A class to contain the torque parameters
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.TorqueParams.RatedCurrent">
            <summary>
            Gets or sets the rated current
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.TorqueParams.TorqueConstant">
            <summary>
            Gets or sets the torque constant
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.BeckhoffMotorController.TorqueParams.FeatureBits">
            <summary>
            Gets or sets the features
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoEXCMStageController">
            <summary>
            This class is the specific implementation of the CVE comms inteferface for the EXCM controller used on the small
            XY stages. The controller must be set to DirectMode using the Festo Configuration Tool before using this class
            to control the stage, otherwise it will not work.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoEXCMStageController.ErrorCodes">
            <summary>
            Configuration, Hardware, etc. Error Codes
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.FestoEXCMStageController._controlWord">
            <summary>
            Used to set the control word in object index 240
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.FestoEXCMStageController._statusWord">
            <summary>
            Used to read the status word from object index 239
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.FestoEXCMStageController._currentMessageID">
            <summary>
            An incrementing number used to track responses to sent messages
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.FestoEXCMStageController._encoderRatio">
            <summary>
            Holds the encoder ratio, this is the same for both X and Y
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.FestoEXCMStageController._homeTimeout">
            <summary>
            Stores the home time out in seconds
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoEXCMStageController.DataTypes">
            <summary>
            The data types that can be used when communicting with the controller.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoEXCMStageController.CVEObjectIndexes">
            <summary>
            Control via Ethernet Object Indexes.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoEXCMStageController.ResponseErrorCodes">
            <summary>
            Error codes relating to the CVE communication.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.WriteCVEObject(Labman.Hardware.MotorControllers.FestoEXCMStageController.CVEObjectIndexes,System.Int32,Labman.Hardware.MotorControllers.FestoEXCMStageController.DataTypes)">
            <summary>
            Writes a value to a CVE object
            </summary>
            <param name="objectIndex">The index of the CVE object to write to</param>
            <param name="value">Value to write as a 32bit integer</param>
            <param name="dataType">The datatype of the CVE object</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.WriteCVEObject(Labman.Hardware.MotorControllers.FestoEXCMStageController.CVEObjectIndexes,System.Int32,System.Int32,Labman.Hardware.MotorControllers.FestoEXCMStageController.DataTypes)">
            <summary>
            Writes a value to a CVE object
            </summary>
            <param name="objectIndex">The index of the CVE object to write to</param>
            <param name="subIndex">The sub index of the object</param>
            <param name="value">Value to write as a 32bit integer</param>
            <param name="dataType">The datatype of the CVE object</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.ReadCVEObject(Labman.Hardware.MotorControllers.FestoEXCMStageController.CVEObjectIndexes,Labman.Hardware.MotorControllers.FestoEXCMStageController.DataTypes)">
            <summary>
            Reads a value as a 32bit integer from a CVE object
            </summary>
            <param name="objectIndex">The index of the CVE object to read</param>
            <param name="dataType">The datatype of the CVE object</param>
            <returns>Integer value representing the CVE object value</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.ReadCVEObject(Labman.Hardware.MotorControllers.FestoEXCMStageController.CVEObjectIndexes,System.Int32,Labman.Hardware.MotorControllers.FestoEXCMStageController.DataTypes)">
            <summary>
            Reads a value as a 32bit integer from a CVE object
            </summary>
            <param name="objectIndex">The index of the CVE object to read</param>
            <param name="subIndex">The sub index of the object</param>
            <param name="dataType">The datatype of the CVE object</param>
            <returns>Integer value representing the CVE object value</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.Initialise">
            <summary>
            Initialises the EXCM controller and communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.Dispose">
            <summary>
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Overload for the stop axis method doesn't take a wait parameter
            </summary>
            <param name="axis">The axis is irrelevant both axes will always be stopped</param>
            <param name="stopMode">The stop mode is not used as there is no option to stop immediately</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Stops any motion commands currently being executed
            </summary>
            <param name="axis">The axis is irrelevant both axes will always be stopped</param>
            <param name="stopMode">The stop mode is not used as there is no option to stop immediately</param>
            <param name="waitType">Indicates whether or not to wait for the axis to stop</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.ClearControllerFaults(System.Int32)">
            <summary>
            Attempts to reset the fault status on the controller. If the fault has not been actioned then the fault will not
            be cleared until whatever is causing the fault is resolved.
            </summary>
            <param name="axis">Not used, must be included for the base method.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the current encoder position of an axis
            </summary>
            <param name="axis">Axis to retrieve position for</param>
            <returns>Encoder position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.GetLogicalPosition(System.Int32)">
            <summary>
            Returns the logical position reported by the controller.
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>
            The position
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the stage
            </summary>
            <param name="axis">Both axes are always homed, there is no way of individually homing axes</param>
            <param name="waitType">Indicates whether or not to wait for the home to finish</param>
            <param name="homeTimeout">The timeout period in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Sets the drive speed in mm/s
            </summary>
            <param name="axis">The speed is applied to both axes regardless of what this parameter is set to</param>
            <param name="speed">The speed in mm/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.MoveXYAbs(System.Double,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Moves the X and Y axes simultaenously
            </summary>
            <param name="xPosition">Position to move the X axis</param>
            <param name="yPosition">Position to move the Y axis</param>
            <param name="waitType">The wait type.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Move an axis to an absolute position in mm
            </summary>
            <param name="axis">Axis to move</param>
            <param name="position">Position in mm</param>
            <param name="waitType">Wait for the move to complete or not</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.MotorControllerException">
            The drive must be enabled before starting a move
            or
            The drive must be homed before you can begin moving it
            or
            There is no power present on the controller, check power supply
            or
            Previous motion command is not complete
            or
            </exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves an axis relative to its current position
            </summary>
            <param name="axis">Axis to move</param>
            <param name="distance">The distance to move in mm</param>
            <param name="waitType">Wait for the move to complete or not</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.MotorControllerException">
            The drive must be enabled before starting a move
            or
            The drive must be homed before you can begin moving it
            or
            There is no power present on the controller, check power supply
            or
            Previous motion command is not complete
            or
            </exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsAxisBusy(System.Int32)">
            <summary>
            Checks to see whether or not the stage is busy
            </summary>
            <param name="axis">There is no way of checking individual axes, this will return TRUE is either axis is busy and FALSE if both are stopped</param>
            <returns>TRUE if an axis is busy and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Sets the acceleration rate of the drive in mm/s2
            </summary>
            <param name="axis">The acceleration rate is the same regardless of which axis is set here</param>
            <param name="accelerationRate">The acceleration rate in mm/s2</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsEmergencyStopped">
            <summary>
            Checks the status of the emergency stop input
            </summary>
            <returns>TRUE if the EStop is active and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Not used - implemented so an exception is not thrown when setting axis parameters
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Not used - implemented so an exception is not thrown when setting axis parameters
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the encoder position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            The encoder ratio is the same for both axes
            </summary>
            <param name="axis">Not used</param>
            <param name="ratio">The ratio in counts per mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Sets the home timeout, this is the same regardless of which axis is passed
            </summary>
            <param name="axis">Not used</param>
            <param name="timeout">Time out in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the logical position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Get the current homing status from the controller, this indicates which stage in the homing process the controller is in
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>
            The current home state
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.GetMotorStatusSummaryText(System.Int32)">
            <summary>
            Gets the motor status summary text. This is used optionally to display on the axis engineering control.
            </summary>
            <param name="axis">The axis</param>
            <returns>
            Status string
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>
            True if the axis is on the home sensor, else False
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.TakeHighOrderControl">
            <summary>
            Takes control of the communications interface on the controller
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetDriveEnable(System.Boolean)">
            <summary>
            Sets the drive enable bit in the CCON byte of the control word
            </summary>
            <param name="enabled">TRUE to enable the drive and FALSE to disable it</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.SetBrake(System.Boolean)">
            <summary>
            Sets the brake release bit in the CCON byte of the control word
            </summary>
            <param name="released">TRUE to release the brake and FALSE to activate it</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsCommandAcknowledged">
            <summary>
            Reads the status of the ACK bit in the SPOS status byte of the status word
            </summary>
            <returns>Value of the bit</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsMotionComplete">
            <summary>
            Reads the status of the MC and MOV bits in the SPOS status byte of the status word
            </summary>
            <returns>Value of the bit</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsDriveMoving">
            <summary>
            Reads the status of the MOV bit in the SPOS status byte of the status word
            </summary>
            <returns>Value of the bit</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsHomeRequired">
            <summary>
            Reads the status of the REF bit in the SPOS status byte of the status word
            </summary>
            <returns>Value of the bit</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsDriveEnabled">
            <summary>
            Reads the status of the Enabled bit in the SCON status byte of the status word
            </summary>
            <returns>Value of the bit</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsOperationEnabled">
            <summary>
            Reads the status of the OPEN bit in the SCON status byte of the status word
            </summary>
            <returns>Value of the bit</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsWarningPresent">
            <summary>
            Reads the status of the WARN bit in the SCON status byte of the status word
            </summary>
            <returns>Value of the bit</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsFaultPresent">
            <summary>
            Reads the status of the FAULT bit in the SCON status byte of the status word
            </summary>
            <returns>Value of the bit</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.IsVoltageApplied">
            <summary>
            Reads the status of the 24VL bit in the SCON status byte of the status word
            </summary>
            <returns>Value of the bit</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoEXCMStageController.GetCurrentError">
            <summary>
            Reads the current value from the error register in the controller
            </summary>
            <returns>An enumeration representing the error</returns>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoFHPPMotorController">
            <summary>
            Documentation: https://www.festo.com/net/SupportPortal/Files/466674/CMMO-ST-LK-HP_2017-05b_8071676g1.pdf
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoFHPPMotorController.ErrorCodes">
            <summary>
            Configuration, Hardware, etc. Error Codes
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags">
            <summary>
            The drive flags determine the current drive state
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.SCONBits">
            <summary>
            Byte 1: SCON (Status condition)
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.SPOSBits">
            <summary>
            Byte 2: SPOS (Status position)
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.SDIRBits">
            <summary>
            Byte 3: SDIR (Status direct)
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.SDIRBits.ABS">
            <summary>
            Bit 0 - Absolute/Relative
            = 1: Setpoint value is relative to last setpoint value.
            = 0: Setpoint value is absolute.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.SDIRBits.COM1">
            <summary>
            Bit 1 + 2 - Control Mode Feedback
            No. | Com 2 | Com 1 | Control mode
            0   | 0     | 0     | Positioning mode
            1   | 0	    | 1     | Power mode(torque, current)
            2   | 1     | 0     | Speed mode(rotational speed)
            3   | 1     | 1     | Reserved
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.SDIRBits.B3">
            <summary>
            Bit 3
            Reserved, must be at 0.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.SDIRBits.VLIM">
            <summary>
            Bit 5 - Velocity Limit Reached
            = 1: Speed limit reached
            = 0: Speed limit not reached
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.SDIRBits.XLIM">
            <summary>
            Bit 6 - Stroke Limit Reached
            = 1: Stroke limit reached
            = 0: Stroke limit not reached
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.SDIRBits.B6">
            <summary>
            Bit 6 + 7
            Reserved, must be at 0.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.CCONBits">
            <summary>
            Byte 1: CCON (Control condition)
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.CPOSBits">
            <summary>
            Byte 2: CPOS (Control position)
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.CDIRBits">
            <summary>
            Byte 3: CDIR (Control direct)
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.CDIRBits.ABS">
            <summary>
            Bit 0 - Absolute/Relative
            = 1: Setpoint value is relative to last setpoint value.
            = 0: Setpoint value is absolute.
            Considered only in positioning mode(COM1/2 = 00).
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.CDIRBits.COM1">
            <summary>
            Bit 1 + 2 - Control Mode
            No. | Com 2 | Com 1 | Control mode
            0   | 0     | 0     | Positioning mode
            1   | 0	    | 1     | Power mode(torque, current)
            2   | 1     | 0     | Speed mode(rotational speed)
            3   | 1     | 1     | Reserved
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.CDIRBits.B3">
            <summary>
            Bit 3 + 4
            Reserved, must be at 0.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.CDIRBits.XLIM">
            <summary>
            Bit 5 - Stroke Limit Inactive
            = 1: Stroke monitoring not active
            = 0: Stroke monitoring active
            Considered only with force mode or speed mode (COM1/2 = 01 or 10)
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.CDIRBits.B6">
            <summary>
            Bit 6 + 7
            Reserved, must be at 0.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.DriveFlags.GetControlBytes">
            <summary>
            Returns the control flags in the current format to send
            </summary>
            <returns>An integer representation of CCON + CPOS</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position - note encoder positions are NOT checked after the move
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.EmergencyStopException">
            Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped
            </exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">
            Failed to start axis moving
            or
            or
            Axis move failed as the controller processor was reset
            </exception>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped</exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">Failed to start axis moving
            or
            Axis move failed as the operation timed out
            or
            Axis move failed as the controller processor was reset</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
            <param name="waitType">The type of wait required</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>Will return 0</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>Flag indicating if the motor is e-stopped</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.IsEmergencyStopped(System.Int32)">
            <summary>
            Is the emergency stop pressed
            </summary>
            <param name="axis">The axis number.</param>
            <returns>
            Flag indicating if the motor is e-stopped
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Get the current homing status from the controller, this indicates which stage in the homing process the controller is in
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The current home state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults
            </summary>
            <param name="axis">Axis number on the on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.MoveToSetPosition(System.Int32,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Instruct the axis to move to a stored position in the controller
            </summary>
            <param name="axis">The axis</param>
            <param name="position">The position</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.FestoFHPPMotorController.GetStatus">
            <summary>
            Gets the current status of the controller and updates the status flags
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController">
            <summary>
            This class communicates with a Labman LMA2017-14 5-axis motor controller
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.ControllerCommand">
            <summary>
            Enumeration of possible command codes that can be send to the motor controller device.
            These are set in the propeller code.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.DotStarAnimations">
            <summary>
            Available dotstar LED strip animations
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.TransmitPacket(System.Int32,Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.ControllerCommand,System.Byte[])">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="axis">The axis number to send the command to</param>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.DecodeBase128(System.Byte[])">
            <summary>
            Decodes a base 128 reply
            </summary>
            <param name="buffer">The encoded value in base 128 format (exactly 5 bytes long)</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.EncodeBase128(System.Int32)">
            <summary>
            Encodes a value into base128 format
            </summary>
            <param name="value">The value to encode</param>
            <returns>The base128 byte array</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>Flag indicating if the motor is e-stopped</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the logical position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the encoder position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position - note encoder positions are NOT checked after the move
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.EmergencyStopException">
            Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped
            </exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">
            Failed to start axis moving
            or
            or
            Axis move failed as the controller processor was reset
            </exception>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped</exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">Failed to start axis moving
            or
            Axis move failed as the operation timed out
            or
            Axis move failed as the controller processor was reset</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Set the encoder ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.ToggleEnableLine(System.Int32)">
            <summary>
            Toggles the axis enable line, this is used to disable and enable some motors to reset faults
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch an auxillary output on the controller
            </summary>
            <param name="axis">Not used</param>
            <param name="output">The output index to switch</param>
            <param name="state">The aux output state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Get the current homing status from the controller, this indicates which stage in the homing process the controller is in
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The current home state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.ReadAnalogInput(System.Int32)">
            <summary>
            Reads a 12-bit analog input value on the motor controller (0-4096)
            </summary>
            <param name="samplesToAverage">The number of samples to internally average on the controller</param>
            <returns>The 12-bit analog voltage reading (0-4096)</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.ReadDigitalInput(System.Int32)">
            <summary>
            Reads the state of the digital input specified
            </summary>
            <param name="input">The input index to read</param>
            <returns>True if high, false if low</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.ToggleDotStars(Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Enables or disables the DotStars
            </summary>
            <param name="enable">The state to drive the DotStars</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetFanSpeed(System.Int32)">
            <summary>
            Set the fan speed
            </summary>
            <param name="fanSpeed">The fan speed (0-63)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.GetFanSpeed">
            <summary>
            Reads the fan tachometer
            </summary>
            <returns>The tachometer reading (arbitrary units plus offset)</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.GetFanControllerTemp">
            <summary>
            Reads the fan controller temp
            </summary>
            <returns>The fan controller temp (arbitrary units plus offset)</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.StartCameraSync">
            <summary>
            Starts the camera sync routine
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetCameraSyncPulseCount(System.Int32)">
            <summary>
            Sets the number of pulses per 360 deg rotation
            </summary>
            <param name="pulseCount">The number of pulses</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.SetDotStarAnimation(Labman.Hardware.MotorControllers.LabmanLMA201714MotorController.DotStarAnimations)">
            <summary>
            Sets the current dotstar animation
            </summary>
            <param name="animation">The animation to set to</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanLMCMotorController">
            <summary>
            Motor driver for the LMA2019-21 Labman Motor Controller (LMC) board.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.LabmanLMCMotorController.MAX_SAFE_SPEED">
            <summary>
            The maximum electrical stepping speed
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.LabmanLMCMotorController" /> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanLMCMotorController.LmcFaultCode">
            <summary>
            Enumaration of fault codes which can be present on the board.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanLMCMotorController.LmcHomeMode">
            <summary>
            The modes of homing the board can peform.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanLMCMotorController.LmcIOPin">
            <summary>
            GPIO Pins on the board.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262StateCodeBit">
            <summary>
            Enumeration of bit flags representing the meaning of each bit within the TMC262
            status register.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.MotorControllerSettings">
            <summary>
            The motor controller settings, exposed as the LMC board's custom settings object
            which includes Microstepping and Current
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetAllowedEncoderDeviation(System.Int32)">
            <summary>
            Gets the maximum amount of deviation between encoder and logical positions the board
            will allow before terminating the current move.
            </summary>
            <param name="axis">The axis to query the parameter for.</param>
            <returns>The allowed encoder deviation for the axis specified</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetBrakeApplyDelayMilliseconds(System.Int32)">
            <summary>
            Gets the time the board will wait for a new move command with the brake released
            before deciding to reapply the brake.
            </summary>
            <param name="axis">The axis on the motor control to query this parameter for.</param>
            <returns>The break apply delay for the axis specified.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetBrakeReleaseDelayMilliseconds(System.Int32)">
            <summary>
            Gets the time the board will wait for the brake to release before starting a move
            when managing the brake.
            </summary>
            <param name="axis">The axis on the motor control to query this parameter for.</param>
            <returns>The break release delay for the axis specified.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Gets the current home state
            </summary>
            <param name="axis">The axis index</param>
            <returns>The current home state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetCurrentlySetTmcStatusCodeBits">
            <summary>
            Returns a list of Tmc262StateCodeBit values which represent which status bits are
            currently set in the Tmc262 status register.
            </summary>
            <returns>
            A list of Tmc262StateCodeBit values which represent which status bits are currently
            set in the Tmc262 status register.
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for a given axis
            </summary>
            <param name="axis">The axis index</param>
            <returns>The encoder position in mm (when ratio is set correctly)</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetEncoderScalerDenominator(System.Int32)">
            <summary>
            Gets the scaler the board will divide the encoder deviation count by internally to
            convert the encoder count to match the logical count. This has to be set correctly
            to use the encoder deviation detection feature.
            </summary>
            <param name="axis">The axis on the motor control to query this parameter for.</param>
            <returns>The encoder scaler denominator.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetEncoderScalerNumerator(System.Int32)">
            <summary>
            Gets the scaler the board will multiply the encoder deviation count by internally to
            convert the encoder count to match the logical count. This has to be set correctly
            to use the encoder deviation detection feature.
            </summary>
            <param name="axis">The axis on the motor control to query this parameter for.</param>
            <returns>The encoder scaler numerator.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetFaultCodes(System.Int32)">
            <summary>
            Gets any fault codes currently present on the motor controller. These fault codes
            are encoded into a long value on the device whereby each bit represents the presence
            of an error. This method extracts these into a list of present faults.
            </summary>
            <param name="axis">The axis to query the fault codes for.</param>
            <returns>A list of all the fault codes found.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetFirmwareVersion">
            <summary>
            Gets the firmware version of the device.
            </summary>
            <returns>The firmware version.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetFollowingError(System.Int32)">
            <summary>
            Gets the following error (deviation between logical and encoder positions)
            calculated by the motor controller.
            </summary>
            <param name="axis">The axis on the motor control to query this parameter for.</param>
            <returns>The following error for the specified axis.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical position for a given axis
            </summary>
            <param name="axis">The axis index</param>
            <returns>The logical position in mm (when ratio is set correctly)</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetMotorStatusSummaryText(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetSerialNumber">
            <summary>
            Gets the serial number of the device.
            </summary>
            <returns>The serial number string.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetTmc262Status">
            <summary>
            Gets the status of the boards TMC 262 chip. 
            </summary>
            <returns>An object representing the status of the TMC262 chip.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetTmcStatusCode">
            <summary>
            Gets the long integer representation of the status code register of the Tmc262.
            </summary>
            <returns>The value of the TMC262 status register as a long.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">The axis index</param>
            <param name="waitType">Wait type</param>
            <param name="homeTimeout">Timeout in ms</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,Labman.Hardware.MotorControllers.LabmanLMCMotorController.LmcHomeMode)">
            <summary>
            Homes the axis with a specific home mode.
            </summary>
            <param name="axis">The axis index</param>
            <param name="waitType">Wait type</param>
            <param name="homeTimeout">Timeout in ms</param>
            <param name="homeMode">The home mode to home the motor controller with.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Initialise">
            <summary>
            The initialize method is used to setup the device instance and ensure it is ready to
            be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Checks if the given axis is busy
            </summary>
            <param name="axis">The axis index</param>
            <returns>True if busy, false if not</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.IsEmergencyStopped">
            <summary>
            Returns if the device detects an emergency stop condition
            </summary>
            <returns>True if emergency stopped</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.IsOnHome(System.Int32)">
            <summary>
            Returns the state of the home sensor
            </summary>
            <param name="axis">The axis index</param>
            <returns>True if the home sensor is active</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the motor to an absolute position
            </summary>
            <param name="axis">The axis number</param>
            <param name="position">The position to move to</param>
            <param name="waitType">Should the program wait to complete</param>
            <param name="timeout">Timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the motor to an absolute position
            </summary>
            <param name="axis">The axis number</param>
            <param name="position">The position to move to</param>
            <param name="waitType">Should the program wait to complete</param>
            <param name="timeout">Timeout in ms</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.ReadGpioInput(System.Int32,Labman.Hardware.MotorControllers.LabmanLMCMotorController.LmcIOPin,Labman.Hardware.IODevices.IODevice.InputState)">
            <summary>
            Read an auxiliary input in the controller
            </summary>
            <param name="axis">Axis number to read input on</param>
            <param name="gpioPin">The input index to read</param>
            <param name="simulationState">Simulation mode state</param>
            <returns>The state of the specified IO pin.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.RebootDevice">
            <summary>
            Reboots the device by resetting the main parallax controller.
            WARNING: Running this method on old revisions of the board (REVB) with the motor
                     power on can cause the back EMF protection MOSFET to fail on the board.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Sets the acceleration rate for the given axis
            </summary>
            <param name="axis">The axis index</param>
            <param name="accelerationRate">The acceleration rate in steps/sec^2</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetAllowedEncoderDeviation(System.Int32,System.Double)">
            <summary>
            Sets the amount of encoder deviation (difference between logical and encoder
            position on the board) alowed before the board terminates the current move.
            </summary>
            <param name="axis">the axis index</param>
            <param name="allowedEncoderDeviationMillimeters">
            The allowed encoder deviation in mm.
            </param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetBrakeApplyDelayMilliseconds(System.Int32,System.UInt32)">
            <summary>
            Sets the time the board will wait after a move completes before re-applying the
            brake. Only valid when brake management is enabled (see SetBrakeManagmentFlag).
            Note: if another move command is issued before this time is elapsed. The board will
                  complete the new move and restart this delay.
            </summary>
            <param name="axis">The axis index</param>
            <param name="applyDelayMilliseconds">
            The amount of time to delay for before apply the brake in ms.
            </param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetBrakeManagmentFlag(System.Int32,System.Boolean)">
            <summary>
            Sets a flag on the motor controller to indicate that the device should manage its
            own brake.
            </summary>
            <param name="axis">The axis to set the flag for.</param>
            <param name="manageBrake">True to enable brake management, false to disable it.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetBrakeReleaseDelayMilliseconds(System.Int32,System.UInt32)">
            <summary>
            Sets the time the board will wait after releasing the brake before starting a move.
            This allows the brake to energize and release from the driven axis. Only valid when
            brake management is enabled (see SetBrakeManagmentFlag).
            </summary>
            <param name="axis">The axis index</param>
            <param name="releaseDelayMilliseconds">
            The time to wait whilst the brake releases in ms.
            </param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetDriveCurrent(System.Int32,System.Int32)">
            <summary>
            Set the motor current setting
            </summary>
            <param name="axis">The axis</param>
            <param name="current">The current in 100mA units, 0-31. 10 = 1A, 15 = 1.5A, etc</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Sets the drive speed for the given axis
            </summary>
            <param name="axis">The axis index</param>
            <param name="speed">The drive speed in steps/sec</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Sets the encoder direction
            </summary>
            <param name="axis">The axis index</param>
            <param name="direction">The direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position of the axis
            </summary>
            <param name="axis">The axis index</param>
            <param name="position">The position (in encoder steps from home)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Sets the encoder ratio
            </summary>
            <param name="axis">The axis index</param>
            <param name="ratio">The number of steps/mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetEncoderScalerDenominator(System.Int32,System.Int32)">
            <summary>
            Sets the encoder scaler denominator. This is the scale factor the encoder count will
            be divided by on the board.
            </summary>
            <param name="axis">The axis to set this parameter for.</param>
            <param name="encoderScalerDenominator">
            The value to set the encoder scaler denominator to.
            </param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetEncoderScalerNumerator(System.Int32,System.Int32)">
            <summary>
            Sets the encoder scaler numerator. This is the scale factor the encoder count will
            be multiplied by on the board.
            </summary>
            <param name="axis">The axis to set this parameter for.</param>
            <param name="encoderScalerNumerator">
            The value to set the encoder scaler numerator to.
            </param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetHoldCurrent(System.Int32,System.Int32)">
            <summary>
            Set the motor current setting
            </summary>
            <param name="axis">The axis</param>
            <param name="current">The current in 100mA units, 0-20. 10 = 1A, 15 = 1.5A, etc</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Sets the home direction change delay
            </summary>
            <param name="axis">The axis index</param>
            <param name="delay">The delay in ms</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Sets the home step off speed
            </summary>
            <param name="axis">The axis index</param>
            <param name="speed">The speed in steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Sets the homing speed
            </summary>
            <param name="axis">The axis index</param>
            <param name="speed">The speed in steps/sec</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Sets the home timeout
            </summary>
            <param name="axis">The axis index</param>
            <param name="timeout">The timeout, in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Sets the initial startup speed of the axis
            </summary>
            <param name="axis">The axis index</param>
            <param name="speed">Initial speed in steps/sec</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetIpAddress(System.String)">
            <summary>
            Sets the boards IP address. This will change next time the board boots.
            </summary>
            <param name="ipAddress">
            The new IP address to give the board. Invalid strings will cause an
            ArgumentException to be thrown.
            </param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetIpAddress(System.Net.IPAddress)">
            <summary>
            Sets the boards IP address. This will change next time the board boots.
            </summary>
            <param name="ipAddress">The new IP address to give the board.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical position of the axis
            </summary>
            <param name="axis">The axis index</param>
            <param name="position">The position (in steps from home) to set to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetMacAddress(System.Byte[])">
            <summary>
            Sets the boards MAC address. Actual physical address change will occur when the
            board next reboots. This must be exactly 6 bytes.
            Note: This function should only be called by the Labman LMC board flashing utility
                  baring rare exceptions. This tool generates and stores these address in a
            Labman internal database. It is key that these addresses are unique from board to
            board. Otherwise unusual network behavior may occur. Additionally, MAC addresses
            must start with Labman's OUI which identifies the LMA board as being a registered
            Labman network device. This OUI is provided by the IEEE.
            </summary>
            <param name="macAddressBytes">
            The bytes of the mac address (should be exactly 6 bytes) to set.
            </param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetMacAddress(System.String)">
            <summary>
            Sets the boards MAC address. Actual physical address change will occur when the
            board next reboots. This must be exactly 6 bytes.
            Note: This function should only be called by the Labman LMC board flashing utility
                  baring rare exceptions. This tool generates and stores these address in a
            Labman internal database. It is key that these addresses are unique from board to
            board. Otherwise unusual network behavior may occur. Additionally, MAC addresses
            must start with Labman's OUI which identifies the LMA board as being a registered
            Labman network device. This OUI is provided by the IEEE.
            </summary>
            <param name="macAddressString">
            The mac address to set in string form. The string is parsed using
            PhysicalAddress.Parse method (System.Net.NetworkingInfomation). Recommended string
            format example: 02-00-DE-AD-BE-12 As per the other notes, this MAC address must be
            exactly 6 bytes.
            </param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetMacAddress(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Sets the boards MAC address. Actual physical address change will occur when the
            board next reboots. This must be exactly 6 bytes.
            Note: This function should only be called by the Labman LMC board flashing utility
                  baring rare exceptions. This tool generates and stores these address in a
            Labman internal database. It is key that these addresses are unique from board to
            board. Otherwise unusual network behavior may occur. Additionally, MAC addresses
            must start with Labman's OUI which identifies the LMA board as being a registered
            Labman network device. This OUI is provided by the IEEE.
            </summary>
            <param name="macAddress">The physical MAC address to set.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetMicrostepping(System.Int32,System.Int32)">
            <summary>
            Sets the microstep setting Supported values are powers of 2 from 1-256
            </summary>
            <param name="axis">The axis index</param>
            <param name="microstepSetting">The microstep value</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Sets the motor direction
            </summary>
            <param name="axis">The axis index</param>
            <param name="direction">The direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Sets the motor ratio
            </summary>
            <param name="axis">The axis index</param>
            <param name="ratio">The number of steps/mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetSerialNumber(System.String)">
            <summary>
            Sets the boards serial number. Note that the serial number cannot be an empty string
            or a
            </summary>
            <param name="serialNumber">The serial number to set.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetSocketInactivityTimeout(System.UInt32)">
            <summary>
            Sets the boards socket inactivity timeout. 
            This is how long the board will keep a TCP socket open for before finalizing the connection if no commands are received. The timer is reset when a valid command is received.
            </summary>
            <param name="timeoutSeconds">
            The timeout. Note that this must be less than 2,147,483,647 seconds (31 bits). Which
            is 68 years.... Set this to 0 to disable the inactivity timeout.
            </param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SetSocketInactivityTimeout(System.TimeSpan)">
            <summary>
            Sets the boards socket inactivity timeout.
            This is how long the board will keep a TCP socket open for before finalizing the connection if no commands are received. The timer is reset when a valid command is received.
            </summary>
            <param name="timeout">
            The timeout. Note that this must be less than 2,147,483,647 seconds (31 bits). Which
            is 68 years....
            </param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Starts the motor moving continuously
            </summary>
            <param name="axis">The axis index</param>
            <param name="direction">The direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stops the given axis
            </summary>
            <param name="axis">The axis index</param>
            <param name="stopMode">Fast stop or slow stop</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Stops the given axis
            </summary>
            <param name="axis">The axis index</param>
            <param name="stopMode">Fast stop or slow stop</param>
            <param name="waitType">The wait type</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch an auxiliary output on the controller. For this motor controller, the only
            valid index is 0. This actuates the brake output.
            </summary>
            <param name="axis">The axis number to switch the output on.</param>
            <param name="output">The output index to switch.</param>
            <param name="state">The aux output state.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.GetErrorFromResponse(System.String)">
            <summary>
            Returns the error string for a given raw response
            </summary>
            <param name="response">The raw response from the device</param>
            <returns>The descriptive error string</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.CalculateCurrentValues(System.UInt32)">
            <summary>
            Calculates the RMS and peak current in amps based on the value of a passed CS register value.
            The CS register value must be between 0 and 31.
            </summary>
            <param name="registerValue">The value of the register to use in calculation.</param>
            <returns>The rms and peak current calculated.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.ParseResponseValue``1(System.String)">
            <summary>
            Parses a response string from the LMC controller into the required type. Supported
            types are currently: UInt32 Int32 Int64 (long) bool string double enums (enum
            indexing must match LMC board)
            </summary>
            <typeparam name="T">The type to convert the response to.</typeparam>
            <param name="response">The response string from the device to parse</param>
            <returns>the parsed value</returns>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status">
            <summary>
            Object representing the status of a TMC262 motor controller. 
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.#ctor(System.Int64)">
            <summary>
            Object representing the status of a TMC262 motor controller. 
            </summary>
            <param name="statusCode">The status code (20 bits) to build the status object from.</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.ChipType">
            <summary>
            Enumeration of potential types of TMC262 chip.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.ChipTypeValue">
            <summary>
            The type of chip this is.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.CoolstepScalingValue">
            <summary>
            The current working coolstep scaling value. 
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.OverTemperatureShutdown">
            <summary>
            Flag to indicate if an over temperature shutdown is in effect (default register settings make this trigger when the chip is over 150°C).
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.OverTemperatureWarning">
            <summary>
            Flag to indicate if an over temperature warning is in effect. (default register settings make this trigger when the chip is over 100°C)
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.PhaseAOpenLoopFault">
            <summary>
            Flag to indicate that phase a is open loop (No motor coil detected).
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.PhaseAShortCircuitFault">
            <summary>
            Flag to indicate that phase a is closed loop (Motor coil appears shorted out).
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.PhaseBOpenLoopFault">
            <summary>
            Flag to indicate that phase b is open loop (No motor coil detected).
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.PhaseBShortCircuitFault">
            <summary>
            Flag to indicate that phase b is closed loop (Motor coil appears shorted out).
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.StallGuard2StallDetectionTriggered">
            <summary>
            Flag to indicate that StallGuard2 has detected a potential stall. 
            This flag may not mean anything if StallGuard2 settings are not configured on the board.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.StallGuardProcessValue">
            <summary>
            The current process value that StallGuard2 is processing. Indicates potential stalls / high load.
            Lower number = closer to stall.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LabmanLMCMotorController.Tmc262Status.Standstill">
            <summary>
            Flag to indicate that the motor is not currently moving. 
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LMCMotorControllerSettings">
            <summary>
            Custom motor controller settings object
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LMCMotorControllerSettings.#ctor">
            <summary>
            The class constructor is used to create collections and set default values where required
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LMCMotorControllerSettings.DriveCurrent">
            <summary>
            The current in 100mA units, 0-20. 10 = 1A, 15 = 1.5A, etc
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LMCMotorControllerSettings.HoldCurrent">
            <summary>
            The current in 100mA units, 0-20. 10 = 1A, 15 = 1.5A, etc
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LMCMotorControllerSettings.HomeMode">
            <summary>
            The method of homing this motor control should use.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.LMCMotorControllerSettings.MicrostepSetting">
            <summary>
            The microstep setting. Supported values are powers of 2 from 1-256
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController">
            <summary>
            Class for controlling a Tecan Omni robot arm using the Tecan API (Command Processor Mode).
            </summary>
            <see cref="T:\Hardware Reference\Tecan\Omni robot\30085582-C MANUAL OPERATOR CAVRO OMNI ROBOT V4.0.pdf"/>
            <remarks>
            Requires NrcCmdProc.dll and AxisDrivers.dll
            </remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.DeviceType.A">
            <summary>
            Arm.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.DeviceType.C">
            <summary>
            CIB.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.DeviceType.D">
            <summary>
            RS-485 device (such as diluter).
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.DeviceType.M">
            <summary>
            Axis.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.DeviceType.E">
            <summary>
            Cavro CAN (such as ADP).
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.GripperInitMode">
            <summary>
            Gipper initialisation mode.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.GripperState">
            <summary>
            Gripper state.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.DetectionMethod">
            <summary>Detection methods</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.ArmCommands.Initialise">
            <summary>
            Initializes device (arm or axis). Arm version uses default initialization sequence based on the TravelPos definitions.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.ArmCommands.CheckForExit">
            <summary>
            Retracts tip and checks for exit from liquid.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.ArmCommands.DetectLiquid">
            <summary>
            Moves A axis to detect the presence of liquid.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.ArmCommands.DropTip">
            <summary>
            Drops a disposable tip.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.ArmCommands.MoveAbsolute">
            <summary>
            Moves arm or axis to specified coordinates.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.ArmCommands.PickTip">
            <summary>
            Picks up a disposable tip.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.ArmCommands.TerminateMotion">
            <summary>
            Immediately terminates arm or axis motion.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.BrakeTest">
            <summary>
            Performs a diagnostic brake test.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.Initialise">
            <summary>
            Initializes device (arm or axis). Arm version uses default initialization sequence based on the TravelPos definitions.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.CheckForExit">
            <summary>
            Retracts tip and checks for exit from liquid.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.ClearError">
            <summary>
            Clears and resets status of the axis.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.CLLDSelfTest">
            <summary>
            Activates the cLLD self test for the Z axis.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.DetectLiquid">
            <summary>
            Moves A axis to detect the presence of liquid.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.Disable">
            <summary>
            Disables the current/drive for the axis. Disabling must be done per axis.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.DropTip">
            <summary>
            Drops a disposable tip.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.Enable">
            <summary>
            Enables the current/drive for the axis. Enabling must be done per axis. 
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.MoveAbsolute">
            <summary>
            Moves arm or axis to specified coordinates.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.MoveAbsHighForce">
            <summary>
            Moves single axis to an absolute position with higher ending current.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.PickTip">
            <summary>
            Picks up a disposable tip.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.PreInitMoveRel">
            <summary>
            Moves the specified axis to a relative axis offset position using a fixed speed of 25 mm/s. This command is only accepted when the axis is not initialized. This command only works with axis X or Y.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.TerminateMotion">
            <summary>
            Immediately terminates arm or axis motion.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.InitialiseGripper">
            <summary>
            Initializes the gripper.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.OpenGripper">
            <summary>
            Opens the gripper.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.CloseGripper">
            <summary>
            Closes the gripper.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisCommands.GetGripperState">
            <summary>
            Checks the state of the gripper.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.ArmParameters.Axes">
            <summary>
            Returns ID Numbers of ACBs in a logical arm device.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.AxisDescription">
            <summary>
            Axis type, including TML script version number.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.AxisOffset">
            <summary>
            Coordinates at the axis’ home position, in mm.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.CollisionAvoidanceNegativeAxisId">
            <summary>
            ID of the neighboring axis in the negative direction.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.CollisionAvoidanceNegativeDistance">
            <summary>
            Minimum distance required to avoid collision between an axis and the neighboring axis in the negative direction.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.CollisionAvoidancePositiveAxisId">
            <summary>
            ID of the neighboring axis in the positive direction.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.CollisionAvoidancePositiveDistance">
            <summary>
            Minimum distance required to avoid collision between an axis and the neighboring axis in the positive direction.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.Acceleration">
            <summary>
            Acceleration of the axis during any move command except the Initialize Axis command.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.InitAcceleration">
            <summary>
            Acceleration of the axis during the Initialize Axis command.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.InitSpeed">
            <summary>
            Initialization speed of the axis, used when executing the Initialize Axis command.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.Speed">
            <summary>
            Default axis movement speed.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.DropForceFactor">
            <summary>
            Force used to drop the disposable tip.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.DropSpeed">
            <summary>
            Travel speed used by the Standard Z or Dual Z axis to drop a disposable tip.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.ExitLimit">
            <summary>
            Acceptance limit for a successful exist signal check.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.ExitRetractDistance">
            <summary>
            Travel distance in the Z direction that the Z axis uses to retract and search for an exit signal with the CheckForExit command.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.ExitRetractSpeed">
            <summary>
            Speed that the Z axis uses to retract and search for an exit signal.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.FirmwareId">
            <summary>
            Axis firmware part number and revision.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.HighestTemp">
            <summary>
            Initial (reset) value of the axis’ highest recorded temperature in Celsius.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.HighestTempAbs">
            <summary>
            Axis’ highest recorded temperature ever, in Celsius.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.InitialiseAcceptanceWindow">
            <summary>
            Allowable position difference between the two initializations in a double initialization performed with the Initialize Axis command.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.InitialiseForceFactor">
            <summary>
            Force used to search for a hard stop during execution of the Initialize Axis command.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.InitialisationMode">
            <summary>
            Value that indicates the initialization mode of the module.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.LLDAcceptanceWindow">
            <summary>
            Maximum acceptable difference between the two detection positions used in double detection.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.LLDDetectionMethod">
            <summary>
            Value that indicates the detection method of the LLD system.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.LLDRetractDistance">
            <summary>
            Retract distance for the Z axis after the first detection of a double detection.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.LLDRetractOnError">
            <summary>
            Value that represents whether or not the Z axis retracts to the start position after a “No Liquid Detected” error.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.LLDSearchSpeed">
            <summary>
            Speed used when searching for liquid, in mm/s.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.LLDSensitivity">
            <summary>
            Sensitivity, in increments, used when searching for liquid.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.LLDSubmergeDistance">
            <summary>
            Distance the Z axis extends after a successful detection is performed.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.PickForceFactor">
            <summary>
            Force used to engage disposable tip during pickup.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.PickSpeed">
            <summary>
            Travel speed used by the Standard Z, Dual Z, or Universal Z with ADP axis to pick up a disposable tip.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.EncoderPosition">
            <summary>
            Position of axis per the device encoder.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.PWMDutyCycle">
            <summary>
            High (on) state interval of the PWM output signal period, in 25ns increments.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.PWMFrequency">
            <summary>
            PWM output signal period, in 25ns increments.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.MaximumAxisPosition">
            <summary>
            Highest reachable axis position, in mm.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.MinimumAxisPosition">
            <summary>
            Lowest reachable axis position, in mm.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.Status">
            <summary>
            Current status of the axis.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.TipPresence">
            <summary>
            Value that indicates if a tip is attached to the Z axis.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.TotalMoveCount">
            <summary>
            Initial (reset) count of number of movements performed by the axis.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.TotalMoveCountAbs">
            <summary>
            Cumulative total number of axis moves.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.TotalTravelDistance">
            <summary>
            Initial (reset) value of the total distance traveled with this axis.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.TotalTravelDistanceAbs">
            <summary>
            Cumulative total distance traveled by this axis.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.TravelPosition">
            <summary>
            Position to which the axis first moves before it moves to the final position set by the MoveAbs command.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.AxisParameters.WorkingLength">
            <summary>
            Distance between the axis home position and the maximum reachable axis position.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.BootVersion">
            <summary>
            Boot code version.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.CANBaudRate">
            <summary>
            CAN baud rate, fixed at 500 K/s.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.ClearInt5">
            <summary>
            Allows Omni axes to start accepting commands after an Int5 stop.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.EnableCavroCAN">
            <summary>
            Enables Cavro CAN communication support.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.FirmwareRevision">
            <summary>
            Firmware part number and revision number.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.FirmwareVersion">
            <summary>
            CIB firmware version number.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Int5Mode">
            <summary>
            Enables or disables pin Int5 triggering stop of axes in motion.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Input1">
            <summary>
            Status of Input 1 (J9, pin 13 and J8, pin 10).
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Input2">
            <summary>
            Status of Input 2 (J9, pin 14 and J8, pin 12).
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Input3">
            <summary>
            Status of Input 3 (J9, pin 15 and J8, pin 14).
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Input4">
            <summary>
            Status of Input 4 (J4, pin 6).
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Input5">
            <summary>
            Status of Input 5 (J5, pin 6).
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Input6">
            <summary>
            Status of Input 6 (J18, pin 5).
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Input7">
            <summary>
            Status of Input7/INT5 (J17, pin 4).
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.IO1">
            <summary>
            Status of I/O1 (J4, pin 5), when I/O1 mode is set to output.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.IO1Mode">
            <summary>
            I/O direction for I/O1 (J4, pin 5).
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.IO2">
            <summary>
            Status of I/O2 (J5, pin 5), when I/O2 mode is set to output.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.IO2Mode">
            <summary>
            I/O direction for I/O2 (J5, pin 5).
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.IPAddress">
            <summary>
            IP address of the CIB.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.MACAddress">
            <summary>
            MAC address of the CIB.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Output1">
            <summary>
            Status of Output 1 (J9, pin 7 and J8, pin 13).
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Output2">
            <summary>
            Status of Output 2 (J9, pin 8 and J8, pin 15).
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Output3">
            <summary>
            Status of Output 3 (J17, pin 3).
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.Output4">
            <summary>
            Status of Output 4 (J18, pin 3).
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.PortNumber">
            <summary>
            Port number on the host PC that the CIB uses to communicate.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.PowerOnMinutes">
            <summary>
            Value of the counter for the cumulative number of minutes.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.PowerOnMinutesAbs">
            <summary>
            The highest number of power on minutes ever recorded.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.PowerUps">
            <summary>
            Value of the counter for the cumulative number of power ups.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.PowerUpsAbs">
            <summary>
            The highest number of power ups ever recorded.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.RS485Config">
            <summary>
            Selects port settings for RS-485 communications.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.SerialNumber">
            <summary>
            Serial number of the CIB.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.SoftwareRevision">
            <summary>
            Command Processor part number and revision number.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.SoftwareVersion">
            <summary>
            Command Processor version number.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.UserData">
            <summary>
            Up to 256 bytes of user data in the CIB nonvolatile memory.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.VoltageFU1">
            <summary>
            Power supply voltage after FU1 from the CIB.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.VoltageFU2">
            <summary>
            Power supply voltage after FU2 from the CIB.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.VoltageFU3">
            <summary>
            Power supply voltage after FU3 from the CIB.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CIBParameters.VoltageFU4">
            <summary>
            Power supply voltage after FU4 from the CIB.
            </summary>
            <remarks>Read only.</remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults.
            </summary>
            <param name="axis">Axis number on the on the controller.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.Dispose">
            <summary>
            Dispose of this object.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="waitType">The wait type.</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not.
            </summary>
            <param name="axis">Axis number.</param>
            <returns>True if the axis is busy, else False.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.IsEmergencyStopped(System.Int32)">
            <summary>
            Is the emergency stop pressed.
            </summary>
            <param name="axis">The axis number.</param>
            <returns>
            Flag indicating if the motor is e-stopped.
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed.
            </summary>
            <returns>
            Flag indicating if the motor is e-stopped.
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <returns>True if the axis is on the home sensor, else False.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="accelerationRate">The acceleration rate.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="speed">The motor speed (steps/sec).</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position for this axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="position">The position in mm to set the encoder position to.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="speed">The motor speed (steps/sec).</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="position">The position in mm to set the logical position to.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="stopMode">The stop mode to use.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="position">The position in mm to move to.</param>
            <param name="waitType">The wait type.</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="distance">The distance in mm to move.</param>
            <param name="waitType">The wait type.</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="direction">The motor direction.</param>
            <remarks>This method is not supported by this motor controller.</remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Set the encoder ratio for the specified axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm.</param>
            <remarks>This method is not supported by this motor controller.</remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="delay">The change direction delay in milliseconds.</param>
            <remarks>This method is not supported by this motor controller.</remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="speed">The motor speed (steps/sec).</param>
            <remarks>This method is not supported by this motor controller.</remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="timeout">The home timeout in seconds.</param>
            <remarks>This method is not supported by this motor controller.</remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="speed">The motor speed (steps/sec).</param>
            <remarks>This method is not supported by this motor controller.</remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="direction">The motor direction.</param>
            <remarks>This method is not supported by this motor controller.</remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis.
            </summary>
            <param name="axis">Axis number on the controller.</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps.</param>
            <remarks>This method is not supported by this motor controller.</remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.GetAxisLength(System.Int32)">
            <summary>
            Gets the working length of an axis.
            </summary>
            <param name="axis">The axis index.</param>
            <returns>The length of the axis.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.InitializeGripper(System.Int32)">
            <summary>
            The 'InitMode' parameter specifies the initialization modes. 
            Under normal init, the function checks for object presence prior to init and if object is detected, the function does not perform an initialization. 
            The function also does not init if the CAM is in an intermediate position (neither fully closed nor opened). 
            Alternative init does not perform the checking. 
            Closed or open specifies the gripper fingers’ position after the initialization is performed. 
            The default 'InitMode' is 0, normal init closed.
            </summary>
            <param name="gripperAxis">The axis index the gripper is attached to.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.InitializeGripper(System.Int32,Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.GripperInitMode)">
            <summary>
            The <paramref name="initMode"/> parameter specifies the initialization modes. 
            Under normal init, the function checks for object presence prior to init and if object is detected, the function does not perform an initialization. 
            The function also does not init if the CAM is in an intermediate position (neither fully closed nor opened). 
            Alternative init does not perform the checking. 
            Closed or open specifies the gripper fingers’ position after the initialization is performed. 
            The default <paramref name="initMode"/> is 0, normal init closed.
            </summary>
            <param name="gripperAxis">The axis index the gripper is attached to.</param>
            <param name="initMode">The initialisation mode.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.OpenGripper(System.Int32)">
            <summary>
            Opens the gripper fingers.
            </summary>
            <param name="gripperAxis">The axis index the gripper is attached to.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CloseGripper(System.Int32)">
            <summary>
            Performs the gripping operation. 
            If an object is NOT detected after close operation is performed, an error code 46 – Gripper no object detected will be returned.
            </summary>
            <param name="gripperAxis">The axis index the gripper is attached to.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.GetGripperState(System.Int32)">
            <summary>
            Determines the state of the gripper and returns gripper state information.
            </summary>
            <param name="gripperAxis">The axis index the gripper is attached to.</param>
            <returns>The gripper state.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.Aspirate(System.Int32,System.Double)">
            <summary>
            Aspirate.
            </summary>
            <param name="adpId">The adp ID.</param>
            <param name="volume">The volume to aspirate in uL.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.CheckForExit(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the tip out of the liquid starting from the current position and checks for an exit signal. 
            </summary>
            <param name="axisId">The ID of the z axis the ADP is mounted to.</param>
            <param name="retractSpeed">The retract speed. Valid values are from 1 to 150 mm/s.</param>
            <param name="retractDistance">The travel distance. Valid values are from 1 to 100 mm.</param>
            <param name="limit">The acceptance limit for a successful exit signal check. Valid values are from 0 to 50 mm.</param>
            <param name="sensitivity">The sensitivity in increments during exit search. Valid values are from 3 (highest sensitivity) to 120 (lowest sensitivity).</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.DetectLiquid(System.Int32,System.Double,System.Double,System.Double,System.Int32,Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.DetectionMethod,System.Boolean)">
            <summary>
            Performs liquid detection using the cLLD.
            When the DetectLiquid command is issued, the Z-drive moves to the <paramref name="startPosition"/> using the default move parameters, and starts searching for liquid from that position using the speed and search sensitivity specified by LLDSearchSpeed and <paramref name="sensitivity"/>. 
            When the liquid surface is detected by the tip, the Z-move immediately stops. 
            If performing a single detection, the detection is considered successful if the detection position minus the given <paramref name="submergeDistance"/> is higher than or equal to the value of <paramref name="searchLimit"/>.
            If performing a double detection, the tip retracts the default distance defined by Set,LLDRetractDist using the given search speed (LLDSearchSpeed) and starts the liquid search again. It is considered successful if the second detection position minus the given <paramref name="submergeDistance"/> is higher than or equal to the value of <paramref name="searchLimit"/>, and the difference between the two detection positions is less than or equal to the acceptance window. The acceptance window is defined by the Set,LLDAcceptanceWindow command.
            If the liquid detection is successful, a subsequent down move is performed to submerge the tip, using the speed specified by LLDSearchSpeed.
            An error is generated if the limit specified in <paramref name="searchLimit"/> is reached without detecting the liquid. This command replies with an error code 0 (no error) if all Z-drives executed successfully; otherwise, the last error encountered is returned.
            </summary>
            <param name="axisId">The ID of the z axis the ADP is mounted to.</param>
            <param name="startPosition">
            Start position for the liquid search. 
            Valid values are from RangeLow to RangeHigh. 
            If you are using disposable tips, the highest position should be no higher than RangeHigh –10 mm.
            </param>
            <param name="searchLimit">
            The position limit to search for liquid, starting from the position given in StartPos. 
            If liquid is not found during this entire travel, an error is returned. 
            Valid values are from StartPos to RangeLow.
            </param>
            <param name="submergeDistance">The submerge distance after successful detection. Valid values are from 0 to 100 mm.</param>
            <param name="sensitivity">The sensitivity in increments during liquid search. Valid values are from 3 (highest sensitivity) to 120 (lowest sensitivity).</param>
            <param name="detectionMethod">The detection method.</param>
            <param name="retractOnError">Retract to start position on error.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.Dispense(System.Int32,System.Double)">
            <summary>
            Dispense.
            </summary>
            <param name="adpId">The adp ID.</param>
            <param name="volume">The volume to dispense in uL.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.DropTip(System.Int32)">
            <summary>
            Drops a disposable tip.
            </summary>
            <param name="adpId">The ID of the ADP.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.GetCurrentVolume(System.Int32)">
            <summary>
            Gets the current volume of liquid that is in the syringe.
            </summary>
            <param name="adpId">The adp ID.</param>
            <returns>Current volume.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.InitialiseAdp(System.Int32,System.Int32)">
            <summary>
            Initialise the ADP.
            </summary>
            <param name="adpId">The adp ID.</param>
            <param name="timeout">Timeout in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.IsTipPresent(System.Int32)">
            <summary>
            Indicates if a tip is attached to the Z axis.
            </summary>
            <param name="axisId">The index of the Z axis.</param>
            <returns>True is tip present.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.MoveToVolume(System.Int32,System.Int32)">
            <summary>
            Move to an absolute volume position.
            </summary>
            <param name="adpId">The ADP ID</param>
            <param name="volume">The volume in uL.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.PickTip(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Picks up a disposable tip.
            </summary>
            <param name="axisId">The ID of the z axis the ADP is mounted to.</param>
            <param name="startPosition">The Z-drive position, in mm, for the beginning of the pick tip action. Valid values are from RangeLow to (RangeHigh – 10 mm).</param>
            <param name="limit">The Z position to travel to when searching for a disposable tip before reporting an error. Valid values are from <paramref name="startPosition"/> to RangeLow.</param>
            <param name="acceptanceLimit">The limit for a valid stop position. Valid values are from <paramref name="startPosition"/> to <paramref name="limit"/>.</param>
            <param name="speed">The pick speed. Valid values are from 1 to 150 mm/sec.</param>
            <param name="forceFactor">The force used to engage the disposable tip. Valid values are from 1000 to 20000.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.ResetSyringePlunger(System.Int32)">
            <summary>
            Reset the syringe plunger.
            </summary>
            <param name="adpId">The adp ID.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.SetSpeed(System.Int32,System.Int32)">
            <summary>
            Set speed.
            </summary>
            <param name="adpId">The adp ID.</param>
            <param name="speed">The speed, note: 40inc = 1ul.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniAPIMotorController.Stop(System.Int32)">
            <summary>
            Stop the syringe.
            </summary>
            <param name="adpId">The adp ID.</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TecanOmniMotorController">
            <summary>
            Class TecanOmniMotorController.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TecanOmniMotorController.DedicatedInstantCommandSlots">
            <summary>
            The number of Command IDs to dedicate to commands that return instantly.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.TecanOmniMotorController"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.TransmitPacket(System.Int32,Labman.Hardware.MotorControllers.TecanOmniMotorController.OmniCommands,System.Byte[])">
            <summary>
            Constructs and transmits the packet.
            </summary>
            <param name="axis">The axis.</param>
            <param name="command">The command.</param>
            <param name="data">The data.</param>
            <returns>System.Byte[].</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.ParseQueryResponse(System.Byte[])">
            <summary>
            Parses the query response.
            </summary>
            <param name="response">The response.</param>
            <returns>A string reprisenting the reply for a given query</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>Flag indicating if the motor is e-stopped</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the logical position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the encoder position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.MotorControllerException">Axis MoveAbs failed as the operation timed out after the specified timeout</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Set the encoder ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.ToggleEnableLine(System.Int32)">
            <summary>
            Toggles the axis enable line, this is used to disable and enable some motors to reset faults
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch an auxillary output on the controller
            </summary>
            <param name="axis">The axis number to switch the output on</param>
            <param name="output">The output index to switch</param>
            <param name="state">The aux output state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Get the current homing status from the controller, this indicates which stage in the homing process the controller is in
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The current home state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.EnableMotor(System.Int32)">
            <summary>
            Enables the motor.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TecanOmniMotorController.DisableMotor(System.Int32)">
            <summary>
            Disables the motor.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180">
            <summary>Trinamic single axis, high current motor controller</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180">
            <summary>Axis parameters for 1180 board.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.ActualSpeed">
            <summary>3. Actual speed. +-2047. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.ReferenceSwitchStatus">
            <summary>
            9. Reference switch status. 0/1. Unknown access. This parameter is not in the datasheet, however TMCL uses it when connected to a 1180.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.MaximumPositioningSpeed">
            <summary>4. Maximum positioning speed. 1 to 2047. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.MaximumAcceleration">
            <summary>5. Maximum acceleration. 1 to 2047 μsteps/s/s. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.MinimumSpeed">
            <summary>130. Minimum speed. 1 to 2047. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.ActualAcceleration">
            <summary>135. Actual acceleration. 0 to 2047 μsteps/s/s. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.RampMode">
            <summary>138. Ramp mode. 0/1/2. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.ReferenceSwitchTolerance">
            <summary>141. Reference switch tolerance. 0 to 4095 μsteps. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.SoftStopFlag">
            <summary>149. Soft stop flag. 0/1. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.RampDivisor">
            <summary>153. Ramp divisor. 0 to 13. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.PulseDivisor">
            <summary>
            154. Pulse divisor. 0 to 13. RWE Determines conversion beteen real-world and internal motor speed units given by: vINT = μsteps/s * 2^PulseDivisor * 0.004096 (manual page 90)
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.ReferenceSearchMode">
            <summary>193. Reference search mode. See remarks. RW</summary>
            <remarks>
            1 = Search left stop switch only. 2 = Search right stop switch, then search left stop switch. 3 = Three-switch mode: Search the right stop switch, then search the home switch
            (connected in series with the left stop switch). Additional functions: • Add 4 to the mode number to search the right switch instead of the left switch. • Add 128 to the mode
            number to reverse the search direction.
            </remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.ReferenceSearchSpeed">
            <summary>194. Reference search speed. 0 to 2047. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.ReferenceSwitchSpeed">
            <summary>195. Reference switch speed. 0 to 2047. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.BoostCurrent">
            <summary>200. Boost current. 0 to 255 % of module max current. RW see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.AbsoluteMaxCurrent"/> for details</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.Freewheeling">
            <summary>204. Freewheeling. 0 to 65535 x 10 ms. RWE. 0 = never</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.EncoderPrescaler">
            <summary>210. Encoder prescaler. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.MaximumEncoderDeviation">
            <summary>212. Maximum encoder deviation. 0 to 2147483647 encoder steps. RW</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GlobalParameters1180">
            <summary>Global parameters for 1180 board.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GlobalParameters1180.BaudRate">
            <summary>
            65. 0 to 8. Baud. RW[E/A].
            0: 9600 (def), 1: 14400, 2: 19200, 3: 28800, 4: 38400, 5: 57600, 6: 76800, 7: 115200, 8: 230400.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GlobalParameters1180.ASCIIMode">
            <summary>
            67. RW[E/A]. Bit 0: 0 - start in binary mode, 1 - start in ASCII mode. Bits 4 and 5: 00 ehco each character, 01 echo complete command, 10 only send command reply no echo
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GlobalParameters1180.UseExternalEncoder">
            <summary>74. 0/1 whether to use an external encoder. This is documented on p91 of the 1180 manual, away from other GlobalParameters</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GlobalParameters1180.SuppressReply">
            <summary>
            255. RW. The reply in direct mode will be suppressed when this parameter is set to 1. This parameter cannot be stored to EEPROM and will be reset to 0 on startup. The reply will
            not be suppressed for GAP, GGP and GIO commands.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes">
            <summary>Homing sequency modes.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.LeftOnly">
            <summary>Search left stop switch only.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.RightThenLeft">
            <summary>Search right stop switch, then search left stop switch.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.ThreeSwitchModeRightThenHome">
            <summary>Search the right stop switch, then search the home switch (connected in series with the left stop switch).</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.RightOnly">
            <summary>Search right stop switch only.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.LeftThenRight">
            <summary>Search left stop switch, then search right stop switch. // TODO: Is this correct, p82 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.ThreeSwitchModeLeftThenHome">
            <summary>Search left stop switch, then search the home switch (connected in series with the right stop switch). // TODO: No idea if this is right, p82 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.LeftOnlyReverse">
            <summary>Search left stop switch only in the opposite direction.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.RightThenLeftReverse">
            <summary>Search right stop switch, then search left stop switch in the opposite direction.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.ThreeSwitchModeRightThenHomeReverse">
            <summary>Search the right stop switch, then search the home switch (connected in series with the left stop switch) in the opposite direction.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.RightOnlyReverse">
            <summary>Search right stop switch only in the opposite direction.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.LeftThenRightReverse">
            <summary>Search left stop switch, then search right stop switch in the opposite direction. // TODO: Is this correct, p82 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes.ThreeSwitchModeLeftThenHomeReverse">
            <summary>Search left stop switch, then search the home switch (connected in series with the right stop switch) in the opposite direction. // TODO: No idea if this is right, p82 is not clear</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ErrorFlags">
            <summary>The driver error flags.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ErrorFlags.StallGuard2ThresholdReached">
            <summary>stallGuard2 threshold reached</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ErrorFlags.Overtemperature">
            <summary>Overtemperature</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ErrorFlags.OvertemperaturePreWarning">
            <summary>Overtemperature pre-warning</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ErrorFlags.ShortToGroundA">
            <summary>Short to ground A</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ErrorFlags.ShortToGroundB">
            <summary>Short to ground B</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ErrorFlags.OpenLoadA">
            <summary>Open load bridge A</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ErrorFlags.OpenLoadB">
            <summary>Open load bridge B</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ErrorFlags.StandStill">
            <summary>Stand still</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ExtendedErrorFlags">
            <summary>The extended error flags.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ExtendedErrorFlags.StallGuardError">
            <summary>stallGuard error</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ExtendedErrorFlags.DeviationError">
            <summary>deviation error</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180"/></summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.BoardSpecificInitialisation">
            <summary>Initialisation steps specific to the 1180 board.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.IsOnHome(System.Int32)">
            <summary>Determines if the axis is currently on the home sensor</summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetDeviceUITypes">
            <summary>Set the device settings and control UI types.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Double)">
            <summary>Start an axis moving in a continuous motion</summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at in steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>Sets the normal direction of the axis.</summary>
            <param name="axis">The axis</param>
            <param name="direction">The direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>Set the intial speed of an axis. This type of axis has no initial speed</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>Set the drive speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec). Range depends on <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.PulseDivisor"/>. Must be more than 0. See <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.MaximumPositioningSpeed"/></param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>Set the acceleration rate of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate (steps/s/s)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>Set the home speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed in steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>Set the home offset speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>Switches a digital output on the controller</summary>
            <param name="axis">The axis, not used.</param>
            <param name="output">The index of the output (0-1)</param>
            <param name="state">The state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ReadAuxOutput(System.Int32,System.Int32)">
            <summary>Reads the current state of an auxiliary output on the controller.</summary>
            <param name="axis">The axis number to read the output on</param>
            <param name="output">The output index to read (0-1)</param>
            <returns>The returned output state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ReadAuxInput(System.Int32,System.Int32)">
            <summary>Reads an auxiliary input on the controller.</summary>
            <param name="axis">The axis number to read the input on</param>
            <param name="input">The input index to read (0-2, 10)</param>
            <returns>The returned input state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ReadAuxAnalogInput(System.Int32,System.Int32)">
            <summary>Reads an auxiliary analog input on the controller.</summary>
            <param name="axis">The axis number to read the input on</param>
            <param name="input">The input index to read (0-3)</param>
            <returns>The returned analog input value (0-1023)</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetHomeSequenceMode(System.Int32,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.HomeSequenceModes)">
            <summary>Sets the homing sequence mode.</summary>
            <param name="axis">The axis</param>
            <param name="mode">The homing sequence mode.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GetHomeSequenceMode(System.Int32)">
            <summary>Gets the homing sequence mode.</summary>
            <param name="axis">The axis</param>
            <returns>The homing sequence mode</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetPulseDivisor(System.Int32,System.Int32)">
            <summary>Sets the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.PulseDivisor"/> parameter which affects the conversion between real-world and motor speed units.</summary>
            <param name="axis">The axis</param>
            <param name="pulseDivisor">The divisor. 0-13 see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.PulseDivisor"/> for details</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GetPulseDivisor(System.Int32)">
            <summary>Gets the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.PulseDivisor"/> parameter which affects the conversion between real-world and motor speed units.</summary>
            <param name="axis">The axis</param>
            <returns>The divisor. 0-13 see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.PulseDivisor"/> for details</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetRampDivisor(System.Int32,System.Int32)">
            <summary>Sets the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.RampDivisor"/> parameter which affects the conversion between real-world and motor acceleration units.</summary>
            <param name="axis">The axis</param>
            <param name="rampDivisor">The ramp divisor. 0-13 see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.RampDivisor"/> for details</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GetRampDivisor(System.Int32)">
            <summary>Gets the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.RampDivisor"/> parameter which affects the conversion between real-world and motor acceleration units.</summary>
            <param name="axis">The axis</param>
            <returns>The divisor. 0-13 see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.AxisParameters1180.RampDivisor"/> for details</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetMotorBoostCurrent(System.Int32,System.Int32)">
            <summary>Sets the maximum boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <param name="value">The boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GetMotorBoostCurrent(System.Int32)">
            <summary>Gets the motor boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <returns>The boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetMotorBoostCurrentInAmps(System.Int32,System.Double)">
            <summary>Sets the maximum boost peak current in amps</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <param name="currentInAmps">The boost peak current in amps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GetMotorBoostCurrentInAmps(System.Int32)">
            <summary>Gets the motor boost peak current in amps.</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <returns>The boost peak current in amps.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.SetEncoderMode(Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.EncoderModes)">
            <summary>Specifies if the axis uses and internal or external encoder. Note, no axis parameter is necessary as this is a global setting.</summary>
            <param name="mode">Encoder mode</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ConvertToBoardUnits(System.Int32,System.Double)">
            <summary>Converts a speed in steps per second to the speed values used internally by the board.</summary>
            <param name="axis">The axis to convert the speed for (needed for axis-specific ratios)</param>
            <param name="speed">The input steps per second</param>
            <returns>The speed in the board's units.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ConvertFromBoardUnits(System.Int32,System.Double)">
            <summary>Converts a used internally by the board to speed in steps per second.</summary>
            <param name="axis">The axis to convert the speed for (needed for axis-specific ratios)</param>
            <param name="internalSpeed">The input internal board speed</param>
            <returns>The speed in steps per second.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GetCurrentMotorVelocity(System.Int32)">
            <summary>Gets the current motor velocity in steps/s</summary>
            <param name="axis">The axis</param>
            <returns>Current motor velocity in steps/s</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GetErrors(System.Int32)">
            <summary>Gets the drive errors and their type.</summary>
            <param name="axis">The axis</param>
            <returns>The bitmask of drive errors and the type of those errors</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GetExtendedErrors(System.Int32)">
            <summary>Gets the extended errors and their type.</summary>
            <param name="axis">The axis</param>
            <returns>The bitmask of extended errors and the type of those errors</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GetTemperature(System.Int32)">
            <summary>Gets the temperature of this axis.</summary>
            <param name="axis">The axis</param>
            <returns>The temperature in degrees C</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.GetMotorStatusSummaryTextDeviceSpecific(System.Int32)">
            <summary>Gets motor status summary text that is specific to the particular Trinamic board type.</summary>
            <param name="axis">The axis</param>
            <returns>Motor status summary text that is specific to the particular Trinamic board type.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.ClearControllerFaults(System.Int32)">
            <summary>Clears motor faults.</summary>
            <param name="axis">The axis</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180.BoardSpecificAxisSetup(System.Int32,Labman.MotionControl.TrinamicAxisSettings)">
            <summary>Any axis setup actions, like setting parameters from settings, that are specific to the trinamic board.</summary>
            <param name="axis">The axis</param>
            <param name="settings">The settings for the axis</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160">
            <summary>Trinamic single axis, high current motor controller</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160">
            <summary>Axis parameters for 1160 board.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.ActualSpeed">
            <summary>3. Actual speed. +-2047. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.ReferenceSwitchStatus">
            <summary>
            9. Reference switch status. 0/1. Unknown access. This parameter is not in the datasheet, however TMCL uses it when connected to a 1160.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.MaximumPositioningSpeed">
            <summary>4. Maximum positioning speed. 1 to 2047. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.MaximumAcceleration">
            <summary>5. Maximum acceleration. 1 to 2047 μsteps/s/s. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.MinimumSpeed">
            <summary>130. Minimum speed. 1 to 2047. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.ActualAcceleration">
            <summary>135. Actual acceleration. 0 to 2047 μsteps/s/s. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.RampMode">
            <summary>138. Ramp mode. 0/1/2. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.ReferenceSwitchTolerance">
            <summary>141. Reference switch tolerance. 0 to 4095 μsteps. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.SoftStopFlag">
            <summary>149. Soft stop flag. 0/1. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.RampDivisor">
            <summary>153. Ramp divisor. 0 to 13. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.PulseDivisor">
            <summary>
            154. Pulse divisor. 0 to 13. RWE Determines conversion beteen real-world and internal motor speed units given by: vINT = μsteps/s * 2^PulseDivisor * 0.004096 (manual page 90)
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.ReferenceSearchMode">
            <summary>193. Reference search mode. See remarks. RW</summary>
            <remarks>
            1 = Search left stop switch only. 2 = Search right stop switch, then search left stop switch. 3 = Three-switch mode: Search the right stop switch, then search the home switch
            (connected in series with the left stop switch). Additional functions: • Add 4 to the mode number to search the right switch instead of the left switch. • Add 128 to the mode
            number to reverse the search direction.
            </remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.ReferenceSearchSpeed">
            <summary>194. Reference search speed. 0 to 2047. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.ReferenceSwitchSpeed">
            <summary>195. Reference switch speed. 0 to 2047. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.BoostCurrent">
            <summary>200. Boost current. 0 to 255 % of module max current. RW see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.AbsoluteMaxCurrent"/> for details</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.Freewheeling">
            <summary>204. Freewheeling. 0 to 65535 x 10 ms. RWE. 0 = never</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.EncoderPrescaler">
            <summary>210. Encoder prescaler. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.MaximumEncoderDeviation">
            <summary>212. Maximum encoder deviation. 0 to 2147483647 encoder steps. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.EncoderPositionExternalEncoder">
            <summary>
            216. The encoder count of the external encoder.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GlobalParameters1160">
            <summary>Global parameters for 1160 board.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GlobalParameters1160.BaudRate">
            <summary>
            65. 0 to 8. Baud. RW[E/A].
            0: 9600 (def), 1: 14400, 2: 19200, 3: 28800, 4: 38400, 5: 57600, 6: 76800, 7: 115200, 8: 230400.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GlobalParameters1160.ASCIIMode">
            <summary>
            67. RW[E/A]. Bit 0: 0 - start in binary mode, 1 - start in ASCII mode. Bits 4 and 5: 00 ehco each character, 01 echo complete command, 10 only send command reply no echo
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GlobalParameters1160.SuppressReply">
            <summary>
            255. RW. The reply in direct mode will be suppressed when this parameter is set to 1. This parameter cannot be stored to EEPROM and will be reset to 0 on startup. The reply will
            not be suppressed for GAP, GGP and GIO commands.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes">
            <summary>Homing sequency modes.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.LeftOnly">
            <summary>Search left stop switch only.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.RightThenLeft">
            <summary>Search right stop switch, then search left stop switch.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.ThreeSwitchModeRightThenHome">
            <summary>Search the right stop switch, then search the home switch (connected in series with the left stop switch).</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.RightOnly">
            <summary>Search right stop switch only.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.LeftThenRight">
            <summary>Search left stop switch, then search right stop switch. // TODO: Is this correct, p82 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.ThreeSwitchModeLeftThenHome">
            <summary>Search left stop switch, then search the home switch (connected in series with the right stop switch). // TODO: No idea if this is right, p82 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.LeftOnlyReverse">
            <summary>Search left stop switch only in the opposite direction.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.RightThenLeftReverse">
            <summary>Search right stop switch, then search left stop switch in the opposite direction.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.ThreeSwitchModeRightThenHomeReverse">
            <summary>Search the right stop switch, then search the home switch (connected in series with the left stop switch) in the opposite direction.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.RightOnlyReverse">
            <summary>Search right stop switch only in the opposite direction.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.LeftThenRightReverse">
            <summary>Search left stop switch, then search right stop switch in the opposite direction. // TODO: Is this correct, p82 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes.ThreeSwitchModeLeftThenHomeReverse">
            <summary>Search left stop switch, then search the home switch (connected in series with the right stop switch) in the opposite direction. // TODO: No idea if this is right, p82 is not clear</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ErrorFlags">
            <summary>The driver error flags.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ErrorFlags.StallGuard2ThresholdReached">
            <summary>stallGuard2 threshold reached</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ErrorFlags.Overtemperature">
            <summary>Overtemperature</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ErrorFlags.OvertemperaturePreWarning">
            <summary>Overtemperature pre-warning</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ErrorFlags.ShortToGroundA">
            <summary>Short to ground A</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ErrorFlags.ShortToGroundB">
            <summary>Short to ground B</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ErrorFlags.OpenLoadA">
            <summary>Open load bridge A</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ErrorFlags.OpenLoadB">
            <summary>Open load bridge B</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ErrorFlags.StandStill">
            <summary>Stand still</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ExtendedErrorFlags">
            <summary>The extended error flags.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ExtendedErrorFlags.StallGuardError">
            <summary>stallGuard error</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ExtendedErrorFlags.DeviationError">
            <summary>deviation error</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160"/></summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the specified axis.
            Note that this motor controller does not reset the external encoder count on home. So we do it manually in here with SetEncoderPosition.
            </summary>
            <param name="axis">The axis to home</param>
            <param name="waitType">Indication of weather to wait for the home to complete or not.</param>
            <param name="homeTimeout">The time to spend waiting for the home to complete before throwing an exception.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position on the board.
            For the 1160, there are two axis parameters indicating encoder position: One for the internal StepOSense encoder and another for the externally wired encoder.
            We will usually use the external encoder.
            To handle this, this method looks at _encoderModes field for the encoder mode of this axis and sets the relevant axis parameter accordingly.
            </summary>
            <param name="axis">The axis to set the encoder position for.</param>
            <param name="position">The position to set this parameter to.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position on the board.
            For the 1160, there are two axis parameters indicating encoder position: One for the internal StepOSense encoder and another for the externally wired encoder.
            We will usually use the external encoder.
            To handle this, this method looks at _encoderModes field for the encoder mode of this axis and gets the relevant axis parameter accordingly.
            </summary>
            <param name="axis">The axis to get the encoder position for.</param>
            <returns>The current encoder position for the specified axis.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.BoardSpecificInitialisation">
            <summary>Initialisation steps specific to the 1160 board.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.IsOnHome(System.Int32)">
            <summary>Determines if the axis is currently on the home sensor</summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetDeviceUITypes">
            <summary>Set the device settings and control UI types.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Double)">
            <summary>Start an axis moving in a continuous motion</summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at in steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>Sets the normal direction of the axis.</summary>
            <param name="axis">The axis</param>
            <param name="direction">The direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>Set the intial speed of an axis. This type of axis has no initial speed</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>Set the drive speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec). Range depends on <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.PulseDivisor"/>. Must be more than 0. See <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.MaximumPositioningSpeed"/></param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>Set the acceleration rate of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate (steps/s/s)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>Set the home speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed in steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>Set the home offset speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>Switches a digital output on the controller</summary>
            <param name="axis">The axis, not used.</param>
            <param name="output">The index of the output (0-1)</param>
            <param name="state">The state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ReadAuxOutput(System.Int32,System.Int32)">
            <summary>Reads the current state of an auxiliary output on the controller.</summary>
            <param name="axis">The axis number to read the output on</param>
            <param name="output">The output index to read (0-1)</param>
            <returns>The returned output state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ReadAuxInput(System.Int32,System.Int32)">
            <summary>Reads an auxiliary input on the controller.</summary>
            <param name="axis">The axis number to read the input on</param>
            <param name="input">The input index to read (0-2, 10)</param>
            <returns>The returned input state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ReadAuxAnalogInput(System.Int32,System.Int32)">
            <summary>Reads an auxiliary analog input on the controller.</summary>
            <param name="axis">The axis number to read the input on</param>
            <param name="input">The input index to read (0-3)</param>
            <returns>The returned analog input value (0-1023)</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetEncoderMode(System.Int32,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.EncoderModes)">
            <summary>
            Sets the devices encoder mode. 
            For the 1160, there are two axis parameters indicating encoder position: One for the internal StepOSense encoder and another for the externally wired encoder.
            We will usually use the external encoder.
            To handle this, this method looks at _encoderModes field for the encoder mode of this axis and gets the relevant axis parameter accordingly.
            </summary>
            <param name="axis">The axis to set the encoder mode for</param>
            <param name="mode">The mode to set the encoder mode to.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetEncoderMode(System.Int32)">
            <summary>
            Gets the configured encoder mode for a particular axis.
            For the 1160, there are two axis parameters indicating encoder position: One for the internal StepOSense encoder and another for the externally wired encoder.
            We will usually use the external encoder.
            To handle this, this method looks at _encoderModes field for the encoder mode of this axis and gets the relevant axis parameter accordingly.
            </summary>
            <param name="axis">The axis to get the encoder mode of.</param>
            <returns>The encoder mode configured for the passed axis.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetHomeSequenceMode(System.Int32,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.HomeSequenceModes)">
            <summary>Sets the homing sequence mode.</summary>
            <param name="axis">The axis</param>
            <param name="mode">The homing sequence mode.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetHomeSequenceMode(System.Int32)">
            <summary>Gets the homing sequence mode.</summary>
            <param name="axis">The axis</param>
            <returns>The homing sequence mode</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetPulseDivisor(System.Int32,System.Int32)">
            <summary>Sets the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.PulseDivisor"/> parameter which affects the conversion between real-world and motor speed units.</summary>
            <param name="axis">The axis</param>
            <param name="pulseDivisor">The divisor. 0-13 see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.PulseDivisor"/> for details</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetPulseDivisor(System.Int32)">
            <summary>Gets the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.PulseDivisor"/> parameter which affects the conversion between real-world and motor speed units.</summary>
            <param name="axis">The axis</param>
            <returns>The divisor. 0-13 see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.PulseDivisor"/> for details</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetRampDivisor(System.Int32,System.Int32)">
            <summary>Sets the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.RampDivisor"/> parameter which affects the conversion between real-world and motor acceleration units.</summary>
            <param name="axis">The axis</param>
            <param name="rampDivisor">The ramp divisor. 0-13 see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.RampDivisor"/> for details</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetRampDivisor(System.Int32)">
            <summary>Gets the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.RampDivisor"/> parameter which affects the conversion between real-world and motor acceleration units.</summary>
            <param name="axis">The axis</param>
            <returns>The divisor. 0-13 see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.AxisParameters1160.RampDivisor"/> for details</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetMotorBoostCurrent(System.Int32,System.Int32)">
            <summary>Sets the maximum boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <param name="value">The boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetMotorBoostCurrent(System.Int32)">
            <summary>Gets the motor boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <returns>The boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.SetMotorBoostCurrentInAmps(System.Int32,System.Double)">
            <summary>Sets the maximum boost peak current in amps</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <param name="currentInAmps">The boost peak current in amps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetMotorBoostCurrentInAmps(System.Int32)">
            <summary>Gets the motor boost peak current in amps.</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <returns>The boost peak current in amps.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ConvertToBoardUnits(System.Int32,System.Double)">
            <summary>Converts a speed in steps per second to the speed values used internally by the board.</summary>
            <param name="axis">The axis to convert the speed for (needed for axis-specific ratios)</param>
            <param name="millimetersPerSecond">The input millimeters per second</param>
            <returns>The speed in the board's units.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ConvertFromBoardUnits(System.Int32,System.Double)">
            <summary>Converts a used internally by the board to speed in steps per second.</summary>
            <param name="axis">The axis to convert the speed for (needed for axis-specific ratios)</param>
            <param name="internalSpeed">The input internal board speed</param>
            <returns>The speed in steps per second.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetCurrentMotorVelocity(System.Int32)">
            <summary>Gets the current motor velocity in steps/s</summary>
            <param name="axis">The axis</param>
            <returns>Current motor velocity in steps/s</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetErrors(System.Int32)">
            <summary>Gets the drive errors and their type.</summary>
            <param name="axis">The axis</param>
            <returns>The bitmask of drive errors and the type of those errors</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetExtendedErrors(System.Int32)">
            <summary>Gets the extended errors and their type.</summary>
            <param name="axis">The axis</param>
            <returns>The bitmask of extended errors and the type of those errors</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetTemperature(System.Int32)">
            <summary>Gets the temperature of this axis.</summary>
            <param name="axis">The axis</param>
            <returns>The temperature in degrees C</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.GetMotorStatusSummaryTextDeviceSpecific(System.Int32)">
            <summary>Gets motor status summary text that is specific to the particular Trinamic board type.</summary>
            <param name="axis">The axis</param>
            <returns>Motor status summary text that is specific to the particular Trinamic board type.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.ClearControllerFaults(System.Int32)">
            <summary>Clears motor faults.</summary>
            <param name="axis">The axis</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1160.BoardSpecificAxisSetup(System.Int32,Labman.MotionControl.TrinamicAxisSettings)">
            <summary>Any axis setup actions, like setting parameters from settings, that are specific to the trinamic board.</summary>
            <param name="axis">The axis</param>
            <param name="settings">The settings for the axis</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351">
            <summary>Trinamic 3 axis 3351 motor controller.</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351">
            <summary>Axis parameters for 3351 board.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.TargetSpeed">
            <summary>2. Target (next) speed. +-16777215 μsteps/s. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.ActualSpeed">
            <summary>3. Actual speed. +-16777215 μsteps/s. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.MaximumPositioningSpeed">
            <summary>4. Maximum positioning speed. 0 to 16777215 μsteps/s. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.MaximumAcceleration">
            <summary>5. Maximum acceleration. 0 to 2147483647 μsteps/s/s. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.RightLimitSwitchDisable">
            <summary>
            12. Right limit switch enable/polarity. 0/1/2. RW. 0 = switch deactivated, 1 = switch active, motor will stop if input is low, 2 = switch active, motor will stop if input is high
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.LeftLimitSwitchDisable">
            <summary>
            13. Left limit switch enable/polarity. 0/1/2. RW. 0 = switch deactivated, 1 = switch active, motor will stop if input is low, 2 = switch active, motor will stop if input is high
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.RampType">
            <summary>
            14. Ramp type. 0/1. RW. Selects the type of ramp to be used. 0 = trapezoidal ramp. 1 = S-shaped ramp.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.StartVelocity">
            <summary>15. Start velocity. 0 to 16777215 pps. RW. Initial velocity at motion start for trapezoidal ramps.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.StartAccelleration">
            <summary>
            16. Start acceleration. 0 to 2147483647 pps2. RW. Initial acceleration at motion start of trapezoidal ramps. Will be changed to maximum acceleration ( <see
            cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.MaximumAcceleration"/>) as soon as the break velocity has been reached <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.BreakVelocity"/>
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.MaximumDeceleration">
            <summary>
            17. Maximum deceleration. 0 to 2147483647 pps2. RW. Maximum deceleration for trapezoidal ramps. May be set to the same value as the maximum acceleration ( <see
            cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.MaximumAcceleration"/>, but can also be set to a different value.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.BreakVelocity">
            <summary>18. Break velocity. 0 to 16777215 pps(2?). RW. See <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.StartAccelleration"/></summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.FinalDeceleration">
            <summary>19. Final deceleration. 0 to 2147483647 pps2. RW. Deceleration used as soon as the actual velocity has fallen below <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.BreakVelocity"/></summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.StopVelocity">
            <summary>20. Stop velocity. 0 to 16777215 pps. RW. Velocity when target position has been reached andmotion stops in trapezoidal ramps.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.StopDeceleration">
            <summary>
            21. Stop deceleration. 0 to 2147483647 pps2. RW. Deceleration value if stop switches or virtual stops are used with soft ramps. A value that's not 0 will generate an automatic
            linear ramp when a stop switch is hit or a virtual stop has been reached.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.VirtualStopLeft">
            <summary>26. Virtual stop left. +-2147483647 μsteps. RW. Virtual stop position when motor is moving in negative direction.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.VirtualStopRight">
            <summary>27. Virtual stop right. +-2147483647 μsteps. RW. Virtual stop position when motor is moving in positive direction.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.VirtualStopEnable">
            <summary>
            28. Virtual stop enable. 0-3. RW. 0 = both virtual stop disabled, 1 = virtual stop left enable, 2 = virtual stop right enable, 3 = both virtual stop enabled.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.VirtualStopMode">
            <summary>
            29. Virtual stop mode. 0-2. RW. 0 = use normal ramp deceleration settings, 1 = use hard stop, 2 = use stop deceleration ( <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.StopVelocity"/>).
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.SwapStopSwitches">
            <summary>
            33. Swap stop switches. 0/1. RW. 1 = Use right stop switch for negative direction and left stop switch for positive direction.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.EnableSoftStop">
            <summary>
            34. Enable soft stop. 0/1. RW. 0 = use hard stop at stop switches, 1 = use deceleration ramp ( <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.StopDeceleration"/>) at stop switches.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.TorqueMode">
            <summary>
            50. Torque mode. +-255. RW. Writing to this parameter will run the motor in torque mode.This only works in closed loop mode.Any other motion command (MST, ROL, ROR, MVP) stops the
            torque mode.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.RelativePositioningOption">
            <summary>127. Relative positioning option. 0/1. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.ClosedLoopFlag">
            <summary>
            129. Closed loop flag. 0/1. RW. 0 = closed loop off, 1 = closed loop on. After switching on closed loop, please wait until <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.ClosedLoopInitFlag"/> is 1 before executing
            any motion commands.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.MeasuredSpeed">
            <summary>
            131. Measuered speed. +-2147483647 pps. R. Speed measured using the encoder.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.CurrentMeasuredSpeed">
            <summary>
            132. Current measuered speed. +-2147483647 pps. R. Speed measured using the encoder without averaging.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.ClosedLoopInitFlag">
            <summary>
            133. Closed loop initialised flag. 0/1. RW. 0 = initialisation not finished yet, 1 = closed loop initialistaion finished.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.PositioningWindow">
            <summary>
            134. Positioning window. 0 to 2147483647 μsteps. RW. Maximum deviation for target reached flag to be set.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.MicrostepResolution">
            <summary>
            140. Microstep resolution. 0 to 8. RW. 0 = full step, 1 = half step, 2 = 4 microsteps, 3 = 8 microsteps, 4 = 16 microsteps, 5 = 32 microsteps, 6 = 64 microsteps, 7 = 128
            microsteps, 8 = 256 microsteps. Always leave at 8 (256 microsteps) when using closed loop operation!
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.ReferenceSearchMode">
            <summary>193. Reference search mode. See remarks. RW</summary>
            <remarks>
            1 = Search left stop switch only. 2 = Search right stop switch, then search left stop switch. 3 = Search right stop switch, then search left stop switch from both sides. 4 =
            Search left stop switch from both sides. 5 = Search home switch in negative direction, reverse the direction when left stop switch reached. 6 = Search home switch in positive
            direction, reverse the direction when right stop switch reached. 7 = Search home switch in positive direction, ignore end switches. 8 = Search home switch in negative direction,
            ignore end switches. Additional functions: • Add 128 to a mode value for inverting the home switch (can be used with mode 5 to 8). • Add 64 to a mode for searching the right
            instead of the left reference switch (can be used with mode 1 to 4).
            </remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.ReferenceSearchSpeed">
            <summary>194. Reference search speed. 0 to 16777215 μsteps/s. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.ReferenceSwitchSpeed">
            <summary>195. Reference switch speed. 0 to 16777215 μsteps/s. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.BoostCurrent">
            <summary>
            200. Boost current. 0 to 255. RW. Current used for acceleration and deceleration phases. If set to 0, the same current as set by <see
            cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.AbsoluteMaxCurrent"/> will be used. Same scaling as with <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.AbsoluteMaxCurrent"/>.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.FullStepResolution">
            <summary>
            202. Motor full step resolution. 0 to 65535 full steps / round. RW. Full step resolution of the motor (Default 200).
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.Freewheeling">
            <summary>
            204. Freewheeling mode. 0 to 3 ms. RW. Stand still option when the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.StandbyCurrent"/> is set to zero. 0 = normal operation, 1
            = freewheeling, 2 = coil shorted using low side drivers, 3 = coil shorted using high side drivers
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.EncoderPrescaler">
            <summary>
            210. Encoder prescaler. +-65535. RW. Encoder counts per round. Setting this to a negative value reverses the encoder counting direction.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.MaximumEncoderDeviation">
            <summary>212. Maximum encoder deviation. 0 to 65535 2147483647 steps. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.MaxVelocityDeviation">
            <summary>
            213. Group index. 0 to 2147483647 steps. RW. The motor will be stopped when the desired speed and the real speed differ more than this value. Setting the value to 0 turns off this function.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.PowderDownDelay">
            <summary>214. Power down delay. 0 to 65535 x 10 ms. RW. Standard value is 200 = 2000ms</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.GroupIndex">
            <summary>
            249. Group index. 0 to 255. RW. All motors on the module which have the same group index will get the same commands when a ROL, ROR, MST, MVP, or RFS is issued for one of these
            motors. Setting the group index to 0 (default) turns off this feature for the motor.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.ReverseShaft">
            <summary>251. Reverse shaft. 0/1. RW</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GlobalParameters3351">
            <summary>Global parameters for 3351 board.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GlobalParameters3351.SuppressReply">
            <summary>
            255. RW. The reply in direct mode will be suppressed when this parameter is set to 1. This parameter cannot be stored to EEPROM and will be reset to 0 on startup. The reply will
            not be suppressed for GAP, GGP and GIO commands.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.HomeSequenceModes">
            <summary>Homing sequency modes.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.HomeSequenceModes.LeftOnly">
            <summary>Search left stop switch only.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.HomeSequenceModes.RightThenLeft">
            <summary>Search right stop switch, then search left stop switch.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.HomeSequenceModes.RightThenLeftFromBothSides">
            <summary>Search right stop switch, then search left stop switch from both sides.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.HomeSequenceModes.LeftFromBothSides">
            <summary>Search left stop switch from both sides.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.HomeSequenceModes.RightOnly">
            <summary>Search right stop switch only.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.HomeSequenceModes.LeftThenRight">
            <summary>Search left stop switch, then search right stop switch. // TODO: Is this correct, p78 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.HomeSequenceModes.LeftThenRightFromBothSides">
            <summary>Search left stop switch, then search right stop switch from both sides. // TODO: Is this correct, p78 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.HomeSequenceModes.RightFromBothSides">
            <summary>Search right stop switch from both sides. // TODO: Is this correct, p78 is not clear</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ErrorFlags">
            <summary>The driver error flags.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ErrorFlags.StallGuard2ThresholdReached">
            <summary>stallGuard2 threshold reached</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ErrorFlags.Overtemperature">
            <summary>Overtemperature</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ErrorFlags.OvertemperaturePreWarning">
            <summary>Overtemperature pre-warning</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ErrorFlags.ShortToGroundA">
            <summary>Short to ground A</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ErrorFlags.ShortToGroundB">
            <summary>Short to ground B</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ErrorFlags.OpenLoadA">
            <summary>Open load bridge A</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ErrorFlags.OpenLoadB">
            <summary>Open load bridge B</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ErrorFlags.StandStill">
            <summary>Stand still</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ExtendedErrorFlags">
            <summary>The extended error flags.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ExtendedErrorFlags.StallGuardError">
            <summary>stallGuard error</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ExtendedErrorFlags.DeviationError">
            <summary>deviation error</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351"/></summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.BoardSpecificInitialisation">
            <summary>Initialisation steps specific to the 3351 board.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetAxisParameter(System.Int32,System.String,System.Int32)">
            <summary>Sets a parameter and checks the status of the reply, throwing an exception if the status is no OK.</summary>
            <param name="axis">The axis</param>
            <param name="parameter">The name of the parameter to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.IsOnHome(System.Int32)">
            <summary>Determines if the axis is currently on the home sensor</summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetDeviceUITypes">
            <summary>Set the device settings and control UI types.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Double)">
            <summary>Start an axis moving in a continuous motion</summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at (-2147483648 to 2147483647) steps/s.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>Sets the normal direction of the axis.</summary>
            <param name="axis">The axis</param>
            <param name="direction">The direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>Set the drive speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed 0-16777.215 steps/s. See <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351.MaximumPositioningSpeed"/></param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>Set the acceleration and deceleration rate of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>Set the home speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec) 0-16777.215 steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>Set the home offset speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec) 0-16777.215 steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>Switches a digital output on the controller</summary>
            <param name="axis">The axis, not used.</param>
            <param name="output">The index of the output (0-3)</param>
            <param name="state">The state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ReadAuxOutput(System.Int32,System.Int32)">
            <summary>Reads the current state of an auxiliary output on the controller.</summary>
            <param name="axis">The axis number to read the output on</param>
            <param name="output">The output index to read (0-3)</param>
            <returns>The returned output state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ReadAuxInput(System.Int32,System.Int32)">
            <summary>Reads an auxiliary input on the controller.</summary>
            <param name="axis">The axis number to read the input on</param>
            <param name="input">The input index to read (0-3)</param>
            <returns>The returned input state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ReadAuxAnalogInput(System.Int32,System.Int32)">
            <summary>Reads an auxiliary analog input on the controller.</summary>
            <param name="axis">The axis number to read the input on</param>
            <param name="input">The input index to read (0-3)</param>
            <returns>The returned analog input value (0-65535)</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetPositioningMode(System.Int32,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.RelativePositioningModes)">
            <summary>Set what should be used as the start position for relative moves.</summary>
            <param name="axis">The axis</param>
            <param name="mode">The start position mode</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetHomeSequenceMode(System.Int32,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.HomeSequenceModes)">
            <summary>Sets the homing sequence mode.</summary>
            <param name="axis">The axis</param>
            <param name="mode">The homing sequence mode.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GetHomeSequenceMode(System.Int32)">
            <summary>Gets the homing sequence mode.</summary>
            <param name="axis">The axis</param>
            <returns>The homing sequence mode</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>Set the intial speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GetCurrentMotorVelocity(System.Int32)">
            <summary>Gets the current motor velocity in steps/s</summary>
            <param name="axis">The axis</param>
            <returns>Current motor velocity in steps/s</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetMotorBoostCurrent(System.Int32,System.Int32)">
            <summary>Sets the maximum boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <param name="value">The boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GetMotorBoostCurrent(System.Int32)">
            <summary>Gets the motor boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <returns>The boost current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetMotorBoostCurrentInAmps(System.Int32,System.Double)">
            <summary>Sets the maximum boost peak current in amps</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <param name="currentInAmps">The boost peak current in amps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GetMotorBoostCurrentInAmps(System.Int32)">
            <summary>Gets the motor boost peak current in amps.</summary>
            <remarks>The boost current is the current used during acceleration and decceleration</remarks>
            <param name="axis">The axis</param>
            <returns>The boost peak current in amps.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GetErrors(System.Int32)">
            <summary>Gets the drive errors and their type.</summary>
            <param name="axis">The axis</param>
            <returns>The bitmask of drive errors and the type of those errors</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GetExtendedErrors(System.Int32)">
            <summary>Gets the extended errors and their type.</summary>
            <param name="axis">The axis</param>
            <returns>The bitmask of extended errors and the type of those errors</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GetTemperature(System.Int32)">
            <summary>Gets the temperature of this axis.</summary>
            <param name="axis">The axis</param>
            <returns>The temperature in degrees C</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GetMotorStatusSummaryTextDeviceSpecific(System.Int32)">
            <summary>Gets motor status summary text that is specific to the particular Trinamic board type.</summary>
            <param name="axis">The axis</param>
            <returns>Motor status summary text that is specific to the particular Trinamic board type.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.ClearControllerFaults(System.Int32)">
            <summary>Clears motor faults.</summary>
            <param name="axis">The axis</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.BoardSpecificAxisSetup(System.Int32,Labman.MotionControl.TrinamicAxisSettings)">
            <summary>Any axis setup actions, like setting parameters from settings, that are specific to the trinamic board.</summary>
            <param name="axis">The axis</param>
            <param name="settings">The settings for the axis</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetInteranlEncoderPrescaler(System.Int32,System.Int32)">
            <summary>Sets the encoder prescaler in encoder counts per round</summary>
            <param name="axis">The axis</param>
            <param name="ratio">The prescaler in counts per round</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.SetInteranlMotorFullStepResolution(System.Int32,System.Int32)">
            <summary>Sets the motor full step resolution in full steps per round</summary>
            <param name="axis">The axis</param>
            <param name="resolution">The motor full step resolution in full steps per round</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212">
            <summary>Trinamic 6 axis 6212motor controller</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212">
            <summary>Axis parameters for 6212 board.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.TargetSpeed">
            <summary>2. Target (next) speed. +-7999774 μsteps/s. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.ActualSpeed">
            <summary>3. Actual speed. +-7999774 μsteps/s. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.MaximumPositioningSpeed">
            <summary>4. Maximum positioning speed. 0 to 7999774 μsteps/s. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.MaximumAcceleration">
            <summary>5. Maximum acceleration. 0 to 7629278 μsteps/s/s. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.ReferenceSwitchStatus">
            <summary>9. Ref switch status. 0/1. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.RightLimitSwitchDisable">
            <summary>12. Right limit switch disable. 0/1. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.LeftLimitSwitchDisable">
            <summary>13. Left limit switch disable. 0/1. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.InitialVelocity">
            <summary>16. Velocity V1. 0 to 1000000 pps. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.MaximumDeceleration">
            <summary>17. Maximum deceleration. 0 to 7629278 pps2. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.RelativePositioningOption">
            <summary>127. Relative positioning option. 0/1. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.StealthChopPWMGradient">
            <summary>
            Range 0 - 15, Allows the setting of the velocity dependent gradient for PWM amplitude.
            Setting this to 0 (default) disables stealth chop.
            Setting this to 1 or greater significantly reduces motor whine / noise but can result in less torque. 
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.ReferenceSearchMode">
            <summary>193. Reference search mode. See remarks. RW</summary>
            <remarks>
            1 = Search left stop switch only. 2 = Search right stop switch, then search left stop switch. 3 = Search right stop switch, then search left stop switch from both sides. 4 =
            Search left stop switch from both sides. 5 = Search home switch in negative direction, reverse the direction when left stop switch reached. 6 = Search home switch in positive
            direction, reverse the direction when right stop switch reached. 7 = Search home switch in positive direction, ignore end switches. 8 = Search home switch in negative direction,
            ignore end switches. Additional functions: • Add 128 to a mode value for inverting the home switch (can be used with mode 5 to 8). • Add 64 to a mode for searching the right
            instead of the left reference switch (can be used with mode 1 to 4).
            </remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.ReferenceSearchSpeed">
            <summary>194. Reference search speed. 0 to 7999774 μsteps/s. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.ReferenceSwitchSpeed">
            <summary>195. Reference switch speed. 0 to 7999774 μsteps/s. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.FullStepResolution">
            <summary>
            202. Motor full step resolution. 0 to 65535 full steps / round. RW. Full step resolution of the motor (Default 200).
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.Freewheeling">
            <summary>
            204. Freewheeling mode. 0 to 3 ms. RW. Stand still option when the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.StandbyCurrent"/> is set to zero. 0 = normal operation, 1
            = freewheeling, 2 = coil shorted using low side drivers, 3 = coil shorted using high side drivers
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.EncoderPrescaler">
            <summary>210. Encoder prescaler. 0 to 65535. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.MaximumEncoderDeviation">
            <summary>212. Maximum encoder deviation. 0 to 65535 encoder steps. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.GroupIndex">
            <summary>213. Group index. 0 to 255. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.PowderDownDelay">
            <summary>214. Power down delay. 0 to 417 x 10 ms. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.ReverseShaft">
            <summary>251. Reverse shaft. 0/1. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.UnitMode">
            <summary>
            255. Unit mode. 0/1. RW. 0 = internal units are used. 1 = μsteps/s and μsteps/s/s are used. Default 1.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.GlobalParameters6212">
            <summary>Global parameters for 6212 board.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.GlobalParameters6212.SuppressReply">
            <summary>
            255. RW. The reply in direct mode will be suppressed when this parameter is set to 1. This parameter cannot be stored to EEPROM and will be reset to 0 on startup. The reply will
            not be suppressed for GAP, GGP and GIO commands.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes">
            <summary>Homing sequency modes.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.LeftOnly">
            <summary>Search left stop switch only.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.RightThenLeft">
            <summary>Search right stop switch, then search left stop switch.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.RightThenLeftFromBothSides">
            <summary>Search right stop switch, then search left stop switch from both sides.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.LeftFromBothSides">
            <summary>Search left stop switch from both sides.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.SearchHomeNegativeThenPositive">
            <summary>Search home switch in negative direction, reverse the direction when left stop switch reached.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.SearchHomePositiveThenNegative">
            <summary>Search home switch in positive direction, reverse the direction when right stop switch reached.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.SearchHomePositiveOnly">
            <summary>Search home switch in positive direction, ignore end switches.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.SearchHomeNegativeOnly">
            <summary>Search home switch in negative direction, ignore end switches.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.RightOnly">
            <summary>Search right stop switch only.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.LeftThenRight">
            <summary>Search left stop switch, then search right stop switch. // TODO: Is this correct, p78 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.LeftThenRightFromBothSides">
            <summary>Search left stop switch, then search right stop switch from both sides. // TODO: Is this correct, p78 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.RightFromBothSides">
            <summary>Search right stop switch from both sides. // TODO: Is this correct, p78 is not clear</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.SearchHomeInvertedNegativeThenPositive">
            <summary>Search home switch in negative direction, reverse the direction when left stop switch reached.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.SearchHomeInvertedPositiveThenNegative">
            <summary>Search home switch in positive direction, reverse the direction when right stop switch reached.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.SearchHomeInvertedPositiveOnly">
            <summary>Search home switch in positive direction, ignore end switches.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes.SearchHomeInvertedNegativeOnly">
            <summary>Search home switch in negative direction, ignore end switches.</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ErrorFlags">
            <summary>The driver error flags.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ErrorFlags.StallGuard2ThresholdReached">
            <summary>stallGuard2 threshold reached</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ErrorFlags.Overtemperature">
            <summary>Overtemperature</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ErrorFlags.OvertemperaturePreWarning">
            <summary>Overtemperature pre-warning</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ErrorFlags.ShortToGroundA">
            <summary>Short to ground A</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ErrorFlags.ShortToGroundB">
            <summary>Short to ground B</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ErrorFlags.OpenLoadA">
            <summary>Open load bridge A</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ErrorFlags.OpenLoadB">
            <summary>Open load bridge B</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ErrorFlags.StandStill">
            <summary>Stand still</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ExtendedErrorFlags">
            <summary>The extended error flags.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ExtendedErrorFlags.StallGuardError">
            <summary>stallGuard error</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ExtendedErrorFlags.DeviationError">
            <summary>deviation error</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.UnitMode">
            <summary>Represents the unit modes.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.UnitMode.StepsAndMicroSteps">
            <summary>Units will be μsteps/s and μsteps/s/s (though functions take steps/s), which is the default and recommended</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.UnitMode.InternalUnits">
            <summary>Internal board units will be used</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212"/></summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.BoardSpecificInitialisation">
            <summary>Initialisation steps specific to the 6212 board.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetAxisParameter(System.Int32,System.String,System.Int32)">
            <summary>Sets a parameter and checks the status of the reply, throwing an exception if the status is no OK.</summary>
            <param name="axis">The axis</param>
            <param name="parameter">The name of the parameter to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.IsOnHome(System.Int32)">
            <summary>Determines if the axis is currently on the home sensor</summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.IsEnabled">
            <summary>
            Determines if the motor controller is enabled by querying the state of the enable pin.
            Enabled in this context is if the device is supplying power to the motors and is capable of carrying out move commands.
            </summary>
            <returns>True if the device is enabled</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetDeviceUITypes">
            <summary>Set the device settings and control UI types.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Double)">
            <summary>Start an axis moving in a continuous motion</summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at (-2147483648 to 2147483647). Unit is usually steps/s, depending on <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.UnitMode"/></param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>Sets the normal direction of the axis.</summary>
            <param name="axis">The axis</param>
            <param name="direction">The direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>Set the drive speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed 0-7999.774 steps/s. See <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.MaximumPositioningSpeed"/></param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>Set the acceleration and deceleration rate of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>Set the home speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec) 0-799.974 steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>Set the home offset speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec) 0-799.974 steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetUnitMode(System.Int32,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.UnitMode)">
            <summary>Sets the <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.AxisParameters6212.UnitMode"/>.</summary>
            <param name="axis">The axis</param>
            <param name="mode">The unit mode. When true, the unit mode will be μsteps/s and μsteps/s/s, which is the default and recommended. When false, internal units will be used.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>Switches a digital output on the controller</summary>
            <param name="axis">The axis, not used.</param>
            <param name="output">The index of the output (0-3)</param>
            <param name="state">The state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ReadAuxOutput(System.Int32,System.Int32)">
            <summary>Reads the current state of an auxiliary output on the controller.</summary>
            <param name="axis">The axis number to read the output on</param>
            <param name="output">The output index to read (0-3)</param>
            <returns>The returned output state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ReadAuxInput(System.Int32,System.Int32)">
            <summary>Reads an auxiliary input on the controller.</summary>
            <param name="axis">The axis number to read the input on</param>
            <param name="input">The input index to read (0-3)</param>
            <returns>The returned input state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ReadAuxAnalogInput(System.Int32,System.Int32)">
            <summary>Reads an auxiliary analog input on the controller.</summary>
            <param name="axis">The axis number to read the input on</param>
            <param name="input">The input index to read (0-3)</param>
            <returns>The returned analog input value (0-65535)</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.GetCurrentMotorVelocity(System.Int32)">
            <summary>Gets the current motor velocity in steps/s</summary>
            <param name="axis">The axis</param>
            <returns>Current motor velocity in steps/s</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.GetErrors(System.Int32)">
            <summary>Gets the drive errors and their type.</summary>
            <param name="axis">The axis</param>
            <returns>The bitmask of drive errors and the type of those errors</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.GetExtendedErrors(System.Int32)">
            <summary>Gets the extended errors and their type.</summary>
            <param name="axis">The axis</param>
            <returns>The bitmask of extended errors and the type of those errors</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.GetMotorStatusSummaryTextDeviceSpecific(System.Int32)">
            <summary>Gets motor status summary text that is specific to the particular Trinamic board type.</summary>
            <param name="axis">The axis</param>
            <returns>Motor status summary text that is specific to the particular Trinamic board type.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.ClearControllerFaults(System.Int32)">
            <summary>Clears motor faults.</summary>
            <param name="axis">The axis</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetStealthChopPWMGradient(System.Int32,System.Int32)">
            <summary>
            Velocity dependent gradient for PWM amplitude (StealthChop). Setting this value to 0 turns off StealthChop.
            </summary>
            <param name="axis">The relevant axis.</param>
            <param name="gradient">The gradient value to set (0 - 15)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetRightLimitSwitchDisableState(System.Int32,System.Boolean)">
            <summary>Set the disabled state of the right limit switch.</summary>
            <param name="axis">The axis</param>
            <param name="state">bool, true to disable limit switch, false to enable.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetLeftLimitSwitchDisableState(System.Int32,System.Boolean)">
            <summary>Set the disabled state of the left limit switch.</summary>
            <param name="axis">The axis</param>
            <param name="state">bool, true to disable limit switch, false to enable.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetPositioningMode(System.Int32,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.RelativePositioningModes)">
            <summary>Set what should be used as the start position for relative moves.</summary>
            <param name="axis">The axis</param>
            <param name="mode">The start position mode</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetHomeSequenceMode(System.Int32,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.HomeSequenceModes)">
            <summary>Sets the homing sequence mode.</summary>
            <param name="axis">The axis</param>
            <param name="mode">The homing sequence mode.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.GetHomeSequenceMode(System.Int32)">
            <summary>Gets the homing sequence mode.</summary>
            <param name="axis">The axis</param>
            <returns>The homing sequence mode</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>Set the initial speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.BoardSpecificAxisSetup(System.Int32,Labman.MotionControl.TrinamicAxisSettings)">
            <summary>Any axis setup actions, like setting parameters from settings, that are specific to the trinamic board.</summary>
            <param name="axis">The axis</param>
            <param name="settings">The settings for the axis</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetInteranlEncoderPrescaler(System.Int32,System.Int32)">
            <summary>Sets the encoder prescaler in encoder counts per round</summary>
            <param name="axis">The axis</param>
            <param name="ratio">The prescaler in counts per round</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212.SetInteranlMotorFullStepResolution(System.Int32,System.Int32)">
            <summary>Sets the motor full step resolution in full steps per round</summary>
            <param name="axis">The axis</param>
            <param name="resolution">The motor full step resolution in full steps per round</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase">
            <summary>Base class for Trinamic motor controllers</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.EncoderModes">
            <summary>Encoder modes</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.EncoderModes.SensOstep">
            <summary>Internal "SensOstep" encoder (256 steps per rotation).</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.EncoderModes.External">
            <summary>External</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.Commands">
            <summary>Enumeration of register addresses available</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.StatusCodes">
            <summary>Enum Status Codes</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.MoveType">
            <summary>Profile position move types</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.MicrosteppingResolution">
            <summary>Microstepping resolutions.</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.RelativePositioningModes">
            <summary>Start position for relative/incremental moves.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SupportedAxes">
            <summary>The number of supported axes</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase._motorRatios">
            <summary>The motor ratios</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase._encoderRatios">
            <summary>The encoder ratios</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase._homeSequenceModes">
            <summary>The home sequence modes</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase._stopResetEvent">
            <summary>For breaking out of movement waits when the stop command is issued</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase._moveContinuousDriveSpeed">
            <summary>In internal motor units</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase._reverseMotorRatio">
            <summary>Whether the motor ratio is reversed for each axis</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase._reverseEncoderRatio">
            <summary>Whether the encoder ratio is reversed for each axis</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase._continuousMoveStopped">
            <summary>Reset events for when movement stops for each axis</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParametersType">
            <summary>Allows easy referal to AxisParameters as strings, whilst facilitating reflection to display their names in error messages and get attributes.</summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.MotorControllerSettings">
            <summary>The Settings Property exposes the device instance settings class from the main base class</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.MaxMotorCurrent">
            <summary>The maximum peak (not RMS) motor current</summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisType">
            <summary>The type of axis this motor controller supports</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.#ctor(System.Double,System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase"/> class.</summary>
            <param name="maxMotorCurrent">The maximum motor current for this controller</param>
            <param name="axisParametersType">The type that contains the axis parameters for this motor contorller type</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SendCommand(Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.Commands,System.Int32,System.Int32)">
            <summary>Sends the command when the value doesn't matter.</summary>
            <param name="command">See <see cref="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Command"/></param>
            <param name="type">See <see cref="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Type"/></param>
            <param name="motorOrBank">See <see cref="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Motor"/></param>
            <returns>CommandResponse.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SendCommand(Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.Commands,System.Int32,System.Int32,System.Int32)">
            <summary>Sends the command.</summary>
            <param name="command">See <see cref="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Command"/></param>
            <param name="type">See <see cref="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Type"/></param>
            <param name="motorOrBank">See <see cref="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Motor"/></param>
            <param name="value">See <see cref="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Value"/></param>
            <returns>CommandResponse.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SendCommand(Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand)">
            <summary>Sends the command.</summary>
            <param name="command">The command.</param>
            <returns>CommandResponse.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SendGetFirmwareCommand(Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand)">
            <summary>
            Send Get Firmware Command
            Caanot use the normal SendCommand as no checksum or validation is required
            </summary>
            <param name="command">The command</param>
            <returns>Board name and Firmware version number</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ValidatePacket(System.Byte[])">
            <summary>Validates the packet. This is called from the PacketValidationMethod callback from the comms routine.</summary>
            <param name="data">The data to check</param>
            <returns>True if the data is valid, else false</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.Initialise">
            <summary>The initialise method is used to setup the device instance and ensure it is ready to be used</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.BoardSpecificInitialisation">
            <summary>Any initialisation steps specific to the trinamic board.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.BoardSpecificAxisSetup(System.Int32,Labman.MotionControl.TrinamicAxisSettings)">
            <summary>Any axis setup actions, like setting parameters from settings, that are specific to the trinamic board.</summary>
            <param name="axis">The axis</param>
            <param name="settings">The settings for the axis</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.IsOnHome(System.Int32)">
            <summary>Determines if the axis is currently on the home sensor</summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>Homes the axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.IsAxisBusy(System.Int32)">
            <summary>Determines if the axis is currently busy or not</summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.Dispose">
            <summary>Dispose method closes comms</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>Moves the axis to an absolute position</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>Moves the axis by an incremental amount</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>Start an axis moving in a continuous motion</summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Double)">
            <summary>Start an axis moving in a continuous motion</summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at in steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.StartMotorContinuousInternal(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Int32)">
            <summary>Start an axis moving in a continuous motion</summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at in the motor's units (usually μsteps/s)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>Force subclasses to implement this. TODO: Might implement here by swapping ratio.</summary>
            <param name="axis">The axis</param>
            <param name="direction">The direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>Set the encoder direction of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.PositionReached(System.Int32)">
            <summary>Whether the target position has been reached.</summary>
            <param name="axis">The axis.</param>
            <returns>True if reached, false otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>Stop an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetLogicalPosition(System.Int32)">
            <summary>Gets the logical motor position for this axis</summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetEncoderPosition(System.Int32)">
            <summary>Gets the encoder position for this axis</summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Not implemented for this type of motor.
            </summary>
            <param name="axis">The axis</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetMotorRatio(System.Int32,System.Double)">
            <summary>Set the motor ratio for the specified axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetEncoderRatio(System.Int32,System.Double)">
            <summary>Set the encoder ratio for the specified axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>Set the drive speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetDriveSpeedInternal(System.Int32,System.Int32)">
            <summary>Set the drive speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed in motor units</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>Set the acceleration rate of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>Set the home speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed in steps/s</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetHomeSpeedInternal(System.Int32,System.Int32)">
            <summary>Set the home speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed in internal board units</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>Set the home timeout of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>Set the home offset speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetHomeOffsetSpeedInternal(System.Int32,System.Int32)">
            <summary>Set the home offset speed of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>Set the delay between changing direction during homing of an axis</summary>
            <param name="axis">Axis number on the controller</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.IsEmergencyStopped">
            <summary>Checks for an E/STOP condition</summary>
            <returns>FALSE</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.IsEnabled">
            <summary>Indicates if the device is enabled.</summary>
            <returns>Whether the motor controller is enabled</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetMicrostepping(System.Int32,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.MicrosteppingResolution)">
            <summary>Sets the microstepping resolution</summary>
            <param name="axis">The axis</param>
            <param name="resolution">the resolution</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetMicrosteppingInternal(System.Int32,System.Int32)">
            <summary>Sets the microstepping resolution</summary>
            <param name="axis">The axis</param>
            <param name="resolution">The resolution</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetMicroStepping(System.Int32)">
            <summary>Gets the microstepping resolution</summary>
            <param name="axis">The axis</param>
            <returns>The resolution</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetHomeSequenceMode(System.Int32,System.Int32)">
            <summary>Sets the homing sequence mode.</summary>
            <param name="axis">The axis</param>
            <param name="mode">The homing sequence mode.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetHomeSequenceMode(System.Int32)">
            <summary>Gets the homing sequence mode.</summary>
            <param name="axis">The axis</param>
            <returns>The homing sequence mode</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>Switches a digital output on the controller</summary>
            <param name="axis">The axis, not used.</param>
            <param name="output">The index of the output.</param>
            <param name="state">The state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SwitchAuxOutputInternal(System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>Switches a digital output on the controller</summary>
            <param name="output">The index of the output.</param>
            <param name="state">The state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ConvertToBoardUnits(System.Int32,System.Double)">
            <summary>
            Converts from engineering units (usually mm/s) to the boards units via the motor ratio.
            Base implementation just multiplies by the motor ratio to calculate the board units in pps (microsteps per second)
            </summary>
            <param name="axis">The axis index. Needed to extract motor ratio.</param>
            <param name="valueEngineeringUnits">The value in engineering units (mm/s, deg/s etc. Dependant on motor ratio)</param>
            <returns>The value in units used by the board.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ConvertFromBoardUnits(System.Int32,System.Double)">
            <summary>
            Converts from boards units to engineering units (usually mm/s) via the motor ratio.
            Base implementation just divides by the motor ratio to calculate the engineering units. Board units are assumed to be in pps (microsteps per second)
            </summary>
            <param name="axis">The axis index. Needed to extract motor ratio.</param>
            <param name="speedBoardUnits">The value in board units (usually pps (microsteps per second)).</param>
            <returns>The value in engineering units (mm/s, deg/s etc. Dependant on motor ratio).</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ReadAuxOutput(System.Int32,System.Int32)">
            <summary>Reads the current state of an auxiliary output on the controller.</summary>
            <param name="axis">The axis number to read the output on</param>
            <param name="output">The output index to read</param>
            <returns>The returned output state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ReadAuxOutputInternal(System.Int32)">
            <summary>Reads the current state of an auxiliary output on the controller.</summary>
            <param name="output">The output index to read</param>
            <returns>The returned output state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ReadAuxInput(System.Int32,System.Int32)">
            <summary>Reads an auxiliary input on the controller.</summary>
            <param name="axis">The axis number to read the input on</param>
            <param name="input">The input index to read</param>
            <returns>The returned input state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ReadAuxInputInternal(System.Int32)">
            <summary>Reads an auxiliary input on the controller.</summary>
            <param name="input">The input index to read</param>
            <returns>The returned input state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ReadAuxAnalogInput(System.Int32,System.Int32)">
            <summary>Reads an auxiliary analog input on the controller.</summary>
            <param name="axis">The axis number to read the input on</param>
            <param name="input">The input index to read</param>
            <returns>The returned analog input value</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ReadAuxAnalogInputInternal(System.Int32)">
            <summary>Reads an auxiliary analog input on the controller.</summary>
            <param name="input">The input index to read</param>
            <returns>The returned analog input value</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetAxisParameter(System.Int32,System.Int32,System.String)">
            <summary>Gets a parameter and checks the statuts of the reply, throwing an exception if the status is not OK.</summary>
            <param name="axis">The axis</param>
            <param name="parameter">The parameter to get</param>
            <param name="parameterName">The name of the parameter to get</param>
            <returns>The value of the parameter</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetAxisParameter(System.Int32,System.Reflection.FieldInfo,System.Int32,System.Boolean)">
            <summary>Sets a parameter and checks the status of the reply, throwing an exception if the status is not OK.</summary>
            <param name="axis">The axis</param>
            <param name="parameter">The parameter to set</param>
            <param name="value">The value to set</param>
            <param name="eeprom">False to not store in eeprom, true to store if <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.EepromAttribute"/> is defined</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetAxisParameter(System.Int32,System.String,System.Int32)">
            <summary>Sets a parameter and checks the status of the reply, throwing an exception if the status is no OK.</summary>
            <param name="axis">The axis</param>
            <param name="parameter">The name of the parameter to set</param>
            <param name="value">The value to set</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetMotorDriveCurrent(System.Int32,System.Int32)">
            <summary>Sets the maximum drive current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</summary>
            <param name="axis">The axis</param>
            <param name="value">The drive current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetMotorDriveCurrent(System.Int32)">
            <summary>Gets the motor drive current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</summary>
            <param name="axis">The axis</param>
            <returns>The drive current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetMotorDriveCurrentInAmps(System.Int32,System.Double)">
            <summary>Sets the maximum drive peak current in amps</summary>
            <param name="axis">The axis</param>
            <param name="currentInAmps">The drive peak current in amps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetMotorDriveCurrentInAmps(System.Int32)">
            <summary>Gets the motor drive peak current in amps.</summary>
            <param name="axis">The axis</param>
            <returns>The drive peak current in amps.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetMotorHoldCurrent(System.Int32,System.Int32)">
            <summary>Sets the motor hold current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</summary>
            <param name="axis">The axis</param>
            <param name="value">The motor hold current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetMotorHoldCurrent(System.Int32)">
            <summary>Gets the motor hold current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</summary>
            <param name="axis">The axis</param>
            <returns>The hold current as a fraction of the maximum motor peak current (0 = 0%, 255 = 100%).</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetMotorHoldCurrentInAmps(System.Int32,System.Double)">
            <summary>Sets the motor hold peak current in amps</summary>
            <param name="axis">The axis</param>
            <param name="currentInAmps">The motor hold peak current in amps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetMotorHoldCurrentInAmps(System.Int32)">
            <summary>Gets the motor hold peak current in amps.</summary>
            <param name="axis">The axis</param>
            <returns>The hold peak current in amps.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetCurrentMotorVelocity(System.Int32)">
            <summary>Gets the current motor velocity in steps/s</summary>
            <param name="axis">The axis</param>
            <returns>Current motor velocity in steps/s</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetCurrentMotorVelocityInternal(System.Int32)">
            <summary>Gets the current motor velocity in steps/s</summary>
            <param name="axis">The axis</param>
            <returns>Current motor velocity in steps/s</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetErrorStrings(System.Int32)">
            <summary>Gets the drive errors as an array of strings.</summary>
            <param name="axis">The axis</param>
            <returns>The drive errors as an array of string</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetErrors(System.Int32)">
            <summary>Gets the drive errors and their type.</summary>
            <param name="axis">The axis</param>
            <returns>The bitmask of drive errors and the type of those errors</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetExtendedErrors(System.Int32)">
            <summary>Gets the extended errors and their type.</summary>
            <param name="axis">The axis</param>
            <returns>The bitmask of extended errors and the type of those errors</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ClearControllerFaults(System.Int32)">
            <summary>Clears motor faults.</summary>
            <param name="axis">The axis</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ClearFaultsInternal(System.Int32)">
            <summary>Clears faults on the controller</summary>
            <param name="axis">The axis</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetMotorStatusSummaryText(System.Int32)">
            <summary>Gets the motor status summary text. This is used optionally to display on the axis engineering control.</summary>
            <param name="axis">The axis</param>
            <returns>Status string</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GetMotorStatusSummaryTextDeviceSpecific(System.Int32)">
            <summary>Gets motor status summary text that is specific to the particular Trinamic board type.</summary>
            <param name="axis">The axis</param>
            <returns>Motor status summary text that is specific to the particular Trinamic board type.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.LogContinuousMovement(System.Int32,System.Double)">
            <summary>Measures and logs how many rotations the motor has done. Calculates the distance travelled if it's an axis.</summary>
            <param name="axis">The axis number</param>
            <param name="revolutionsPerMinute">The angular velocity in revolutions per second. Must be negative if running backwards!</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.SetDeviceUITypes">
            <summary>Set the device control and settings UI this device should use in hardware config.</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters">
            <summary>
            Enumeration of axis parameters. Derived classes should NOT use these directly. Go through the board specific classes, e.g. <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.AxisParameters3351"/>.
            This ensures that board actually has that parameter and ensures the documentation for the parameter is correct for that board.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.TargetPosition">
            <summary>0. Target (next) position. -2^31 to 2^31 - 1 μsteps. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.ActualPosition">
            <summary>1. Actual position. -2^31 to 2^31 - 1 μsteps. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.TargetSpeed">
            <summary>2. Target (next) speed. +-2047. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.ActualSpeed">
            <summary>3. Actual speed. +-2047. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.MaximumPositioningSpeed">
            <summary>4. Maximum positioning speed. 0 to 2047. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.MaximumAcceleration">
            <summary>5. Maximum acceleration. 0 to 2047 μsteps/s/s. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.AbsoluteMaxCurrent">
            <summary>6. Absolute max. current. 0 to 255 % of module max current. RW</summary>
            <remarks>
            The maximum value is 255. This value means 100% of the maximum current of the module. The current adjustment is within the range 0… 255 and can be adjusted in 32 steps. 0… 7 79…
            87 160… 167 240… 247 8… 15 88… 95 168… 175 248… 255 16… 23 96… 103 176… 183 24… 31 104… 111 184… 191 32… 39 112… 119 192… 199 40… 47 120… 127 200… 207 48… 55 128… 135 208… 215 56…
            63 136… 143 216… 223 64… 71 144… 151 224… 231 72… 79 152… 159 232… 239
            </remarks>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.StandbyCurrent">
            <summary>7. Standby current. 0 to 255 % of module max current. RW. see <see cref="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.AbsoluteMaxCurrent"/> for details</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.TargetPositionReached">
            <summary>8. Target pos reached. 0/1. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.RightLimitSwitchStatus">
            <summary>10. Right limit switch status. 0/1. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.LeftLimitSwitchStatus">
            <summary>11. Left limit switch status. 0/1. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.RightLimitSwitchDisable">
            <summary>12. Right limit switch disable. 0/1. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.LeftLimitSwitchDisable">
            <summary>13. Left limit switch disable. 0/1. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.MicrostepResolution">
            <summary>
            140. Microstep resolution. 0 to 8. RW. 0 = full step, 1 = half step, 2 = 4 microsteps, 3 = 8 microsteps, 4 = 16 microsteps, 5 = 32 microsteps, 6 = 64 microsteps, 7 = 128
            microsteps, 8 = 256 microsteps
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.ReferenceSearchMode">
            <summary>
            193. Reference search mode. 1/2/3. RWE 1 = search left stop switch only, 2 = search right stop switch, then search left stop switch, 3 = search right stop switch, then search left
            stop switch from both sides
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.ReferenceSearchSpeed">
            <summary>194. Reference search speed. 0 to 2047. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.ReferenceSwitchSpeed">
            <summary>195. Reference switch speed. 0 to 2047. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.ReferenceSwitchDistance">
            <summary>196. Reference switch distance. -2147483648 to 2147483647. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.Freewheeling">
            <summary>204. Freewheeling. 0 to 65535 ms. RWE. 0 = never</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.ActualLoadValue">
            <summary>206. Actual load value. 0 to 1023. R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.ExtendedErrorFlags">
            <summary>
            207. Extended error flags. Bitmask. R Bit 0: motor has been stopped due to encoder deviation error. Bit 1: motor has been stopped due to motor stall. These two flags are cleared
            with the next movement command.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.DriveErrorFlags">
            <summary>
            208. Driver error flags. Bitmask. R. Bits: 0 = stallGuard2 status (1: stall detected), 1 = Overtemperature (1: driver is shut down due to overtemperature), 2 = Overtemperature
            pre-warning (1: temperature threshold is exceeded), 3 = Short to ground A (1: short condition detected, driver currently shut down), 4 = Short to ground B (1: short condition
            detected, driver currently shut down), 5 = Open load A (1: no chopper event has happened during the last period with constant coil polarity), 6 = Open load B (1: no chopper event
            has happened during the last period with constant coil polarity), 7 = Stand still (1: no step pulse occurred during the last 220 clock cycles)
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.EncoderPosition">
            <summary>209. Encoder position. encoder steps. RW. The value of an encoder register can be read out or written.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.EncoderPrescaler">
            <summary>210. Encoder prescaler. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.MaximumEncoderDeviation">
            <summary>212. Maximum encoder deviation. 0 to 65535 encoder steps. RWE</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.PowderDownDelay">
            <summary>214. Power down delay. 1 to 65535 x 10 ms. RWE</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.AxisParameters.EepromAttribute">
            <summary>Attribute that specifies if a parameter can be writtento eeprom</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters">
            <summary>
            Enumeration of global parameters (bank 0). Derived classes should NOT use these directly. Go through the board specific classes, e.g. <see
            cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController3351.GlobalParameters3351"/>. This ensures that board actually has that parameter and ensures the documentation for the parameter is correct for that board.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.BaudRate">
            <summary>
            65. 0 to 11. Baud. RW[E/A].
            0: 9600 (def), 1: 14400, 2: 19200, 3: 28800, 4: 38400, 5: 57600, 6: 76800*, 7: 115200, 8: 230400, 9: 250000*, 10: 500000*, 11: 1000000*.
            * Apparently not supported by Windows. Old docs though prob referring to old Windows.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.SerialAddress">
            <summary>66. 1 to 255. RW[E/A]</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.SerialHeartbeat">
            <summary>68. 0 to 65535 ms. RW[E/A]</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.CANBitRate">
            <summary>
            69. 2 to 8. Kbit/s RW[E/A]. 2=20, 3=50, 4=100, 5-125, 6=250, 7=500, 8=1000 (default)
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.CANReplyId">
            <summary>70. 0 to 2047. RW[E/A]</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.CANId">
            <summary>71. 0 to 2047. RW[E/A]</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.ConfigurationEEPROMLockFlag">
            <summary>73. RW[E/A]. Write: 1234 to lock the EEPROM, 4321 to unlock. Read: 1=EEPROM locked, 0=EEPROM unlocked.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.TelegramPauseTime">
            <summary>75. 0 to 255. RW[E/A]</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.SerialHostAddress">
            <summary>76. 0 to 255. RW[E/A]</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.AutoStartMode">
            <summary>77. RW[E/A]. 0: Do not start TMCL app at power on. 1: Do start TMCL.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.TMCLCodeProtection">
            <summary>
            81. 0 to 3. RW[E/A]. Protect TMCL app against disassembling/overwriting. 0 - no protection, 1 - disassembling protection, 2 - overwriting protection, 3 - both portection.
            Switching off disassembling protection erases program first. Change from [1|3] to [0|2] wipes program.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.CANHeartbeat">
            <summary>82. 0 to 65535 ms. RW[E/A]</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.CANSecondaryAddress">
            <summary>83. 0 to 2047. RW[E/A]</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.CoordinateStorage">
            <summary>84. RW[E/A]. 0: coords stored in RAM only must be explicity copied to EEPROM, 1: coords always stored in EEPROM</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.DoNotStoreUserVariables">
            <summary>85. RW[E/A]. 0: user vars are restored (def), 1: user vars aren't restored</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.SerialSecondaryAddress">
            <summary>87. 0 to 255. RW[E/A]</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.TMCLApplicationStatus">
            <summary>128. 0 to 3. R. 0: stop, 1: run, 2: step, 3: reset.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.DownloadMode">
            <summary>129. R. 0: normal mode, 1: download mode.</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.TMCLProgramCounter">
            <summary>130.R</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.TickTimer">
            <summary>132. RW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.GlobalParameters.RandomNumber">
            <summary>133. 0 to 2147483647. RW. Write to set seed number</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.CommandResponse">
            <summary>Class CommandResponse.</summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.CommandResponse.Host">
            <summary>Gets or sets the host (address).</summary>
            <value>The host.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.CommandResponse.Target">
            <summary>Gets or sets the target (module address).</summary>
            <value>The target.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.CommandResponse.Status">
            <summary>Gets or sets the status.</summary>
            <value>The status.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.CommandResponse.Instruction">
            <summary>Gets or sets the instruction (the command number).</summary>
            <value>The instruction.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.CommandResponse.Value">
            <summary>Gets or sets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.CommandResponse.CheckSumValue">
            <summary>
            The value of the checksum received in the response.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand">
            <summary>Class Command.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.#ctor(System.Byte,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.Commands,System.Int32,System.Int32)">
            <summary>Creates a new <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand"/>, when the <see cref="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Value"/> doesn't matter/</summary>
            <param name="nodeAddress">The node address for this trinamic motor controller</param>
            <param name="command">The command number</param>
            <param name="type">The type field</param>
            <param name="motorOrBank">The motor or bank number, related to the command</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.#ctor(System.Byte,Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.Commands,System.Int32,System.Int32,System.Int32)">
            <summary>Creates a new <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand"/>, when the <see cref="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Value"/> doesn't matter/</summary>
            <param name="nodeAddress">The node address for this trinamic motor controller</param>
            <param name="command">The command number</param>
            <param name="type">The type field</param>
            <param name="motorOrBank">The motor or bank number, related to the command</param>
            <param name="value">The value</param>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Address">
            <summary>Gets or sets the module address for this trinamic controller.</summary>
            <value>The address.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Command">
            <summary>Gets or sets the command number.</summary>
            <value>The command.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Type">
            <summary>Gets or sets the type field.</summary>
            <value>The type.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Motor">
            <summary>Gets or sets the motor or bank number.</summary>
            <value>The motor.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorControllerBase.ControllerCommand.Value">
            <summary>Gets or sets the value.</summary>
            <value>The value.</value>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController">
            <summary>
            This class is used to communicate with a Trinamic Motor Controller
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.Commands">
            <summary>
            Enumeration of register addresses available
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.AxisParameters">
            <summary>
            Enumeration of axis parameters
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.GlobalParameters">
            <summary>
            Enumeration of global parameters (bank 0)
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.StatusCodes">
            <summary>
            Enum Status Codes
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SendCommand(Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.ControllerCommand)">
            <summary>
            Sends the command.
            </summary>
            <param name="command">The command.</param>
            <returns>CommandResponse.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.ValidatePacket(System.Byte[])">
            <summary>
            Validates the packet. This is called from the PacketValidationMethod callback from the comms routine.
            </summary>
            <param name="data">The data to check</param>
            <returns>True if the data is valid, else false</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.Dispose">
            <summary>
            Dispose method closes comms
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Int32)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.PositionReached(System.Int32)">
            <summary>
            Positions the reached.
            </summary>
            <param name="axis">The axis.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the logical position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Set the encoder ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.IsEmergencyStopped">
            <summary>
            Checks for an E/STOP condition
            </summary>
            <returns>FALSE</returns>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.CommandResponse">
            <summary>
            Class CommandResponse.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.CommandResponse.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.CommandResponse.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.CommandResponse.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>The status.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.CommandResponse.Instruction">
            <summary>
            Gets or sets the instruction.
            </summary>
            <value>The instruction.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.CommandResponse.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.ControllerCommand">
            <summary>
            Class Command.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.ControllerCommand.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.ControllerCommand.Command">
            <summary>
            Gets or sets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.ControllerCommand.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.ControllerCommand.Motor">
            <summary>
            Gets or sets the motor.
            </summary>
            <value>The motor.</value>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrinamicPD1180MotorController.ControllerCommand.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrioMotionMotorController">
            <summary>
            This class is used to communicate with a TrioMotion controller
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrioMotionMotorController.MTYPE">
            <summary>
            Contains types of moves that axis can make (MTYPE value)
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.TrioMotionMotorController.TrioMotionCoordinator">
            <summary>
            Property which exposes the TrioMotionCoordinator object which can be used to call functions directly
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.#ctor">
            <summary>
            Initializes a new instance of the Trio Motion controller class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.Dispose">
            <summary>
            Dispose method closes comms
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Checks if axis is busy.
            </summary>
            <param name="axis">the axis to check</param>
            <returns>True if axis is busy</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Move the controller to an absolute position
            </summary>
            <param name="axis">The axis to move</param>
            <param name="position">The position to move to</param>
            <param name="waitType">Whether or not to wait for completion</param>
            <param name="timeout">Timeout to throw error on move</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the controller a relative distance
            </summary>
            <param name="axis">Axis to move</param>
            <param name="distance">distance to move</param>
            <param name="waitType">wait for completion</param>
            <param name="timeout">timeout for move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.ReadRegisterTableValues(System.Int32,System.Int32)">
            <summary>
            Reads back values stored in the register tables in the motor controller
            </summary>
            <param name="start">Start index to read from</param>
            <param name="entries">The number of table entries to bring back</param>
            <returns>An array of Double values representing the register values</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.WriteRegisterTableValues(System.Int32,System.Int32,System.Double[])">
            <summary>
            Writes values back to the register tables stored in the motor controller
            </summary>
            <param name="start">Start index to write to</param>
            <param name="entries">The number of sequential entries to write</param>
            <param name="values">An array of double values, the length of this array must be the same as the number of entries</param>
            <returns>Boolean TRUE if the function succeeded or FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns> False. </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.StartProgram(System.String)">
            <summary>
            Starts TRIO BASE type program (it must be already in TRIO memory).
            </summary>
            <param name="programName">Name of the program to start.</param>
            <returns>whether the program ran successfully or not</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.StopPogram(System.String)">
            <summary>
            Stops TRIO BASE type program (it must be already in TRIO memory).
            </summary>
            <param name="programName">The program to ztop</param>
            <returns>Whether it stopped successfully or not</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.RapidStop">
            <summary>
            Rapid stop TRIO.
            </summary>
            <returns>true if stopped</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.Execute(System.String)">
            <summary>
            Executes given command in TRIO.
            </summary>
            <param name="command">Command to execute in TRIO.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.SetAxesParameter(System.Int16[],System.String,System.Double)">
            <summary>
            Method allows to change particular parameter in given axes (bases).
            </summary>
            <param name="axes">An array of bases (axes) in which parameter will be changed</param>
            <param name="paramToSetName">Name of parameter to change.</param>
            <param name="valueOfParam">New value of parameter set in each chosen base.</param>
            <returns>true if set was successful</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.MOVEABS(System.Int16[],System.Double)">
            <summary>
            Absolute move of given axes.
            </summary>
            <param name="axes">An array of axes which should be moved.</param>
            <param name="position">Desired absolute position.</param>
            <returns>true if move was successful</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.MOVE(System.Int16[],System.Double)">
            <summary>
            Inc Move of given axes.
            </summary>
            <param name="axes">An array of axes which should be moved.</param>
            <param name="position">Desired absolute position.</param>
            <returns>True if move was successful</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.GetAxisParameterValue(System.String,System.Int16)">
            <summary>
            Gets given axis parameter value.
            </summary>
            <param name="parameter">Name of the parameter.</param>
            <param name="axis">Index of axis to get value from.</param>
            <returns>The axis parameter value</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.GetAxisState(System.Int16)">
            <summary>
            Return state of the axis.
            </summary>
            <param name="axis">The axis to check</param>
            <returns>The state of the axis</returns>/returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.IsMoveInProgress(System.Int16[])">
            <summary>
            Checks if given axes in move (MTYPE != IDLE)
            </summary>
            <param name="axes">An array of axes to check.</param>
            <returns>True if is in move.</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TrioMotionMotorController.EnableDisableDrive(System.Boolean)">
            <summary>
            Enables/disables given axes. 
            In TRIO MUST be 2 programes: 
            DRIVE_DISABLE with only one line: WDOG = OFF
            DRIVE_ENABLE with only one line: WDOG = ON 
            </summary>        
            <param name="enable">Indicates wether we want to enable (true) or disable (false) axes.</param>
            <returns>True if succesfull</returns>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters">
            <summary>
            Class contains axis parameters. Same as in MotionPerfect "Axis Parameters" window.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.UNITS">
            <summary>
            Units
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.ACCELERATION">
            <summary>
            Accelleration
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.DECELERATION">
            <summary>
            Deceleration
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.CREEP">
            <summary>
            creep speed used when performing a reset from fatal error
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.JERK">
            <summary>
            jerk?
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.SPEED">
            <summary>
            speed of the axis
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.MERGE">
            <summary>
            Parameter used if we want subsequent moves to be merged smoothly. 1 = ON, 0 = OFF
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.MOVE_SPEED">
            <summary>
            Can be used to represent the speed measured as it represents the change in measured position in user UNITS(per second) in the last servo period.
            </summary>            
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.DESIRED_POSITION">
            <summary>
            The demand position DPOS is the demanded axis position generated by the motion commands. 
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.ENCODER">
            <summary>
            The ENCODER axis parameter holds a raw copy of the positional feedback device. 
            The MPOS axis measured position is calculated from the ENCODER value automatically allowing for overflows and offsets.
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.MOVE_POSITION">
            <summary>
            This parameter is the position of the axis as measured by the encoder or resolver. 
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.FOLLOWING_ERROR_LIMIT">
            <summary>
            FE LIMIT
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TrioMotionMotorController.AxisParameters.MOVE_TYPE">
            <summary>
            This parameter holds the type of move currently being executed. 
            This parameter may be interrogated to determine whether a move has finished or if a transition from one move type to another has taken place.
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MDriveCANMotorController">
            <summary>
            Control class for MDrive CAN controlled motors
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MDriveCANMotorController._lastPositions">
            <summary>Used only for mileage logging. Should not be relied upon for movement calculations.</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.MDriveCANMotorController"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>
            Flag that indicates whether the motor is currently e-stopped
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to set the logical position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to set the encoder position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position - note encoder positions are NOT checked after the move
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Set the encoder ratio for the specified axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="acceleration">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Int32)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.TorqueMove(System.Int32,System.Int32,System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Starts a torque move 
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="targetTorque">The target torque </param>
            <param name="speed">The motor speed</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.ToggleEnableLine(System.Int32)">
            <summary>
            Toggles the axis enable line, this is used to disable and enable some motors to reset faults
            </summary>
            <param name="axis">Axis CAN Device ID</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch an auxillary output on the controller
            </summary>
            <param name="axis">The axis number to switch the output on</param>
            <param name="output">The output index to switch</param>
            <param name="state">The aux output state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Get the current homing status from the controller, this indicates which stage in the homing process the controller is in
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The current home state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults
            </summary>
            <param name="axis">Axis CAN Device ID</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.GetMotorStatusSummaryText(System.Int32)">
            <summary>
            Gets the motor status summary text. This is used optionally to display on the axis engineering control.
            </summary>
            <param name="axis">The axis</param>
            <returns>Status string</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetMotorCommunicationsSettings(Labman.Hardware.MotorControllers.MDriveCANMotorController.BaudRate,System.Int32)">
            <summary>
            Sets the motor communications settings.
            </summary>
            <param name="baudRate">The baud rate.</param>
            <param name="nodeAddress">The node address.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetMotorHoldCurrent(System.Int32,System.Int32)">
            <summary>
            Sets the motor hold current.
            </summary>
            <param name="axis">The axis.</param>
            <param name="percentageCurrent">The percentage current.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetMotorRunCurrent(System.Int32,System.Int32)">
            <summary>
            Sets the motor run current.
            </summary>
            <param name="axis">The axis.</param>
            <param name="percentageCurrent">The percentage current.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.GetCurrentSpeed(System.Int32)">
            <summary>
            Gets the current speed of the motor
            </summary>
            <param name="axis">The axis.</param>
            <returns>The current motor speed </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.GetMotorTemperature(System.Int32)">
            <summary>
            Gets the motor temperature.
            </summary>
            <param name="axis">The axis.</param>
            <returns>The motor temperature in degrees C</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetPositiveLimitInput(System.Int32,System.Int32)">
            <summary>
            Sets the positive limit input.
            </summary>
            <param name="axis">The axis.</param>
            <param name="input">The io number.</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MDriveCANMotorController.BaudRate">
            <summary>
            Enumeration of possible baud rates the MDrive can be set to use
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MDriveCANMotorController.MoveType">
            <summary>
            Profile position move types
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MDriveCANMotorController.OperationModes">
            <summary>
            Possible motor operation modes
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MDriveCANMotorController.DriveControlActions">
            <summary>
            Enumeration of the drive control actions
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MDriveCANMotorController.MotorOperatingState">
            <summary>
            Enumeration of operating states (see CAN manual page 49)
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MDriveCANMotorController.OperatingState">
            <summary>
            Structure which represents the operating state register bits (6041:0, pg 51)
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MDriveCANMotorController.OperatingState.DriveOperatingState">
            <summary>
            The drive operating state
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MDriveCANMotorController.OperatingState.Warning">
            <summary>
            The warning
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MDriveCANMotorController.OperatingState.Remote">
            <summary>
            The remote
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MDriveCANMotorController.OperatingState.TargetReached">
            <summary>
            The target reached
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MDriveCANMotorController.OperatingState.InternalLimitActive">
            <summary>
            The internal limit active
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MDriveCANMotorController.OperatingState.OpModeStatus">
            <summary>
            The op mode status
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.OperatingState.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.MDriveCANMotorController.OperatingState"/> struct.
            </summary>
            <param name="registerValue">The register value.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetMotorOperatingState(System.Int32,Labman.Hardware.MotorControllers.MDriveCANMotorController.MotorOperatingState)">
            <summary>
            Sets the operating state of the motor
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="requiredState">Required state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.CheckSpeedLimits(System.Int32,System.Int32)">
            <summary>
            Checks the speed limits of the specified speed
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The speed</param>
            <exception cref="T:System.Exception">Speed must be between 1 and  + speed</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetOperationMode(System.Int32,Labman.Hardware.MotorControllers.MDriveCANMotorController.OperationModes)">
            <summary>
            Sets the operation mode.
            </summary>
            <param name="axis">The axis.</param>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.MoveProfilePosition(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,Labman.Hardware.MotorControllers.MDriveCANMotorController.MoveType,System.Int32)">
            <summary>
            Moves the axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="moveType">Type of the move.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped</exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">Axis move failed as the operation timed out</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetupMotor(System.Int32,System.Boolean)">
            <summary>
            Sets up the motor with default settings
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="enableEncoder">Flag whether to enable the internal encoder</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.GetOperatingState(System.Int32)">
            <summary>
            Gets the OperatingState of the specified motor
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>OperatingMode structure</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetDriveControlRegister(System.Int32,System.Boolean,Labman.Hardware.MotorControllers.MDriveCANMotorController.DriveControlActions,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the drive control register
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="faultResetToggle">if set to <c>true</c> [fault reset toggle].</param>
            <param name="action">The action.</param>
            <param name="setModeBits">if set to <c>true</c> [set mode bits].</param>
            <param name="halt">if set to <c>true</c> [halt].</param>
            <param name="bit6">if set to <c>true</c> [bit6].</param>
            <param name="bit5">if set to <c>true</c> [bit5].</param>
            <param name="bit4">if set to <c>true</c> [bit4].</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetDriveControlRegister(System.Int32,System.Boolean,Labman.Hardware.MotorControllers.MDriveCANMotorController.DriveControlActions)">
            <summary>
            Sets the drive control register
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="faultResetToggle">if set to <c>true</c> [fault reset toggle].</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.SetDriveControlRegister(System.Int32,System.Boolean)">
            <summary>
            Sets the drive control register
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="faultResetToggle">if set to <c>true</c> [fault reset toggle].</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MDriveCANMotorController.LogContinuousMovement(System.Int32,System.Double)">
            <summary>
            Measures and logs how many rotations the motor has done. Calculates the distance travelled if it's an axis.
            </summary>
            <param name="axis">The axis number</param>
            <param name="revolutionsPerMinute">The angular velocity in revolutions per second. Must be negative if running backwards!</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderATV12MotorController">
            <summary>
            This class is used to communicate with a Schneider ATV12 motor controller
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.RegisterAddress">
            <summary>
            Enumeration of register addresses available
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status">
            <summary>
            Structure that defines the bits exposed by the ETA register
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.ReadyToSwitchOn">
            <summary>
            Property that exposes a value indicating whether [ready to switch on].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.SwitchedOn">
            <summary>
            Property that exposes a value indicating whether [switched on].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.OperationEnabled">
            <summary>
            Property that exposes a value indicating whether [operation enabled].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.FaultDetection">
            <summary>
            Property that exposes a value indicating whether [fault detection].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.QuickStop">
            <summary>
            Property that exposes a value indicating whether [quick stop].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.SwitchOnDisabled">
            <summary>
            Property that exposes a value indicating whether [switch on disabled].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.LocalMode">
            <summary>
            Property that exposes a value indicating whether [local mode].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.ReferenceReachedSteadyState">
            <summary>
            Property that exposes a value indicating whether [reference reached steady state].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.RefernceExceeded">
            <summary>
            Property that exposes a value indicating whether [refernce exceeded].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.StopViaStopKey">
            <summary>
            Property that exposes a value indicating whether [stop via stop key].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.MotorRotationForwardOrStopped">
            <summary>
            Property that exposes a value indicating whether [motor rotation forward or stopped].
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ATV12Status.#ctor(System.Int32)">
            <summary>
            Create the structure and populate properties
            </summary>
            <param name="value">Register value</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.SchneiderATV12MotorController"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.Dispose">
            <summary>
            Dispose method closes comms
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.IsEmergencyStopped">
            <summary>
            Checks for an E/STOP condition
            </summary>
            <returns>FALSE</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ValidatePacket(System.Byte[])">
            <summary>
            Validates the packet. This is called from the PacketValidationMethod callback from the comms routine.
            </summary>
            <param name="data">The data to check</param>
            <returns>True if the data is valid, else false</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.CalculateCRC(System.Byte[])">
            <summary>
            Calculates the CRC of the specified data
            </summary>
            <param name="data">The data</param>
            <returns>CRC bytes</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ReadRegisters(Labman.Hardware.MotorControllers.SchneiderATV12MotorController.RegisterAddress,System.Byte)">
            <summary>
            Reads a register value
            </summary>
            <param name="registerAddress">The register address to read from</param>
            <param name="registersToRead">The number of registers to read</param>
            <returns>The bytes read from the registers</returns>
            <exception cref="T:System.Exception">Invalid reply received</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.ReadRegisterValue(Labman.Hardware.MotorControllers.SchneiderATV12MotorController.RegisterAddress)">
            <summary>
            Reads a register value
            </summary>
            <param name="registerAddress">The register to read</param>
            <returns>The value of the register</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.WriteRegisterValue(Labman.Hardware.MotorControllers.SchneiderATV12MotorController.RegisterAddress,System.Int32)">
            <summary>
            Writes a register value
            </summary>
            <param name="registerAddress">The register address to write to</param>
            <param name="value">The value to write</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.GetStatus">
            <summary>
            Read the ATV12 Status
            </summary>
            <returns>ATV12Status structure</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.GetCurrentSpeed">
            <summary>
            Gets the current speed
            </summary>
            <returns>Current speed</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.GetSetpointSpeed">
            <summary>
            Gets the setpoint speed
            </summary>
            <returns>Setpoint speed</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.GetMotorCurrent">
            <summary>
            Gets the motor current
            </summary>
            <returns>Motor current</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.GetMotorPower">
            <summary>
            Gets the motor power
            </summary>
            <returns>Motor power</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.SetAccelerationRamp(System.Double)">
            <summary>
            Sets the acceleration ramp time
            </summary>
            <param name="rampTime">The time in seconds to ramp up</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.SetDecelerationRamp(System.Double)">
            <summary>
            Sets the deceleration ramp time
            </summary>
            <param name="rampTime">The time in seconds to ramp down</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.StartMotor(System.Double,System.Boolean)">
            <summary>
            Starts the motor at the specified speed
            </summary>
            <param name="speed">The speed to set in Hz</param>
            <param name="reverseDirection">Reverse the direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderATV12MotorController.StopMotor">
            <summary>
            Stops the motor
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanEthernetMotorController">
            <summary>
            This class communicates with a Labman motor controller
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.ControllerCommand">
            <summary>
            Enumeration of possible command codes that can be send to the motor controller device.
            These are set in the propeller code.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.TransmitPacket(System.Int32,Labman.Hardware.MotorControllers.LabmanEthernetMotorController.ControllerCommand,System.Byte[],System.Boolean,System.Double)">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="axis">The axis number to send the command to</param>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <param name="sendToRabbit">Flag to indicate to send the command to the rabbit instead of the propellers</param>
            <param name="returnValueRatio">A ratio value to multiply the return value by</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.TransmitPacket(System.Int32,Labman.Hardware.MotorControllers.LabmanEthernetMotorController.ControllerCommand,System.Byte[])">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="axis">The axis number to send the command to</param>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.TransmitPacket(System.Int32,Labman.Hardware.MotorControllers.LabmanEthernetMotorController.ControllerCommand,System.Byte[],System.Boolean)">
            <summary>
            Transmits a command packet to the hardware device and receives and decodes the reply
            </summary>
            <param name="axis">The axis number to send the command to</param>
            <param name="command">The command to send</param>
            <param name="parameters">The parameter byte array to send with the command</param>
            <param name="sendToRabbit">Flag to indicate to send the command to the rabbit instead of the propellers</param>
            <returns>The value returned from the device</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.DecodeBase128(System.Byte[])">
            <summary>
            Decodes a base 128 reply
            </summary>
            <param name="buffer">The encoded value in base 128 format (exactly 5 bytes long)</param>
            <returns>The integer value</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.EncodeBase128(System.Int32)">
            <summary>
            Encodes a value into base128 format
            </summary>
            <param name="value">The value to encode</param>
            <returns>The base128 byte array</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>Flag indicating if the motor is e-stopped</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the logical position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the encoder position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position - note encoder positions are NOT checked after the move
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.EmergencyStopException">
            Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped
            </exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">
            Failed to start axis moving
            or
            or
            Axis move failed as the controller processor was reset
            </exception>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped</exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">Failed to start axis moving
            or
            Axis move failed as the operation timed out
            or
            Axis move failed as the controller processor was reset</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Set the encoder ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.ToggleEnableLine(System.Int32)">
            <summary>
            Toggles the axis enable line, this is used to disable and enable some motors to reset faults
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch an auxillary output on the controller
            </summary>
            <param name="axis">The axis number to switch the output on</param>
            <param name="output">The output index to switch</param>
            <param name="state">The aux output state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Get the current homing status from the controller, this indicates which stage in the homing process the controller is in
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The current home state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.AnalogueInputRange">
            <summary>
            Enumeration of the possible A/D input gain ranges
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.AnalogueInputRange.Gain1_0_20V">
            <summary>Analogue input range setting for 0 - 20 V input</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.AnalogueInputRange.Gain2_0_11V11">
            <summary>Analogue input range setting for 0 - 11.11 V input</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.AnalogueInputRange.Gain3_0_5V56">
            <summary>Analogue input range setting for 0 - 5.56 V input</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.AnalogueInputRange.Gain4_0_4V44">
            <summary>Analogue input range setting for 0 - 4.44 V input</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.AnalogueInputRange.Gain5_0_2V78">
            <summary>Analogue input range setting for 0 - 2.78 V input</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.AnalogueInputRange.Gain6_0_2V22">
            <summary>Analogue input range setting for 0 - 2.22 V input</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.AnalogueInputRange.Gain7_0_1V39">
            <summary>Analogue input range setting for 0 - 1.39 V input</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.AnalogueInputRange.Gain8_0_1V11">
            <summary>Analogue input range setting for 0 - 1.11 V input</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.ReadAnalogInput(System.Int32,Labman.Hardware.MotorControllers.LabmanEthernetMotorController.AnalogueInputRange,System.Int32)">
            <summary>
            Reads an analog input value on the motor controller
            </summary>
            <param name="input">The input index to read</param>
            <param name="range">The input range to use</param>
            <param name="samplesToAverage">The number of samples to internally average on the controller</param>
            <returns>The analog voltage reading</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.HasDeviceBeenReset">
            <summary>
            Gets a flag from the device that indicates if it has internally encountered and detected a hardware reset from the processor
            </summary>
            <returns>A boolean flag which is true if any one of the controller has been reset</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.MoveLine(System.Int32,System.Int32,System.Double,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Moves 2 axes in an interpolated line
            </summary>
            <param name="axis1">The first axis to move</param>
            <param name="axis2">The second axis to move</param>
            <param name="position1">The position of the first axis</param>
            <param name="position2">The position of the second axis</param>
            <param name="waitType">The wait type</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.StartVibrate(System.Int32,System.Int32)">
            <summary>
            Starts the vibrate.
            </summary>
            <param name="axis">The axis.</param>
            <param name="steps">The steps.</param>
            <exception cref="T:Labman.Hardware.MotorControllerException">Failed to start axis vibrate</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.StopVibrate(System.Int32)">
            <summary>
            Stops the vibrate.
            </summary>
            <param name="axis">The axis.</param>
            <exception cref="T:Labman.Hardware.MotorControllerException">Failed to stop axis vibrate</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.LabmanEthernetMotorController.GetTimeSinceSpecialInputStateChange">
            <summary>
            Gets the time since special input state change.
            </summary>
            <returns>Time value</returns>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController">
            <summary>
            Control class for Schneider ILA/ILS CAN controlled motors
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController._lastPositions">
            <summary>Used only for mileage logging. Should not be relied upon for movement calculations.</summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.SchneiderCANMotorController.AxisType">
            <summary>The type of axis this motor controller supports</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>
            Flag indicating if the motor is e-stopped
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.IsEmergencyStopped(System.Int32)">
            <summary>
            Is the emergency stop pressed
            </summary>
            <param name="axis">The axis number.</param>
            <returns>
            Flag indicating if the motor is e-stopped
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to set the logical position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to set the encoder position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetStandStillCurrent(System.Int32,System.Int32)">
            <summary>
            Sets the stand still current.
            </summary>
            <param name="axis">The axis.</param>
            <param name="current">The current.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetStandStillCurrent(System.Int32)">
            <summary>
            Gets the stand still current.
            </summary>
            <param name="axis">The axis.</param>
            <returns>The current</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetAccelerationCurrent(System.Int32,System.Int32)">
            <summary>
            Sets the acceleration current.
            </summary>
            <param name="axis">The axis.</param>
            <param name="current">The current.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetAccelerationCurrent(System.Int32)">
            <summary>
            Gets the acceleration current.
            </summary>
            <param name="axis">The axis.</param>
            <returns>The current</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetConstantSpeedCurrent(System.Int32,System.Int32)">
            <summary>
            Sets the constant speed current.
            </summary>
            <param name="axis">The axis.</param>
            <param name="current">The current.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetConstantSpeedCurrent(System.Int32)">
            <summary>
            Gets the constant speed current.
            </summary>
            <param name="axis">The axis.</param>
            <returns>The current</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetStopCurrent(System.Int32,System.Int32)">
            <summary>
            Sets the stop current.
            </summary>
            <param name="axis">The axis.</param>
            <param name="current">The current.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetPositionWindowTime(System.Int32,System.Int32)">
            <summary>
            Sets the Position Window Time
            </summary>
            <param name="axis">Axis to set on</param>
            <param name="time">time to set to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetPositionWindow(System.Int32,System.Int32)">
            <summary>
            Sets the Position Window
            </summary>
            <param name="axis">Axis to set on</param>
            <param name="window">Window to set to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetMaxTrackingError(System.Int32,System.Int32)">
            <summary>
            Sets the maximum tracking error
            </summary>
            <param name="axis">the axis number</param>
            <param name="maxError"> the max error number</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetResponseToOverTravel(System.Int32)">
            <summary>
            Sets the response to over travel
            </summary>
            <param name="axis">the axis number</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetStopCurrent(System.Int32)">
            <summary>
            Gets the stop current.
            </summary>
            <param name="axis">The axis.</param>
            <returns>The current</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetActualSpeedRPM(System.Int32)">
            <summary>
            Gets the actual speed RPM.
            </summary>
            <param name="axis">The axis.</param>
            <returns>The speed rpm</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetActualSpeed(System.Int32)">
            <summary>
            Gets the actual speed.
            </summary>
            <param name="axis">The axis.</param>
            <returns>The speed</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetActualCurrent(System.Int32)">
            <summary>
            Gets the actual current.
            </summary>
            <param name="axis">The axis.</param>
            <returns>The current</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetGearRatio(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the gear ratio.
            </summary>
            <param name="axis">The axis.</param>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.HomeToIndexPulse(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis to the rotation angle of the motor's index pulse
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position - note encoder positions are NOT checked after the move
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Set the encoder ratio for the specified axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="acceleration">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Int32)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.StartMotorContinuousHighRes(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Double)">
            <summary>
            Starts the motor continuous high resource.
            </summary>
            <param name="axis">The axis.</param>
            <param name="direction">The direction.</param>
            <param name="speed">The speed.</param>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be moved as the emergency stop is triggered</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ToggleEnableLine(System.Int32)">
            <summary>
            Toggles the axis enable line, this is used to disable and enable some motors to reset faults
            </summary>
            <param name="axis">Axis CAN Device ID</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch an auxillary output on the controller
            </summary>
            <param name="axis">The axis number to switch the output on</param>
            <param name="output">The output index to switch</param>
            <param name="state">The aux output state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Get the current homing status from the controller, this indicates which stage in the homing process the controller is in
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The current home state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults
            </summary>
            <param name="axis">Axis CAN Device ID</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetMotorStatusSummaryText(System.Int32)">
            <summary>
            Gets the motor status summary text. This is used optionally to display on the axis engineering control.
            </summary>
            <param name="axis">The axis</param>
            <returns>Status string</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetMotorVoltage(System.Int32)">
            <summary>
            Gets the motor voltage.
            </summary>
            <param name="axis">The axis</param>
            <returns>Supply voltage in Volts</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetMotorCurrent(System.Int32)">
            <summary>
            Gets the motor current.
            </summary>
            <param name="axis">The axis</param>
            <returns>Motor current in Amps</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetMotorTemperature(System.Int32)">
            <summary>
            Gets the motor temperature.
            </summary>
            <param name="axis">The axis</param>
            <returns>Temperature in degrees Celcius</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetSteppingType(System.Int32)">
            <summary>
            Gets whether this motor axis is a stepper motor or servo motor.
            </summary>
            <param name="axis">The axis index</param>
            <returns>The stepping type</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetSteppingType(System.Int32,Labman.Hardware.MotorControllers.SchneiderCANMotorController.SteppingType)">
            <summary>
            Sets whether this motor axis is a stepper motor or a servo motor.
            </summary>
            <param name="axis">The axis index</param>
            <param name="type">The stepping type</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.MoveType">
            <summary>
            Profile position move types
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ExternalIOSignals">
            <summary>
            External IO signals
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.IOConfiguration">
            <summary>
            IO Configuration Vales
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveOperatingState">
            <summary>
            Enumeration of drive operating states
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.OperatingModeType">
            <summary>
            Enumeration of possible operating modes
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SteppingType">
            <summary>Enumeration of motor stepping types</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.OperatingMode">
            <summary>
            Structure which represents the operating mode register bits (1C:03, pg 174)
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.OperatingMode.Mode">
            <summary>
            The mode
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.OperatingMode.DriveReferenced">
            <summary>
            The drive referenced
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.OperatingMode.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.OperatingMode"/> struct.
            </summary>
            <param name="registerValue">The register value.</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveStat">
            <summary>
            Structure which represents the drivestat register bits (1C:02, pg 113)
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveStat.OperatingState">
            <summary>
            The operating state
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveStat.InternalMonitoringError">
            <summary>
            The internal monitoring error
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveStat.ExternalMonitoringError">
            <summary>
            The external monitoring error
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveStat.WarningMessage">
            <summary>
            The warning message
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveStat.OperationComplete">
            <summary>
            The operation complete
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveStat.OperationEnded">
            <summary>
            The operation ended
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveStat.OperationError">
            <summary>
            The operation error
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveStat.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.DriveStat"/> struct.
            </summary>
            <param name="registerValue">The register value.</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.WarningStates">
            <summary>
            Structure which represents the warning register bits (1C:0A, pg 111)
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.WarningStates.PositionOverrunProfileGenerator">
            <summary>
            The position overrun profile generator
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.WarningStates.TemperatureOfPowerStageGreaterThan100">
            <summary>
            The temperature of power stage greater than100
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.WarningStates.I2TLimitationActive">
            <summary>
            The i2 t limitation active
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.WarningStates.AbsolutePositionNotYetRead">
            <summary>
            The absolute position not yet read
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.WarningStates.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.WarningStates"/> struct.
            </summary>
            <param name="registerValue">The register value.</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals">
            <summary>
            Structure which represents the fault signals register bits (1C:12, pg 175)
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.Undervoltage1">
            <summary>
            The undervoltage1
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.Undervoltage2">
            <summary>
            The undervoltage2
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.Overvoltage">
            <summary>
            The overvoltage
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.MotorOverload">
            <summary>
            The motor overload
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.Overtemperature">
            <summary>
            The overtemperature
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.BlockingError">
            <summary>
            The blocking error
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.TrackingError">
            <summary>
            The tracking error
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.EncoderInoperative">
            <summary>
            The encoder inoperative
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.ProtocolErrorFieldbus">
            <summary>
            The protocol error fieldbus
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.NodeguardError">
            <summary>
            The nodeguard error
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.PulseDirectionInputTiming">
            <summary>
            The pulse direction input timing
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.STOSafetyFunctionTriggered">
            <summary>
            The sto safety function triggered
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.SignalsOfTheSTOSafetyFunctionHaveDifferentLevels">
            <summary>
            The signals of the sto safety function have different levels
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.HardwareErrorEEPROM">
            <summary>
            The hardware error eeprom
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.StartUpError">
            <summary>
            The start up error
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.InternalSystemError">
            <summary>
            The internal system error
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.Watchdog">
            <summary>
            The watchdog
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.FaultSignals"/> struct.
            </summary>
            <param name="registerValue">The register value.</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus">
            <summary>
            Structure which represents the Action Status bits (1C:13, pg148)
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.ErrorClass0">
            <summary>
            The error class0
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.ErrorClass1">
            <summary>
            The error class1
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.ErrorClass2">
            <summary>
            The error class2
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.ErrorClass3">
            <summary>
            The error class3
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.ErrorClass4">
            <summary>
            The error class4
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.MotorAtStandstillActualSpeedZero">
            <summary>
            The motor at standstill actual speed zero
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.MotorRotatingCW">
            <summary>
            The motor rotating cw
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.MotorRotatingCCW">
            <summary>
            The motor rotating CCW
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.MotorAtStandstillReferenceSpeedZero">
            <summary>
            The motor at standstill reference speed zero
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.MotorDecelerating">
            <summary>
            The motor decelerating
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.MotorAccelerating">
            <summary>
            The motor accelerating
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.MotorMovingAtConstantSpeed">
            <summary>
            The motor moving at constant speed
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.SummaryErrorFlagged">
            <summary>
            The summary error flagged
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.SummaryMotorMoving">
            <summary>
            The summary motor moving
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ActionStatus"/> struct.
            </summary>
            <param name="registerValue">The register value.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SaveToEeprom(System.Int32)">
            <summary>
            Saves settings to the motors eeprom
            </summary>
            <param name="axis">Axis CAN Device ID</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.CheckSpeedLimits(System.Int32,System.Int32)">
            <summary>
            Checks the speed limits of the specified speed
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The speed</param>
            <exception cref="T:System.Exception">Speed must be between 1 and  + speed</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.MoveProfilePosition(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,Labman.Hardware.MotorControllers.SchneiderCANMotorController.MoveType,System.Int32)">
            <summary>
            Moves the axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="moveType">Type of the move.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped</exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">Axis move failed with an operation error</exception>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped</exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">Axis move failed as the operation timed out
            or
            Axis move failed with an operation error</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetIOConfiguration(System.Int32,Labman.Hardware.MotorControllers.SchneiderCANMotorController.ExternalIOSignals,Labman.Hardware.MotorControllers.SchneiderCANMotorController.IOConfiguration)">
            <summary>
            Sets the configuration of the specified IO line
            </summary>
            <param name="axis">The axis</param>
            <param name="io">The io line</param>
            <param name="config">The config</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.LogContinuousMovement(System.Int32,System.Double)">
            <summary>
            Measures and logs how many rotations the motor has done. Calculates the distance travelled if it's an axis.
            </summary>
            <param name="axis">The axis number</param>
            <param name="revolutionsPerMinute">The angular velocity in revolutions per second. Must be negative if running backwards!</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetMonitoringInputSignalLevels(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the monitoring input signal levels
            </summary>
            <param name="axis">The axis</param>
            <param name="activeHighLIMP">if set to <c>true</c> [active high LIMP]</param>
            <param name="activeHighLIMN">if set to <c>true</c> [active high LIMN]</param>
            <param name="activeHighSTOP">if set to <c>true</c> [active high STOP]</param>
            <param name="activeHighREF">if set to <c>true</c> [active high REF]</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetupMotor(System.Int32)">
            <summary>
            Sets up the motor with default settings
            </summary>
            <param name="axis">Axis CAN Device ID</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetTuningParameters(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the tuning parameters for the motor
            </summary>
            <param name="axis">The axis.</param>
            <param name="kPp">The k pp.</param>
            <param name="feedForward">The feed forward.</param>
            <param name="kPn">The k pn.</param>
            <param name="tNn">The t nn.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.ReadExternalInput(System.Int32,Labman.Hardware.MotorControllers.SchneiderCANMotorController.ExternalIOSignals)">
            <summary>
            Reads an external input on the motor
            </summary>
            <param name="axis">The axis</param>
            <param name="input">The input to read</param>
            <returns>Input state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetFaultSignals(System.Int32)">
            <summary>
            Gets the FaultSignals of the specified motor
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>FaultSignals structure</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetOperatingMode(System.Int32)">
            <summary>
            Gets the OperatingMode of the specified motor
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>OperatingMode structure</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetDriveStat(System.Int32)">
            <summary>
            Gets the drivestat of the specified motor
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>ActionStatus structure</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetActionStatus(System.Int32)">
            <summary>
            Gets the action status of the specified motor
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>ActionStatus structure</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.GetWarningStates(System.Int32)">
            <summary>
            Gets the warning status of the specified motor
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>WarningStates structure</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.SchneiderCANMotorController.SetDriveControlRegister(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the drive control register
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="quickstopRelease">if set to <c>true</c> [quickstop release]</param>
            <param name="faultReset">if set to <c>true</c> [fault reset]</param>
            <param name="quickstop">if set to <c>true</c> [quickstop]</param>
            <param name="enable">if set to <c>true</c> [enable]</param>
            <param name="disable">if set to <c>true</c> [disable]</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController">
            <summary>
            Control class for Servotronixs CAN controlled motors
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.ServotronixCANMotorController._lastPositions">
            <summary>Used only for mileage logging. Should not be relied upon for movement calculations.</summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.AxisType">
            <summary>The type of axis this motor controller supports</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.CheckForServoFaults(System.Int32)">
            <summary>
            Checks for a fault on the motor controller
            </summary>
            <param name="axis">axis number</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>
            Flag indicating if the motor is e-stopped
            </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.IsEmergencyStopped(System.Int32)">
            <summary>
            Is the emergency stop pressed
            </summary>
            <param name="axis">The axis number.</param>
            <returns>
            Flag indicating if the motor is e-stopped
            </returns>
            <exception cref="T:Labman.Hardware.MotorControllerException">This method has not been implemented by this type of MotorController</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.IsAxisBusyInternal(System.Int32,Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord)">
            <summary>
            Determines if the axis is currently busy or not.
            Statusword is provided so that in circumstances where the statusword has already been fetched, we can be more efficient and not get it again.
            </summary>
            <param name="axis">Axis number</param>
            <param name="status">A statusword to use</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.IsServoInPosition(System.Int32)">
            <summary>
            Determines if the servo axis is reporting it is in position
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if in position, else false</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to set the logical position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to set the encoder position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position - note encoder positions are NOT checked after the move
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.MoveAbsWithRetry(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position - note encoder positions are NOT checked after the move.
            The move is continually retried if the motor is e-stopped
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The timeout</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Set the encoder ratio for the specified axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="acceleration">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Int32)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction,System.Int32,System.Double)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="direction">The motor direction</param>
            <param name="speed">Speed to rotate at</param>
            <param name="motorCurrentTarget">The target motor current to move with</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.ToggleEnableLine(System.Int32)">
            <summary>
            Toggles the axis enable line, this is used to disable and enable some motors to reset faults
            </summary>
            <param name="axis">Axis CAN Device ID</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch an auxillary output on the controller
            </summary>
            <param name="axis">The axis number to switch the output on</param>
            <param name="output">The output index to switch</param>
            <param name="state">The aux output state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Get the current homing status from the controller, this indicates which stage in the homing process the controller is in
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The current home state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults
            </summary>
            <param name="axis">Axis CAN Device ID</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetMotorStatusSummaryText(System.Int32)">
            <summary>
            Gets the motor status summary text. This is used optionally to display on the axis engineering control.
            </summary>
            <param name="axis">The axis</param>
            <returns>Status string</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetStepsPerRev(System.Int32,System.Int32)">
            <summary>
            Sets the measurement distance per one revolution
            </summary>
            <param name="axis">Axis CAN device ID</param>
            <param name="steps">The steps to set</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetPositionWindow(System.Int32,System.Int32)">
            <summary>
            Sets the position window, if the actual value of the position encoder is within the position window then target position is
            considered to be reached
            </summary>
            <param name="axis">Axis CAN device ID</param>
            <param name="positionWindow">The position window to set</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetPositionWindowTime(System.Int32,System.Int32)">
            <summary>
            Sets the time that the actual position within the position window is measured
            </summary>
            <param name="axis">Axis CAN device ID</param>
            <param name="positionWindowTime">the position window time to set</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetFollowingError(System.Int32,System.Int32)">
            <summary>
            Sets the maximum allowed position error without producing a fault
            </summary>
            <param name="axis">Axis CAN device ID</param>
            <param name="followingError">The following error to set</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetHomeType(System.Int32,Labman.MotionControl.ServotronixAxisSettings.HomeType)">
            <summary>
            Sets the home type
            </summary>
            <param name="axis">Axis CAN device ID</param>
            <param name="homeType">the home type to set</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetResolverAmplitudeRange(System.Int32,System.Int32)">
            <summary>
            Sets the resolver amplitude range
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="range">the percentage to set it to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetMotorMaximumPeakCurrent(System.Int32)">
            <summary>
            Gets the maximum motor current
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The max motor current in amps</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetMotorContinuousCurrent(System.Int32)">
            <summary>
            Gets the maximum motor current
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The max motor current in amps</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetCurrentMotorVelocity(System.Int32)">
            <summary>
            Gets the current motor speed
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The speed</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetCurrentMotorCurrent(System.Int32)">
            <summary>
            Gets the current motor current
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The speed</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetErrorHistory(System.Int32)">
            <summary>
            Gets an error history from the servotronix motor.  Holds 10 values. 
            NOTE: We realised this was a bit useless as it does not remember the error history after initialise is called.
            Nicky left it in current state in case we decided we did need it one day.
            </summary>
            <param name="axis">Axis CAN Device ID</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetHomeType(System.Int32)">
            <summary>
            Queries the motor for the home type that is currently set
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>the home type</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.GetErrorCode(System.Int32)">
            <summary>
            Gets the error code of the last error that occurred in the drive device
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <returns>The error code</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StartTorqueMove(System.Int32,System.Int32)">
            <summary>
            Starts the torque move.
            </summary>
            <param name="axis">The axis.</param>
            <param name="targetTorque">The target torque.</param>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be homed as the emergency stop is triggered</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.IsTorqueReached(System.Int32)">
            <summary>
            Determines whether [is torque reached] [the specified axis].
            </summary>
            <param name="axis">The axis.</param>
            <returns>Flag that indicates whether the torque has been reached</returns>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.MoveType">
            <summary>
            Profile position move types
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SpeedType">
            <summary>
            Speed types
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.OperatingMode">
            <summary>
            Possible drive control modes
            </summary> 
        </member>
        <member name="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.EmergencyErrorCode">
            <summary>
            Enumeration of emergency error codes
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.ControlWord">
            <summary>
            Enumeration of possible states we can set in the control word (register 0x6040)
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord">
            <summary>
            Status word class represents the StatusWord register in the motor
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.OperatingState">
            <summary>
            Operating state enumeration
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.ReadyToSwitchOn">
            <summary>
            Gets or sets a value indicating whether [ready to switch on].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.SwitchOn">
            <summary>
            Gets or sets a value indicating whether [switch on].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.OperationEnabled">
            <summary>
            Gets or sets a value indicating whether [operation enabled].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.Fault">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord"/> is fault.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.QuickStop">
            <summary>
            Gets or sets a value indicating whether [quick stop].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.SwicthOnDisabled">
            <summary>
            Gets or sets a value indicating whether [swicth on disabled].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.VoltageEnabled">
            <summary>
            Gets or sets a value indicating whether [voltage enabled].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.Warning">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord"/> is warning.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.Remote">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord"/> is remote.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.TargetReached">
            <summary>
            Gets or sets a value indicating whether [target reached].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.InternalLimitIsActive">
            <summary>
            Gets or sets a value indicating whether [internal limit is active].
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.Velocity">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord"/> is velocity.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.CurrentOperatingState">
            <summary>
            Gets or sets the state of the current operating.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.#ctor(Labman.Communication.Protocols.CANOpen@,System.Int32)">
            <summary>
            Create a new statusword instance and read in the current status word value
            </summary>
            <param name="canOpenProtocol">The protocol instance in use</param>
            <param name="axis">The axis nodeid to query</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.ReLoadStatus">
            <summary>
            Reloads the drive operating states
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetupMotor(System.Int32)">
            <summary>
            Sets up the motor with default settings
            </summary>
            <param name="axis">Axis CAN Device ID</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.CheckSpeedLimits(System.Int32,System.Int32)">
            <summary>
            Checks the speed limits of the specified speed
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="speed">The speed</param>
            <exception cref="T:System.Exception">Speed must be between 1 and  + speed</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.MoveProfilePosition(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,Labman.Hardware.MotorControllers.ServotronixCANMotorController.MoveType,System.Int32)">
            <summary>
            Moves the axis
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="moveType">Type of the move.</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be homed as the emergency stop is triggered
            or
            Axis move failed as the controller was e/stopped</exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">The move timed out or another error condition occured</exception>
            <exception cref="T:Labman.Hardware.EmergencyStopException">Axis cannot be homed as the emergency stop is triggered
            or
            Axis home failed as the motor entered a fault state
            or
            Axis move failed as the controller was e/stopped</exception>
            <exception cref="T:Labman.Hardware.MotorControllerException">Axis move failed as the operation timed out</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.WriteControlWord(System.Int32,Labman.Hardware.MotorControllers.ServotronixCANMotorController.ControlWord)">
            <summary>
            Writes the specified control word to the axis
            </summary>
            <param name="axis">Axis node id</param>
            <param name="controlWord">Control word to send</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.ChangeOperatingState(System.Int32,Labman.Hardware.MotorControllers.ServotronixCANMotorController.StatusWord.OperatingState,System.Int32)">
            <summary>
            Sets the drive control mode
            </summary>
            <param name="axis">The axis to set for</param>
            <param name="targetOperatingState">The operating state state to set</param>
            <param name="callstackDepth">Parameter to keep track of the callstack depth so it can be limitted</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetVelocityLoopProportionalGain(System.Int32,System.Int32,System.Double)">
            <summary>
            Set the velocity control loop gain
            </summary>
            <param name="axis">The axis to set for</param>
            <param name="rpm">The speed we will be moving at</param>
            <param name="targetCurrent">The target motor current we want to max out at</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetVelocityLoopProportionalGain(System.Int32,System.Double)">
            <summary>
            Set the velocity control loop gain
            </summary>
            <param name="axis">The axis to set for</param>
            <param name="ampsPerRpm">The current (A) per rpm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.SetMaximumCurrent(System.Int32,System.Double)">
            <summary>
            Set motor maximum current
            </summary>
            <param name="axis">Axis number to set</param>
            <param name="current">Maximum motor current in Amps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.ChangeOperatingMode(System.Int32,Labman.Hardware.MotorControllers.ServotronixCANMotorController.OperatingMode)">
            <summary>
            Put the drive in the specified control mode
            </summary>
            <param name="axis">Axis number to set</param>
            <param name="mode">The control mode to set</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.ServotronixCANMotorController.LogContinuousMovement(System.Int32,System.Double)">
            <summary>
            Measures and logs how many rotations the motor has done. Calculates the distance travelled if it's an axis.
            </summary>
            <param name="axis">The axis number</param>
            <param name="revolutionsPerMinute">The angular velocity in revolutions per second. Must be negative if running backwards!</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TReXMotorController">
            <summary>
            This class is used to communicate with a TReX motor controller
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TReXMotorController.MaxMotorPower">
            <summary>
            The maximum motor power value
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.TReXMotorController.InitResponse">
            <summary>
            The string returned by the device if initialisation is sucessful
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TReXMotorController.MotorIndex">
            <summary>
            The index of the motors supported by the controller
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.TReXMotorController.MotorCommands">
            <summary>
            The TReX motor commands
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TReXMotorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.TReXMotorController" /> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TReXMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TReXMotorController.Dispose">
            <summary>
            Dispose method closes comms
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TReXMotorController.IsEmergencyStopped">
            <summary>
            Checks for an E/STOP condition
            </summary>
            <returns>FALSE</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TReXMotorController.StartMotor(System.Int32,System.Int32)">
            <summary>
            Starts a motor.
            DBell added 271118 : Motor 3 ran from Auxillary Power, will only spin the motor in one direction.
            </summary>
            <param name="axis">The axis number.</param>
            <param name="powerPercentage">Specifies the speed percentage to start motor running at.</param>
            <exception cref="T:System.IO.IOException">Fails to send the motor start command</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.TReXMotorController.StopMotor(System.Int32)">
            <summary>
            Stops the motor.
            </summary>
            <param name="axis">The axis number.</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController">
            <summary>
            This class communicates with the cool muscle type motor
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.EnableCommand">
            <summary>Enables motor</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.DisableCommand">
            <summary>Disables motor</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.PositionCommand">
            <summary>Sets a position</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.PauseCommand">
            <summary>Pauses current operation</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.EmergencyStopCommand">
            <summary>Pauses current operation</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.ClearEmergencyStopCommand">
            <summary> Pauses current operation</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.ExecuteCommand">
            <summary>Executes command</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetSpeedCommand">
            <summary>Sets the speed</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetAccelerationCommand">
            <summary>Sets the acceleration</summary> 
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.HomeCommand">
            <summary>homes motor</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.OutputHighCommand">
            <summary>Switches Output high</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.OutputLowCommand">
            <summary>Switches Output Low</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MaxHomeSpeed">
            <summary>max home speed</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MinHomeSpeed">
            <summary>minimum home speed</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MaxHomeStepOff">
            <summary>minimum home step off distance</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MinHomeStepOff">
            <summary>maximum home step off distance</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus">
            <summary>
            Enumeration of possible cool muscle statuses
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus.MotorRunning">
            <summary>Motor is currently running</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus.ErrorOverflow">
            <summary>Error overflow</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus.OverRegenVoltageLimit">
            <summary>Over the voltage limit</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus.OverLoadCurrent">
            <summary>Overload error</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus.InPosition">
            <summary>In position</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus.Disabled">
            <summary>Motor is disabled</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus.PushModeTorqueLimitReached">
            <summary>Torque limit reached during push move</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus.OverTemperature">
            <summary>Over temperature limit</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus.PushModeTimeoutNotReached">
            <summary>Push move timeout not reached</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorStatus.EmergencyStop">
            <summary>Emergency stop</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery">
            <summary>
            Enumeration of all possible motor queries
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.Out1Status">
            <summary>Out 1 Status</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.Out2Status">
            <summary>Out 2 Status</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.InputStatus">
            <summary>Input Status</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.Temperature">
            <summary>Temperature in deg C</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.AnalogInputValueCH2">
            <summary>Analog input value</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.CounterValueCH2">
            <summary>Counter Value</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.PushTimer">
            <summary>Push Timer</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.PowerUpIDAndFirmwareVersion">
            <summary>The power up ID and frimware version</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.AllParameters">
            <summary>All parameters</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.PositionData">
            <summary>Position Data</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.SpeedData">
            <summary>Speed Data</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.AccelerationData">
            <summary>Acceleration Data</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.TimerData">
            <summary>Timer Data</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.PositionError">
            <summary>Position Error</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.CurrentPosition">
            <summary>Current position</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.CurrentSpeed">
            <summary>Current speed</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.CurrentTorque">
            <summary>Real averaged</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MotorQuery.MotorStatus">
            <summary>The current status of the motor</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue">
            <summary>
            Enumeration of possible K Values
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.SetK48Resolution">
            <summary>Sets K48 resolution </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.StartUpResolution">
            <summary>Start up delay - unit ms</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.BaudRate">
            <summary>Uart0 baud rate - K bits</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.SemiFullClosedLoop">
            <summary>Semi/full closed loop - unit 0.1 deg</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.TimeDelayForSemiClosedLoop">
            <summary>Time delay for semi-closed loop - unit ms</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.EventStatus">
            <summary>Event Status</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.QuadratureOutputInterval">
            <summary>Quadrature output interval - pulses</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.TimeDelayForSlowSingalResponse">
            <summary>Time delay for slow signal response - unit 0.1 sec</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.InputSignalToInvert">
            <summary>Invert input signal - 0: True 1: False</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.InputFunctionAtLogicalHighSyntax">
            <summary>Input function at logical high syntax</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.InputFunctionAtRisingEdgeOfQuickResponseSignal">
            <summary>Input function at the rising edge of quick response signal</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.InputFunctionAtFallingEdgeOfQuickResponseSignal">
            <summary>Input function at the falling edge of quick response signal</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.InputFunctionAtTargetVoltageLevelOfSlowResponseSignal">
            <summary>Input function at target voltage level of slow response signal</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.InputFunctionAtRisingEdgeOfSlowResponseSignal">
            <summary>Input function at the rising edge of slow response signal</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.InputFunctionAtFallingEdgeOfSlowResponseSignal">
            <summary>Input function at the falling edge of slow response signal</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.OutputLogic">
            <summary>Output Logic - 0: Open, 1: Closed</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.OutputFunction">
            <summary>Output function</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.AnalogueOutputFunction">
            <summary>Analogue output function</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.PulseInterface">
            <summary>Pulse Interface</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ResolutionAndSpeedUnit">
            <summary>Resolution and speed unit</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.AnalogueInterface">
            <summary>Analogue Interface - 0: Speed Control, 1: Position Control</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.VoltageFilterGain">
            <summary>Voltage filter gain - 5[rad/sec]</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.MaxSpeedForAnalogueControl">
            <summary>Max speed for analogue control - rpm</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.TravelRangeForAnalogueControl">
            <summary>Travel range for analogue control - pulses</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.HomeSpeed">
            <summary>Go origin speed - 100pps</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.HomeAcceleration">
            <summary>Go origin/manual feed acceleration - kpps^2</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.DecelerationRatio">
            <summary>Deceleration Ratio - %</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.OriginDirection">
            <summary>Origin direction - 0:CW, 1:CCW</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.OriginSearchMethod">
            <summary>Origin search method - 0: Stopper, 1:Stopper on power up, 2: Origin, 3: Origin on power up</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.OriginStopperVoltageLevel">
            <summary>Origin stopper voltage level - %</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.OffsetDistanceBetweenMachineOriginMechnicalOrigin">
            <summary>Offset distance between machine origin and mechanical origin - 100 pulses </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ManualFeedSpeed">
            <summary>Manual feed speed - 100pps</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ManualJogTravelDistance">
            <summary>Manual jog travel distance</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.CreepingSpeed">
            <summary>Creeping Speed</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.DigitalSerialIO1and2">
            <summary>Digital Serial IO</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.QuadratureOffsetFromorigin">
            <summary>Quadrature Offset From origin - pulses</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.InPositionTolerance">
            <summary>The in position tolerance - pulses</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.PositionErrorOverflowAlarmLevel">
            <summary>Position Error Overflow Alarm Level - Kpulses</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.OverflowAlarmTimeDelay">
            <summary>Overflow Alarm Time Delay - ms</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.SoftwareLimitPositive">
            <summary>Software Limit Positive - 100 pulses</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.SoftwareLimitNegative">
            <summary>Software Limit Negative - 100 pulses</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.PushmodeCurrentLevel">
            <summary>Pushmode Current Level - %</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.PushTime">
            <summary>Push Time - ms</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.RS485NodeID">
            <summary>RS485 NodeID</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ExternalEncoderInput">
            <summary>External Encoder Input</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.AnalogueInputFunction">
            <summary>Analogue Input Function</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.SlaveMotorBaudRate">
            <summary>Slave Motor Baud Rate - KBits/s</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.DataStreaming">
            <summary>Data Streaming</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.DataStreamingSampleTiming">
            <summary>Data Streaming Sample Timing - ms</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.SCurveFunction">
            <summary>S Curve Function</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.SCurveGain">
            <summary>S Curve Gain</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.SendCarraigeReturn">
            <summary>Send Carraige Return</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.TemperatureLimit">
            <summary>Temperature Limit - Deg C</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.RegenerationVoltageReturnLevel">
            <summary>Regeneration Voltage Return Level - O.1V</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.MergeMotionOutputSignalLength">
            <summary>Merge Motion Output Signal Length - ms</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ExternalTorqueFeedbackPGain">
            <summary>External Torque Feedback P Gain</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ExternalTorqueFeedbackIGain">
            <summary>External Torque Feedback I Gain</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ExternalTorqueFeedbackMeanValue">
            <summary>External Torque Feedback Mean Value - 4.88mV</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ExternalTorqueFeedbackGain">
            <summary>External Torque Feedback Gain</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.LogicBankNumberToStartOnPowerUp">
            <summary>Logic Bank Number To Start On PowerUp</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.CoordinatedMotionSynchronizeMotors">
            <summary>Coordinated Motion Synchronize Motors</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.LogicBankScanperiod">
            <summary>Logic Bank Scan period - ms</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ExternalEncoderResolution">
            <summary>External Encoder Resolution</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ModbusInputRegisterAddress">
            <summary>Modbus Input Register Address</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue.ModbusOutputRegisterAddress">
            <summary>Modbus Output Register Address</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.HomeMethod">
            <summary>
            The different methods for homing the motor
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.HomeMethod.Stopper">
            <summary>Stopper method</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.HomeMethod.StopperHomeOnPowerUp">
            <summary>Stopper home on power up method</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.HomeMethod.OriginSwitch">
            <summary>Origin switch method</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.HomeMethod.OriginSwitchHomeOnPowerUp">
            <summary>Origin switch on power up</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.Dispose">
            <summary>
            Dispose method closes comms
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.IsEmergencyStopped">
            <summary>
            Checks for an E/STOP condition
            </summary>
            <returns>FALSE</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.MotorControllerException">Cool Muscle has timed out when moving axis  + axis +  to position  + position</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.MotorControllerException">Cool Muscle has timed out when moving axis  + axis +  to relative position  + distance</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
            <param name="waitType">The type of wait required</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.ToggleEnableLine(System.Int32)">
            <summary>
            Toggles the axis enable line, this is used to disable and enable some motors to reset faults
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.Disable(System.Int32)">
            <summary>
            Disable the motor
            </summary>
            <param name="axis">The axis to disable</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.Enable(System.Int32)">
            <summary>
            Enable the motor
            </summary>
            <param name="axis">The axis to enable</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch an auxillary output on the controller
            </summary>
            <param name="axis">The axis number to switch the output on</param>
            <param name="output">The output index to switch</param>
            <param name="state">The aux output state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults
            </summary>
            <param name="axis">The axis number</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.GetMotorStatus(System.Int32)">
            <summary>
            Gets the current status of the motor
            </summary>
            <param name="axis">Axis number</param>
            <returns>The motor status</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetHomeOffsetDistance(System.Int32,System.Int32)">
            <summary>
            Sets the distance to step off the home sensor
            </summary>
            <param name="axis">the axis number</param>
            <param name="stepOffDistance">step off distance - max: 32767, min: -32767</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetUpTorqueMove(System.Int32)">
            <summary>
            Sets up the torque move
            </summary>
            <param name="axis">The cool muscle motor id</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.TorqueMove(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Executes the torque move
            </summary>
            <param name="axis">axis number</param>
            <param name="pushMoveCurrent">Percentage (10%-70%)</param>
            <param name="pushTime">Time spent pushing in msec</param>
            <param name="speed">speed of move</param>
            <param name="acceleration">acceleration of move</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.GetSpeed(System.Int32)">
            <summary>
            Gets the current speed of the motor
            </summary>
            <param name="axis">The axis</param>
            <returns>The motor speed</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.GetCurrentTorque(System.Int32)">
            <summary>
            Gets the current motor torque.
            </summary>
            <param name="axis">The axis.</param>
            <returns>
            The motor torque
            </returns>
            <exception cref="T:Labman.Hardware.MotorControllerException">Failed to get a valid status reply from the CoolMuscle</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.WaitForMoveCompletion(System.Int32,System.Int32,System.Int32)">
            <summary>
            Waits until the axis is no longer in a running state or timesout
            </summary>
            <param name="axis">the axis number</param>
            <param name="timeoutSeconds">the timeout in seconds</param>
            <param name="timeToWaitForMotorToStartMovingMilliSeconds">The time in milli-seconds to wait for the motor to start moving before checking for it to stop moving</param>
            <returns>True if motor is no longer in a running state, False if move timeouts</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.GetPacketToSend(System.String)">
            <summary>
            Builds a packet to send to the device
            </summary>
            <param name="command">The command data to send</param>
            <returns>The packet ready to send </returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.ReadKValue(System.Int32,Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue)">
            <summary>
            Reads the K value
            </summary>
            <param name="axis">the axis number</param>
            <param name="kNumber">the k number</param>
            <returns>k value</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.SetKValue(System.Int32,Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController.KValue,System.String)">
            <summary>
            Set the K Value
            </summary>
            <param name="axis">The axis number</param>
            <param name="kNumber">The k number to set</param>
            <param name="value">the value for the k number</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MotorController">
            <summary>
            MotorController Standard Module Definition.
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.MotorController.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MotorController.MotorMileageEventHandler">
            <summary>
            Delegate for a mileage event handler
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The properties of the mileage event</param>
        </member>
        <member name="E:Labman.Hardware.MotorControllers.MotorController.AxisMileageIncrement">
            <summary>
            An event that is fired when the axis mileage of this device increases.
            </summary>
        </member>
        <member name="E:Labman.Hardware.MotorControllers.MotorController.MotorMovesIncrement">
            <summary>
            An event that is fired when the number of motor moves mileage of this device increases.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.OnAxisMileageIncrement(System.Object,Labman.Hardware.MotorControllers.MotorMileageEventArgs)">
            <summary>
            Event handler, to call when the distance an axis has move has increased
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The <see cref="T:Labman.Hardware.MotorControllers.MotorMileageEventArgs"/> specifying the axis index of the axis and increment amount</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.OnMotorMovesIncrement(System.Object,Labman.Hardware.MotorControllers.MotorMileageEventArgs)">
            <summary>
            Event handler, to call when the number of motor moves mileage of a motor has increased
            </summary>
            <param name="sender">The sender</param>
            <param name="args">The <see cref="T:Labman.Hardware.MotorControllers.MotorMileageEventArgs"/> specifying the axis index of the axis and increment amount</param>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MotorController.WaitForCompletion">
            <summary>
            Enumeration defines the possible wait for completion states
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MotorController.WaitForCompletion.DoNotWait">
            <summary>Do not wait for completion</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MotorController.WaitForCompletion.Wait">
            <summary>Wait for completion</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MotorController.StopMode">
            <summary>
            Enumeration of possible stop modes
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MotorController.StopMode.Immediate">
            <summary>Stop immediately</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MotorController.StopMode.RampDown">
            <summary>Stop by ramping down</summary>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MotorController.HomeState">
            <summary> 
            Enumeration of possible homing states
            </summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MotorController.HomeState.Unknown">
            <summary>Unknown home state</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MotorController.HomeState.MovingTowardsSensor">
            <summary>Axis is moving towards the home sensor (search mode)</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MotorController.HomeState.MovingAwayFromSensor">
            <summary>Axis is stepping off the home sensor</summary>
        </member>
        <member name="F:Labman.Hardware.MotorControllers.MotorController.HomeState.HomeComplete">
            <summary>Axis home has completed</summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.MotorController.MotorControllerSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.MotorController.AxisType">
            <summary>The type of axis this motor controller supports</summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>Flag indicating if the motor is e-stopped</returns>
            <exception cref="T:Labman.Hardware.MotorControllerException">This method has not been implemented by this type of MotorController</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.IsEmergencyStopped(System.Int32)">
            <summary>
            Is the emergency stop pressed
            </summary>
            <param name="axis">The axis number.</param>
            <returns>
            Flag indicating if the motor is e-stopped
            </returns>
            <exception cref="T:Labman.Hardware.MotorControllerException">This method has not been implemented by this type of MotorController</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.IsAxisBusy(System.Int32)">
            <summary>
            Determines if the axis is currently busy or not
            </summary>
            <param name="axis">Axis number</param>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.IsServoInPosition(System.Int32)">
            <summary>
            Determines if the servo axis is reporting it is in position
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if in position, else false</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.IsOnHome(System.Int32)">
            <summary>
            Determines if the axis is currently on the home sensor
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>True if the axis is on the home sensor, else False</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetLogicalPosition(System.Int32,System.Double)">
            <summary>
            Sets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the logical position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetEncoderPosition(System.Int32,System.Double)">
            <summary>
            Sets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to set the encoder position to</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.GetLogicalPosition(System.Int32)">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.GetEncoderPosition(System.Int32)">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.Home(System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Homes the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="waitType">The wait type</param>
            <param name="homeTimeout">The timeout in seconds to wait for the move to complete</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.MoveAbsWithRetry(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position - note encoder positions are NOT checked after the move.
            The move is continually retried if the motor is e-stopped
            </summary>
            <param name="axis">Axis CAN Device ID</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The timeout.</param>
            <exception cref="T:Labman.Hardware.MotorControllerException">This method has not been implemented by this type of MotorController</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.MoveAbs(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis to an absolute position
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="position">The position in mm to move to</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.MotorControllerException">This method has not been implemented by this type of MotorController</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.MoveInc(System.Int32,System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Moves the axis by an incremental amount
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="distance">The distance in mm to move</param>
            <param name="waitType">The wait type</param>
            <param name="timeout">The move timeout in seconds.</param>
            <exception cref="T:Labman.Hardware.MotorControllerException">This method has not been implemented by this type of MotorController</exception>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetMotorDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the move direction of the axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetEncoderDirection(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Set the encoder direction of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetHomeTimeout(System.Int32,System.Int32)">
            <summary>
            Set the home timeout of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="timeout">The home timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetHomeSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetHomeChangeDirectionDelay(System.Int32,System.Int32)">
            <summary>
            Set the delay between changing direction during homing of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="delay">The change direction delay in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetHomeOffsetSpeed(System.Int32,System.Int32)">
            <summary>
            Set the home offset speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetInitialSpeed(System.Int32,System.Int32)">
            <summary>
            Set the intial speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetDriveSpeed(System.Int32,System.Int32)">
            <summary>
            Set the drive speed of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="speed">The motor speed (steps/sec)</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetAccelerationRate(System.Int32,System.Int32)">
            <summary>
            Set the acceleration rate of an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="accelerationRate">The acceleration rate</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.StartMotorContinuous(System.Int32,Labman.MotionControl.AxisSettings.Direction)">
            <summary>
            Start an axis moving in a continuous motion
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="direction">The motor direction</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.StopAxis(System.Int32,Labman.Hardware.MotorControllers.MotorController.StopMode,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Stop an axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="stopMode">The stop mode to use</param>
            <param name="waitType">The type of wait required</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.ToggleEnableLine(System.Int32)">
            <summary>
            Toggles the axis enable line, this is used to disable and enable some motors to reset faults
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SwitchAuxOutput(System.Int32,System.Int32,Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch an auxiliary output on the controller
            </summary>
            <param name="axis">The axis number to switch the output on</param>
            <param name="output">The output index to switch</param>
            <param name="state">The aux output state</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.GetCurrentHomeStatus(System.Int32)">
            <summary>
            Get the current homing status from the controller, this indicates which stage in the homing process the controller is in
            </summary>
            <param name="axis">Axis number on the controller</param>
            <returns>The current home state</returns>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.ClearControllerFaults(System.Int32)">
            <summary>
            Clears controller faults
            </summary>
            <param name="axis">Axis number on the on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetMotorRatio(System.Int32,System.Double)">
            <summary>
            Set the motor ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from mm to motor steps</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.SetEncoderRatio(System.Int32,System.Double)">
            <summary>
            Set the encoder ratio for the specified axis
            </summary>
            <param name="axis">Axis number on the controller</param>
            <param name="ratio">Ratio to multiply by to get from encoder pulses to mm</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.CheckForServoFaults(System.Int32)">
            <summary>
            Checks for fault on this motor controller
            </summary>
            <param name="axis">Axis number on the controller</param>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorController.GetMotorStatusSummaryText(System.Int32)">
            <summary>
            Gets the motor status summary text. This is used optionally to display on the axis engineering control.
            </summary>
            <param name="axis">The axis</param>
            <returns>Status string</returns>
        </member>
        <member name="T:Labman.Hardware.MotorControllers.MotorMileageEventArgs">
            <summary>
            Transfers the axis index and mileage increase amount to the event handler.
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllers.MotorMileageEventArgs.#ctor(System.Int32,System.Double)">
            <summary>
            Constructor for <see cref="T:Labman.Hardware.MotorControllers.MotorMileageEventArgs"/>
            </summary>
            <param name="axis">The axis index</param>
            <param name="increment">The mileage increment amount</param>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.MotorMileageEventArgs.Axis">
            <summary>
            The axis index of the axis for which the mileage has increased
            </summary>
        </member>
        <member name="P:Labman.Hardware.MotorControllers.MotorMileageEventArgs.Increment">
            <summary>
            The amount by which this mileage has increased
            </summary>
        </member>
        <member name="T:Labman.Hardware.PIDs.BinderMK720ClimateChamber">
            <summary>
            Control class for a Binder MK climate control chamber
            </summary>
            <seealso cref="T:Labman.Hardware.PIDs.PID" />
        </member>
        <member name="P:Labman.Hardware.PIDs.BinderMK720ClimateChamber.DeviceAddress">
            <summary>
            Gets or sets the 1-byte device address used in the Modbus packet
            </summary>
            <value>
            The device address.
            </value>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.PIDs.BinderMK720ClimateChamber"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.PIDs.BinderMK720ClimateChamber"/> class.
            </summary>
            <param name="deviceAddress">The 1-byte modbus device address.</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.GetTemperatureSetPoint">
            <summary>
            Get the setpoint temperature
            </summary>
            <returns>Temperature in degC</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.GetCurrentTemperature">
            <summary>
            Get the current temperature
            </summary>
            <returns>Temperature in degC</returns>            
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.LittleEndianWordsToBytes(System.Byte[]@)">
            <summary>
            Sequentially swaps pairs of bytes in an array 
            to turn a little endian array of words into a little endian array of bytes
            
            For this use-case the word array is little endian
            but each word in the array is big endian
            
            Swap is in place (ref) in case of (very) long arrays
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol">
            <summary> 
            The Binder Climate Chambers have their own version of the ModBus 'standard'
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.ReadCoilsFunctionCode">
            <summary>
            The read coils function code FC1
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.ReadDiscreteInputFunctionCode">
            <summary>
            The read discrete input function code FC2
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.ReadHoldingRegistersFunctionCode">
            <summary>
            The read holding registers function code FC3
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.ReadInputRegisterFunctionCode">
            <summary>
            The read input register function code
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.WriteSingleCoilFunctionCode">
            <summary>
            The write single coil function code
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.WriteSingleRegisterFunctionCode">
            <summary>
            The write single register function code
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.WriteMultipleCoilsFunctionCode">
            <summary>
            The write multiple coils function code FC15
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.WriteMultipleRegistersFunctionCode">
            <summary>
            The write multiple registers function code FC16
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.ReadWriteMultipleRegistersFunctionCode">
            <summary>
            The read write multiple registers function code FC23
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.#ctor(Labman.Communication.Connection,System.Byte)">
            <summary>
            Creates a new instance of the protocol
            </summary>
            <param name="connection">The communications connection to use</param>
            <param name="address">The address.</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.WriteRegisterValue(System.Int32,System.Int32)">
            <summary>
            Writes a value to a specified MODBUS device register
            </summary>
            <param name="registerAddress">The address of the register to write to</param>
            <param name="registerValue">The value to write into the register</param>
            <returns>Boolean TRUE for success and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.ReadRegisterValue(System.Int32,System.Byte)">
            <summary>
            Reads a value from a MODBUS device register
            </summary>
            <param name="registerAddress">The address of the register to write to</param>
            <param name="registersToRead">The number of registers to read</param>                  
            <returns>The register value</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.ReadCoilValue(System.Int32)">
            <summary>
            Reads the current value of a coil.
            </summary>
            <param name="coilAddress">The coil address.</param>
            <returns>The current value of the coil</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.WriteCoilValue(System.Int32,System.Boolean)">
            <summary>
            Updates a coil value.
            </summary>
            <param name="coilAddress">The coil address.</param>
            <param name="coilValue">if set to <c>true</c> [coil value].</param>
            <returns>The result of the write operation</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.ReadDiscreteInputValue(System.Int32)">
            <summary>
            Reads the discrete input value.
            This function differs to ReadCoil as some devices (moxa e1k) list the digital
            inputs under function 2 (ReadDiscreteInputFunctionCode).
            </summary>
            <param name="inputAddress">The input address.</param>
            <returns> A boolean representing the digital input state.</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.SendModbusPacket(System.Byte,System.Byte[]@)">
            <summary>
            Sends a MODBUS packet to the specified device and obtains a response packet back
            </summary>
            <param name="functionCode">The function code.</param>
            <param name="data">The data.</param>
            <returns>the response</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.BinderMK720ClimateChamber.BinderModBusTCPProtocol.CalcCRC16(System.Byte[])">
            <summary>
            Calculates the CRC 16 checksum of a byte array
            
            Copied directly from
            https://ctlsys.com/support/how_to_compute_the_modbus_rtu_message_crc/
            </summary>
            <param name="message">The message.</param>
            <returns>
            Returns an array of 2 bytes forming the CRC16 checksum
            </returns>
        </member>
        <member name="T:Labman.Hardware.PIDs.CycloPID">
            <summary>
            Control class for Cyclo adaptive temprature controller
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.CycloPID.#ctor">
            <summary>
            Type contructuctor, initialises setting file ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.CycloPID.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.CycloPID.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to use
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.CycloPID.GetTemperatureSetPoint">
            <summary>
            Gets the current set temprature
            </summary>
            <returns>Temp in degC</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.CycloPID.GetCurrentTemperature">
            <summary>
            Gets the current temprature 
            </summary>
            <returns>Temp in degC</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.CycloPID.SetTemperatureSetPoint(System.Double)">
            <summary>
            Sets the set point for the PID controller
            </summary>
            <param name="temperature">The temperature set point to set</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.CycloPID.SendCommand(System.String)">
            <summary>
            Sends a command to the cyclo board
            </summary>
            <param name="command">Command to send</param>
            <returns>Reply from the board</returns>
        </member>
        <member name="T:Labman.Hardware.PIDs.OmronE5ZNPID">
            <summary>
            Control class for an Omron E5ZN PID
            </summary>
        </member>
        <member name="P:Labman.Hardware.PIDs.OmronE5ZNPID.IsChannelOneRunning">
            <summary>
            If channel one is currently active. Note that this property is purely logical based on previous start/stop channel requests during this session. No hardware queries are made.
            </summary>
        </member>
        <member name="P:Labman.Hardware.PIDs.OmronE5ZNPID.IsChannelTwoRunning">
            <summary>
            If channel two is currently active. Note that this property is purely logical based on previous start/stop channel requests during this session. No hardware queries are made.
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.#ctor">
            <summary>
            Type constructor, initializes settings file instance ready for use
            </summary>
        </member>
        <member name="T:Labman.Hardware.PIDs.OmronE5ZNPID.EndCodeValue">
            <summary>
            Enumeration of possible response "end codes"
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.EndCodeValue.NormalCompletion">
            <summary>Normal completion code</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.EndCodeValue.FINSCommandError">
            <summary>FINS Command Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.EndCodeValue.ParityError">
            <summary>Parity Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.EndCodeValue.FramingError">
            <summary>Framing Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.EndCodeValue.OverrunError">
            <summary>Overrun Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.EndCodeValue.BCCError">
            <summary>BCC Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.EndCodeValue.FormatError">
            <summary>Format Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.EndCodeValue.SubAddressError">
            <summary>Sub Address Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.EndCodeValue.FrameLengthError">
            <summary>Frame Length Error</summary>
        </member>
        <member name="T:Labman.Hardware.PIDs.OmronE5ZNPID.ResponseCode">
            <summary>
            Enumeration of possible response codes
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.ResponseCode.NormalCompletion">
            <summary>No errors were found</summary>*
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.ResponseCode.CommandTooLong">
            <summary>The command is too long</summary>*
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.ResponseCode.CommandTooShort">
            <summary>The command is too short</summary>*
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.ResponseCode.NumberOfElementsMismatch">
            <summary>The amount of data does not match the number of elements</summary>*
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.ResponseCode.AreaTypeError">
            <summary>The variable type is invalid</summary>*
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.ResponseCode.ResponseTooLong">
            <summary>The number of elements exceed 6</summary>*
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.ResponseCode.ParameterError">
            <summary>Bit position is not "00."</summary>*
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.ResponseCode.ReadOnlyError">
            <summary>Variable type "C0" was written to</summary>*
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5ZNPID.ResponseCode.OperationError">
            <summary>Non-volatile memory error (EEPROM error)</summary>*
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.SetRunMode(System.Boolean)">
            <summary>
            Sets the run mode of the PID to RUN or STOP
            </summary>
            <param name="run">Set to run</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.SetRunMode(System.Int32,System.Boolean)">
            <summary>
            Sets the run mode of the PID to RUN or STOP on individual channels.
            </summary>
            <param name="channel">The channel to run or stop. Accepts 1 or 2 for channel one or channel two</param>
            <param name="run">True to to set the PID channel run mode to RUN and False to set it to STOP</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.GetNumberOfDecimalPointsInUse(System.Int32)">
            <summary>
            Gets the number of decimal points in use
            </summary>
            <returns>The number of decimal points to use</returns>
            <param name="channel">The channels number</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.SetTemperatureSetPoint(System.Double,System.Int32)">
            <summary>
            Set the setpoint temperature
            </summary>
            <param name="temperature">Temperature in degC</param>
            <param name="channel">The channels number</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.GetTemperatureSetPoint(System.Int32)">
            <summary>
            Get the setpoint temperature
            </summary>
            <param name="channel">The channels number</param>
            <returns>Temperature in degC</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.GetCurrentTemperature(System.Int32)">
            <summary>
            Get the current temperature
            </summary>
            <param name="channel">The channels number</param>
            <returns>Temperature in degC</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.SoftwareReset(System.Int32)">
            <summary>
            Returns the Temperature controller to its initial state when it was turned on. 5-9-13 in the manual
            </summary>
            <param name="channel">The channel.</param>
            <exception cref="T:System.IndexOutOfRangeException">Channel number was out of range</exception>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.SendCommand(System.String)">
            <summary>
            Send a command to the PID and get the reply.
            </summary>
            <param name="command">The command to send</param>
            <returns>The reply from the PID</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5ZNPID.SendCommandWithoutReply(System.String)">
            <summary>
            Send a command to the PID without getting a reply
            </summary>
            <param name="command">The command to send</param>
        </member>
        <member name="T:Labman.Hardware.PIDs.OmronE5CCPID">
            <summary>
            Control class for an Omron E5CC PID
            </summary>
        </member>
        <member name="T:Labman.Hardware.PIDs.OmronE5CCPID.EndCodeValue">
            <summary>
            Enumeration of possible response "end codes"
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.EndCodeValue.NormalCompletion">
            <summary>Normal completion code</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.EndCodeValue.FINSCommandError">
            <summary>FINS Command Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.EndCodeValue.ParityError">
            <summary>Parity Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.EndCodeValue.FramingError">
            <summary>Framing Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.EndCodeValue.OverrunError">
            <summary>Overrun Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.EndCodeValue.BCCError">
            <summary>BCC Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.EndCodeValue.FormatError">
            <summary>Format Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.EndCodeValue.SubAddressError">
            <summary>Sub Address Error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.EndCodeValue.FrameLengthError">
            <summary>Frame Length Error</summary>
        </member>
        <member name="T:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode">
            <summary>
            Enumeration of possible response codes
            </summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.NormalCompletion">
            <summary>No errors were found</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.CommandTooLong">
            <summary>The command is too long</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.CommandTooShort">
            <summary>The command is too short</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.NumberOfElementsMismatch">
            <summary>The amount of data does not match the number of elements</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.AreaTypeError">
            <summary>The variable type is wrong</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.StartAddressOutOfRange">
            <summary>The read start address is out of range</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.EndAddressOutOfRange">
            <summary>The write end address (write start address + number of elements) exceeds the final address of the variable area</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.ResponseTooLong">
            <summary>The number of elements exceeds the maximum</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.ParameterError">
            <summary>Bit position is not “00.”</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.ReadOnlyError">
            <summary>Variable type “C0” was written to</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.OperationError">
            <summary>Non-volatile memory error</summary>
        </member>
        <member name="F:Labman.Hardware.PIDs.OmronE5CCPID.ResponseCode.UnsupportedCommand">
            <summary>The service function for the relevant command is not supported</summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.GetNumberOfDecimalPointsInUse">
            <summary>
            Gets the number of decimal points in use
            </summary>
            <returns>The number of decimal points to use</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.SetRunMode(System.Boolean)">
            <summary>
            Stes the run mode of the PID to RUN or STOP
            </summary>
            <param name="run">Set to run</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.SetTemperatureSetPoint(System.Double)">
            <summary>
            Set the setpoint temperature
            </summary>
            <param name="temperature">Temperature in degC</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.SetAlarmValue(System.Int32,System.Double)">
            <summary>
            Sets the alarm value of a specific alarm on the controller.
            </summary>
            <param name="alarmNumber">The alarm to set the value of.</param>
            <param name="value">The value to set it to.</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.SetAlarmUpperLimit(System.Int32,System.Double)">
            <summary>
            Sets the alarm upper limit of a specific alarm on the controller.
            </summary>
            <param name="alarmNumber">The alarm to set the upper limit of.</param>
            <param name="value">The value to set it to.</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.SetAlarmLowerLimit(System.Int32,System.Double)">
            <summary>
            Sets the alarm lower limit of a specific alarm on the controller.
            </summary>
            <param name="alarmNumber">The alarm to set the lower limit of.</param>
            <param name="value">The value to set it to.</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.GetTemperatureSetPoint">
            <summary>
            Get the setpoint temperature
            </summary>
            <returns>Temperature in degC</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.GetCurrentTemperature">
            <summary>
            Get the current temperature
            </summary>
            <returns>Temperature in degC</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.OmronE5CCPID.SendCommand(System.String)">
            <summary>
            Send a command to the PID
            </summary>
            <param name="command">The command to send</param>
            <returns>The reply from the PID</returns>
        </member>
        <member name="T:Labman.Hardware.PIDs.PID">
            <summary> 
            PID hardware module base class
            </summary>
        </member>
        <member name="P:Labman.Hardware.PIDs.PID.CommunicationInterface">
            <summary>
            The balance classes have access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.PIDs.PID.PIDSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.PIDs.PID.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.PID.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDs.PID.SetTemperatureSetPoint(System.Double)">
            <summary>
            Set the setpoint temperature
            </summary>
            <param name="temperature">Temperature in degC</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.PID.GetTemperatureSetPoint">
            <summary>
            Get the setpoint temperature
            </summary>
            <returns>Temperature in degC</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.PID.GetCurrentTemperature">
            <summary>
            Get the current temperature
            </summary>
            <returns>Temperature in degC</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.PID.SetTemperatureSetPoint(System.Double,System.Int32)">
            <summary>
            Set the setpoint temperature
            </summary>
            <param name="temperature">Temperature in degC</param>
            <param name="channel">The channel number</param>
        </member>
        <member name="M:Labman.Hardware.PIDs.PID.GetTemperatureSetPoint(System.Int32)">
            <summary>
            Get the setpoint temperature
            </summary>
            <param name="channel">The number of the channel</param>
            <returns>Temperature in degC</returns>
        </member>
        <member name="M:Labman.Hardware.PIDs.PID.GetCurrentTemperature(System.Int32)">
            <summary>
            Get the current temperature
            </summary>
            <param name="channel">The number of the channel</param>
            <returns>Temperature in degC</returns>
        </member>
        <member name="T:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler">
            <summary>
            Allows communication with a Julabo Recirculating Cooler
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.GetWorkingTemperature">
            <summary>
            Get working temperature.
            </summary>
            <returns>float, the set working temperature.</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.SetWorkingTemperature(System.Single)">
            <summary>
            Set working temperature.
            </summary>
            <param name="temperature">Specifies the temperature.</param>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.GetActualTemperature">
            <summary>
            Get actual bath temperature..
            </summary>
            <returns>float, actual temperature.</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.GetActualExternalTemperature">
            <summary>
            Get temperature value registered by the external Pt100 sensor
            </summary>
            <returns>float, actual temperature.</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.StartCirculating">
            <summary>
            Start cooler circulating.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.StopCirculating">
            <summary>
            Stops cooler circulating.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.IsCirculating">
            <summary>
            Returns circulating state.
            </summary>
            <returns>bool, true cooler is circulating, false otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.SetCoolingPower(System.Int32)">
            <summary>
            Sets the cooling power
            </summary>
            <param name="percentage">The new cooling power</param>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.GetCoolingPower">
            <summary>
            Gets the cooling power
            </summary>
            <returns>The cooling power</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.SetHeatingPower(System.Int32)">
            <summary>
            Sets the heating power
            </summary>
            <param name="percentage">The new heating power</param>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.GetHeatingPower">
            <summary>
            Get the heating power
            </summary>
            <returns>The heating power</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.SetProbeType(System.Boolean)">
            <summary>
            Set the probe type to use.
            </summary>
            <param name="internalProbe">True = Internal Probe, False = External Probe</param>
            <returns>Boolean success value</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.GetStatusMessage">
            <summary>
            Gets status string from cooler.
            </summary>
            <returns>String, status string message.</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.#ctor">
            <summary>
            Class construction.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.JulaboRecirculatingCooler.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59">
            <summary>
            Allows communication with a Laird PR59 Peltier 
            </summary>
            <seealso cref="T:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler" />
        </member>
        <member name="T:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.ErrorCodes">
            <summary>
            Error code enumeration
            </summary>
        </member>
        <member name="T:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.StatusCodes">
            <summary>
            Status code enumeration
            </summary>
        </member>
        <member name="F:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59._isCirculating">
            <summary>
            Flag to say whether it is circulating or not - internally tracked as device doesn't track itself
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.GetWorkingTemperature">
            <summary>
            Get working temperature.
            </summary>
            <returns>
            float, the set working temperature.
            </returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.GetActualExternalTemperature">
            <summary>
            Gets the actual external temperature.
            </summary>
            <returns>float, the actual external temperature</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.GetActualTemperature">
            <summary>
            Gets actual temperature
            </summary>
            <returns>float, the actual temperature</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.GetSetPointTemperature">
            <summary>
            Get Setpoint temperature
            </summary>
            <returns>float, Set point temperature</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.StartCirculating">
            <summary>
            Start cooler circulating.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.StopCirculating">
            <summary>
            Stops cooler circulating.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.SetWorkingTemperature(System.Single)">
            <summary>
            Set working temperature.
            </summary>
            <param name="temperature">Specifies the temperature.</param>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.IsCirculating">
            <summary>
            Determines whether the cooler is circulating - Internally tracked as device doesn't track itself
            </summary>
            <returns>True, if it is circulating. False, otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.StopLogMessages">
            <summary>
            Stops the log messages.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.GetStatusMessage">
            <summary>
            Gets status string from cooler.
            </summary>
            <returns>
            String, status string message.
            </returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.ClearStatusFlag">
            <summary>
            Clears the status flag.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.LairdPeltierPR59.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler">
            <summary>
             Allows communication with a Recirculating Cooler
            </summary>
        </member>
        <member name="P:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.CommunicationInterface">
            <summary>
            The device has access to a communications interface.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.RecirculatingCoolerSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.GetWorkingTemperature">
            <summary>
            Get working temperature.
            </summary>
            <returns>float, the set working temperature.</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.SetWorkingTemperature(System.Single)">
            <summary>
            Set working temperature.
            </summary>
            <param name="temperature">Specifies the temperature.</param>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.GetActualTemperature">
            <summary>
            Get actual bath temperature..
            </summary>
            <returns>float, actual temperature.</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.GetActualExternalTemperature">
            <summary>
            Get temperature value registered by the external Pt100 sensor
            </summary>
            <returns>float, actual temperature.</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.StartCirculating">
            <summary>
            Start cooler circulating.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.StopCirculating">
            <summary>
            Stops cooler circulating.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.IsCirculating">
            <summary>
            Returns circulating state.
            </summary>
            <returns>bool, true cooler is circulating, false otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.GetStatusMessage">
            <summary>
            Gets status string from cooler.
            </summary>
            <returns>String, status string message.</returns>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolers.RecirculatingCooler.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RecirculatingCoolerException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolerException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception.
            </summary>
            <param name="message">Provide a detailed description of the error.</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor.</remarks>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolerException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception.
            </summary>
            <param name="message">Provide a detailed description of the error.</param>
            <param name="innerException">The inner Exception that is being thrown.</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor.</remarks>
        </member>
        <member name="T:Labman.Hardware.RecirculatingCoolerInvalidReplyException">
            <summary>
            Invalid Reply Exception
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolerInvalidReplyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RecirculatingCoolerInvalidReplyException"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RecirculatingCoolerMethodNotImplementedException">
            <summary>
            Not implemented exception
            </summary>
        </member>
        <member name="M:Labman.Hardware.RecirculatingCoolerMethodNotImplementedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RecirculatingCoolerMethodNotImplementedException"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.EnvironmentSensorException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensorException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.EnvironmentSensorException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.InstrumentException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.InstrumentException.#ctor(System.String)">
            <summary> 
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.InstrumentException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.Rheometers.AntonPaar">
            <summary>
            Class for the Anton Paar rheometer device.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Rheometers.AntonPaar._commsLock">
            <summary>
            Communication lock used to ensure that only single command is send to the device at a time The comms lock
            </summary>
        </member>
        <member name="F:Labman.Hardware.Rheometers.AntonPaar.DefaultCommsTimeout">
            <summary>
            The default communication timeout (ms)
            </summary>
        </member>
        <member name="F:Labman.Hardware.Rheometers.AntonPaar.RunProgramPollingRate">
            <summary>
            How often the Rheometer is polled for measurement data when a program is running
            </summary>
        </member>
        <member name="F:Labman.Hardware.Rheometers.AntonPaar.MaxRetryAttempts">
            <summary>
            The maximum number of times that we will retry sending a command
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.AntonPaar.FaultOccurred">
            <summary>
            Gets or sets a value indicating whether a fault has Fault Occurred.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.StopSpinning">
            <summary>
            Stops the rheometers spindle if it is currently spinning. Note that this will not stop a rheometer program. For that use StopProgram(). 
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.GetMeasureData">
            <summary>
            Get data from the rheometer whilst it is spinning. To be used after start spindle is called. 
            </summary>
            <returns>A RheometerDataPoint object containing speed, torque and viscosity</returns>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.RunProgram(Labman.Hardware.Rheometers.RheometerProgramParameters,System.Int32)">
            <summary>
            Runs a program on an Anton Paar rheometer using parameters from a RheometerProgramParameters DTO.
            </summary>
            <param name="parameters">RheometerProgramParameters DTO containing parameters needed to build a program on the rheometer</param>
            <param name="timeout">Time in seconds to timeout the program if the rheometer doesn't finish in time</param>
            <returns>A List of data points returned from the rheometers program.</returns>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.StartSpinningProgram(System.Double,System.Int32)">
            <summary>
            Start the rheometers spindle spinning at a given rps. Uses the complex command set
            </summary>
            <param name="speedRps">The speed RPS.</param>
            <param name="timeout">The timeout in seconds (this is rounded to multiples of 10s).</param>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.StopProgram">
            <summary>
            Stops the rheometer mid program. Note: Data from the stopped program will be lost.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.StartSpinning(System.Double)">
            <summary>
            Start the rheometers spindle spinning at a given rps.
            </summary>
            <param name="speedRps">The speed in rps to rotate the spindle at.</param>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.IsBobPresent">
            <summary>
            Checks to see if a bob is connected to the rheometer.
            </summary>
            <returns>True if a bob is present.</returns>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.CheckForErrorResponse(System.String,System.String)">
            <summary>
            Checks to see if the rheometer reports and error after receiving a command.
            </summary>
            <param name="sent">Command sent to the rheometer</param>
            <param name="received">Command received from the rheometer</param>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.OpenRheometerComms">
            <summary>
            Opens up a communication interface with the rheometer
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.SendProgramToRheometer(System.String)">
            <summary>
            Sends a string program to the rheometer
            </summary>
            <param name="program">The generated program to send to the rheometer.</param>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.SendRunProgramToRheometer">
            <summary>
            Sends the run program command to rheometer.
            </summary>
            <exception cref="T:Labman.Hardware.RheometerException">If the command fails after retries</exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.SendCommandAndReceiveResponse(System.String)">
            <summary>
            Abstracts the sending and receiving of commands and responses to and from the rheometer. Includes response error checking.
            </summary>
            <param name="request">Command to be sent to the rheometer.</param>
            <returns>The response from the rheometer.</returns>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.SetupRheometerToReceiveProgram">
            <summary>
            Sets up the rheometers spindle info so that it can receive commands.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.BuildProgram(Labman.Hardware.Rheometers.RheometerProgramParameters)">
             <summary>
             Generates a rheometer program string from a ProgramParameters object..
             </summary>
             <param name="programParameters">DTO to pass containing the program parameters and settings</param>
             <returns>Command string to be passed to the rheometer</returns>
             <remarks>
             ==================================================================================================
             The command string is composed out of three parts, Header, Measurement and Ending. 
             
             1. Header: The header can be considered as a constant string of the following form:  :PROG["Test", TEST[(
             
             2. Measurement: The measurement string is composed out of the following blocks:
                     o NDP Number of data points 
                     o DPD Data point duration 
                     o A Averaging 
                     o V Variable  
                     o P Profile 
                     o RP Return parameters 
                     o SS Steady state + event control options
                     o CV Variable for Continuous Value setting
                     o CP Profile for Continuous Value setting
                     
             The blocks are arranged in the following form:
                     o For stepwise(standard) value setting: 
                           PART[(NDP, DPD, A), (), (), (), (V[1, P]), (), (),, (RP), (SS), ()] 
            
                     o For continuous value setting, the blocks are arranged in the following form:  
                           PART[(NDP, DPD, A), (CV[1, CP]), (), (), (), (), (),, (RP), (SS), ()]
             
             3. Ending: The Ending is a constant string of the following form:  )],EXIT[()],CANC[()]] 
             =============================================================================================
             </remarks>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.RunProgram(System.Int32)">
            <summary>
            Runs the current program loaded onto the rheometer if it is ready.
            </summary>
            <param name="timeout">How long to wait before timing out the rheometer in seconds</param>
            <returns>All strings returned by the rheometer appended together.</returns>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.ParseAllRheometerData(System.String,System.String)">
            <summary>
            Parses the data string passed back from the rheometer into a rheometer data points object
            </summary>
            <param name="dataSetName">The name given to this data set</param>
            <param name="rheometerResponseString">The raw string returned by the rheometer after a run</param>
            <returns>The data points extracted</returns>         
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.ParseSpindleResponseAndCalculateSpindleInfo(System.String)">
            <summary>
            Calculates css, csr and mass moment of inertia from data received from the rheometer.
            </summary>
            <param name="response">response received from the rheometer in string format</param>
            <returns>data to pass back to the rheometer. 0 = Moment of inertia, 1 = css, 2 = csr.</returns>            
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.ParseMeasurementData(System.String)">
            <summary>
            Parses the measurement data.
            </summary>
            <param name="data">The data.</param>
            <returns> Converts the string response received into a machine understandable class data object </returns>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Rheometers.AntonPaar"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.AntonPaar.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Rheometers.BrookField">
            <summary>
            A class for the Brookfield rheometer device
            </summary>
        </member>
        <member name="T:Labman.Hardware.Rheometers.BrookField.BrookFieldOperationModes">
            <summary>
            Different modes of operation for the 
            </summary>
        </member>
        <member name="F:Labman.Hardware.Rheometers.BrookField._measureResult">
            <summary>
            The measured results from the device is in a class of its own for ease of use
            </summary>
        </member>
        <member name="F:Labman.Hardware.Rheometers.BrookField._measuredList">
            <summary>
            A list of all the measured values 
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            This will also take remote control of the device
            </summary>
            <exception cref="T:Labman.Hardware.BalanceException">The communication settings have not yet been setup for this device</exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.OfflineMode">
            <summary>
            Offlines the device
            </summary>
            <exception cref="T:Labman.Hardware.BalanceException">The communication settings have not yet been setup for this device</exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.HealthCheck">
            <summary>
            Checks the status of the device
            </summary>
            <exception cref="T:Labman.Hardware.BalanceException">The communication settings have not yet been setup for this device</exception>
            <exception cref="T:Labman.Hardware.RheometerException">
            Error: Version number does not match expected value
            or
            Error communicating with the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.StopSpinning">
            <summary>
            Stops measurement spindle spinning
            </summary>
            <exception cref="T:Labman.Hardware.BalanceException">The communication settings have not yet been setup for this device</exception>
            <exception cref="T:Labman.Hardware.RheometerException">
            Error: Stop command reply does not match expected value
            or
            Error communicating with the device
            </exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.StartSpinning(Labman.Hardware.Rheometers.BrookField.BrookFieldOperationModes,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Commands the builder.
            </summary>
            <param name="mode">The mode.</param>
            <param name="startValue">The start value.</param>
            <param name="endValue">The end value.</param>
            <param name="totalTime">The total time.</param>
            <param name="durationMeasurement">The duration measurement.</param>
            <param name="delta">The delta.</param>
            <param name="programId">The program identifier.</param>
            <returns>A list of objects belonging to the RheometerMeaseureData class</returns>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.ParseResults(System.String)">
            <summary>
            Parses the results.
            </summary>
            <param name="replyRcvd">The reply RCVD.</param>
            <returns>A list of objects belonging to the RheometerMeasureData class</returns>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.OnlineMode">
            <summary>
            Puts the device in offlineMode
            </summary>
            <exception cref="T:Labman.Hardware.BalanceException">The communication settings have not yet been setup for this device</exception>
            <exception cref="T:Labman.Hardware.RheometerException">Error: Online command reply does not match expected value</exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.StopDevice">
            <summary>
            Stops the device.
            </summary>
            <exception cref="T:Labman.Hardware.BalanceException">The communication settings have not yet been setup for this device</exception>
            <exception cref="T:Labman.Hardware.RheometerException">Error: Stop command reply does not match expected value</exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.SendCommand(System.String)">
            <summary>
            Sends the command.
            </summary>
            <param name="command">The command.</param>
            <returns>The device response as a contiguous string</returns>
            <exception cref="T:Labman.Hardware.BalanceException">The communication settings have not yet been setup for this device</exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.BrookField.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Rheometers.BrookField"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Rheometers.RheometerState">
            <summary>
            Enum of rheometer states
            </summary>
        </member>
        <member name="T:Labman.Hardware.Rheometers.DataPointDurationTypes">
            <summary>
            Enum of data point duration types
            </summary>
        </member>
        <member name="T:Labman.Hardware.Rheometers.SetVariableTypes">
            <summary>
            Enum of set variable types
            </summary>
        </member>
        <member name="T:Labman.Hardware.Rheometers.ProfileTypes">
            <summary>
            Enum of profile types
            </summary>
        </member>
        <member name="T:Labman.Hardware.Rheometers.Rheometer">
            <summary>
            Rheometer hardware module base class
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.Rheometer.CommunicationInterface">
            <summary>
            The rheometer classes have access to a communications interface.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.Rheometer.CurrentRheometerState">
            <summary>
            The current rheometer state.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.Rheometer.RheometerSettings">
            <summary>
            The settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.Rheometers.Rheometer.#ctor">
            <summary>
            Type constructor, initializes settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.Rheometer.Initialise">
            <summary>
            The Initialise method is used to setup the device instance and ensure it is ready to be used. 
            This will also take remote control of the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.Rheometer.OfflineMode">
            <summary>
            Brings the device offline
            </summary>
            <exception cref="T:Labman.Hardware.RheometerException">This method has not been implemented by this type of Rheometer</exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.Rheometer.RunProgram(Labman.Hardware.Rheometers.RheometerProgramParameters,System.Int32)">
            <summary>
            Runs a program on the rheometer using parameters from a RheometerProgramParameters DTO.
            </summary>
            <param name="parameters">RheometerProgramParameters DTO containing parameters needed to build a program on the rheometer</param>
            <param name="timeout">Time in seconds to timeout the program if the rheometer doesn't finish in time</param>
            <returns>RheometerDataPoints DTO containing data points returned from the rheometers program</returns>
        </member>
        <member name="M:Labman.Hardware.Rheometers.Rheometer.StopProgram">
            <summary>
            Stops any program running on the rheometer.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.Rheometer.StopSpinning">
            <summary>
            Stops measurement spindle
            </summary>
            <exception cref="T:Labman.Hardware.RheometerException">This method has not been implemented by this type of Rheometer</exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.Rheometer.StartSpinning(System.Double)">
            <summary>
            Starts spinning the measurement spindle
            </summary>
            <param name="speed">The speed.</param>
            <exception cref="T:Labman.Hardware.RheometerException">This method has not been implemented by this type of Rheometer</exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.Rheometer.GetMeasureData">
            <summary>
            Gets Speed and torque data from the system
            </summary>
            <exception cref="T:Labman.Hardware.RheometerException">This method has not been implemented by this type of rheometer</exception>
            <returns>An object of the RheometerMeasureData class</returns>
        </member>
        <member name="M:Labman.Hardware.Rheometers.Rheometer.HealthCheck">
            <summary>
            Checks the status of the device
            </summary>
            <exception cref="T:Labman.Hardware.RheometerException">This method has not been implemented by this type of Rheometer</exception>
        </member>
        <member name="M:Labman.Hardware.Rheometers.Rheometer.IsBobPresent">
            <summary>
            Checks to see if a bob is connected to the rheometer.
            </summary>
            <returns>True if a bob is present.</returns>
        </member>
        <member name="T:Labman.Hardware.Rheometers.RheometerDataPoint">
            <summary>
            This class contains all the measurement data from the device for each measurement instance
            </summary>
        </member>
        <member name="F:Labman.Hardware.Rheometers.RheometerDataPoint.InvalidMeasurementData">
            <summary>
            Value to set if invalid data is returned by the rheometer
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.Name">
            <summary>
            The name of this data point
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.Time">
            <summary>
            The time after the start of the program in which the measurement was taken
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.Torque">
            <summary>
            Gets or sets the Torque measured
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.Temperature">
            <summary>
            Gets or sets the Temperature measured
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.ShearRate">
            <summary>
            Gets or sets the ShearRate calculated
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.ShearStress">
            <summary>
            Gets or sets the ShearSTress calculated
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.Viscosity">
            <summary>
            Gets or sets the Viscosity calculated
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.RawData">
            <summary>
            Raw string returned from the rheometer for this data point.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.PointNumber">
            <summary>
            Gets or sets the point number.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.Part">
            <summary>
            Gets or sets the part.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.NumberOfRawDataPoints">
            <summary>
            Gets or sets the number of raw data points.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerDataPoint.Info">
            <summary>
            Gets or sets the information.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.RheometerDataPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Rheometers.RheometerDataPoint"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Rheometers.RheometerProgramParameters">
            <summary>
            DTO containing parameters for a rheometer program.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.ProgramName">
            <summary>
            The name of the program.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.DataPointDurationType">
            <summary>
            The data point duration type
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.NumberOfDataPoints">
            <summary>
            The number of data points to capture
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.DataPointCaptureInterval">
            <summary>
            The capture interval (seconds) between each data point when running a constant duration type
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.DataPointRampFirstPoint">
            <summary>
            When to take the first point when running a ramp based duration type
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.DataPointRampFinalPoint">
            <summary>
            When to take the last point when running a linear duration type
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.DataPointRampPenultimatePoint">
            <summary>
            When to take the penultimate point when running a ramp duration type. Note that this is calculated from the first and final data points.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.DataPointSteadyStateAllowance">
            <summary>
            The percentage tolerance for a steady state to be registered.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.DataPointSteadyStatePointsPerInspection">
            <summary>
            The number of datapoints to be taken once a steady state has been reached. Used when OnSteadyStateStopOrNext is chosen as a DPD type.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.DataPointSteadyStateRawPointsPerInspection">
            <summary>
            The duration in which to capture raw data once steady state has been reached. Used when OnSteadyStateGenerateDataPoint is chosen as a DPD type.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.DataPointSteadyStateTimeout">
            <summary>
            The timeout if a steady state is not reached. Used when OnSteadyStateGenerateDataPoint is chosen as a DPD type.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.StepwiseValueSetting">
            <summary>
            Gets or sets a value indicating whether stepwise (recommended) or continous value setting is used.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.SetVariableType">
            <summary>
            The set variable type (Shear Rate or Shear Stress)
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.ProfileType">
            <summary>
            The profile type
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.ProfileConstantValue">
            <summary>
            Data capture period when running a continuous profile 
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.ProfileRampStartValue">
            <summary>
            Start value of a ramp profile
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.ProfileRampEndValue">
            <summary>
            End value of a ramp profile
            </summary>
        </member>
        <member name="P:Labman.Hardware.Rheometers.RheometerProgramParameters.ProfileValueList">
            <summary>
            Value list for running a value list profile
            </summary>
        </member>
        <member name="M:Labman.Hardware.Rheometers.RheometerProgramParameters.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.EpsonRobotArm">
            <summary>
            Standard module to communicate with the Epson RC+ API 7.0, used to control Epson arms.
            </summary>
            <remarks>This module requires that the arm controller has the option API enabled. This can be purchased with the arm, or enabled afterward with a serial key.</remarks>
        </member>
        <member name="T:Labman.Hardware.RobotArms.EpsonRobotArm.RobotArmEventHandler">
            <summary>
            Event handler delegate
            </summary>
            <param name="sender">Event originator</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="E:Labman.Hardware.RobotArms.EpsonRobotArm.RobotArmEvent">
            <summary>
            Epson Robot Arm event
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.EpsonRobotArm.EpsonRobotArmSettings">
            <summary>
            The Settings for the Robot Arm
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.EpsonRobotArm.RobotArmUIType">
            <summary>
            The settings user control for hardware configuration
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.#ctor">
            <summary>
            Default constructor for the module
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.Dispose">
            <summary>
            Disposes of the module
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.Initialise">
            <summary>
            Initialises the arm
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.IsBusy">
            <summary>
            Check to see if the arm is currently busy
            </summary>
            <returns>True if the arm is busy, false otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.IsEmergencyStopped">
            <summary>
            Checks to see if the arm is currently in an emergency stop state
            </summary>
            <returns>True if the arm is EStopped, false otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.Enable(System.Boolean)">
            <summary>
            Enables the arm motors
            </summary>
            <param name="enable">True to enable the motors, false to disable the motors</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.RunProgram(System.String,System.Boolean)">
            <summary>
            Runs a program (function) on the arm.
            </summary>
            <param name="programName">The name of the function in Epson RC</param>
            <param name="waitForCompletion">Not currently used</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.SetSpeedOverride(System.Int32)">
            <summary>
            Sets the joint move speed.
            </summary>
            <param name="speedPercentage">The percentage of full speed</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.SetPowerHigh">
            <summary>
            Sets the arm power to high. This equates to faster moves
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.SetPowerLow">
            <summary>
            Sets the arm power to low. This equates to slower moves
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.RunProgram(System.String,System.String[])">
            <summary>
            Runs a program (function) on the arm
            </summary>
            <param name="programName">The name of the function in Epson RC</param>
            <param name="parameters">A list of parameters to pass to the function. These must be ordered the same as in Epson RC.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.RunProgram(System.String,System.String)">
            <summary>
            Runs a program (function) on the arm
            </summary>
            <param name="programName">The name of the function in Epson RC</param>
            <param name="parameters">A comma separated list of parameters to pass to the function. These must be ordered the same as in Epson RC.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.IsFaulted">
            <summary>
            Check to see if the arm is in a fault state
            </summary>
            <returns>True if the arm is in a fault state, false otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.GetErrorCode">
            <summary>
            Gets the error code from the arm if it's in a fault state
            </summary>
            <returns>The integer error code</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.IsPaused">
            <summary>
            Checks to see if the arm program is paused
            </summary>
            <returns>True if the arm is paused, false otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.WarningIsActive">
            <summary>
            Checks to see if there are any active warnings on the arm
            </summary>
            <returns>True if there's an active warning, false otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.GetWarningCode">
            <summary>
            Gets the warning code from the arm if the warning flag is set
            </summary>
            <returns>The warning error code</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.IsAtHome">
            <summary>
            Checks to see if the arm is at its home position
            </summary>
            <returns>True if the arm is at home, false otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.GetToolNumber">
            <summary>
            Gets the currently loaded tool
            </summary>
            <returns>The number of the tool</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.SetToolNumber(System.Int32)">
            <summary>
            Sets the currently loaded tool
            </summary>
            <param name="toolNumber">The tool number</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.SetLinearSpeed(System.Single)">
            <summary>
            Sets the speed for linear interpolated moves
            </summary>
            <param name="speed">The speed in mm/sec</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.EpsonRobotArm.SetLinearAcceleration(System.Single,System.Single)">
            <summary>
            Sets the acceleration for linear interpolated moves
            </summary>
            <param name="acceleration">The acceleration in mm/sec²</param>
            <param name="deceleration">The deceleration in mm/sec²</param>
        </member>
        <member name="T:Labman.Hardware.RobotArms.FanucRobotArm">
            <summary>
            Hardware Class for communication with a Fanuc robot arm using Fanuc Robot Interface
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.FanucRobotArm.IoState">
            <summary>
            IO State's that can be set/queried using Fanuc Robot Interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.FanucRobotArmSettings">
            <summary>
            The Settings for the Robot Arm
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.RobotArmUIType">
            <summary>
            Type for the robot arm user control view model
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.ClearFaults">
            <summary>
            Clears faults on the Robot Arm Controller
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.Dispose">
            <summary>
            Disposes of the current instance
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.Enable(System.Boolean)">
            <summary>
            Enables the Robot Arm
            </summary>
            <param name="enable">Flag to say whether to enable or not</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.GetCurrentPosition">
            <summary>
            Gets the current position of the arm.
            Note: this is the position within the User Frame
            </summary>
            <returns>The current position</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.GetCurrentJointPosition">
            <summary>
            Gets the current position of the arm.
            </summary>
            <returns>The current position</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.GetFaultMessage">
            <summary>
            Gets the current active fault message from the controller
            </summary>
            <returns>The current fault message</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.GetToolNumber">
            <summary>
            Gets the currently set tool number on the controller
            </summary>
            <returns>The current tool number</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.GetUserFrameNumber">
            <summary>
            Gets the currently set User Frame number on the controller
            </summary>
            <returns>The current User Frame</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.Initialise">
            <summary>
            Initialise the Fanuc Arm
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.IsBusy">
            <summary>
            Check to see if the arm is currently performing an operation
            </summary>
            <returns>True if the arm is busy, false otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.IsEmergencyStopped">
            <summary>
            Checks to see if the robot arm has been E-Stopped
            </summary>
            <returns>True if the arm is e-stopped, false otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.RunProgram(System.String,System.Boolean)">
            <summary>
            Runs a program on the robot arm based off an internal list of program names
            </summary>
            <param name="programName">The program name</param>
            <param name="waitForCompletion">If true, execution will only return after the program has completed, if false execution will return instantly</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.IsFaulted">
            <summary>
            Checks to see if the controller is in a fault state
            </summary>
            <returns>True if the controller is in a fault state, false otherwise</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.ReadRobotInput(System.Int32)">
            <summary>
            Reads an input from the robot arm
            </summary>
            <param name="index">The input index</param>
            <returns>The state</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.RunProgram(System.Byte,System.Boolean)">
            <summary>
            Runs a program stored on the controller
            </summary>
            <param name="programNumber">The PNS number of the program to run</param>
            <param name="waitForCompletion">Flag to wait for completion of the program before returning</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.SetRegisterPosition(System.Int32,Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition)">
            <summary>
            Sets a position in the Position Register on the controller
            </summary>
            <param name="index">The controller's Position Register (PR[]) index to set</param>
            <param name="position">The Position Data</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.SetRegisterPosition(System.Int32,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16,System.Int16)">
            <summary>
            Sets a position in the Position Register on the controller
            </summary>
            <param name="index">The controller's Position Register (PR[]) index to set</param>
            <param name="x">The 'X' component of the position</param>
            <param name="y">The 'Y' component of the position</param>
            <param name="z">The 'Z' component of the position</param>
            <param name="w">The 'W' component of the position</param>
            <param name="p">The 'P' component of the position</param>
            <param name="r">The 'R' component of the position</param>
            <param name="extended1">The Extended Axis 1 component of the position</param>
            <param name="extended2">The Extended Axis 2 component of the position</param>
            <param name="extended3">The Extended Axis 3 component of the position</param>
            <param name="userFrameNumber">The User Frame Number of the position</param>
            <param name="userToolNumber">The Tool Frame Number of the position</param>
            <param name="posture1">Posture Flag 1 for the position</param>
            <param name="posture2">Posture Flag 2 for the position</param>
            <param name="posture3">Posture Flag 3 for the position</param>
            <param name="posture4">Posture Flag 4 for the position</param>
            <param name="turnNumber1">Turn Number 1 for the position</param>
            <param name="turnNumber2">Turn Number 2 for the position</param>
            <param name="turnNumber3">Turn Number 3 for the position</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.SetNumRegister(System.Int32,System.Single)">
            <summary>Sets the value of a number register</summary>
            <param name="index">the register index</param>
            <param name="value">the value to set</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.GetNumRegister(System.Int32)">
            <summary>Gets the value of a number register</summary>
            <param name="index">The index of the register</param>
            <returns>The register value</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.GetRegisterPositionJoint(System.Int32)">
            <summary>Gets the value of a position register as a joint position</summary>
            <param name="index">The register index</param>
            <returns>The register value as a joint position</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.GetRegisterPosition(System.Int32)">
            <summary>Gets a position register as an XYZWPR position</summary>
            <param name="index">The register index</param>
            <returns>The register position as an XYZ positoin</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.SetRobotOutput(System.Int32,Labman.Hardware.RobotArms.FanucRobotArm.IoState)">
            <summary>
            Set an output on the robot arm
            </summary>
            <param name="index">The output index</param>
            <param name="state">The state to set the output to</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.SetDigitalOutput(System.Int32,Labman.Hardware.RobotArms.FanucRobotArm.IoState)">
            <summary>
            Sets a Fanuc digital output
            </summary>
            <param name="index">The output index</param>
            <param name="state">The state to set the output to</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.SetSpeedOverride(System.Int32)">
            <summary>
            Sets the speed override for the arm
            </summary>
            <param name="speedPercentage">The percentage to set</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.SetToolNumber(System.Int32)">
            <summary>
            Sets the current Tool Frame Number on the controller
            </summary>
            <param name="toolNumber">The tool frame number</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.SetUserFrameNumber(System.Int32)">
            <summary>
            Sets the current User Frame number on the controller
            </summary>
            <param name="userFrameNumber">The tool frame number</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.Alarm">
            <summary>Gets the current alarms message from the robot arm</summary>
            <returns>The current alarms message from the robot arm</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.SetProgramList(System.Collections.Generic.Dictionary{System.String,System.Byte})">
            <summary>
            Sets a list of friendly names for programs, and their corresponding PNS number on the arm
            </summary>
            <param name="programList">The list of programs and their PNS number</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.SetRobotParameters">
            <summary>
            Register components of the Fanuc Robot Interface
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.FanucRobotArm.FanucPosition">
            <summary>
            base position type
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.FanucPosition.UserFrameNumber">
            <summary>
            The position's User Frame Number
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.FanucPosition.UserToolNumber">
            <summary>
            The position's Tool Frame Number
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.FanucRobotArm.JointPosition">
            <summary>
            A reprisentation of a Joint position for Fanuc Robots
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.JointPosition.J1">
            <summary>
            Joint 1 in degrees
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.JointPosition.J2">
            <summary>
            Joint 2 in degrees
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.JointPosition.J3">
            <summary>
            Joint 3 in degrees
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.JointPosition.J4">
            <summary>
            Joint 4 in degrees
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.JointPosition.J5">
            <summary>
            Joint 5 in degrees
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.JointPosition.J6">
            <summary>
            Joint 6 in degrees
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.JointPosition.J7">
            <summary>
            Joint 7
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.JointPosition.J8">
            <summary>
            Joint 8
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.JointPosition.J9">
            <summary>
            Joint 9
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition">
            <summary>
            A reprisentation of a cartesian position for Fanuc robots
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.ExtendedAxis1">
            <summary>
            Position of Extended Axis 1 in mm
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.ExtendedAxis2">
            <summary>
            Position of Extended Axis 2 in mm
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.ExtendedAxis3">
            <summary>
            Position of Extended Axis 3 in mm
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.P">
            <summary>
            P (rotation about the Y axis) in degrees
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.PostureFlag1">
            <summary>
            Posture Flag 1
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.PostureFlag2">
            <summary>
            Posture Flag 2
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.PostureFlag3">
            <summary>
            Posture Flag 3
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.PostureFlag4">
            <summary>
            Posture Flag 4
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.R">
            <summary>
            R (rotation about the Z axis) in degrees
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.TurnNumber1">
            <summary>
            Turn Number 1
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.TurnNumber2">
            <summary>
            Turn Number 2
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.TurnNumber3">
            <summary>
            Turn Number 3
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.W">
            <summary>
            W (rotation about the X axis) in degrees
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.X">
            <summary>
            X in mm
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.Y">
            <summary>
            Y in mm
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.Z">
            <summary>
            Z in mm
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition.ToString">
            <summary>Creates a string representation of this <see cref="T:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition"/></summary>
            <returns>A string representation of this <see cref="T:Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition"/></returns>
        </member>
        <member name="T:Labman.Hardware.RobotArms.FanucRobotArm.FanucRobotInterface">
            <summary>
            The felds exposed by the Fanuc Robot Interface
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.KawasakiRobotArm">
            <summary>
            Kawasaki Robot Arm Class
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.KawasakiRobotArm.RobotArmUIType">
            <summary>
            Type for the robot arm user control view model
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>Flag indicating if the motor is e-stopped</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.Enable(System.Boolean)">
            <summary>
            Set the enabled state of the arm, or turn the servo's on/off
            </summary>
            <param name="enable">True to enable / False to disable</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.IsBusy">
            <summary>
            Is the arm busy
            </summary>
            <returns>Flag indicating if the arm is running</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.ClearFaults">
            <summary>
            Clear any faults on the controller
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.RunProgram(System.String,System.Boolean)">
            <summary>
            Run a named program
            </summary>
            <param name="programName">program name</param>
            <param name="waitForCompletion">whether we wait for the progream to finish before returning</param>
            <exception cref="T:Labman.Hardware.RobotArmException">Timeout waiting for program to start running.</exception>
            <exception cref="T:Labman.Hardware.RobotArmException">Timeout waiting for program to start running.</exception>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.SetProgramVariable(System.String,System.String,System.String)">
            <summary>
            Set a program variable
            </summary>
            <param name="programName">Name of the program.</param>
            <param name="variableName">Name of the variable.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.SetSpeedOverride(System.Int32)">
            <summary>
            Set the speed override of the arm
            </summary>
            <param name="speedPercentage">The speed percentage.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.SendCommandAndGetReply(System.String)">
            <summary>
            Sends a command to the controller and gets reply.
            </summary>
            <param name="command">Specifies the command to send.</param>
            <returns>String, the reply from the controller.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.SystemSwitch(System.String)">
            <summary>
            Checks the status of a system switch
            </summary>
            <param name="name">The name of the switch to check</param>
            <returns>True for ON, false for OFF</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.OpenComms">
            <summary>
            Opens communications with the robot controller.
            </summary>
            <returns>bool, true if successful, false otherwise.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.CloseComms">
            <summary>
            Closes controller communications.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.SetServoState(Labman.Hardware.RobotArms.KawasakiRobotArm.ServoStates)">
            <summary>
            Sets the state of the servos.
            </summary>
            <param name="state">Specifies the state to set servos to.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.ServoState">
            <summary>
            Returns the state of the servo motors.
            </summary>
            <returns> ServoStates.On is returned if the servos are on,  ServoStates.Off is 
            returned oterwise.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.GetControllerErrorNumbers">
            <summary>
            Get controller error numbers.
            </summary>
            <returns>Reference to a ControllerErrorNums object containing error number and level.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.GetErrorMessage(System.Int32)">
            <summary>
            Requests error message for a specified error number.
            </summary>
            <param name="errorNum">Specifies the error number.</param>
            <returns>Error message for spcified error number.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.GetControllerError">
            <summary>
            Get controller error information.
            </summary>
            <returns>Reference to a ControllerError object coontaining error numbers and description.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.CreateProgram(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Creates a program on the controller.
            </summary>
            <param name="programName">Specifies the name for the program.</param>
            <param name="programLines">List containing the program lines.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.ChangeProgramPosition(System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Changes a position in a program.
            </summary>
            <param name="programName">Specifies the name of the program.</param>
            <param name="positionName">Specifies the position to tach.</param>
            <param name="f1">Position data.</param>
            <param name="f2">Position data.</param>
            <param name="f3">Position data.</param>
            <param name="f4">Position data.</param>
            <param name="f5">Position data.</param>
            <param name="f6">Position data.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.JointMove(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Moves arm to specified joint positions.
            </summary>
            <param name="j1">Specifies position for joint 1.</param>
            <param name="j2">Specifies position for joint 2.</param>
            <param name="j3">Specifies position for joint 3.</param>
            <param name="j4">Specifies position for joint 4.</param>
            <param name="j5">Specifies position for joint 5.</param>
            <param name="j6">Specifies position for joint 6.</param>
            <param name="speed">Specifies the speed for move.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.XYZMove(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Moves arm to specified xyzabc position.
            </summary>
            <param name="x">Specifies x position.</param>
            <param name="y">Specifies y position.</param>
            <param name="z">Specifies z position.</param>
            <param name="a">Specifies a position.</param>
            <param name="b">Specifies b position.</param>
            <param name="c">Specifies c position.</param>
            <param name="speed">Specifies the speed for move.</param>
            <param name="moveInStraightLine">Specifies whether to move in a straight line.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.GetProgramDirectory">
            <summary>
            Gets list of programs from controller.
            </summary>
            <returns>String list of programs.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.GetProgram(System.String)">
            <summary>
            Gets a program from the controller.
            </summary>
            <param name="programName">Specifies the name of the program to get.</param>
            <returns>Program code is returned as a list of strings.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.GetProgramPositions(System.String)">
            <summary>
            Gets a list of positions defined in a specified program.
            </summary>
            <param name="programName">Specifies the program name.</param>
            <returns>List of positions.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.GetProgramXYZABCPosition(System.String,System.String)">
            <summary>
            Gets a world coordinate position from a program.
            </summary>
            <param name="programName">Specifies the program.</param>
            <param name="positionName">Specifies the position name.</param>
            <returns>Reference to a XYZABCPosition object containing position.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.GetPrograms">
            <summary>
            Gets programs from controller and returns.
            </summary>
            <returns>A list of ASPrograms is returned.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.GetCurrentXYZPosition">
            <summary>
            Gets the current robot position in world coordinates.
            </summary>
            <returns>Reference to a XYZABCPosition object containing the robots current position.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.KawasakiRobotArm.GetCurrentJointPosition">
            <summary>
            Gets the current robot position as joint positions. 
            </summary>
            <returns>Reference to a JointPosition object containing the robots current joint positions.</returns>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm">
            <summary>
            Mitsubishi Robot Arm Class
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.DataType">
            <summary>
            Enumeration on program variable data types
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.HandStates">
            <summary>
            Enumeration of hand states.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.JogDirections">
            <summary>
            Enumeration of jog directions.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.JogType">
            <summary>
            Enumeration of jog types.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.OperationStates">
            <summary>
            Enumeration of operation states.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.ServoStates">
            <summary>
            Enumeration of servo states.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.StopStates">
            <summary>
            Enumeration of stop states.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.IsRealtimeMoveRunning">
            <summary>
            Whether a real-time move is running
            <seealso cref="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MovePathRealTime(System.Collections.Generic.IEnumerable{Labman.Hardware.RobotArms.MitsubishiRobotArm.ArmPosition},System.Double)"/>
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.RobotArmUIType">
            <summary>
            Type for the robot arm user control view model
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.ChangeProgramPosition(System.String,System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Nullable{System.Single},System.Nullable{System.Single},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>Changes a position in a program.</summary>
            <param name="programName">Specifies the name of the program.</param>
            <param name="positionName">Specifies the position to tach.</param>
            <param name="f1">Position data.</param>
            <param name="f2">Position data.</param>
            <param name="f3">Position data.</param>
            <param name="f4">Position data.</param>
            <param name="f5">Position data.</param>
            <param name="f6">Position data.</param>
            <param name="f7">Optional 7th co-ordinate (e.g. L1)</param>
            <param name="f8">Optional 8th co-ordinate (e.g. L2)</param>
            <param name="sf1">Optional posture flag 1</param>
            <param name="sf2">Optional posture flag 2</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.ClearFaults">
            <summary>
            Clear any faults on the controller
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.CloseComms">
            <summary>
            Closes controller communications.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.CloseReatimeControl(System.Boolean,System.Int32)">
            <summary>
            Closes the reatime control connection.
            </summary>
            <param name="waitForProgramCompletion">if set to <c>true</c> [wait for program completion].</param>
            <param name="timeout">The timeout length in ms.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.ConnectRealtimeControl(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Connects the realtime control.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="mxtProgram">The MXT program.</param>
            <param name="mxtProgramParameters">The MXT program parameters.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.ConnectRealtimeControl(System.String,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Connects the realtime control.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="timeout">The timeout length in ms.</param>
            <param name="mxtProgram">The MXT program.</param>
            <param name="mxtProgramParameters">The MXT program parameters.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.ConnectRealtimeControl(System.String,System.Int32,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Connects the realtime control.
            </summary>
            <param name="ipAddress">The ip address.</param>
            <param name="port">The port.</param>
            <param name="timeout">The timeout length in ms.</param>
            <param name="mxtProgram">The MXT program.</param>
            <param name="mxtProgramParameters">The MXT program parameters.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.CreateProgram(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a program on the controller.
            </summary>
            <param name="programName">Specifies the name for the program.</param>
            <param name="programLines">List containing the program lines.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.Enable(System.Boolean)">
            <summary>
            Set the enabled state of the arm, or turn the servo's on/off
            </summary>
            <param name="enable">True to enable / False to disable</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetControllerErrors">
            <summary>
            Get controller error information.
            </summary>
            <returns>Reference to a ControllerError object coontaining error numbers and description.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetCurrentJointPosition">
            <summary>
            Gets the current robot position as joint positions.
            </summary>
            <returns>Reference to a JointPosition object containing the robots current joint positions.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetCurrentPositionPacket">
            <summary>
            Gets the current position packet.
            </summary>
            <returns>The current position packet</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetCurrentXYZPosition">
            <summary>Gets the current robot position in world coordinates.</summary>
            <returns>
            Reference to a XYZABCPosition object containing the robots current position.
            If in simulation mode, returns new XYZABC position
            </returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetErrorMessage(System.Int32)">
            <summary>
            Requests error message for a specified error number.
            </summary>
            <param name="errorNum">Specifies the error number.</param>
            <returns>Error message for spcified error number.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetHandState(System.Int32)">
            <summary>
            Returns the state of a specified hand (output).
            </summary>
            <param name="hand">Specifies the hand.</param>
            <returns>The hand state is returned.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetHandStates(Labman.Hardware.RobotArms.MitsubishiRobotArm.HandStates[])">
            <summary>
            Gets the state of the hand outputs. These can then be retrieved via the handstate
            </summary>
            <param name="simulatedHandStates"> Parameter to input simulated hand states</param>
            <returns>A 4 element array with the states of each hand</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetInput(System.Int32)">
            <summary>
            Gets the value of an input
            </summary>
            <param name="inputNo">The identifier of the input</param>
            <returns>The state of the input</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetProgram(System.String)">
            <summary>
            Gets a single program from the controller.
            </summary>
            <param name="programName">The name of the program to get</param>
            <returns>A melfa basic program.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetProgramCode(System.String)">
            <summary>
            Gets a program's code from the controller.
            </summary>
            <param name="programName">Specifies the name of the program to get.</param>
            <returns>Program code is returned as a list of strings.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetProgramDirectory">
            <summary>
            Gets list of programs from controller.
            </summary>
            <returns>String list of programs.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetProgramPosition``1(System.String,System.String)">
            <summary>
            Gets a world coordinate position from a program.
            </summary>
            <typeparam name="T">The position type to search for</typeparam>
            <param name="programName">Specifies the program.</param>
            <param name="positionName">Specifies the position name.</param>
            <returns>Reference to an object of the specified type containing position data.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetProgramPositions(System.String)">
            <summary>
            Gets a list of positions defined in a specified program.
            </summary>
            <param name="programName">Specifies the program name.</param>
            <returns>List of positions.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetPrograms">
            <summary>
            Gets programs from controller and returns.
            </summary>
            <returns>A list of Programs is returned.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetProgramVariableValue(System.String,System.String,Labman.Hardware.RobotArms.MitsubishiRobotArm.DataType,System.String)">
            <summary>
            Reads the value of a program variable from the controller. Should only be used after a program has completed
            </summary>
            <param name="programName">Name of the program that the variable is defined in.</param>
            <param name="variableName">Name of the variable.</param>
            <param name="variableType">The data type of the variable.</param>
            <param name="simulatedValue">The value to return in simulation mode.</param>
            <returns>The value of a program variable</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetRobotOperationTime">
            <summary>
            Get the robot's operation time information
            </summary>
            <returns>The operation time information</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetSpeedOverride">
            <summary>
            Gets the speed override.
            </summary>
            <returns>
            the speed override
            if in simulation mode, returns 0
            </returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.GetTool(System.String)">
            <summary>
            Gets the robot tool.
            </summary>
            <param name="program">A program. Globals is a sensible one to use.</param>
            <returns>The robots tool</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.IsBusy">
            <summary>
            Is the arm busy
            </summary>
            <returns>Flag indicating if the arm is running</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>Flag indicating if the motor is e-stopped</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.Jog(System.Int32,Labman.Hardware.RobotArms.MitsubishiRobotArm.JogDirections,Labman.Hardware.RobotArms.MitsubishiRobotArm.JogType)">
            <summary>
            Jogs a specified axis.
            </summary>
            <param name="axis">Specifies the axis.</param>
            <param name="direction">Specifies the direction to jog in.</param>
            <param name="type">Specifies the jog type.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointMove(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Moves arm to specified joint positions.
            </summary>
            <param name="j1">Specifies position for joint 1.</param>
            <param name="j2">Specifies position for joint 2.</param>
            <param name="j3">Specifies position for joint 3.</param>
            <param name="j4">Specifies position for joint 4.</param>
            <param name="j5">Specifies position for joint 5.</param>
            <param name="j6">Specifies position for joint 6.</param>
            <param name="speed">Specifies the speed for move.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MovePathRealTime(System.Collections.Generic.IEnumerable{Labman.Hardware.RobotArms.MitsubishiRobotArm.ArmPosition},System.Double)">
            <summary>
            Moves through a path in realtime.
            </summary>
            <param name="path">The path.</param>
            <param name="period">The period.</param>
            <returns>The time taken to complete the path in ms</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MoveToPositionRealtime(Labman.Hardware.RobotArms.MitsubishiRobotArm.ArmPosition)">
            <summary>
            Moves to position realtime.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MoveToPositionRealtimeAndReturnPacket(Labman.Hardware.RobotArms.MitsubishiRobotArm.ArmPosition)">
            <summary>
            Moves to position realtime.
            </summary>
            <param name="position">The current position packet.</param>
            <returns>Received data packet</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MultiplePositionXYZMove(System.Collections.Generic.IList{Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition},System.Int32,System.Boolean)">
            <summary>
            Writes several positions to a program and moves the arm to each of them in turn
            </summary>
            <param name="positions">The positions.</param>
            <param name="speed">The speed of the moves.</param>
            <param name="moveInStraightLine">Specifies whether to move in a straight line.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MultiplePositionXYZMove(System.Collections.Generic.IList{Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCMove})">
            <summary>
            Writes several positions to a program and moves the arm to each of them in turn
            </summary>
            <param name="moves">The moves.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.OpenComms">
            <summary>
            Opens communications with the robot controller.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.RunProgram(System.String,System.Boolean)">
            <summary>
            Run a named program
            </summary>
            <param name="programName">program name</param>
            <param name="waitForCompletion">whether we wait for the progream to finish before returning</param>
            <exception cref="T:Labman.Hardware.RobotArmException">Timeout waiting for program to start running.</exception>
            <exception cref="T:Labman.Hardware.RobotArmException">Timeout waiting for program to start running.</exception>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.ServoState">
            <summary>
            Returns the state of the servo motors.
            </summary>
            <returns> ServoStates.On is returned if the servos are on,  ServoStates.Off is
            returned oterwise.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.SetHandState(System.Int32,Labman.Hardware.RobotArms.MitsubishiRobotArm.HandStates)">
            <summary>
            Sets a hand to the specified state.
            </summary>
            <param name="hand">Specifies the hand.</param>
            <param name="state">Specifies the state.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.SetOperationState(Labman.Hardware.RobotArms.MitsubishiRobotArm.OperationStates)">
            <summary>
            Sets the operation state.
            </summary>
            <param name="state">Specifies the state.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.SetProgramToolPosition(System.String,System.String)">
            <summary>
            Sets the robot tool.
            </summary>
            <param name="program">A program.</param>
            <param name="tool">The robot tool.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.SetProgramVariable(System.String,System.String,System.String)">
            <summary>
            Set a program variable
            </summary>
            <param name="programName">Name of the program.</param>
            <param name="variableName">Name of the variable.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.SetServoState(Labman.Hardware.RobotArms.MitsubishiRobotArm.ServoStates)">
            <summary>
            Sets the state of the servos.
            </summary>
            <param name="state">Specifies the state to set servos to.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.SetSpeedOverride(System.Int32)">
            <summary>
            Set the speed override of the arm
            </summary>
            <param name="speedPercentage">The speed percentage.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.SetStopState(Labman.Hardware.RobotArms.MitsubishiRobotArm.StopStates)">
            <summary>
            Sets controller stop state.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZMove(Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition,System.Int32,System.Boolean)">
            <summary>
            Moves arm to specified xyzabc position.
            </summary>
            <param name="position">The position.</param>
            <param name="speed">Specifies the speed for move.</param>
            <param name="moveInStraightLine">Specifies whether to move in a straight line.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZMove(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary>
            Moves arm to specified xyzabc position.
            </summary>
            <param name="x">Specifies x position.</param>
            <param name="y">Specifies y position.</param>
            <param name="z">Specifies z position.</param>
            <param name="a">Specifies a position.</param>
            <param name="b">Specifies b position.</param>
            <param name="c">Specifies c position.</param>
            <param name="speed">Specifies the speed for move.</param>
            <param name="moveInStraightLine">Specifies whether to move in a straight line.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZMove(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Byte,System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Moves arm to specified xyzabc position.
            </summary>
            <param name="x">Specifies x position.</param>
            <param name="y">Specifies y position.</param>
            <param name="z">Specifies z position.</param>
            <param name="a">Specifies a position.</param>
            <param name="b">Specifies b position.</param>
            <param name="c">Specifies c position.</param>
            <param name="postureData">3 bit posture flag data</param>
            <param name="rotationData">4 byte rotation flag data</param>
            <param name="speed">Specifies the speed for move.</param>
            <param name="moveInStraightLine">Specifies whether to move in a straight line.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.RemoveQok(System.String)">
            <summary>
            Removed the leading Qok (capitalisation may vary) from a controller reply
            </summary>
            <param name="reply">The reply to trim</param>
            <returns>The supplied reply with the leading qok removed</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.SendAndReceiveDataPacket(Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket)">
            <summary>
            Sends a data packet to the robot.
            </summary>
            <param name="dataPacket">The data packet.</param>
            <returns>Received data packet</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.SendCommandAndGetReply(System.String)">
            <summary>
            Sends a command to the controller and gets reply.
            </summary>
            <param name="command">Specifies the command to send.</param>
            <returns>String, the reply from the controller.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.SendDataPacket(Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket)">
            <summary>
            Sends a data packet to the robot.
            </summary>
            <param name="dataPacket">The data packet.</param>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.ArmPosition">
            <summary>
            Base class for the Mitsubishi arm position types
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.ArmPosition.Name">
            <summary>
            The name that the position has in the Mitsubishi arm program
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.ArmPosition.GetBytes">
            <summary>
            Convert the position to its byte representation
            </summary>
            <returns>The byte representation of the position</returns>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.ControllerError">
            <summary>
            Controller error that is active on the Mitsubishi Arm Controller
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.ControllerError.ErrorLevel">
            <summary>
            Enumeration of error levels
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.ControllerError.DateTime">
            <summary>The datetime (ACCORDING TO THE CONTROLLER) that the error began</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.ControllerError.Description">
            <summary>A description of the error</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.ControllerError.Level">
            <summary>The error level</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.ControllerError.Number">
            <summary>The number representing the error type</summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition">
            <summary>
            An arm position defined by the angle of each joint
            </summary>
            <seealso cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.ArmPosition" />
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition"/> class.
            </summary>
            <param name="name">The position name.</param>
            <param name="j1">The joint 1 position.</param>
            <param name="j2">The joint 2 position.</param>
            <param name="j3">The joint 3 position.</param>
            <param name="j4">The joint 4 position.</param>
            <param name="j5">The joint 5 position.</param>
            <param name="j6">The joint 6 position.</param>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.J1">
            <summary>The position of joint 1 when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.J2">
            <summary>The position of joint 2 when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.J3">
            <summary>The position of joint 3 when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.J4">
            <summary>The position of joint 4 when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.J5">
            <summary>The position of joint 5 when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.J6">
            <summary>The position of joint 6 when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.J7">
            <summary>The position of joint 7 when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.J8">
            <summary>The position of joint 8 when the arm is in this position</summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition.GetBytes">
            <summary>
            Gets the bytes representing position for MXT mode
            </summary>
            <returns>the bytes representing the position</returns>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MBProgram">
            <summary>
            A MELFA-Basic Program
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MBProgram.#ctor">
            <summary>
            Initialises a new <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MBProgram"/>
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MBProgram.#ctor(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition},System.Collections.Generic.List{Labman.Hardware.RobotArms.MitsubishiRobotArm.JointPosition})">
            <summary>
            Initialises a new <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MBProgram"/>
            </summary>
            <param name="name">The program name</param>
            <param name="code">The lines of program code</param>
            <param name="xyzabcPositions">The xyzabc positions</param>
            <param name="jointPositions">The joint positions</param>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MBProgram.Code">
            <summary>The lines of program code</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MBProgram.JointPositions">
            <summary>The Joint positions defined in the program</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MBProgram.Name">
            <summary>The program name</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MBProgram.XYZABCPositions">
            <summary>The XYZABC positions defined in the program</summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MBProgram.ToProgramFile">
            <summary>
            Generates the program file text for the code and positions in this instance
            </summary>
            <returns>The program file text for the code and positions in this instance</returns>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MitsubishiArmErrorCodeException">
            <summary>
            Exception to indicate that program execution has failed due to the contained error codes
            </summary>
        </member>
        <member name="F:Labman.Hardware.RobotArms.MitsubishiRobotArm.MitsubishiArmErrorCodeException.KnownErrorCodes">
            <summary>
            Some more readable error messages for common error codes
            Fill more in if they happen a lot
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MitsubishiArmErrorCodeException.#ctor(System.String,System.Collections.Generic.List{Labman.Hardware.RobotArms.MitsubishiRobotArm.ControllerError})">
            <summary>
            Initialises a new instance of <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MitsubishiArmErrorCodeException"/>
            </summary>
            <param name="message">An error message</param>
            <param name="errors">The error codes</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MitsubishiArmErrorCodeException.#ctor(System.Collections.Generic.List{Labman.Hardware.RobotArms.MitsubishiRobotArm.ControllerError})">
            <summary>
            Initialises a new instance of <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MitsubishiArmErrorCodeException"/>
            </summary>
            <param name="errors">The error codes that have occured</param>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MitsubishiArmErrorCodeException.Errors">
            <summary>The error codes that caused this exception to be thrown</summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MitsubishiArmErrorCodeException.ConstructMessage(System.Collections.Generic.List{Labman.Hardware.RobotArms.MitsubishiRobotArm.ControllerError})">
            <summary>
            Constructs a single error message from the provided controller errors
            </summary>
            <param name="errors">The errors that have occured</param>
            <returns>A single error message from the provided controller errors</returns>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket">
            <summary>
            Mitsubishi RTC data packet
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.#ctor">
            <summary>
            Initialises a new instance
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.#ctor(Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.RealTimeModeCommand,Labman.Hardware.RobotArms.MitsubishiRobotArm.ArmPosition)">
            <summary>
            Initialises a new instance from a command and position
            </summary>
            <param name="command">The command</param>
            <param name="position">The position</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket"/> class from a received buffer of bytes.
            </summary>
            <param name="bytes">The received buffer.</param>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.IOType">
            <summary>
            Enumeration of IO types
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.RealTimeModeCommand">
            <summary>
            Enumeration of real time mode commands
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.ReceiveType">
            <summary>
            Enumeration of receiving types
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.TransmitType">
            <summary>
            Enumeration of transmission types
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.BitMask">
            <summary>Bit Mask pattern designation</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.BitTop">
            <summary>Head bit No. of input/output signal</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.Command">
            <summary>The command.</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.CommunicationCount">
            <summary>The communication counter</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.Dat1">
            <summary>Data addition 1 - not used for transmission</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.Dat2">
            <summary>Data addition 2 - not used for transmission</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.Dat3">
            <summary>Data addition 3 - not used for transmission</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.IoData">
            <summary>Input/Output signal data value </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.PositionData">
            <summary>The position data.</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.RecvIOType">
            <summary>Reply input/output signal data designation</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.RecvType">
            <summary>Reply data type designation</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.RecvType1">
            <summary>Reply data-type specification addition 1 - not used for transmission</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.RecvType2">
            <summary>Reply data-type specification addition 2 - not used for transmission</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.RecvType3">
            <summary>Reply data-type specification addition 3 - not used for transmission</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.SendIOType">
            <summary>Transmission input/output signal data designation</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.SendType">
            <summary>transmission data type designation</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.Tcount">
            <summary>Timeout Counter - when transmitting, not used</summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.GetPositionFromPacket(System.Byte[],System.Int32,Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.ReceiveType)">
            <summary>
            Translates a data packet to a position
            </summary>
            <param name="bytes">The bytes.</param>
            <param name="startIndex">The position start index.</param>
            <param name="receiveType">The type of position</param>
            <returns>XYZ position</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.GetBytes">
            <summary>
            Gets the bytes for transmission for this packet.
            </summary>
            <returns>The bytes for this packet</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.MxtDataPacket.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.RealTimeMitsubishiException">
            <summary>
            An exception to indicate that real-time movement has failed
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.RealTimeMitsubishiException.#ctor">
            <summary>
            Initialises a new instance of <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.RealTimeMitsubishiException"/>
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.RealTimeMitsubishiException.#ctor(System.String)">
            <summary>
            Initialises a new instance of <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.RealTimeMitsubishiException"/> with a message
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.RealTimeMitsubishiException.#ctor(System.String,System.Exception)">
            <summary>
            Initialises a new instance of <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.RealTimeMitsubishiException"/>
            </summary>
            <param name="message">The message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.RobotOperationTime">
            <summary>
            Robot operation time information
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.RobotOperationTime.AllMechServoOnTime">
            <summary>All mecha servo on time [Hr]</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.RobotOperationTime.BatteryAccumulativeTime">
            <summary>Battery accumulation time [Hr]</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.RobotOperationTime.Mech1ServoOnTime">
            <summary>Mech1 servo on time [Hr]</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.RobotOperationTime.Mech2ServoOnTime">
            <summary>Mech2 servo on time [Hr]</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.RobotOperationTime.Mech3ServoOnTime">
            <summary>Mech3 servo on time [Hr]</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.RobotOperationTime.OperationTime">
            <summary>Program operation time [Hr]</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.RobotOperationTime.PowerOnTime">
            <summary>Power on time [Hr]</summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCMove">
            <summary>
            A single straight or joint move to a target position
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCMove.#ctor">
            <summary>
            Initialise a new instance
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCMove.#ctor(Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition,System.Int32,System.Boolean)">
            <summary>
            Initialise a new instance from a target position
            </summary>
            <param name="position">The target position</param>
            <param name="speed">The speed to move at [%]</param>
            <param name="moveInStraightLine">Whether to move in a straight line</param>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCMove.ContinuousDistance">
            <summary>
            How far away from the position the arm passes.
            If this is set too small the move will be slower than a non-continuous move.
            If this is not set, the default will be used which is quite a large cut off
            </summary>
            <value>
            The continuous distance.
            </value>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCMove.ContinuousMove">
            <summary>
            Whether the robot moves continuously through positions.
            This means it does not pass exactly through the position,
            but it does not stop at each position so is faster.
            See the "cnt" command in melfa basic V help for more information.
            </summary>
            <value>
            <c>true</c> if [continuous move]; otherwise, <c>false</c>.
            Defaults to false.
            </value>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCMove.MoveInStraightLine">
            <summary>Whether this is a straight move [MVS], otherwise a joint move [MOV] will be performed</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCMove.Position">
            <summary>The target position to move to</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCMove.Speed">
            <summary>The speed to move at [%]</summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition">
            <summary>
            An arm position defined by the location of the end effector
            </summary>
            <seealso cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.ArmPosition" />
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition"/> class.
            </summary>
            <param name="name">The position's name.</param>
            <param name="x">End effector X position [mm].</param>
            <param name="y">End effector Y position [mm].</param>
            <param name="z">End effector Z position [mm].</param>
            <param name="a">Roll.</param>
            <param name="b">Pitch.</param>
            <param name="c">Yaw.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.#ctor(System.String,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition"/> class.
            </summary>
            <param name="name">The position's name.</param>
            <param name="x">End effector X position [mm].</param>
            <param name="y">End effector Y position [mm].</param>
            <param name="z">End effector Z position [mm].</param>
            <param name="a">Roll.</param>
            <param name="b">Pitch.</param>
            <param name="c">Yaw.</param>
            <param name="l1">The 7th axis position.</param>
            <param name="l2">The 8th axis position.</param>
            <param name="sf1">Posture flag 1.</param>
            <param name="sf2">Posture flag 2.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.#ctor(Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition"/> class.
            </summary>
            <param name="position">The position to copy.</param>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.A">
            <summary>The roll of the end effector when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.B">
            <summary>The pitch of the end effector when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.C">
            <summary>The yaw of the end effector when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.L1">
            <summary>The position of the 7th axis, if applicable, when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.L2">
            <summary>The position of the 8th axis, if applicable, when the arm is in this position</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.SF1">
            <summary>Posture flag 1</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.SF2">
            <summary>Posture flag 2</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.X">
            <summary>The X translation position of the end effector when the arm is in this position [mm]</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.Y">
            <summary>The Y translation position of the end effector when the arm is in this position [mm]</summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.Z">
            <summary>The Z translation position of the end effector when the arm is in this position [mm]</summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.GetBytes">
            <summary>
            Gets the bytes representing position for MXT mode
            </summary>
            <returns>the bytes representing the position</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition.ToString">
            <summary>
            Provides a string representation of this instance
            </summary>
            <returns>A string representation of this instance</returns>
        </member>
        <member name="T:Labman.Hardware.RobotArms.RobotArm">
            <summary>
            Robot arm type definition
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.RobotArm.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.RobotArm.RobotArmSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="P:Labman.Hardware.RobotArms.RobotArm.RobotArmUIType">
            <summary>
            Type for the robot arm user control view model
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.RobotArm.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.RobotArm.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.RobotArm.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>Flag indicating if the motor is e-stopped</returns>
            <exception cref="T:Labman.Hardware.RobotArmException">This method has not been implemented by this type of RobotArm</exception>
        </member>
        <member name="M:Labman.Hardware.RobotArms.RobotArm.Enable(System.Boolean)">
            <summary>
            Set the enabled state of the arm, or turn the servo's on/off
            </summary>
            <param name="enable">True to enable / False to disable</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.RobotArm.IsBusy">
            <summary>
            Is the arm busy
            </summary>
            <returns>Flag indicating if the arm is running</returns>
            <exception cref="T:Labman.Hardware.RobotArmException">This method has not been implemented by this type of RobotArm</exception>
        </member>
        <member name="M:Labman.Hardware.RobotArms.RobotArm.ClearFaults">
            <summary>
            Clear any faults on the controller
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.RobotArm.RunProgram(System.String,System.Boolean)">
            <summary>
            Run a named program
            </summary>
            <param name="programName">Name of the program.</param>
            <param name="waitForCompletion">if set to <c>true</c> [wait for completion].</param>
            <exception cref="T:Labman.Hardware.RobotArmException">This method has not been implemented by this type of RobotArm</exception>
        </member>
        <member name="M:Labman.Hardware.RobotArms.RobotArm.SetProgramVariable(System.String,System.String,System.String)">
            <summary>
            Set a program variable
            </summary>
            <param name="programName">Name of the program.</param>
            <param name="variableName">Name of the variable.</param>
            <param name="value">The value.</param>
            <exception cref="T:Labman.Hardware.RobotArmException">This method has not been implemented by this type of RobotArm</exception>
        </member>
        <member name="M:Labman.Hardware.RobotArms.RobotArm.SetSpeedOverride(System.Int32)">
            <summary>
            Set the speed override of the arm
            </summary>
            <param name="speedPercentage">The speed percentage.</param>
            <exception cref="T:Labman.Hardware.RobotArmException">This method has not been implemented by this type of RobotArm</exception>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm">
            <summary>
            Class for controlling Universal Robots robot arm.
            </summary>
            <see cref="T:\Hardware Reference\Universal Robots\Software\DASHBOARD SERVER E-SERIES, PORT 29999.pdf"/>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector3D">
            <summary>
            Object representing 3 double vectors.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector3D.V1">
            <summary>
            Vector 1.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector3D.V2">
            <summary>
            Vector 2.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector3D.V3">
            <summary>
            Vector 3.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6D">
            <summary>
            Object representing 6 double vectors.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6D.V1">
            <summary>
            Vector 1.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6D.V2">
            <summary>
            Vector 2.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6D.V3">
            <summary>
            Vector 3.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6D.V4">
            <summary>
            Vector 4.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6D.V5">
            <summary>
            Vector 5.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6D.V6">
            <summary>
            Vector 6.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6Int32">
            <summary>
            Object representing 6 integer vectors.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6Int32.V1">
            <summary>
            Vector 1.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6Int32.V2">
            <summary>
            Vector 2.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6Int32.V3">
            <summary>
            Vector 3.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6Int32.V4">
            <summary>
            Vector 4.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6Int32.V5">
            <summary>
            Vector 5.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6Int32.V6">
            <summary>
            Vector 6.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6UInt32">
            <summary>
            Object representing 6 unsigned integer vectors.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6UInt32.V1">
            <summary>
            Vector 1.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6UInt32.V2">
            <summary>
            Vector 2.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6UInt32.V3">
            <summary>
            Vector 3.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6UInt32.V4">
            <summary>
            Vector 4.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6UInt32.V5">
            <summary>
            Vector 5.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Vector6UInt32.V6">
            <summary>
            Vector 6.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.TcpPose">
            <summary>
            Object representing an arm TCP pose
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.TcpPose.X">
            <summary>
            The X position
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.TcpPose.Y">
            <summary>
            The Y position
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.TcpPose.Z">
            <summary>
            The Z position
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.TcpPose.RotationX">
            <summary>
            The X rotation
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.TcpPose.RotationY">
            <summary>
            The Y rotation
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.TcpPose.RotationZ">
            <summary>
            The Z rotation
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.RobotArmUIType">
            <summary>
            Type for the robot arm user control view model
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.OperationalMode">
            <summary>
            Enumeration of possible operational modes.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ProgramState">
            <summary>
            Enumeration of possible program states.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.RobotMode">
            <summary>
            Enumeration of possible robot modes.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SafetyStatus">
            <summary>
            Enumeration of possible safety statuses.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.RTDECommand">
            <summary>
            Enumeration of RTDE commands.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.RTDEConnectionState">
            <summary>
            Enumeration of possible RTDE connection states.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ControlMode">
            <summary>
            Enumeration of possible robot control modes.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.JointMode">
            <summary>
            Enumeration of possible robot joint modes.
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ToolMode">
            <summary>
            Enumeration of possible robot tool modes.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ClearFaults">
            <summary>
            Clear any faults on the controller.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Dispose">
            <summary>
            Dispose of object. Close communication.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Enable(System.Boolean)">
            <summary>
            Enable the robot arm.
            </summary>
            <param name="enable">True to enable / False to disable</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.IsBusy">
            <summary>
            Is the arm busy
            </summary>
            <returns>Flag indicating if the arm is running</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.IsEmergencyStopped">
            <summary>
            Is the emergency stop pressed
            </summary>
            <returns>Flag indicating if the motor is e-stopped</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.RunProgram(System.String,System.Boolean)">
            <summary>
            Run a named program
            </summary>
            <param name="programName">program name</param>
            <param name="waitForCompletion">whether we wait for the progream to finish before returning</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SetSpeedOverride(System.Int32)">
            <summary>
            Set the speed override of the arm
            </summary>
            <param name="speedPercentage">The speed percentage.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.AddLogMessage(System.String)">
            <summary>
            Add a log message to the pendants logs.
            </summary>
            <param name="messageToLog">The message to log.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ClearOperationalMode">
            <summary>
            Clear the operational mode.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.CloseConnection">
            <summary>
            Closes the connection to the controller.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ClosePopup">
            <summary>
            Closes the popup on the pendant.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.CloseSafetyPopup">
            <summary>
            Closes the safety popup on the pendant.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetLoadedProgram">
            <summary>
            Gets the currently loaded program.
            </summary>
            <returns>The name of the loaded program.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetRobotModel">
            <summary>
            Gets the robot model.
            </summary>
            <returns>The robot model.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetSerialNumber">
            <summary>
            Gets the robot serial number.
            </summary>
            <returns>The serial number.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetOperationalMode">
            <summary>
            Get the current operational mode.
            </summary>
            <returns>The current operational mode.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetPolyscopeVersion">
            <summary>
            Gets the polyscope version.
            </summary>
            <returns>The polyscope version</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetProgramState">
            <summary>
            Gets the current programs state.
            </summary>
            <returns>The state.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetRobotMode">
            <summary>
            Get the current robot mode.
            </summary>
            <returns>The current mode.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetSafetyStatus">
            <summary>
            Get the current safety status.
            </summary>
            <returns>The current safety status</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.IsCurrentProgramSaved">
            <summary>
            Check if the current program is saved.
            </summary>
            <returns>True if saved.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.IsInRemoteControl">
            <summary>
            Check if the remote control is active.
            </summary>
            <returns>True if active.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.IsProgramRunning">
            <summary>
            Check if a program is running.
            </summary>
            <returns>True if program running.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.LoadInstallation(System.String)">
            <summary>
            Loads the specified installation file but does not return until the load has completed(or failed).
            </summary>
            <param name="installationName">The installation name.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.LoadProgram(System.String)">
            <summary>
            Load a program.
            </summary>
            <param name="programName">The program name.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.PauseProgram">
            <summary>
            Pause a programs execution.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.PowerOn">
            <summary>
            Power on the robot.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.PowerOff">
            <summary>
            Power off the robot.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ReleaseBrake">
            <summary>
            Release the brakes on the robot.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ReleaseProtectiveStop">
            <summary>
            Release the protective stop on the robot.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.RestartSafety">
            <summary>
            Resart the safety of the robot.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SetOperationalMode(Labman.Hardware.RobotArms.UniversalRobotsRobotArm.OperationalMode)">
            <summary>
            Set the operational mode of the robot.
            </summary>
            <param name="mode">The mode to set.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ShowPopup(System.String)">
            <summary>
            Show a popup on the pendant.
            </summary>
            <param name="popupText">The message to show.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.Shutdown">
            <summary>
            Shutdown the robot and pendant.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.StopProgram">
            <summary>
            Stop program execution.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetRobotOnTime">
            <summary>
            Get time elapsed since the controller was started.
            </summary>
            <returns>The time elapsed in seconds.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointTargetPositions">
            <summary>
            Get target joint positions.
            </summary>
            <returns>The target positions.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointTargetVelocities">
            <summary>
            Get target joint velocities.
            </summary>
            <returns>The target joint velocities./</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointTargetAccelerations">
            <summary>
            Get target joint accelerations.
            </summary>
            <returns>The target joint accelerations.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointTargetCurrents">
            <summary>
            Get target joint currents.
            </summary>
            <returns>The target joint currents.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointTargetTorques">
            <summary>
            Get target joint positions.
            </summary>
            <returns>The target joint positions</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointActualPositions">
            <summary>
            Get actual joint positions.
            </summary>
            <returns>The actual joint positions</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointActualVelocities">
            <summary>
            Get actual joint velocities.
            </summary>
            <returns>The actual joint velocities.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointActualCurrents">
            <summary>
            Get actual joint currents.
            </summary>
            <returns>The actual joint currents.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointControlCurrents">
            <summary>
            Get joint control currents.
            </summary>
            <returns>The joint control currents.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetTcpActualPose">
            <summary>
            Get actual Cartesian coordinates of the tool: (x,y,z,rx,ry,rz), where rx, ry and rz is a rotation vector representation of the tool orientation.
            </summary>
            <returns>The cartesian coordinates of the tool.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetTcpActualSpeed">
            <summary>
            Actual speed of the tool given in Cartesian coordinates.
            </summary>
            <returns>The actual speed of the tool.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetTcpActualForce">
            <summary>
            Get generalized forces in the TCP.
            </summary>
            <returns>The TCP actual force.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetTcpTargetPose">
            <summary>
            Target Cartesian coordinates of the tool: (x,y,z,rx,ry,rz), where rx, ry and rz is a rotation vector representation of the tool orientation
            </summary>
            <returns>The TCP target pose.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetTcpTargetSpeed">
            <summary>
            Target speed of the tool given in Cartesian coordinates.
            </summary>
            <returns>The TCP target speed.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetDigitalInputState(System.Int32)">
            <summary>
            Gets the state of a digital input.
            </summary>
            <param name="inputIndex">The input index 0 - 17.</param>
            <returns>The input state.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointTemperatures">
            <summary>
            Get joint temperatures.
            </summary>
            <returns>The joint temperatures.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetActualExecutionTime">
            <summary>
            Get Controller real-time thread execution time.
            </summary>
            <returns>The execution time.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetToolAccelerometerValues">
            <summary>
            Tool x, y and z accelerometer values
            </summary>
            <returns>The tool accelerometer values.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetSpeedScaling">
            <summary>
            Get speed scaling of the trajectory limiter
            </summary>
            <returns>The speed scaling.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetTargetSpeedFraction">
            <summary>
            Get target speed fraction.
            </summary>
            <returns>The target speed fraction.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetActualMomentum">
            <summary>
            Get norm of Cartesian linear momentum.
            </summary>
            <returns>The actual momentum.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetMainVoltage">
            <summary>
            Get safety control board main voltage.
            </summary>
            <returns>The main voltage.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetRobotVoltage">
            <summary>
            Get safety control board robot voltage.
            </summary>
            <returns>The robot voltage</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetRobotCurrent">
            <summary>
            Get safety control board robot current.
            </summary>
            <returns>The robot current.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetJointVoltage">
            <summary>
            Get the actual joint voltages/
            </summary>
            <returns>The joint voltages.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetDigitalOutputState(System.Int32)">
            <summary>
            Get the state of a digital output.
            </summary>
            <param name="outputIndex">The output index. 0 - MAX_DIGITAL_OUTPUTS</param>
            <returns>The outputs state.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetConfigurableOutputState(System.Int32)">
            <summary>
            Get the state of a configurable output.
            </summary>
            <param name="outputIndex">The output index. 0 - MAX_DIGITAL_OUTPUTS</param>
            <returns>The outputs state.</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetToolDigitalOutputState(System.Int32)">
            <summary>
            Gets the state of the tool digital output.
            </summary>
            <param name="outputIndex">The output index</param>
            <returns>The output state</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SetRobotSpeed(System.Double)">
            <summary>
            Set the robot speed.
            </summary>
            <param name="speed">The speed percentage. 0.0 - 1.0</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SetStandardDigitalOutput(System.Int32,System.Boolean)">
            <summary>
            Set the state of a standard digital output.
            </summary>
            <param name="outputIndex">The output index 0 - 7.</param>
            <param name="state">The state to set.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SetCongifurableDigitalOutput(System.Int32,System.Boolean)">
            <summary>
            Set the state of a configurable digital output.
            </summary>
            <param name="outputIndex">The output index. 0 - 7.</param>
            <param name="state">The state to set.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SetToolDigitalOutput(System.Int32,System.Boolean)">
            <summary>
            Set the state of a tool digital output.
            </summary>
            <param name="outputIndex">The output index. 0-1.</param>
            <param name="state">The state to set.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SendScript(System.String,System.Int32)">
            <summary>
            Send a URScript script to the controller.
            </summary>
            <param name="script">The script to send.</param>
            <param name="timeoutMilliseconds">
              How long in milliseconds to wait for a reply from the arm. 
              The arm will only reply once the script execution is complete.
              The default timeout of 0 will not wait for a reply before returning.
            </param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.LinearMoveToPosition(Labman.Hardware.RobotArms.UniversalRobotsRobotArm.TcpPose,System.Int32)">
            <summary>
            Moves the arm linear in tool space to the specified position
            </summary>
            <param name="position">The position to move to</param>
            <param name="timeoutSeconds">How long to wait for the move to finish before timing out</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.WaitForProgramToFinish(System.Int32)">
            <summary>
            Waits for the specified time for the current program to finish running
            </summary>
            <param name="timeoutSeconds">How many seconds to wait for before throwing an exception</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SetupRtdePackageOutputs(System.String,System.Double)">
            <summary>
            Setup RTDE package outputs
            </summary>
            <param name="variableName">The variable name</param>
            <param name="frequency">The polling frequency</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SetupRtdePackageInputs(System.String)">
            <summary>
            Setup RTDE package inputs
            </summary>
            <param name="variableName">The input name</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.RtdePackageStart">
            <summary>
            Start RTDE package communication
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.RtdePackagePause">
            <summary>
            Pause RTDE package communication
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetRtdeDataPackage``1">
            <summary>
            Get RTDE data package
            </summary>
            <typeparam name="T">The data type</typeparam>
            <returns>The package value</returns>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SendRtdeDataPackage(System.Collections.Generic.List{System.Object})">
            <summary>
            Send RTDE data package
            </summary>
            <param name="args">The package</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.GetOutputValueFromController``1(System.String)">
            <summary>
            Get an output value from controller
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="output">The output name</param>
            <returns>The output value</returns>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ProgramVariables">
            <summary>
            Gets or sets the program variables dictionary.
            </summary>
        </member>
        <member name="P:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.ReceivedArmData">
            <summary>
            Stores data received from the arm
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.SetProgramVariable(System.String,System.String,System.String)">
            <summary>
            Set a robot program variable.
            </summary>
            <param name="programName">The program name.</param>r
            <param name="variableName">The variable name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.StartDataExchangeServer(System.String,System.Int32)">
            <summary>
            Starts the program variable server
            </summary>
            <param name="ip">The IP address</param>
            <param name="port">The port</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.UniversalRobotsRobotArm.StopProgramVariableServer">
            <summary>
            Stops the program variable server
            </summary>
        </member>
        <member name="T:Labman.Hardware.RobotArms.ArmProgramTimedOutException">
            <summary>
            Exception for when we time out while waiting for an arm program to finish running
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.ArmProgramTimedOutException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.ArmProgramTimedOutException"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArms.ArmProgramTimedOutException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.ArmProgramTimedOutException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.ArmProgramTimedOutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.ArmProgramTimedOutException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Labman.Hardware.RobotArms.ArmProgramTimedOutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.RobotArms.ArmProgramTimedOutException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Labman.Hardware.RobotArmException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.RobotArmException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.RobotArmException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer">
            <summary>
            Allows communication with a Hach Spectrophotometer
            </summary>
            <seealso cref="T:Labman.Hardware.Spectrophotometers.Spectrophotometer" />
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.Wavelength">
            <summary>
            Gets or sets the wavelength.
            </summary>
            <value>
            The wavelength.
            </value>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.DeviceName">
            <summary>
            Gets the name of the device.
            </summary>
            <value>
            The name of the device.
            </value>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.ZeroAbsorbtion">
            <summary>
            Gets the zero absorbtion.
            </summary>
            <value>
            The zero absorbtion.
            </value>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.HachDR3900SpectrophotometerSettings">
            <summary>
            Gets or sets the Hach DR3900 Spectrophotometer settings.
            </summary>
            <value>
            The hach d R3900 spectrophotometer settings.
            </value>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.GetSingleWaveAbsorbtion(System.Double,System.Boolean)">
            <summary>
            Gets the single wave absorbtion value at the specified wavelength.
            </summary>
            <param name="waveLength">The wavelength.</param>
            <param name="ignoreZeroAbsorbtion">If set to <c>true</c> the raw value is returned, not the zeroed value.</param>
            <returns>The value of the absorbtion.</returns>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">
            The wavelength is outside the specified bounds
            or
            Unable to get single wave absorbtion
            or
            Unable to get single wave absorbtion: unable to parse result
            </exception>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.Zero">
            <summary>
            Zeroes the Spectrophotometer.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.Zero(System.Int32)">
            <summary>
            Zeroes the Spectrophotometer for the specified wavelength.
            </summary>
            <param name="wavelength">The wavelength.</param>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.Measure">
            <summary>
            Takes a measurement.
            </summary>
            <returns>
            The returened measurement
            </returns>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">
            Sending of get last measuremnt values command failed.
            or
            Sending of take measurement command failed.
            or
            Failed to take spectrophotometer measurement:  + ex.Message
            </exception>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer">
            <summary>
            Control class for a Minolta CMD2600D Spectrophotometer.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.MeasurementAverage">
            <summary>
            MeasurementAverage
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.ApertureSetting">
            <summary>
            ApertureSetting
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.ResultSetting">
            <summary>
            ResultSetting
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.GetErrorDescription(System.String)">
            <summary>
            Get the status description for the specified status code
            </summary>
            <param name="status">Status code returned from the spectro</param>
            <returns>The error description</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.SetConditionParameters(Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.ApertureSetting,Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.ResultSetting)">
            <summary>
            Sets the unit aperture and tells the unit what type of measurements to take
            </summary>
            <param name="apertureSetting">The aperture setting, either MAV or SAV</param>
            <param name="resultSetting">The result setting to output for a measurement</param>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.CalibrateBlack">
            <summary>
            Calibrates the spectrophotometer against a black tile. If only one calibration tile use the WHITE calibration white.
            </summary>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">Black calibration failed.</exception>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.CalibrateWhite">
            <summary>
            Calibrates the spectrophotometer against a white tile. If only one calibration tile, use this method.
            </summary>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">White calibration failed.</exception>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.IsReadyToMeasure">
            <summary>
            Checks the spectro status to see if it is ready to perform a measurement
            </summary>
            <returns>True when ready to measure</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.WaitForSpectroToBeReadyToMeasure(System.Int32)">
            <summary>
            Wait for the spectro to be ready to perform a measurement
            </summary>
            <param name="timeoutSeconds">Timeout in seconds</param>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.MeasureLab(Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.MeasurementAverage)">
            <summary>
            Performs a measurement and calculates L*, a*, b*, dE* values
            </summary>
            <param name="measurementAverage">Number of measurements to average</param>
            <returns>An array containing L*, a*, b*, dE* values</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.Measure">
            <summary>
            Takes a measurement
            </summary>
            <returns>
            The returened measurement - included is the first array of data, excluded is second
            </returns>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">White calibration failed.</exception>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.MinoltaCM2600DSpectrophotometer.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers">
            <summary>
            Control class for an Ocean Optics spectrometer. This class relies on the OmniDriver API developed by
            OceanOptics and included as a reference to the base application project. The OmniDriver supports all of
            the OceanOptics USB spectrometers
            </summary>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers.OmniWrapper">
            <summary>
            This wrapper object acts as the functional gateway to the spectrophotometer. There can only be one instance of this
            wrapper used by all threads and only one EXE running on the system can use the wrapper object
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers.Initialise">
            <summary>
            The initialise function initialise ALL OceanOptics devices which are connected to the PC
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers.Dispose">
            <summary>
            Dispose method closes comms
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers.SetIntegrationTime(System.String,System.Int32)">
            <summary>
            Sets the integration time for the aqcuisition in milliseconds
            </summary>
            <param name="serialNumber">The serial number of the device</param>
            <param name="integrationTime">Integration time in milliseconds</param>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers.SetScansToAverage(System.String,System.Int32)">
            <summary>
            Sets the number of scans to average
            </summary>
            <param name="serialNumber">The serial number of the device</param>
            <param name="scans">The number of scans to average</param>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers.GetName(System.String)">
            <summary>
            Returns the name of the spectrophotometer
            </summary>
            <param name="serialNumber">The serial number of the device</param>
            <returns>The name as a string</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers.AcquireSpectra(System.String)">
            <summary>
            Captures a spectra from the spectrophotometer and returns it as an array of doubles
            </summary>
            <param name="serialNumber">The serial number of the device</param>
            <returns>Array of double precision values</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers.DeviceIndexFromSerial(System.String)">
            <summary>
            Looks up the index of a device from the serial number
            </summary>
            <param name="serialNumber">The serial number of the spectrometer</param>
            <returns>The index number of the spectrometer. If no match is found then -1 is returned</returns>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.RhopointGlossmeterData">
            <summary>
            The class to hold the data received from the device.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.RhopointGlossmeterData.Degree20">
            <summary>
            Gets or sets the degree20.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.RhopointGlossmeterData.Degree60">
            <summary>
            Gets or sets the degree60.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.RhopointGlossmeterData.Degree85">
            <summary>
            Gets or sets the degree85.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.RhopointGlossmeterData.RIQ">
            <summary>
            Gets or sets the riq.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.RhopointGlossmeterData.Haze">
            <summary>
            Gets or sets the haze.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.RhopointGlossmeterData.RSpec">
            <summary>
            Gets or sets the r spec.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.RhopointGlossmeterData.DOI">
            <summary>
            Gets or sets the doi.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.RhopointGlossmeterData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Spectrophotometers.RhopointGlossmeterData"/> class.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.RhopointGlossmeter">
            <summary>
            Allows communication with a Rhopoint glossmeter
            </summary>
            <seealso cref="T:Labman.Hardware.Spectrophotometers.Spectrophotometer" />
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.RhopointGlossmeter.MeasuredData">
            <summary>
            Gets or sets the measured data.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.RhopointGlossmeter.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">Enable \"Remote Control\" mode on the device</exception>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.RhopointGlossmeter.Measure">
            <summary>
            Takes a measurement
            </summary>
            <returns>
            The returened measurement
            </returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.RhopointGlossmeter.CalibrateBlack">
            <summary>
            Calibrates the spectrophotometer against a black tile. If only one calibration tile use the WHITE calibration white.
            </summary>
            <exception cref="T:Labman.Hardware.BalanceException">The communication settings have not yet been setup for this device</exception>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">Unable to obtain repsone from device for measurement</exception>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.RhopointGlossmeter.ParseDataFromResponse(System.String)">
            <summary>
            Parses the data from response.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.RhopointGlossmeter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Spectrophotometers.RhopointGlossmeter"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.RhopointGlossmeter.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
            <exception cref="T:System.NotImplementedException">None</exception>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter">
            <summary>
             Allows communication with a Sheen Tri Glossmeter
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter.BYKCom_Open(System.Int32,System.Int32@)">
            <summary>
            Byks the com_ open.
            </summary>
            <param name="portNumber">The port number.</param>
            <param name="deviceHandle">The device handle.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter.BYKCom_FmtCommand(System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Byks the com_ FMT command.
            </summary>
            <param name="deviceHandle">The device handle.</param>
            <param name="cmd">The command.</param>
            <param name="cmdLen">Length of the command.</param>
            <param name="result">The result.</param>
            <param name="maxResult">The maximum result.</param>
            <param name="written">The written.</param>
            <returns>Result</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter.BYKCom_Close(System.Int32)">
            <summary>
            Byks the com_ close.
            </summary>
            <param name="deviceHandle">The device handle.</param>
            <returns>Result</returns>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter._deviceHandle">
            <summary>
            Member to store handle to gloss meter after callto BYKCom_Open.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter._lastReturnVal">
            <summary>
            Member that stores the return value from last call to a bykusbcom.dll method.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter.Measure">
            <summary>
            Takes a measurement.
            </summary>
            <returns>
            The returened measurement
            </returns>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">
            Sending of get last measuremnt values command failed.
            or
            Sending of take measurement command failed.
            or
            Failed to take spectrophotometer measurement:  + ex.Message
            </exception>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter.Calibrate">
            <summary>
            Calibrates the glossmeter
            </summary>
            <returns>Calibrated results</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.SheenTriGlossmeter.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer">
            <summary>
            Control class for an XRite Spectrophotometer
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer._calibrationData">
            <summary>
            Results obtained from the last calibration
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.Status">
            <summary>
            Enumeration of possible device status's
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.ErrorCodes">
            <summary>
            Enumeration of possible error codes
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.HeadModes">
            <summary>
            Enumeration of possible head modes
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS">
            <summary>
            Structure that is used to store and return the results from a spectral reading
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.STRUCTURE_POPULATED">
            <summary>
            The structur e_ populated
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.SpectralData">
            <summary>
            The spectral data
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.L">
            <summary>
            The l
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.a">
            <summary>
            A
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.b">
            <summary>
            The b
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.c">
            <summary>
            The c
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.h_degrees">
            <summary>
            The h_degrees
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.Delta_a">
            <summary>
            The delta_a
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.Delta_b">
            <summary>
            The delta_b
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.Delta_L">
            <summary>
            The delta_ l
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.Delta_E">
            <summary>
            The delta_ e
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.Delta_C">
            <summary>
            The delta_ c
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS.Delta_H">
            <summary>
            The delta_ h
            </summary>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_CALIBRATION_DATA">
            <summary>
            Structure that is used to store and return the calibration data
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_CALIBRATION_DATA.STRUCTURE_POPULATED">
            <summary>
            The structur e_ populated
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_CALIBRATION_DATA.WhitePlaqueValues">
            <summary>
            The white plaque values
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_CALIBRATION_DATA.BlackPlaqueValues">
            <summary>
            The black plaque values
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_CALIBRATION_DATA.CalibrationPlaqueSerialNumber">
            <summary>
            The calibration plaque serial number
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_CALIBRATION_DATA.LastCalibrationTime">
            <summary>
            The last calibration time
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_CALIBRATION_DATA.LastVerificationTime">
            <summary>
            The last verification time
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_CALIBRATION_DATA.WhiteVerificationTolerance">
            <summary>
            The white verification tolerance
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_CALIBRATION_DATA.BlackVerificationTolerance">
            <summary>
            The black verification tolerance
            </summary>
        </member>
        <member name="F:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_CALIBRATION_DATA.AngleAdjustmentValues">
            <summary>
            The angle adjustment values
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SetHeadMode(Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.HeadModes)">
            <summary>
            Sets the spectrophotometer head mode
            </summary>
            <param name="mode">The mode to set</param>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.CalibrateBlack">
            <summary>
            This spectro does not use a black trap, do not call this method
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.CalibrateWhite">
            <summary>
            Calibrates the spectrophotometer against a white tile. If only one calibration tile, use this method.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.Measure">
            <summary>
            Takes a measurement
            </summary>
            <returns>
            The returened measurement
            </returns>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">
            The spectrophotometer must be calibrated before a measurement can be taken
            or
            Invalid status received from spectrophotometer
            or
            Failed to take spectrophotometer measurement:  + ex.Message
            </exception>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.CalculateDeltaE(Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS,Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SPECTRO_RESULTS)">
            <summary>
            Calculates the Delta E value of a measurement based on the difference between it and the calibration data
            </summary>
            <param name="measurement">Measurement results</param>
            <param name="referenceData">Reference results to compare against</param>
            <returns>Delta E for a measurement</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.GetStatus">
            <summary>
            Gets the status from the device
            </summary>
            <returns>Device status code</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.ClearErrors">
            <summary>
            Clears any errors on the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.SaveSettingsToEEPROM">
            <summary>
            Saves all settings to EEPROM
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.ResetDevice">
            <summary>
            Resets the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.VerifyWhiteCalibration">
            <summary>
            Verifies that the white calibration is valid
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.GetErrorCodes">
            <summary>
            Gets a list of error codes that have occurred since the errors were last cleared
            </summary>
            <returns>A list of error codes</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.ConvertListToCSVString(System.Collections.Generic.List{System.Double})">
            <summary>
            Converts a list of values into a comma seperated list
            </summary>
            <param name="values">The list to parse</param>
            <returns>A CSV list of points</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.ValidatePacket(System.Byte[])">
            <summary>
            Validates the packet. This is called from the PacketValidationMethod callback from the comms routine.
            </summary>
            <param name="data">The data to check</param>
            <returns>True if the data is valid, else false</returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.GetStatusFromReply(System.Byte[],System.String@)">
            <summary>
            Get the status portion of the reply data
            </summary>
            <param name="data">The data to parse</param>
            <param name="parsedData">The parsed data.</param>
            <returns>
            The device status
            </returns>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.XRiteSpectrophotometer.ConvertReplyToList(System.Byte[])">
            <summary>
            Converts a reply from the spectro to a list of results.
            The status of the reply is checked first.
            </summary>
            <param name="data">Data reply from the spectro (including the status)</param>
            <returns>A list of values</returns>
        </member>
        <member name="T:Labman.Hardware.Spectrophotometers.Spectrophotometer">
            <summary> 
            Spectrophotometer interface class
            </summary>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.Spectrophotometer.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.Spectrophotometers.Spectrophotometer.SpectrophotometerSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.Spectrophotometer.#ctor">
            <summary> 
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.Spectrophotometer.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.Spectrophotometer.CalibrateBlack">
            <summary>
            Calibrates the spectrophotometer against a black tile. If only one calibration tile use the WHITE calibration white.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.Spectrophotometer.CalibrateWhite">
            <summary>
            Calibrates the spectrophotometer against a white tile. If only one calibration tile, use this method.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Spectrophotometers.Spectrophotometer.Measure">
            <summary>
            Takes a measurement
            </summary>
            <returns>The returened measurement</returns>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">This method has not been implemented by this type of Spectrophotometer</exception>
        </member>
        <member name="T:Labman.Hardware.SpectrophotometerException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.SpectrophotometerException.#ctor(System.String)">
            <summary> 
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.SpectrophotometerException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.Syringes.KloehnSyringe">
            <summary>
            kloehn syringe class
            </summary>
            <seealso cref="T:Labman.Hardware.Syringes.Syringe" />
        </member>
        <member name="T:Labman.Hardware.Syringes.KloehnSyringe.SyringeError">
            <summary>
            Enumeration of possible syringe errors
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.NoError">
            <summary>No error</summary>               
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.Initialisation">
            <summary>Initialisation error</summary>   
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.InvalidCommand">
            <summary>Invalid command</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.InvalidOperand">
            <summary>Invalid operand</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.InvalidCommandSeq">
            <summary>Invalid command sequence</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.EEPromFailure">
            <summary>EEProm Failure</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.DeviceNotInitialised">
            <summary>Device is not initialised</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.InternalFailure">
            <summary>Internal failure</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.PlungerOverload">
            <summary>Plunger overload</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.ValveOverload">
            <summary>Valve overload</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.PlungerMoveNotAllowed">
            <summary>Plunger move not allowed</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.InternalFailure2">
            <summary>Internal failure type 2</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.ADConversionFailure">
            <summary>AD Conversion failure</summary> 
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeError.CommandOverflow">
            <summary>Command overflow</summary> 
        </member>
        <member name="T:Labman.Hardware.Syringes.KloehnSyringe.FinePositioning">
            <summary>
            Enumeration defines the possible fine positioning states
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.FinePositioning.On">
            <summary>On</summary>   
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.FinePositioning.Off">
            <summary>Off</summary>   
        </member>
        <member name="T:Labman.Hardware.Syringes.KloehnSyringe.PlungerForce">
            <summary>
            Enumeration of plunger forces
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.PlungerForce.FullForce">
            <summary>Full plunger force</summary>   
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.PlungerForce.HalfForce">
            <summary>Half plunger force</summary>   
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.PlungerForce.QuarterForce">
            <summary>Quarter plunger force</summary>   
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.PlungerForce.FullForceSlow">
            <summary>Slow full plunger force</summary>   
        </member>
        <member name="T:Labman.Hardware.Syringes.KloehnSyringe.ValveInitialisationSequence">
            <summary>
            Enumeration of possible valve initialisation sequences
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.ValveInitialisationSequence.LeftToRight">
            <summary>Initialise left to right</summary>   
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.ValveInitialisationSequence.RightToLeft">
            <summary>Initialise right to left</summary>   
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.ValveInitialisationSequence.NoValve">
            <summary>No  valve</summary>   
        </member>
        <member name="T:Labman.Hardware.Syringes.KloehnSyringe.SyringeStatus">
            <summary>
            Enumeration of possible syringe states
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeStatus.Busy">
            <summary>Syringe is busy</summary>   
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.SyringeStatus.Ready">
            <summary>Syringe is ready</summary>   
        </member>
        <member name="T:Labman.Hardware.Syringes.KloehnSyringe.ValvePosition">
            <summary>
            Enumeration of possible valve positions
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.ValvePosition.Left">
            <summary>Left valve position</summary>       
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.ValvePosition.Top">
            <summary>Top valve position</summary>   
        </member>
        <member name="F:Labman.Hardware.Syringes.KloehnSyringe.ValvePosition.Right">
            <summary>Right valve position</summary>   
        </member>
        <member name="P:Labman.Hardware.Syringes.KloehnSyringe.KloehnSyringeSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.#ctor">
            <summary>
            Constructor for a tecan syringe
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.ResetSyringePlunger">
            <summary>
            Resets and homes the syringe plunger
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.Aspirate(Labman.Hardware.Syringes.KloehnSyringe.ValvePosition,System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Aspirates the specified source valve position.
            </summary>
            <param name="sourceValvePosition">The source valve position.</param>
            <param name="volume">The volume.</param>
            <param name="waitType">Type of the wait.</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.Dispense(Labman.Hardware.Syringes.KloehnSyringe.ValvePosition,System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Dispense sample using the syringe
            </summary>
            <param name="targetValvePosition">The target position for the valve</param>
            <param name="volume">The volume in uL to dispense</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.Aspirate(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Aspirate sample using the syringe
            </summary>
            <param name="volume">The volume in uL to aspirate</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.Dispense(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Dispense sample using the syringe
            </summary>
            <param name="volume">The volume in uL to dispense</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.MoveToVolume(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Move to an absolute volume position
            </summary>
            <param name="volume">The volume position to move to</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.Stop">
            <summary>
            Stops the current syringe operation
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.SetValvePosition(Labman.Hardware.Syringes.KloehnSyringe.ValvePosition)">
            <summary>
             Sets the valve position to use
            </summary>
            <param name="position">The valve position to move to</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.SetSpeed(System.Int32)">
            <summary>
            Sets the speed of the syringe
            </summary>
            <param name="speed">The speed to set, 2=fast, 40=slow</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.SetBacklashSteps(System.Int32)">
            <summary>
            Sets the number of backlash steps for the syringe
            </summary>
            <param name="steps">poda</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.SetFinePositioningState(Labman.Hardware.Syringes.KloehnSyringe.FinePositioning)">
            <summary>
            Sets the fine positioning mode
            </summary>
            <param name="finePositioningType">Specifies if to switch fine positioning on or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.SetCutOffVelocity(System.Int32)">
            <summary>
            Sets the cutoff velocity for the syringe
            </summary>
            <param name="velocity">The cutoff velocity to set</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.GetCurrentVolume">
            <summary>
            Gets the current volume of liquid that is the syringe
            </summary>
            <returns>nayee</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.GetSyringeStatus">
            <summary>
            Gets the current status of the syringe
            </summary>
            <returns>poda</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.GetSyringeErrorCode">
            <summary>.
            
            Gets the current error code of the syringe
            </summary>
            <returns>mokka</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.VolumeToSteps(System.Int32)">
            <summary>
            Converts the specified volume to syringe motor steps
            </summary>
            <param name="volume">The volume to convert</param>
            <returns>The number of motor steps for the specified volume</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.WaitForMoveCompletion">
            <summary>
            Waits until the syringe is in a ready state, times out after an amount of time
            </summary>
            <returns>nayae</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.WaitForMoveCompletion(System.Int32)">
            <summary>
            Waits until the syringe is in a ready state, times out after an amount of time
            </summary>
            <param name="timeoutSeconds">mokka</param>
            <returns>mokka</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.StepsToVolume(System.Int32)">
            <summary>
            Converts the specified steps to syringe volume
            </summary>
            <param name="steps">The steps to convert</param>
            <returns>The volume for the specified motor steps</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.ValidateReply(System.Byte[]@,System.String)">
            <summary>
            Checks a response and ensures it is valid
            </summary>
            <param name="replyBuffer">The response to check</param>
            <param name="actionDescription">A description of the action the response is for. This is used for logging purposes.</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.KloehnSyringe.GetPacketToSend(System.String)">
            <summary>
            Builds a packet to send to the device
            </summary>
            <param name="command">The command data to send</param>
            <returns>The packet ready to send (without STX/ETX)</returns>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanAirDisplacementPipettor">
            <summary>
            Class to interface to a Tecan ADP device
            For now only address 0 is supported as it would otherwise conflict with other CANOpen devices. 
            CAN addresses 0-7 must be kept available for the one ADP!!
            </summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.ErrorCode">
            <summary>
            Enumeration of error codes
            </summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.FrameType">
            <summary>
            Enumeration of possible frame types
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.TecanAirDisplacementPipettorSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.#ctor">
            <summary>
            Constructor for a Tecan ADP
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.Initialise">
            <summary>
            Initialise the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.Aspirate(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Aspirate sample using the syringe
            </summary>
            <param name="volume">The volume in uL to aspirate</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.Dispense(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Dispense sample using the syringe
            </summary>
            <param name="volume">The volume in uL to dispense</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.MoveToVolume(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Move to an absolute volume position
            </summary>
            <param name="volume">The volume position to move to</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.Stop">
            <summary>
            Stops the current syringe operation
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.SetSpeed(System.Int32)">
            <summary>
            Sets the speed of the syringe
            </summary>
            <param name="speed">The speed in uL/sec (1-1000)</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.GetCurrentVolume">
            <summary>
            Gets the current volume of liquid that is the syringe
            </summary>
            <returns>
            Current volume
            </returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.ResetSyringePlunger">
            <summary>
            Method that resets and homes the syringe plunger
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.GetExpectedCommandReplies">
            <summary>
            Gets a list of expected replies from the device
            </summary>
            <returns>An array of possible status replies</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.EjectTip">
            <summary>
            Ejects a loaded tip
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.StartPressureLiquidLevelDetection">
            <summary>
            Starts the liquid level detection process
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.IsBusy">
            <summary>
            Check if the syringe is busy
            </summary>
            <returns>True if busy</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.IsTipLoaded">
            <summary>
            Check if the syringe tip is present
            </summary>
            <returns>True if tip is loaded</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.GetErrorCode(System.Byte[])">
            <summary>
            Extracts the status from the reply
            </summary>
            <param name="statusReply">The byte array reply from the device</param>
            <returns>The error code from the reply</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.SetSpeed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the speed of the syringe
            </summary>
            <param name="topSpeed">The top speed in uL/sec (1-1000)</param>
            <param name="startSpeed">The start speed in uL/sec (1-1000)</param>
            <param name="cutoffSpeed">The cutoff speed in uL/sec (1-1000)</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.SendPacket(System.Int32,System.Byte[],System.Boolean,System.Byte[][])">
            <summary>
            Send a packet of data to the syringe
            </summary>
            <param name="messageId">The message ID (or COBID) to send to</param>
            <param name="data">The data to send</param>
            <param name="waitForReply">if set to <c>true</c> [wait for reply].</param>
            <param name="expectedReply">The expected reply.</param>
            <returns>
            A byte array of returned data
            </returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.SendPacket(Labman.Hardware.Syringes.TecanAirDisplacementPipettor.FrameType,System.Byte[],System.Boolean,System.Byte[][])">
            <summary>
            Sends a packet of data to the syringe
            </summary>
            <param name="frameType">The frame type for the message</param>
            <param name="data">The data array to send</param>
            <param name="waitForReply">if set to <c>true</c> [wait for reply].</param>
            <param name="expectedReply">The expected reply.</param>
            <returns>
            The received reply data array
            </returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanAirDisplacementPipettor.SendPacket(Labman.Hardware.Syringes.TecanAirDisplacementPipettor.FrameType,System.String,System.Boolean,System.Byte[][])">
            <summary>
            Sends a packet of data to the syringe
            </summary>
            <param name="frameType">The frame type for the message</param>
            <param name="data">The data array to send</param>
            <param name="waitForReply">if set to <c>true</c> [wait for reply].</param>
            <param name="expectedReply">The expected reply.</param>
            <returns>
            The received reply data array
            </returns>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSmartValve">
            <summary>
            Class that controls a single Tecan Smart Valve
            </summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError">
            <summary>
            Enumeration of possible syringe errors
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError.NoError">
            <summary> Mo error </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError.Initialisation">
            <summary> Initialisation error </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError.InvalidCommand">
            <summary> Invalid command </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError.InvalidOperand">
            <summary> Invalid operand </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError.InvalidCommandSeq">
            <summary> Invalid command sequence </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError.DeviceNotInitialised">
            <summary> Device is not initialised </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError.PlungerOverload">
            <summary> Plunger overload </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError.ValveOverload">
            <summary> Valve overload </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError.PlungerMoveNotAllowed">
            <summary> Plunger move not allowed </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.SmartValveError.CommandOverflow">
            <summary> Command overflow </summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSmartValve.ValveStatus">
            <summary>
            Enumartion of possible valve states
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.ValveStatus.Busy">
            <summary> Valve is busy </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.ValveStatus.Ready">
            <summary> Valve is ready </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSmartValve.ValveStatus.Unknown">
            <summary> Valve state is Unknown </summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSmartValve.ValveConfiguration">
            <summary>
            Enumeration of possible valve configurations
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.TecanSmartValve.TecanSmartValveSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.#ctor">
            <summary>
            Constructor for a tecan smart valve
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.InitialiseValve">
            <summary>
            Sends the initialisation command to a single valve
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.SetValvePosition(System.Int32)">
            <summary>
             Sets the valve position to use for distribution valves
            </summary>
            <param name="portNumber">The valve port to move to, port sequence starts clockwise from PCB side</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.GetValveErrorCode">
            <summary>
            Gets the current error code of the valve
            </summary>
            <returns>Current valve error code</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.SetValveConfiguration(Labman.Hardware.Syringes.TecanSmartValve.ValveConfiguration)">
            <summary>
            Writes the type of valve to non-volatile memory, NOTE: will require power cycle to take effect.
            </summary>
            <param name="valveConfiguration">The configuration of the valve</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.GetPumpConfiguration">
            <summary>
            Gets the pump configuration from non-volatile memory
            </summary>
            <returns>The pump configuration</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.GetValvePosition">
            <summary>
            Gets the current valve position back from the valve
            </summary>
            <returns>The current valve position</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.GetPacketToSend(System.String)">
            <summary>
            Builds a packet to send to the device
            </summary>
            <param name="command">The command data to send</param>
            <returns>The packet ready to send (without STX/ETX)</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSmartValve.ValidateReply(System.Byte[]@,System.String)">
            <summary>
            Checks a response and ensures it is valid
            </summary>
            <param name="replyBuffer">The response to check</param>
            <param name="actionDescription">A description of the action the response is for. This is used for logging purposes.</param>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanCentrisSyringe">
            <summary>
            Class that controls a single Tecan Syringe
            </summary>
            <remarks>
            NOTE: This class is basically a copy of the normal <see cref="T:Labman.Hardware.Syringes.TecanSyringe"/> class with minor modifications.
            Several of the functions may not actually work on this type of syringe.
            It was originally created for SNIf by Dave L, then taken over by Luke P for GRCE, then committed for GRCE by Dave A.
            It would be good to merge it with the normal TecanSyringe class however, there wasn't time on the project to do so.
            The PDF for it is in Tech Ref, titled TECAN_OEM_Centris_Manual_30038165B.
            Compared to the normal class, the differences seem to be:
              - There is no "Fine Positioning" state, so that function should not be called.
              - The initialisation commands (Z and Y) interpret the first parameter differently.
                Instead of a value 1-4 which describes both speed and force, it's just a value 4-25 describing the reset speed.
                Here, the ResetSyringePlunger function has been modified with a fixed value of 4. The other base ResetSyringePlunger
                methods may not work and the hard coded 4 could do with being a setting in the TecanCentrisSyringeSettings class.
              - Because of the differences in ResetSyringePlunger, the initialise method calls the different version of that.
              - The Centris is able to take aspirate and dispense amounts as volumes in uL as well as number of steps.
                It internally converts to steps based on the syringe volume. Adding an extra ",1" parameter to such commands
                tells the device that the value is in uL not steps. This change therefore requires the Aspirate and Dispense methods
                be duplicated here.
              - On GRCE we needed the SetValvePosition to turn the opposite direction so have modified that function too.
                This would probably be better as another parameter on the SetValuePosition command.
              - There also seems to be a difference between the backlash behaviour of the Centris compared to other Tecans.
                On GRCE dispense amount issues were encountered where the syringe travel was 11mm incorrect. This was accounted
                for in process code but it may be possible an better to account for it with the K-value backlash setting.
            </remarks>
        </member>
        <member name="P:Labman.Hardware.Syringes.TecanCentrisSyringe.TecanCentrisSyringeSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanCentrisSyringe.#ctor">
            <summary>
            Constructor for a tecan syringe
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanCentrisSyringe.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanCentrisSyringe.ResetSyringePlunger(System.Int32,System.Int32)">
            <summary>
            Resets and homes the syringe plunger for distribution valves
            </summary>
            <param name="inputPort">The input port</param>
            <param name="outputPort">The output port</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanCentrisSyringe.Aspirate(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Aspirate sample using the syringe
            </summary>
            <param name="volume">The volume in uL to aspirate</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanCentrisSyringe.Dispense(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Dispense sample using the syringe
            </summary>
            <param name="volume">The volume in uL to dispense</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanCentrisSyringe.SetValvePosition(System.Int32)">
            <summary>
             Sets the valve position to use for distribution valves
            </summary>
            <param name="portNumber">The valve port to move to, port sequence is clockwise from syringe port</param>
        </member>
        <member name="T:Labman.Hardware.Syringes.VermesMicroDispenser">
            <summary>
            Hardware class for Vermes Micro-Dispenser
            </summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse">
            <summary>
            The set of parameters controlling a dispense pulse.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.TriggerModes">
            <summary>
            The types of trigger mode.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.TriggerModes.BurstMode">
            <summary>
            A single trigger causes a predefined number of dispense cycles.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.TriggerModes.SingleShotMode">
            <summary>
            A single trigger causes one dispense cycle.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.TriggerModes.InfiniteMode">
            <summary>
            Multiple dispenses are done continuously for the duration of the trigger pulse.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.TriggerModes.ScenarioMode">
            <summary>
            A complex set of cycles, predefined in a scenario, is carried out.
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.TriggerModes.ExternalMode">
            <summary>
            A single dispense is done continuously for the duration of the trigger pulse.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.TriggerMode">
            <summary>
            The way triggers cause dispenses.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.RisingTime">
            <summary>
            The time required until the valve is completely opened in 0.01ms units. Max 300ms.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.OpenTime">
            <summary>
            During this phase the valve remains in opened state in 0.1ms units.
            When <see cref="P:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.NeedleLift"/> &lt; 80%, maximum is 3000ms.
            When <see cref="P:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.NeedleLift"/> &gt; 80%, maximum is 15ms.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.FallingTime">
            <summary>
            The time required for closing the valve in 0.01ms units. Max 300ms.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.DelayTime">
            <summary>
            The waiting phase between two cycles in 0.1ms units. Max 1000ms.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.NeedleLift">
            <summary>
            The stroke of the tappet as a percentage of it's full value. Min 1%. Between 80-100% the valve works in bipolar mode.
            The elevated temperature required in this range reduces the average frequency and lifetime of the valve. A needle lift between 70-80 is the recommended range.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.Cycles">
            <summary>
            Number of cycles. Min 1, Max 32000.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.ToString">
            <summary>
            Converts a parameter set to a string for serial transmition.
            </summary>
            <returns>A string representation of the <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/></returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.Parse(System.String)">
            <summary>
            Creates a <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/> object from a serial string.
            </summary>
            <param name="str">The string, as formatted in serial communications</param>
            <returns>A new <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/> object defined by the string</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.TryParse(System.String,Labman.Hardware.Syringes.VermesMicroDispenser.Pulse@)">
            <summary>
            Creates a <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/> object from a string
            </summary>
            <param name="str">The input string</param>
            <param name="pulse">The output <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/> object or a new one if the parse failed.</param>
            <returns>Whether the string was successfully parsed</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.Equals(System.Object)">
            <summary>
            Checks if an object is equal to this Pulse parameter.
            </summary>
            <param name="obj">The <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/> to compare against</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.ResponseEquals(Labman.Hardware.Syringes.VermesMicroDispenser.Pulse)">
            <summary>
            Checks if two <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/> objects are the same for when verifying sent parameters are equal to received parameters.
            Basically checks everything except <see cref="P:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.TriggerMode"/>
            </summary>
            <param name="rhs">The <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/> to compare against</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse.GetHashCode">
            <summary>
            Gets the hash code.
            </summary>
            <returns>The hash code</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.#ctor">
            <summary>
            Constructor for a tecan syringe
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Dispense(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Performs a dispense
            </summary>
            <param name="volume">The dispense volume</param>
            <param name="waitType">Whether to wait for the dispense</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.GetDeviceInformation">
            <summary>
            Gets device specific information formatted as "Type (hv, lv, lm or lu), software version". E.g. "Micro Dispenser HV, 4072AAA-1"
            </summary>
            <returns>Device specific information formatted as "Type (hv, lv, lm or lu), software version". E.g. "Micro Dispenser HV, 4072AAA-1"</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.GetPulseParameter">
            <summary>
            Gets the pulse parameter as a <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/>
            </summary>
            <returns>The pulse parameter as a <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/></returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.SetPulseParameter(Labman.Hardware.Syringes.VermesMicroDispenser.Pulse,System.Boolean)">
            <summary>
            Sets the pulse parameter as a <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/>
            </summary>
            <param name="parameters">The pulse parameter as a <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/></param>
            <param name="saveToEeprom">Whether parameter should be saved to EEPROM</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Dispense">
            <summary>
            Performs a dispense
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Dispense(Labman.Hardware.Syringes.VermesMicroDispenser.Pulse,System.Boolean)">
            <summary>
            Performs a dispense with the given parameters
            </summary>
            <param name="parameters">The pulse parameter as a <see cref="T:Labman.Hardware.Syringes.VermesMicroDispenser.Pulse"/></param>
            <param name="checkValues">Whether the values used should be verified</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Open">
            <summary>
            Opens the dispenser valve
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.Close">
            <summary>
            Closes the dispenser valve
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.VermesMicroDispenser.GetCycles">
            <summary>
            Gets the number of open/close cycles the device has performed to date.
            </summary>
            <returns>The number of open/close cycles the device has performed to date</returns>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSyringe">
            <summary>
            Class that controls a single Tecan Syringe
            </summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSyringe.SyringeError">
            <summary>
            Enumeration of possible syringe errors
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.NoError">
            <summary>No error</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.Initialisation">
            <summary>Initialisation error</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.InvalidCommand">
            <summary>Invalid command</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.InvalidOperand">
            <summary>Invalid operand</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.InvalidCommandSeq">
            <summary>Invalid command sequence</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.EEPromFailure">
            <summary>EEProm Failure</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.DeviceNotInitialised">
            <summary>Device is not initialised</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.InternalFailure">
            <summary>Internal failure</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.PlungerOverload">
            <summary>Plunger overload</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.ValveOverload">
            <summary>Valve overload</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.PlungerMoveNotAllowed">
            <summary>Plunger move not allowed</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.InternalFailure2">
            <summary>Internal failure type 2</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.ADConversionFailure">
            <summary>AD Conversion failure</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeError.CommandOverflow">
            <summary>Command overflow</summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSyringe.FinePositioning">
            <summary>
            Enumeration defines the possible fine positioning states
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.FinePositioning.On">
            <summary>On</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.FinePositioning.Off">
            <summary>Off</summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSyringe.PlungerForce">
            <summary>
            Enumeration of plunger forces
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.PlungerForce.FullForce">
            <summary>Full plunger force</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.PlungerForce.HalfForce">
            <summary>Half plunger force</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.PlungerForce.QuarterForce">
            <summary>Quarter plunger force</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.PlungerForce.FullForceSlow">
            <summary>Slow full plunger force</summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSyringe.ValveInitialisationSequence">
            <summary>
            Enumeration of possible valve initialisation sequences
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.ValveInitialisationSequence.LeftToRight">
            <summary>Initialise left to right</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.ValveInitialisationSequence.RightToLeft">
            <summary>Initialise right to left</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.ValveInitialisationSequence.NoValve">
            <summary>No  valve</summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSyringe.SyringeStatus">
            <summary>
            Enumeration of possible syringe states
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeStatus.Busy">
            <summary>Syringe is busy</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.SyringeStatus.Ready">
            <summary>Syringe is ready</summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSyringe.ValvePosition">
            <summary>
            Enumeration of possible valve positions
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.ValvePosition.Left">
            <summary>Left valve position</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.ValvePosition.Top">
            <summary>Top valve position</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.ValvePosition.Right">
            <summary>Right valve position</summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSyringe.ValveIndex">
            <summary>
            valave positions for homing sequences at set speed. Don't ask me
            why these are different to the other commands - OY
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.ValveIndex.Left">
            <summary>Left valve</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.ValveIndex.Top">
            <summary>Top valve</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.TecanSyringe.ValveIndex.Right">
            <summary>Right valve</summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.TecanSyringe.ValveConfiguration">
            <summary>
            Enumeration of possible valve configurations
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.TecanSyringe.TecanSyringeSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.#ctor">
            <summary>
            Constructor for a tecan syringe
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.ResetSyringePlunger">
            <summary>
            Resets and homes the syringe plunger
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.ResetSyringePlunger(System.Int32,System.Int32)">
            <summary>
            Resets and homes the syringe plunger for distribution valves
            </summary>
            <param name="inputPort">The input port</param>
            <param name="outputPort">The output port</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.ResetSyringePlungerFixedSpeed(System.Int32,Labman.Hardware.Syringes.TecanSyringe.ValveIndex,Labman.Hardware.Syringes.TecanSyringe.ValveIndex)">
            <summary>
            Resets and homes the syringe plunger using the newer communication protocol
            Known to work on XLP6000s, as of yet untested on other Tecan Syringes
            </summary>
            <param name="speed">The speed.</param>
            <param name="aspiratePort">The aspirate port.</param>
            <param name="dispensePort">The dispense port.</param>
            <exception cref="T:Labman.Hardware.SyringeException">
            Timeout occured when waiting for syringe to complete aspirate move
            or
            After initialisation, the following error code was found: " + GetSyringeErrorCode()
            </exception>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.SetTimeout(System.Int32)">
            <summary>
            Sets the aspirate / dispense timeout.
            </summary>
            <param name="timeout">The timeout.</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.Aspirate(Labman.Hardware.Syringes.Syringe.TargetValvePosition,System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Aspirate sample using the syringe
            </summary>
            <param name="sourceValvePosition">The source position for the valve</param>
            <param name="volume">The volume in uL to aspirate</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.Dispense(Labman.Hardware.Syringes.Syringe.TargetValvePosition,System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Dispense sample using the syringe
            </summary>
            <param name="targetValvePosition">The target position for the valve</param>
            <param name="volume">The volume in uL to dispense</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.Aspirate(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Aspirate sample using the syringe
            </summary>
            <param name="volume">The volume in uL to aspirate</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.Dispense(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Dispense sample using the syringe
            </summary>
            <param name="volume">The volume in uL to dispense</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.MoveToVolume(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Move to an absolute volume position
            </summary>
            <param name="volume">The volume position to move to</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.SendCommand(System.String)">
            <summary>
            Send the syringe a command
            </summary>
            <param name="command">the command to send</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.Stop">
            <summary>
            Stops the current syringe operation
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.SetValvePosition(Labman.Hardware.Syringes.TecanSyringe.ValvePosition)">
            <summary>
             Sets the valve position to use for non-distribution valves
            </summary>
            <param name="position">The valve position to move to</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.SetValvePosition(System.Int32)">
            <summary>
             Sets the valve position to use for distribution valves
            </summary>
            <param name="portNumber">The valve port to move to, port sequence is clockwise from syringe port</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.SetSpeed(System.Int32)">
            <summary>
            Sets the speed of the syringe
            </summary>
            <param name="speed">The speed to set, 2=fast, 40=slow</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.SetBacklashSteps(System.Int32)">
            <summary>
            Sets the number of backlash steps for the syringe
            </summary>
            <param name="steps">The steps.</param>
            <exception cref="T:Labman.Hardware.SyringeException">
            Failed to set syringe speed, error code reported:  + GetSyringeErrorCode()
            or
            Backlash steps specified:  + steps + , this is not valid
            or
            Timeout of  + ReadyTimeout +  seconds occurred when waiting for the syringe to go into a ready state after setting the backlash steps
            </exception>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.SetDeadVolumeSteps(System.Int32)">
            <summary>
            Sets the number of dead volume increments that the plunger drive is offset from
            the top of the travel. This is to minimize the dead volume.
            </summary>
            <param name="increments">The number of increments.</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.SetFinePositioningState(Labman.Hardware.Syringes.TecanSyringe.FinePositioning)">
            <summary>
            Sets the fine positioning mode
            </summary>
            <param name="finePositioningType">Specifies if to switch fine positioning on or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.SetCutOffVelocity(System.Int32)">
            <summary>
            Sets the cutoff velocity for the syringe
            </summary>
            <param name="velocity">The cutoff velocity to set</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.GetCurrentVolume">
            <summary>
            Gets the current volume of liquid that is the syringe
            </summary>
            <returns>
            Current volume
            </returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.GetSyringeStatus">
            <summary>
            Gets the current status of the syringe
            </summary>
            <returns>Current syringe status</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.GetSyringeErrorCode">
            <summary>
            .
            Gets the current error code of the syringe
            </summary>
            <returns>Current syringe error code</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.TryWaitForMoveCompletion">
            <summary>
            Safe Wrapper for 'WaitForMoveCompletion' method
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.SetValveConfiguration(Labman.Hardware.Syringes.TecanSyringe.ValveConfiguration)">
            <summary>
            Writes the type of valve to non-volatile memory, NOTE: will require power cycle to take effect.
            </summary>
            <param name="valveConfiguration">The configuration of the valve</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.GetPumpConfiguration">
            <summary>
            Gets the pump configuration from non-volatile memory
            </summary>
            <returns>The pump configuration</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.VolumeToSteps(System.Int32)">
            <summary>
            Converts the specified volume to syringe motor steps
            </summary>
            <param name="volume">The volume to convert</param>
            <returns>The number of motor steps for the specified volume</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.WaitForMoveCompletion">
            <summary>
            Waits until the syringe is in a ready state, times out after an amount of time
            </summary>
            <returns>Flag indicating whether the operation compeleted before the time out</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.WaitForMoveCompletion(System.Int32)">
            <summary>
            Waits until the syringe is in a ready state, times out after an amount of time
            </summary>
            <param name="timeoutSeconds">The timeout seconds.</param>
            <returns>Flag that indicates whether the operation completed before the timeout</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.StepsToVolume(System.Int32)">
            <summary>
            Converts the specified steps to syringe volume
            </summary>
            <param name="steps">The steps to convert</param>
            <returns>The volume for the specified motor steps</returns>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.ValidateReply(System.Byte[]@,System.String)">
            <summary>
            Checks a response and ensures it is valid
            </summary>
            <param name="replyBuffer">The response to check</param>
            <param name="actionDescription">A description of the action the response is for. This is used for logging purposes.</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.TecanSyringe.GetPacketToSend(System.String)">
            <summary>
            Builds a packet to send to the device
            </summary>
            <param name="command">The command data to send</param>
            <returns>The packet ready to send (without STX/ETX)</returns>
        </member>
        <member name="T:Labman.Hardware.Syringes.Syringe">
            <summary>
            Syringe Standard Module Definition.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.Syringe.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="T:Labman.Hardware.Syringes.Syringe.WaitForCompletion">
            <summary>
            Enumeration defines the possible wait for completion states
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.Syringe.WaitForCompletion.DoNotWait">
            <summary>Do not wait for completion</summary>   
        </member>
        <member name="F:Labman.Hardware.Syringes.Syringe.WaitForCompletion.Wait">
            <summary>Wait for completion</summary>   
        </member>
        <member name="T:Labman.Hardware.Syringes.Syringe.TargetValvePosition">
            <summary>
            Enumeration of possible valve targets
            </summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.Syringe.TargetValvePosition.None">
            <summary>No valve change required</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.Syringe.TargetValvePosition.Source">
            <summary>Valve to source position</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.Syringe.TargetValvePosition.Target">
            <summary>Valve to target position</summary>
        </member>
        <member name="F:Labman.Hardware.Syringes.Syringe.TargetValvePosition.Bypass">
            <summary>Valve to bypass position</summary>
        </member>
        <member name="P:Labman.Hardware.Syringes.Syringe.SyringeSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary> 
        </member>
        <member name="M:Labman.Hardware.Syringes.Syringe.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.Syringe.Aspirate(Labman.Hardware.Syringes.Syringe.TargetValvePosition,System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Aspirate sample using the syringe
            </summary>
            <param name="sourceValvePosition">The source position for the valve</param>
            <param name="volume">The volume in uL to aspirate</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
            <exception cref="T:Labman.Hardware.SyringeException">This method has not been implemented by this type of Syringe</exception>
        </member>
        <member name="M:Labman.Hardware.Syringes.Syringe.Dispense(Labman.Hardware.Syringes.Syringe.TargetValvePosition,System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Dispense sample using the syringe
            </summary>
            <param name="targetValvePosition">The target position for the valve</param>
            <param name="volume">The volume in uL to dispense</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
            <exception cref="T:Labman.Hardware.SyringeException">This method has not been implemented by this type of Syringe</exception>
        </member>
        <member name="M:Labman.Hardware.Syringes.Syringe.Aspirate(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Aspirate sample using the syringe
            </summary>
            <param name="volume">The volume in uL to aspirate</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.Syringe.Dispense(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Dispense sample using the syringe
            </summary>
            <param name="volume">The volume in uL to dispense</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.Syringe.MoveToVolume(System.Int32,Labman.Hardware.Syringes.Syringe.WaitForCompletion)">
            <summary>
            Move to an absolute volume position
            </summary>
            <param name="volume">The volume position to move to</param>
            <param name="waitType">Specifies if to wait for completion or not</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.Syringe.Stop">
            <summary>
            Stops the current syringe operation
            </summary>
        </member>
        <member name="M:Labman.Hardware.Syringes.Syringe.SetSpeed(System.Int32)">
            <summary>
            Sets the speed of the syringe
            </summary>
            <param name="speed">The speed to set, 2=fast, 40=slow</param>
        </member>
        <member name="M:Labman.Hardware.Syringes.Syringe.GetCurrentVolume">
            <summary>
            Gets the current volume of liquid that is the syringe
            </summary>
            <returns>Current volume</returns>
            <exception cref="T:Labman.Hardware.SyringeException">This method has not been implemented by this type of Syringe</exception>
        </member>
        <member name="M:Labman.Hardware.Syringes.Syringe.ResetSyringePlunger">
            <summary>
            Method that resets and homes the syringe plunger
            </summary>
        </member>
        <member name="T:Labman.Hardware.TorqueTransducers.STE202TorqueTransducer">
            <summary>
             Allows communication with a STE202 Torque Transducer
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.STE202TorqueTransducer.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.STE202TorqueTransducer.GetTorque">
            <summary>
            Get current torque value.
            </summary>
            <returns>float, torque.</returns>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.STE202TorqueTransducer.#ctor">
            <summary>
            Class construction.
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.STE202TorqueTransducer.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.TorqueTransducers.STRWT420TorqueTransducer">
            <summary>
             Allows communication with a STRET420 Torque Transducer
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.STRWT420TorqueTransducer.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.STRWT420TorqueTransducer.GetTorque">
            <summary>
            Get current torque value.
            </summary>
            <returns>float, torque.</returns>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.STRWT420TorqueTransducer.Zero">
            <summary>
            Zero torque transducer
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.STRWT420TorqueTransducer.#ctor">
            <summary>
            Class construction.
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.STRWT420TorqueTransducer.Dispose">
            <summary>
            Dispose method closes communications
            </summary>
        </member>
        <member name="T:Labman.Hardware.TorqueTransducers.TorqueTransducer">
            <summary>
            Torque transducer standard module definition.
            </summary>
        </member>
        <member name="P:Labman.Hardware.TorqueTransducers.TorqueTransducer.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.TorqueTransducers.TorqueTransducer.TorqueTransducerSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.TorqueTransducer.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.TorqueTransducer.GetTorque">
            <summary>
            Get current torque value.
            </summary>
            <returns>float, torque.</returns>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.TorqueTransducer.Zero">
            <summary>
            Zero torque transducer.
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducers.TorqueTransducer.#ctor">
            <summary>
            Type constructor, initialises settings file instance ready for use.
            </summary>
        </member>
        <member name="T:Labman.Hardware.TorqueTransducerException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducerException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception.
            </summary>
            <param name="message">Provide a detailed description of the error.</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor.</remarks>
        </member>
        <member name="M:Labman.Hardware.TorqueTransducerException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception.
            </summary>
            <param name="message">Provide a detailed description of the error.</param>
            <param name="innerException">The inner Exception that is being thrown.</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor.</remarks>
        </member>
        <member name="T:Labman.Hardware.TurbidityMeters.HACH2100NTurbidityMeter">
            <summary>
            Allows communication with a HACH2100N Turbidity Meter.
            </summary>
        </member>
        <member name="M:Labman.Hardware.TurbidityMeters.HACH2100NTurbidityMeter.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used.
            </summary>
        </member>
        <member name="M:Labman.Hardware.TurbidityMeters.HACH2100NTurbidityMeter.Measure">
            <summary>
            Takes a measurement.
            </summary>
            <returns>double, measurement value.</returns>
        </member>
        <member name="M:Labman.Hardware.TurbidityMeters.HACH2100NTurbidityMeter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Hardware.TurbidityMeters.HACH2100NTurbidityMeter"/> class.
            </summary>
        </member>
        <member name="M:Labman.Hardware.TurbidityMeters.HACH2100NTurbidityMeter.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="T:Labman.Hardware.TurbidityMeters.TurbidityMeter">
            <summary>
            Turbdity Meter Standard Module Definition.
            </summary>
        </member>
        <member name="P:Labman.Hardware.TurbidityMeters.TurbidityMeter.CommunicationInterface">
            <summary>
            The device has access to a communications interface
            </summary>
        </member>
        <member name="P:Labman.Hardware.TurbidityMeters.TurbidityMeter.TurbidityMeterSettings">
            <summary>
            The Settings Property exposes the device instance settings class from the main base class
            </summary>
        </member>
        <member name="M:Labman.Hardware.TurbidityMeters.TurbidityMeter.#ctor">
            <summary> 
            Type constructor, initialises settings file instance ready for use
            </summary>
        </member>
        <member name="M:Labman.Hardware.TurbidityMeters.TurbidityMeter.Initialise">
            <summary>
            The initialise method is used to setup the device instance and ensure it is ready to be used
            </summary>
        </member>
        <member name="M:Labman.Hardware.TurbidityMeters.TurbidityMeter.Measure">
            <summary>
            Takes a measurement.
            </summary>
            <returns>double, measurement value.</returns>
            <exception cref="T:Labman.Hardware.SpectrophotometerException">This method has not been implemented by this type of TurbidityMeter</exception>
        </member>
        <member name="T:Labman.Hardware.TurbidityMeterException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.TurbidityMeterException.#ctor(System.String)">
            <summary> 
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.TurbidityMeterException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.PIDException">
            <summary>
            This class defines a specific type of exceptions for use only by Balances
            </summary>
        </member>
        <member name="M:Labman.Hardware.PIDException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.PIDException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.RheometerException">
            <summary>
            This class defines a specific type of exceptions for use only by Rheometers
            </summary>
        </member>
        <member name="M:Labman.Hardware.RheometerException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.RheometerException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="P:Labman.Hardware.RheometerException.CommunicationInterface">
            <summary>
            Communication interface for the rheometer object
            </summary>
            <value>
            The communication interface.
            </value>
        </member>
        <member name="T:Labman.Hardware.BalanceException">
            <summary>
            This class defines a specific type of exceptions for use only by Balances
            </summary>
        </member>
        <member name="M:Labman.Hardware.BalanceException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.BalanceException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.BarcodeReaderException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaderException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.BarcodeReaderException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.Device">
            <summary>
            Base class for defining a standard implementation for all hardware devices
            </summary>
        </member>
        <member name="P:Labman.Hardware.Device.DeviceControlUIType">
            <summary>
            Type for the user control for this device's engineering form
            </summary>
        </member>
        <member name="P:Labman.Hardware.Device.DeviceSettingsUIType">
            <summary>
            Type for the user control for this device's settings form
            </summary>
        </member>
        <member name="P:Labman.Hardware.Device.IsInitialised">
            <summary>
            Property that gets set when the device is initialised
            </summary>
        </member>
        <member name="P:Labman.Hardware.Device.HelpFile">
            <summary>
            The name of hardware device help rich text file. If left blank, the usercontrol will attempt to infer a path using reflection
            e.g. MitsubishiRobotArmHelpFile
            </summary>
        </member>
        <member name="P:Labman.Hardware.Device.Settings">
            <summary>
            Device settings property that is used to access the specific settings for the device
            </summary>
        </member>
        <member name="M:Labman.Hardware.Device.Initialise">
            <summary>
            Each hardware device class must override the Initialise method.
            The method is used to setup communications (where applicable) with the device.
            </summary>
        </member>
        <member name="M:Labman.Hardware.Device.Dispose">
            <summary>
            Each hardware device class must override the Dispose method.
            The method is used to free resources used by the class instance.
            </summary>
        </member>
        <member name="T:Labman.Hardware.Settings">
            <summary>
            Base class for hardware device settings, provides basic and common functionality for all
            hardware module settings classes. This includes the ability to load and save the settings.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Settings.BaseSettings">
            <summary>
            An instance of the generic device settings which are applicable to all devices
            </summary>
        </member>
        <member name="P:Labman.Hardware.Settings.Mileage">
            <summary>
            A counter for how much usage the device has undergone. Saved every time it is changed at a maximum rate of once per minute.
            </summary>
        </member>
        <member name="P:Labman.Hardware.Settings.UniqueKey">
            <summary>
            A unique key for the item that needs to be saved
            </summary>
        </member>
        <member name="M:Labman.Hardware.Settings.#ctor">
            <summary>
            Creates a new device settings instance.
            </summary>
        </member>
        <member name="T:Labman.Hardware.BaseDeviceSettings">
            <summary>
            This class contains all of the properties that are applicable to ALL devices.
            These are housed in a class so that they can be easily exposed through only one additional property when
            navigating into the device settings, without cluttering the useful settings with these.
            </summary>
        </member>
        <member name="P:Labman.Hardware.BaseDeviceSettings.DeviceDescription">
            <summary>Unique Device Description</summary>
        </member>
        <member name="P:Labman.Hardware.BaseDeviceSettings.DeviceClassType">
            <summary>The class name (type) of this device</summary>
        </member>
        <member name="P:Labman.Hardware.BaseDeviceSettings.DeviceAssembly">
            <summary>The assembly the class type is from</summary>
        </member>
        <member name="P:Labman.Hardware.BaseDeviceSettings.IsDeviceEnabled">
            <summary>Flag which indicates if this device is enabled and should be initialised</summary>
        </member>
        <member name="T:Labman.Hardware.IODeviceException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.IODeviceException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.IODeviceException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.MotorControllerException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.MotorControllerException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.MotorControllerException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.EmergencyStopException">
            <summary>
            This class defines a specific type of exceptions for an emergency stop condition
            </summary>
        </member>
        <member name="M:Labman.Hardware.EmergencyStopException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.EmergencyStopException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Hardware.SyringeException">
            <summary>
            This class defines a specific type of exceptions for this device type
            </summary>
        </member>
        <member name="M:Labman.Hardware.SyringeException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.Hardware.SyringeException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.InverseNullableBooleanConverter">
            <summary>
            inverse nullable boolean converter
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.InverseNullableBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If true, the method returns false, else returns true.
            </returns>
            <exception cref="T:System.InvalidOperationException">The target must be a boolean</exception>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.InverseNullableBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            Not Implemented
            </returns>
            <exception cref="T:System.NotSupportedException">Not implemented</exception>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.ActivatorConverter">
            <summary>Converter that instantiates an object that doesn't have a parameterless constructor</summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.ActivatorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Instantiates an object using a constructor that takes an argument.
            </summary>
            <param name="constructorParameterValue">The constructor parameter</param>
            <param name="targetType">The type of the target of the binding</param>
            <param name="objectTypeParameter">The type of the object to be instantiated</param>
            <param name="culture">The converter culture</param>
            <returns>An instance of the object of the given type</returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.ActivatorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not used. We can't infer the constructor arguments.
            </summary>
            <param name="value">The instantiated value</param>
            <param name="targetType">The type of the target of the binding</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The converter culture</param>
            <returns>Not implemented</returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.MultiActivatorConverter">
            <summary>Converter that can instantiate an object using a constructor that takes multiple values</summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.MultiActivatorConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Instantiates an object using a constructor that takes multiple arguments.
            </summary>
            <param name="constructorParameterValues">The constructor parameters</param>
            <param name="targetType">The type of the target of the binding</param>
            <param name="objectTypeParameter">The type of the object to be instantiated</param>
            <param name="culture">The converter culture</param>
            <returns>An instance of the object of the given type</returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.MultiActivatorConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not used. We can't infer the constructor arguments.
            </summary>
            <param name="value">The instantiated value</param>
            <param name="targetTypes">The type of the targets of the bindings</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The converter culture</param>
            <returns>Not implemented</returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.BindingToListMultiConverter">
            <summary>
            This class is used to convert multiple bound items into a list.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.BindingToListMultiConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method converts a collection of values to be used in binding
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.BindingToListMultiConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            This method converts back a collection of values to be used in binding
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <exception cref="T:System.NotImplementedException">Not implemented</exception>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.BooleanToVisibilityConverter">
            <summary>
            A type converter that allows a visibility value to be set using a boolean when binding
            </summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The reverted value</returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.ColorContrastConverter">
            <summary>
            Returns one of the given colours, based on the bound colour, such that the returned colour has good contrast agains the bound colour.
            E.g. if <see cref="P:Labman.UserInterface.TypeConverters.ColorContrastConverter.LightColor"/> is white and <see cref="P:Labman.UserInterface.TypeConverters.ColorContrastConverter.DarkColor"/> is black, and the bound colour is black, white will be returned.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.ColorContrastConverter.LightColor">
            <summary>
            The colour to be used when the bound colour is dark.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.ColorContrastConverter.DarkColor">
            <summary>
            The colour to be used when the bound colour is light.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.ColorContrastConverter.FallbackColor">
            <summary>
            The colour to be used when the bound type is not decernable.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.ColorContrastConverter.Threshold">
            <summary>
            The threshold at which the converter will switch between the dark and light colours.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.ColorContrastConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns a colour given the bound colour and supplied <see cref="P:Labman.UserInterface.TypeConverters.ColorContrastConverter.LightColor"/> and <see cref="P:Labman.UserInterface.TypeConverters.ColorContrastConverter.DarkColor"/>
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>A <see cref="T:System.Windows.Media.SolidColorBrush"/> given the bound colour and supplied <see cref="P:Labman.UserInterface.TypeConverters.ColorContrastConverter.LightColor"/> and <see cref="P:Labman.UserInterface.TypeConverters.ColorContrastConverter.DarkColor"/></returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.ColorContrastConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not implemented
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>Not implemented</returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.ColorToSolidColorBrushConverter">
            <summary>A type converter to convert between a <see cref="T:System.Windows.Media.Color"/> and <see cref="T:System.Windows.Media.SolidColorBrush"/></summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.ColorToSolidColorBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts from <see cref="T:System.Windows.Media.Color"/> to <see cref="T:System.Windows.Media.SolidColorBrush"/></summary>
            <param name="value">The <see cref="T:System.Windows.Media.Color"/></param>
            <param name="targetType">Not used</param>
            <param name="parameter">Not used</param>
            <param name="culture">Not used</param>
            <returns>A <see cref="T:System.Windows.Media.SolidColorBrush"/> containing the given <see cref="T:System.Windows.Media.Color"/></returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.ColorToSolidColorBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Converts from <see cref="T:System.Windows.Media.SolidColorBrush"/> to <see cref="T:System.Windows.Media.Color"/></summary>
            <param name="value">The <see cref="T:System.Windows.Media.SolidColorBrush"/></param>
            <param name="targetType">Not used</param>
            <param name="parameter">Not used</param>
            <param name="culture">Not used</param>
            <returns>The <see cref="T:System.Windows.Media.Color"/> contained in the given <see cref="T:System.Windows.Media.SolidColorBrush"/></returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.ThicknessMaskConverter">
            <summary>Converter that allows <see cref="T:System.Windows.Thickness"/> object to be bound to but only return certain values from them</summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.ThicknessMaskConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Returns the given <see cref="T:System.Windows.Thickness"/> object with the given mask applied from the parameter string</summary>
            <param name="value">The bound <see cref="T:System.Windows.Thickness"/> object</param>
            <param name="targetType">The target type</param>
            <param name="parameter">
            The mask applied to the value. Should be in the form 'a b c d'.
            Where if a value is a number, its value is used. If a value is not a number, the bound value is used.
            </param>
            <param name="culture">The culture</param>
            <returns>The given <see cref="T:System.Windows.Thickness"/> object with the given mask applied from the parameter string</returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.ThicknessMaskConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Not implemented</summary>
            <param name="value">The value</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Not implemented</returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.CornerRadiusMaskConverter">
            <summary>Converter that allows <see cref="T:System.Windows.CornerRadius"/> object to be bound to but only return certain values from them</summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.CornerRadiusMaskConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Returns the given <see cref="T:System.Windows.CornerRadius"/> object with the given mask applied from the parameter string</summary>
            <param name="value">The bound <see cref="T:System.Windows.CornerRadius"/> object</param>
            <param name="targetType">The target type</param>
            <param name="parameter">
            The mask applied to the value. Should be in the form 'a b c d'.
            Where if a value is a number, its value is used. If a value is not a number, the bound value is used.
            </param>
            <param name="culture">The culture</param>
            <returns>The given <see cref="T:System.Windows.CornerRadius"/> object with the given mask applied from the parameter string</returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.CornerRadiusMaskConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Not implemented</summary>
            <param name="value">The value</param>
            <param name="targetType">The target type</param>
            <param name="parameter">The parameter</param>
            <param name="culture">The culture</param>
            <returns>Not implemented</returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.IfConverter">
            <summary>Allows the target property to be set conditionally to the bound property</summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.IfConverter.Is">
            <summary>When the bound property is equal to this value, <see cref="P:Labman.UserInterface.TypeConverters.IfConverter.Value"/> will be returned</summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.IfConverter.IsNot">
            <summary>When the bound property is not equal to this value, <see cref="P:Labman.UserInterface.TypeConverters.IfConverter.Value"/> will be returned</summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.IfConverter.IsIn">
            <summary>When the bound property is in this collection, <see cref="P:Labman.UserInterface.TypeConverters.IfConverter.Value"/> will be returned</summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.IfConverter.IsNotIn">
            <summary>When the bound property is not in this collection, <see cref="P:Labman.UserInterface.TypeConverters.IfConverter.Value"/> will be returned</summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.IfConverter.Value">
            <summary>The value that is used when the condition is true</summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.IfConverter.Otherwise">
            <summary>The value that is used when the condition is not true</summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.IfConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.IfConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.IsConverter">
            <summary>Allows the target property to be set conditionally to the bound property</summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.IsConverter.Is">
            <summary>When the bound property is of this type, <see cref="P:Labman.UserInterface.TypeConverters.IsConverter.Value"/> will be returned</summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.IsConverter.IsNot">
            <summary>When the bound property is not of this type, <see cref="P:Labman.UserInterface.TypeConverters.IsConverter.Value"/> will be returned</summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.IsConverter.Value">
            <summary>The value that is returned when the condition is true</summary>
        </member>
        <member name="P:Labman.UserInterface.TypeConverters.IsConverter.Otherwise">
            <summary>The value that is returned when the condition is not true</summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.IsConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.IsConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.InverseBooleanConverter">
            <summary>
            inverse boolean converter
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.InverseBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If true, the method returns false, else returns true.
            </returns>
            <exception cref="T:System.InvalidOperationException">The target must be a boolean</exception>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.InverseBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            Not Implemented
            </returns>
            <exception cref="T:System.NotSupportedException">Not implemented</exception>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.InverseEqualityConverter">
            <summary>
            Inverse equality converter
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.InverseEqualityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If true, the method returns false, else returns true.
            </returns>
            <exception cref="T:System.InvalidOperationException">The target must be a boolean</exception>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.InverseEqualityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            Not Implemented
            </returns>
            <exception cref="T:System.NotSupportedException">Not implemented</exception>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.MultiBindingEqualityConverter">
            <summary>
            A type converter that tests equality between multiple bound objects.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.MultiBindingEqualityConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Returns whether the bound values are equal
            </summary>
            <param name="values">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>Whether the values are equal</returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.MultiBindingEqualityConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts  back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetTypes">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The reverted value</returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.NullImageConverter">
            <summary>
            Gets rid of the exception from having a null image
            </summary>
            <seealso cref="T:System.Windows.Data.IValueConverter" />
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.NullImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.NullImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.StringToEnumConverter">
            <summary>
            A type converter that converts Enums to strings and back again
            </summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.StringToEnumConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.StringToEnumConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The back conveted object</returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.EnumSelector">
            <summary>
            A type converter that converts Enums to strings and back again
            </summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.EnumSelector.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The converted object</returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.EnumSelector.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The back conveted object</returns>
        </member>
        <member name="T:Labman.UserInterface.TypeConverters.ImageConverter">
            <summary>
            A type converter that allows a bitmap image to be display as an image in a view using binding
            </summary>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.ImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert the bitmap to a displayable image
            </summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.TypeConverters.ImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back - not used
            </summary>
            <param name="value">The value that is produced by the binding target.</param>
            <param name="targetType">The type to convert to.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.NotImplementedException">Not implemented</exception>
        </member>
        <member name="T:Labman.UserInterface.Adorners.ContentAdorner">
            <summary>An adorner that renders the given content</summary>
        </member>
        <member name="M:Labman.UserInterface.Adorners.ContentAdorner.#ctor(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.Adorners.ContentAdorner"/>
            </summary>
            <param name="adornedElement">The adorned element</param>
            <param name="content">The content of the adorner</param>
        </member>
        <member name="M:Labman.UserInterface.Adorners.ContentAdorner.SetBoundingRectangle(System.Windows.Rect)">
            <summary>Set the size of the adorner and force a re-arrange</summary>
            <param name="rectangle">The size of the adorner</param>
        </member>
        <member name="P:Labman.UserInterface.Adorners.ContentAdorner.VisualChildrenCount">
            <summary>Gets the number of visual child elements within this element.</summary>
        </member>
        <member name="M:Labman.UserInterface.Adorners.ContentAdorner.GetVisualChild(System.Int32)">
            <summary>Returns a child at the specified index from a collection of child elements.</summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>The requested child element. This should not return null; if the provided index is out of range, an exception is thrown</returns>
        </member>
        <member name="M:Labman.UserInterface.Adorners.ContentAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements and determines a size for a System.Windows.FrameworkElement derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="T:Labman.UserInterface.Adorners.RubberbandAdorner">
            <summary>
            Rubber band adorner class allows a rubber band to be dragged around on a WPF control/window
            </summary>
        </member>
        <member name="P:Labman.UserInterface.Adorners.RubberbandAdorner.VisualChildrenCount">
            <summary>
            Gets the number of visual child elements within this element.
            </summary>
            <returns>The number of visual child elements for this element.</returns>
        </member>
        <member name="M:Labman.UserInterface.Adorners.RubberbandAdorner.#ctor(System.Windows.UIElement,System.Nullable{System.Windows.Point},System.Action{System.Windows.Rect},System.Action{System.Windows.Rect})">
            <summary>
            Rubber band adorner constructor
            </summary>
            <param name="adornedElement">The adorned element.</param>
            <param name="dragStartPoint">The drag start point.</param>
            <param name="dragSelectionUpdatedAction">The drag selection updated action.</param>
            <param name="mouseReleasedAction">The mouse released action.</param>
        </member>
        <member name="M:Labman.UserInterface.Adorners.RubberbandAdorner.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles the mouse move event
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.Adorners.RubberbandAdorner.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the mouse up event (when we have finished selecting items)
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the mouse button was released.</param>
        </member>
        <member name="M:Labman.UserInterface.Adorners.RubberbandAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the override.
            </summary>
            <param name="arrangeBounds">The arrange bounds.</param>
            <returns>The size of the arrange bounds</returns>
        </member>
        <member name="M:Labman.UserInterface.Adorners.RubberbandAdorner.GetVisualChild(System.Int32)">
            <summary>
            Override method that gets the visual child elements
            </summary>
            <param name="index">The zero-based index of the requested child element in the collection.</param>
            <returns>
            Visuals collection
            </returns>
        </member>
        <member name="M:Labman.UserInterface.Adorners.RubberbandAdorner.UpdateRubberband(System.Boolean)">
            <summary>
            Update the rubber band size and location
            </summary>
            <param name="finishSelection">if set to <c>true</c> [finish selection].</param>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.Merlin">
            <summary>The attached properties for Merlin</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Merlin.GetCornerRadius(System.Windows.DependencyObject)">
            <summary>Gets the attached corner radius for the element</summary>
            <param name="obj">The dependency object</param>
            <returns>The attached corner radius for the element</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Merlin.SetCornerRadius(System.Windows.DependencyObject,System.Windows.CornerRadius)">
            <summary>Sets the attached corner radius for the element</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The attached corner radius for the element</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.Merlin.CornerRadiusProperty">
            <summary>The attached corner radius for the element</summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.CycleChildOpacity">
            <summary>
            Attached properties to make <see cref="P:System.Windows.Controls.Panel.Children"/> animate opacity cyclicly.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.GetIsCycling(System.Windows.DependencyObject)">
            <summary>Gets whether the animation is running</summary>
            <param name="obj">The dependency object</param>
            <returns>The whether the animation is running</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.SetIsCycling(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets whether the animation is running</summary>
            <param name="obj">The dependency object</param>
            <param name="value">Whether the animation is running</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.IsCyclingProperty">
            <summary>Whether the animation is running</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.GetFadeInRatio(System.Windows.DependencyObject)">
            <summary>Gets the fade-in time as a proportion of the cycle duration</summary>
            <param name="obj">The dependency object</param>
            <returns>The fade-in time as a proportion of the cycle duration</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.SetFadeInRatio(System.Windows.DependencyObject,System.Double)">
            <summary>Sets the fade-in time as a proportion of the cycle duration</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The fade-in time as a proportion of the cycle duration</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.FadeInRatioProperty">
            <summary>The fade-in time as a proportion of the cycle duration</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.GetFadeOutRatio(System.Windows.DependencyObject)">
            <summary>Gets the fade-out time as a proportion of the cycle duration. Must be more than <see cref="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.FadeInRatioProperty"/></summary>
            <param name="obj">The dependency object</param>
            <returns>The fade-out time as a proportion of the cycle duration. Must be more than <see cref="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.FadeInRatioProperty"/></returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.SetFadeOutRatio(System.Windows.DependencyObject,System.Double)">
            <summary>Sets the fade-out time as a proportion of the cycle duration. Must be more than <see cref="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.FadeInRatioProperty"/></summary>
            <param name="obj">The dependency object</param>
            <param name="value">The fade-out time as a proportion of the cycle duration. Must be more than <see cref="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.FadeInRatioProperty"/></param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.FadeOutRatioProperty">
            <summary>The fade-out time as a proportion of the cycle duration. Must be more than <see cref="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.FadeInRatioProperty"/></summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.GetCycleDuration(System.Windows.DependencyObject)">
            <summary>Gets the duration of each cycle in milliseconds</summary>
            <param name="obj">The dependency object</param>
            <returns>The duration of each cycle in milliseconds</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.SetCycleDuration(System.Windows.DependencyObject,System.Int32)">
            <summary>Sets the duration of each cycle in milliseconds</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The duration of each cycle in milliseconds</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.CycleDurationProperty">
            <summary>The duration of each cycle in milliseconds</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.GetReverseDirection(System.Windows.DependencyObject)">
            <summary>Gets the direction the cycles goes through the children</summary>
            <param name="obj">The dependency object</param>
            <returns>The direction the cycles goes through the children</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.SetReverseDirection(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets the direction the cycles goes through the children</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The direction the cycles goes through the children</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.ReverseDirectionProperty">
            <summary>The direction the cycles goes through the children</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.GetTimer(System.Windows.DependencyObject)">
            <summary>Gets the timer used to orgestrate the animations</summary>
            <param name="obj">The dependency object</param>
            <returns>The timer used to orgestrate the animations</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.SetTimer(System.Windows.DependencyObject,System.Windows.Threading.DispatcherTimer)">
            <summary>Sets the timer used to orgestrate the animations</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The timer used to orgestrate the animations</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.TimerProperty">
            <summary>The timer used to orgestrate the animations</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.GetCounter(System.Windows.DependencyObject)">
            <summary>Gets the counter indicating which point in the cycle the animation is at</summary>
            <param name="obj">The dependency object</param>
            <returns>The counter indicating which point in the cycle the animation is at</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.CycleChildOpacity.SetCounter(System.Windows.DependencyObject,System.Int32)">
            <summary>Sets the counter indicating which point in the cycle the animation is at</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The counter indicating which point in the cycle the animation is at</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.CycleChildOpacity.CounterProperty">
            <summary>The counter indicating which point in the cycle the animation is at</summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.EngineeringActions">
            <summary>
            Attached properties for setting <see cref="F:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.ClassNameProperty"/> and <see cref="F:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.ClassInstanceProperty"/>.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.EngineeringActions.GetClassName(System.Windows.DependencyObject)">
            <summary>Gets the Class Name</summary>
            <param name="obj">The dependency object</param>
            <returns>The Class Name</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.EngineeringActions.SetClassName(System.Windows.DependencyObject,System.String)">
            <summary>Sets the Class Name</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The Class Name</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.EngineeringActions.ClassNameProperty">
            <summary>The Class Name</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.EngineeringActions.GetClassInstance(System.Windows.DependencyObject)">
            <summary>Gets the Class Instance</summary>
            <param name="obj">The dependency object</param>
            <returns>The Class Instance</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.EngineeringActions.SetClassInstance(System.Windows.DependencyObject,System.Object)">
            <summary>Sets the Class Instance</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The Class Instance</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.EngineeringActions.ClassInstanceProperty">
            <summary>The Class Instance</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.EngineeringActions.GetAssemblyName(System.Windows.DependencyObject)">
            <summary>Gets the full assembly name string <see cref="P:System.Reflection.Assembly.FullName"/></summary>
            <param name="obj">The dependency object</param>
            <returns>The full assembly name string <see cref="P:System.Reflection.Assembly.FullName"/></returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.EngineeringActions.SetAssemblyName(System.Windows.DependencyObject,System.String)">
            <summary>Sets the full assembly name string <see cref="P:System.Reflection.Assembly.FullName"/></summary>
            <param name="obj">The dependency object</param>
            <param name="value">The full assembly name string <see cref="P:System.Reflection.Assembly.FullName"/></param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.EngineeringActions.AssemblyNameProperty">
            <summary>The full assembly name string <see cref="P:System.Reflection.Assembly.FullName"/></summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.FocusAttachedProperty">
            <summary>
            Attached property for binding IsFocused to viewmodel
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.FocusAttachedProperty.GetIsFocused(System.Windows.DependencyObject)">
            <summary>
            Gets the IsFocused value
            </summary>
            <param name="obj">The dependency object</param>
            <returns>The IsFocused value</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.FocusAttachedProperty.SetIsFocused(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the IsFocused property
            </summary>
            <param name="obj">The dependency object</param>
            <param name="value">The IsFocused value</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.FocusAttachedProperty.IsFocusedProperty">
            <summary>
            Dependency property for IsFocused
            </summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties">
            <summary>
            Attached properties for horizontal and vertical, line separator styles used on labels.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.GetLineEndOpacityMask(System.Windows.DependencyObject)">
            <summary>
            Gets the opacity mask used to control the gradient at the end of line separators. Defaults to linear fade to transparent.
            </summary>
            <param name="obj">The dependency object</param>
            <returns>The opacity mask used to control the gradient at the end of line separators</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.SetLineEndOpacityMask(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets the opacity mask used to control the gradient at the end of line separators. Defaults to linear fade to transparent.
            </summary>
            <param name="obj">The dependency object</param>
            <param name="value">The opacity mask used to control the gradient at the end of line separators</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.LineEndOpacityMaskProperty">
            <summary>
            The opacity mask used to control the gradient at the end of line separators. Defaults to linear fade to transparent.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.GetLineEndLength(System.Windows.DependencyObject)">
            <summary>
            Gets the length of the separator line, at the end of each line, that has the <see cref="F:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.LineEndOpacityMaskProperty"/> applied.
            </summary>
            <param name="obj">The dependency object</param>
            <returns>The length of the separator line, at the end of each line, that has the <see cref="F:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.LineEndOpacityMaskProperty"/> applied</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.SetLineEndLength(System.Windows.DependencyObject,System.Double)">
            <summary>
            Sets the length of the separator line, at the end of each line, that has the <see cref="F:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.LineEndOpacityMaskProperty"/> applied.
            </summary>
            <param name="obj">The dependency object</param>
            <param name="value">The length of the separator line, at the end of each line, that has the <see cref="F:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.LineEndOpacityMaskProperty"/> applied</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.LineEndLengthProperty">
            <summary>
            The length of the separator line, at the end of each line, that has the <see cref="F:Labman.UserInterface.AttachedProperties.LineSeparatorAttachedProperties.LineEndOpacityMaskProperty"/> applied
            </summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.BrushAnimations">
            <summary>
            Attached properties for <see cref="P:System.Windows.UIElement.IsMouseOver"/> and <see cref="P:System.Windows.UIElement.IsEnabled"/> colours and animations.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.GetHoverBrush(System.Windows.DependencyObject)">
            <summary>Gets the brush used when <see cref="P:System.Windows.UIElement.IsMouseOver"/> is true.</summary>
            <param name="obj">The dependency object</param>
            <returns>The brush used when <see cref="P:System.Windows.UIElement.IsMouseOver"/> is true</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.SetHoverBrush(System.Windows.DependencyObject,System.Windows.Media.SolidColorBrush)">
            <summary>Sets the brush used when <see cref="P:System.Windows.UIElement.IsMouseOver"/> is true.</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The brush used when <see cref="P:System.Windows.UIElement.IsMouseOver"/> is true</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.BrushAnimations.HoverBrushProperty">
            <summary>The brush used when <see cref="P:System.Windows.UIElement.IsMouseOver"/> is true</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.GetNormalBrush(System.Windows.DependencyObject)">
            <summary>Gets the brush used when <see cref="P:System.Windows.UIElement.IsMouseOver"/> returns to false.</summary>
            <param name="obj">The dependency object</param>
            <returns>The brush used when <see cref="P:System.Windows.UIElement.IsMouseOver"/> returns to false</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.SetNormalBrush(System.Windows.DependencyObject,System.Windows.Media.SolidColorBrush)">
            <summary>Sets the brush used when <see cref="P:System.Windows.UIElement.IsMouseOver"/> returns to false.</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The brush used when <see cref="P:System.Windows.UIElement.IsMouseOver"/> returns to false</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.BrushAnimations.NormalBrushProperty">
            <summary>The brush used when <see cref="P:System.Windows.UIElement.IsMouseOver"/> returns to false</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.GetDisabledBrush(System.Windows.DependencyObject)">
            <summary>Gets the brush used when <see cref="P:System.Windows.UIElement.IsEnabled"/> is false.</summary>
            <param name="obj">The dependency object</param>
            <returns>The brush used when <see cref="P:System.Windows.UIElement.IsEnabled"/> is false</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.SetDisabledBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the brush used when <see cref="P:System.Windows.UIElement.IsEnabled"/> is false.</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The brush used when <see cref="P:System.Windows.UIElement.IsEnabled"/> is false</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.BrushAnimations.DisabledBrushProperty">
            <summary>The brush used when <see cref="P:System.Windows.UIElement.IsEnabled"/> is false</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.GetAnimateHoverColor(System.Windows.DependencyObject)">
            <summary>Gets whether the hover colour is animated or just instantly changed</summary>
            <param name="obj">The dependency object</param>
            <returns>Whether the hover colour is animated or just instantly changed</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.SetAnimateHoverColor(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets whether the hover colour is animated or just instantly changed</summary>
            <param name="obj">The dependency object</param>
            <param name="value">Whether the hover colour is animated or just instantly changed</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.BrushAnimations.AnimateHoverColorProperty">
            <summary>Whether the hover colour is animated or just instantly changed</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.GetEnterAnimationDuration(System.Windows.DependencyObject)">
            <summary>Gets the duration of the mouse over animation</summary>
            <param name="obj">The dependency object</param>
            <returns>The duration of the mouse over animation</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.SetEnterAnimationDuration(System.Windows.DependencyObject,System.TimeSpan)">
            <summary>Sets the duration of the mouse over animation</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The duration of the mouse over animation</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.BrushAnimations.EnterAnimationDurationProperty">
            <summary>The duration of the mouse over animation</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.GetLeaveAnimationDuration(System.Windows.DependencyObject)">
            <summary>Gets the duration of the mouse leave animation</summary>
            <param name="obj">The dependency object</param>
            <returns>The duration of the mouse leave animation</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.BrushAnimations.SetLeaveAnimationDuration(System.Windows.DependencyObject,System.TimeSpan)">
            <summary>Sets the duration of the mouse leave animation</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The duration of the mouse leave animation</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.BrushAnimations.LeaveAnimationDurationProperty">
            <summary>The duration of the mouse leave animation</summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.ListBoxProperties">
            <summary>Attached properties to extend the behaviour of <see cref="T:System.Windows.Controls.ListBox"/></summary>
            <summary>Attached properties to extend the behaviour of <see cref="T:System.Windows.Controls.ListBox"/></summary>
            <summary>Attached properties to extend the behaviour of <see cref="T:System.Windows.Controls.ListBox"/></summary>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ListBoxProperties.SelectionClickBehaviourProperty">
            <summary>The selection behaviour when clicking items</summary>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ListBoxProperties.LastMouseDownArgsProperty">
            <summary>The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> of the last mouse down event on one of the items</summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.ListBoxProperties.SelectionClickBehaviour">
            <summary>The possible behaviours of of selection when clicking</summary>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ListBoxProperties.SelectionClickBehaviour.MouseDown">
            <summary>Selection takes place at mouse down (default for <see cref="T:System.Windows.Controls.ListBox"/></summary>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ListBoxProperties.SelectionClickBehaviour.MouseUp">
            <summary>Selection takes place at mouse up. The item under the cursor at mouse up is always selected</summary>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ListBoxProperties.SelectionClickBehaviour.Click">
            <summary>Selection takes place at mouse up. An item is only selected if the mouse down and mouse up events were on the same item</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ListBoxProperties.GetSelectionClickBehaviour(System.Windows.DependencyObject)">
            <summary>Gets the selection behaviour when clicking items</summary>
            <param name="obj">The dependency object</param>
            <returns>selection behaviour when clicking items</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ListBoxProperties.SetSelectionClickBehaviour(System.Windows.DependencyObject,Labman.UserInterface.AttachedProperties.ListBoxProperties.SelectionClickBehaviour)">
            <summary>Sets the selection behaviour when clicking items</summary>
            <param name="obj">The dependency object</param>
            <param name="value">selection behaviour when clicking items</param>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ListBoxProperties.GetLastMouseDownArgs(System.Windows.DependencyObject)">
            <summary>Gets the <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> of the last mouse down event on one of the items</summary>
            <param name="obj">The dependency object</param>
            <returns>the <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> of the last mouse down event on one of the items</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ListBoxProperties.SetLastMouseDownArgs(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventArgs)">
            <summary>Sets the <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> of the last mouse down event on one of the items</summary>
            <param name="obj">The dependency object</param>
            <param name="value">the <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> of the last mouse down event on one of the items</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ListBoxProperties.SelectedItemsProperty">
            <summary>The selected items as a bindable attached property</summary>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ListBoxProperties.NotifyCollectionChangedEventHandlerProperty">
            <summary>bound collection changed handler attached to the ListBox</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ListBoxProperties.GetSelectedItems(System.Windows.DependencyObject)">
            <summary>Gets The selected items as a bindable attached property</summary>
            <param name="obj">The dependency object</param>
            <returns>The selected items as a bindable attached property</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ListBoxProperties.SetSelectedItems(System.Windows.DependencyObject,System.Collections.IList)">
            <summary>Sets The selected items as a bindable attached property</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The selected items as a bindable attached property</param>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ListBoxProperties.GetNotifyCollectionChangedEventHandler(System.Windows.DependencyObject)">
            <summary>Gets bound collection changed handler attached to the ListBox</summary>
            <param name="obj">The dependency object</param>
            <returns>bound collection changed handler attached to the ListBox</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ListBoxProperties.SetNotifyCollectionChangedEventHandler(System.Windows.DependencyObject,System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>Sets bound collection changed handler attached to the ListBox</summary>
            <param name="obj">The dependency object</param>
            <param name="value">bound collection changed handler attached to the ListBox</param>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ListBoxProperties.GetIsSelectedMemberPath(System.Windows.DependencyObject)">
            <summary>Gets the path to a writable property that will be updated with the value of <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected"/></summary>
            <param name="obj">The dependency object</param>
            <returns>The path to a writable property that will be updated with the value of <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected"/></returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ListBoxProperties.SetIsSelectedMemberPath(System.Windows.DependencyObject,System.String)">
            <summary>Sets the path to a writable property that will be updated with the value of <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected"/></summary>
            <param name="obj">The dependency object</param>
            <param name="value">The path to a writable property that will be updated with the value of <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected"/></param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ListBoxProperties.IsSelectedMemberPathProperty">
            <summary>The path to a writable property that will be updated with the value of <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected"/></summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.Popup">
            <summary>Attatched properties for <see cref="T:System.Windows.Controls.Primitives.Popup"/></summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Popup.GetPreventClosingMouseEvent(System.Windows.DependencyObject)">
            <summary>Gets whether the mouse event that closes a popup will be fired</summary>
            <param name="obj">The dependency object</param>
            <returns>Whether the mouse event that closes a popup will be fired</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Popup.SetPreventClosingMouseEvent(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets whether the mouse event that closes a popup will be fired</summary>
            <param name="obj">The dependency object</param>
            <param name="value">Whether the mouse event that closes a popup will be fired</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.Popup.PreventClosingMouseEventProperty">
            <summary>Whether the mouse event that closes a popup will be fired</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Popup.GetIgnoreMouseDownEvent(System.Windows.DependencyObject)">
            <summary>Gets whether <see cref="E:System.Windows.UIElement.MouseDown"/> events are ignored within the popup, allowing <see cref="E:System.Windows.UIElement.MouseUp"/> events to be subscribed to without closing the popup</summary>
            <param name="obj">The dependency object</param>
            <returns>Whether <see cref="E:System.Windows.UIElement.MouseDown"/> events are ignored within the popup, allowing <see cref="E:System.Windows.UIElement.MouseUp"/> events to be subscribed to without closing the popup</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Popup.SetIgnoreMouseDownEvent(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets whether <see cref="E:System.Windows.UIElement.MouseDown"/> events are ignored within the popup, allowing <see cref="E:System.Windows.UIElement.MouseUp"/> events to be subscribed to without closing the popup</summary>
            <param name="obj">The dependency object</param>
            <param name="value">Whether <see cref="E:System.Windows.UIElement.MouseDown"/> events are ignored within the popup, allowing <see cref="E:System.Windows.UIElement.MouseUp"/> events to be subscribed to without closing the popup</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.Popup.IgnoreMouseDownEventProperty">
            <summary>Whether <see cref="E:System.Windows.UIElement.MouseDown"/> events are ignored within the popup, allowing <see cref="E:System.Windows.UIElement.MouseUp"/> events to be subscribed to without closing the popup</summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.Scrolling">
            <summary>
            Attached properties to control how mouse scrolling behaves.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Scrolling.GetMouseScrollDirection(System.Windows.DependencyObject)">
            <summary>Gets the direction the mouse wheel scrolls</summary>
            <param name="obj">The dependency object</param>
            <returns>The direction the mouse wheel scrolls</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Scrolling.SetMouseScrollDirection(System.Windows.DependencyObject,System.Windows.Controls.Orientation)">
            <summary>Sets the direction the mouse wheel scrolls</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The direction the mouse wheel scrolls</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.Scrolling.MouseScrollDirectionProperty">
            <summary>The direction the mouse wheel scrolls</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Scrolling.GetMouseWheelAction(System.Windows.DependencyObject)">
            <summary>Gets the action that is run when the mouse wheel is scrolled</summary>
            <param name="obj">The dependency object</param>
            <returns>The action that is run when the mouse wheel is scrolled</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Scrolling.SetMouseWheelAction(System.Windows.DependencyObject,System.Windows.Input.MouseWheelEventHandler)">
            <summary>Sets the action that is run when the mouse wheel is scrolled</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The action that is run when the mouse wheel is scrolled</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.Scrolling.MouseWheelActionProperty">
            <summary>The action that is run when the mouse wheel is scrolled</summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty">
            <summary>
            Attached properties for toggleswitch on and off text.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.GetOnText(System.Windows.DependencyObject)">
            <summary>
            Gets the text to display when the toggle button is checked.
            </summary>
            <param name="obj">The dependency object</param>
            <returns>The text displayed when the toggle button is checked.</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.SetOnText(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the text to display when the toggle button is checked.
            </summary>
            <param name="obj">The dependency object</param>
            <param name="value">The text displayed when the toggle button is checked.</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.OnTextProperty">
            <summary>
            The text to display when the toggle button is checked.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.GetOffText(System.Windows.DependencyObject)">
            <summary>
            Gets the text to display when the toggle button is unchecked.
            </summary>
            <param name="obj">The dependency object</param>
            <returns>The text displayed when the toggle button is unchecked.</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.SetOffText(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the text to display when the toggle button is unchecked.
            </summary>
            <param name="obj">The dependency object</param>
            <param name="value">The text displayed when the toggle button is unchecked.</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.OffTextProperty">
            <summary>
            The text to display when the toggle button is unchecked.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.GetOnBackground(System.Windows.DependencyObject)">
            <summary>Gets the brush used for the switch background when on</summary>
            <param name="obj">The dependency object</param>
            <returns>The brush used for the switch background when on</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.SetOnBackground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the brush used for the switch background when on</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The brush used for the switch background when on</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.OnBackgroundProperty">
            <summary>The brush used for the switch background when on</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.GetOffBackground(System.Windows.DependencyObject)">
            <summary>Gets the brush used for the switch background when off</summary>
            <param name="obj">The dependency object</param>
            <returns>The brush used for the switch background when off</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.SetOffBackground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the brush used for the switch background when off</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The brush used for the switch background when off</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.OffBackgroundProperty">
            <summary>The brush used for the switch background when off</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.GetOnBorderBrush(System.Windows.DependencyObject)">
            <summary>Gets the brush used for the switch border when on</summary>
            <param name="obj">The dependency object</param>
            <returns>The brush used for the switch border when on</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.SetOnBorderBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the brush used for the switch border when on</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The brush used for the switch border when on</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.OnBorderBrushProperty">
            <summary>The brush used for the switch border when on</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.GetOffBorderBrush(System.Windows.DependencyObject)">
            <summary>Gets the brush used for the switch border when off</summary>
            <param name="obj">The dependency object</param>
            <returns>The brush used for the switch border when off</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.SetOffBorderBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the brush used for the switch border when off</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The brush used for the switch border when off</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.OffBorderBrushProperty">
            <summary>The brush used for the switch border when off</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.GetOnBorderThickness(System.Windows.DependencyObject)">
            <summary>Gets the border thickness when on</summary>
            <param name="obj">The dependency object</param>
            <returns>The border thickness when on</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.SetOnBorderThickness(System.Windows.DependencyObject,System.Double)">
            <summary>Sets the border thickness when on</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The border thickness when on</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.OnBorderThicknessProperty">
            <summary>The border thickness when on</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.GetOffBorderThickness(System.Windows.DependencyObject)">
            <summary>Gets the border thickness when off</summary>
            <param name="obj">The dependency object</param>
            <returns>The border thickness when off</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.SetOffBorderThickness(System.Windows.DependencyObject,System.Double)">
            <summary>Sets the border thickness when off</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The border thickness when off</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.OffBorderThicknessProperty">
            <summary>The border thickness when off</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.GetOnThumbBrush(System.Windows.DependencyObject)">
            <summary>Gets the brush used for the switch thumb when on</summary>
            <param name="obj">The dependency object</param>
            <returns>The brush used for the switch thumb when on</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.SetOnThumbBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the brush used for the switch thumb when on</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The brush used for the switch thumb when on</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.OnThumbBrushProperty">
            <summary>The brush used for the switch thumb when on</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.GetOffThumbBrush(System.Windows.DependencyObject)">
            <summary>Gets the brush used for the switch thumb when off</summary>
            <param name="obj">The dependency object</param>
            <returns>The brush used for the switch thumb when off</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.SetOffThumbBrush(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the brush used for the switch thumb when off</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The brush used for the switch thumb when off</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.ToggleSwitchTextAttachedProperty.OffThumbBrushProperty">
            <summary>The brush used for the switch thumb when off</summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties">
            <summary>Attached properties for</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.GetTrueText(System.Windows.DependencyObject)">
            <summary>Gets the text to display when the indicator is true.</summary>
            <param name="obj">The dependency object</param>
            <returns>The text displayed when the indicator is true.</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.SetTrueText(System.Windows.DependencyObject,System.String)">
            <summary>Sets the text to display when the indicator is true.</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The text displayed when the indicator is true.</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.TrueTextProperty">
            <summary>The text to display when the indicator is true.</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.GetFalseText(System.Windows.DependencyObject)">
            <summary>Gets the text to display when the indicator is false.</summary>
            <param name="obj">The dependency object</param>
            <returns>The text displayed when the indicator is false.</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.SetFalseText(System.Windows.DependencyObject,System.String)">
            <summary>Sets the text to display when the indicator is false.</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The text displayed when the indicator is false.</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.FalseTextProperty">
            <summary>The text to display when the indicator is false.</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.GetTrueColour(System.Windows.DependencyObject)">
            <summary>Gets the colour to display when the indicator is true</summary>
            <param name="obj">The dependency object</param>
            <returns>The colour to display when the indicator is true</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.SetTrueColour(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the colour to display when the indicator is true</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The colour to display when the indicator is true</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.TrueColourProperty">
            <summary>The colour to display when the indicator is true</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.GetFalseColour(System.Windows.DependencyObject)">
            <summary>Gets the colour to display when the indicator is false</summary>
            <param name="obj">The dependency object</param>
            <returns>The colour to display when the indicator is false</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.SetFalseColour(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the colour to display when the indicator is false</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The colour to display when the indicator is false</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.FalseColourProperty">
            <summary>The colour to display when the indicator is false</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.GetTrueForeground(System.Windows.DependencyObject)">
            <summary>Gets the colour of the text when the indicator is true</summary>
            <param name="obj">The dependency object</param>
            <returns>The colour of the text when the indicator is true</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.SetTrueForeground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the colour of the text when the indicator is true</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The colour of the text when the indicator is true</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.TrueForegroundProperty">
            <summary>The colour of the text when the indicator is true</summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.GetFalseForeground(System.Windows.DependencyObject)">
            <summary>Gets the colour of the text when the indicator is false</summary>
            <param name="obj">The dependency object</param>
            <returns>The colour of the text when the indicator is false</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.SetFalseForeground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>Sets the colour of the text when the indicator is false</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The colour of the text when the indicator is false</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.TrueFalseIndicatorAttachedProperties.FalseForegroundProperty">
            <summary>The colour of the text when the indicator is false</summary>
        </member>
        <member name="T:Labman.UserInterface.AttachedProperties.Visibility">
            <summary>Attached properties concerning the ability of View objects to inform their ViewModels of their visibility</summary>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.Visibility._viewModelReferences">
            <summary>
            A Dictionary of collections of Views. Each ViewModel is a Dictionary key for a collection of <see cref="T:System.Windows.FrameworkElement"/> object.
            See the remarks in <see cref="F:Labman.UserInterface.AttachedProperties.Visibility.NotifyOnVisibilityChangedProperty"/> for more details.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Visibility.GetNotifyOnVisibilityChanged(System.Windows.DependencyObject)">
            <summary>
            Gets whether this visual element notifies its <see cref="P:System.Windows.FrameworkElement.DataContext"/> when its visibility changes.
            The <see cref="P:System.Windows.FrameworkElement.DataContext"/> must be of type <see cref="T:Labman.UserInterface.ViewModels.VisibleViewModelBase"/>.
            </summary>
            <param name="obj">The dependency object</param>
            <returns>Whether this view publishes notifications to its DataContext when its visibility changes</returns>
        </member>
        <member name="M:Labman.UserInterface.AttachedProperties.Visibility.SetNotifyOnVisibilityChanged(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether this visual element notifies its <see cref="P:System.Windows.FrameworkElement.DataContext"/> when its visibility changes.
            The <see cref="P:System.Windows.FrameworkElement.DataContext"/> must be of type <see cref="T:Labman.UserInterface.ViewModels.VisibleViewModelBase"/>.
            </summary>
            <param name="obj">The dependency object</param>
            <param name="value">Whether this view publishes notifications to its DataContext when its visibility changes</param>
        </member>
        <member name="F:Labman.UserInterface.AttachedProperties.Visibility.NotifyOnVisibilityChangedProperty">
            <summary>
            Whether this visual element notifies its <see cref="P:System.Windows.FrameworkElement.DataContext"/> when its visibility changes.
            The <see cref="P:System.Windows.FrameworkElement.DataContext"/> must be of type <see cref="T:Labman.UserInterface.ViewModels.VisibleViewModelBase"/>.
            </summary>
            <remarks>
            When this property is attached to an element and set to "true", it informs that element's DataContext when the element's visibility changes.
            The detection of visibility changing is done primarily using the <see cref="P:System.Windows.UIElement.IsVisible"/> property and corresponding
            <see cref="E:System.Windows.UIElement.IsVisibleChanged"/> event. NOTE: This is independent of <see cref="P:System.Windows.UIElement.Visibility"/> property.
            
            As well as using the <see cref="E:System.Windows.UIElement.IsVisibleChanged"/> event, the <see cref="E:System.Windows.FrameworkElement.DataContextChanged"/> event must also
            be subscribed to. There are two situations in which this becomes a factor:
              1. If the visual element is a DataTemplate, then when the DataContext is set to null (thus triggerring the removal of the visual element),
              the <see cref="E:System.Windows.UIElement.IsVisibleChanged"/> event fires after the DataContext is already null. Therefore it would be impossible for the
              view to inform the ViewModel of the change in visibility. As such the <see cref="E:System.Windows.FrameworkElement.DataContextChanged"/> event is used.
              2. If the visual element has its DataContext swapped out for another DataContext, the View needs to inform the old ViewModel that it is
              no longer visibile and inform the new ViewModel that it is visible. Again, the <see cref="E:System.Windows.FrameworkElement.DataContextChanged"/> is needed.
            
            Another aspect to the way this property works is that a ViewModel may have multiple View objects displaying it at one time.
            The job of this property is only to inform the ViewModel if it is visible, not how many View objects are making that the case.
            Therefore, the behaviour of this property is to tell the ViewModel it is visible when ANY visible Views are attached to it, and to tell the
            ViewModel that it is not visible when NO visible Views are attached to it.
            To acheive this, a central collection of ViewModel-View references is maintained. Each ViewModel is used as a key to a collection of Views.
            The collection represents the currently visible Views attached to a given ViewModel. When the collection is empty, that respective ViewModel
            is not visible. When the collection is non-empty, the ViewModel is visible.
            </remarks>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.SearchResult">
            <summary>An object that represents a search result or suggestion.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.SearchResult.Item">
            <summary>The item this <see cref="T:Labman.UserInterface.CustomControls.SearchResult"/> represents.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.SearchResult.SearchMember">
            <summary>The reflected string on the <see cref="P:Labman.UserInterface.CustomControls.SearchResult.Item"/> used for searching and displaying</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.SearchResult.FormattedStrings">
            <summary>A colleciton of string representing the <see cref="P:Labman.UserInterface.CustomControls.SearchResult.SearchMember"/> with spans that match search terms highlighted</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.SearchResult.Score">
            <summary>An indicator of how well this suggestion matches the search terms</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.ResultText">
            <summary>An object that represents a string and whether that string matches a search term</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.ResultText.Text">
            <summary>The text</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.ResultText.IsMatched">
            <summary>Whether the string is a match for a search term</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.AutoSuggestBox">
            <summary>A textbox that shows suggestions from a collection of items based on the entered text.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.TextBoxStyleProperty">
            <summary>The <see cref="T:System.Windows.Style"/> (with <see cref="P:System.Windows.Style.TargetType"/> = <see cref="T:Labman.UserInterface.CustomControls.XTextBox"/>) applied to the textbox</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.SelectedItemProperty">
            <summary>The selected suggestion</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.SubmitOnSuggestionClickedProperty">
            <summary>Whether the <see cref="E:Labman.UserInterface.CustomControls.AutoSuggestBox.Submit"/> event is fired when a suggestion is clicked</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.SubmitOnReturnProperty">
            <summary>Whether the <see cref="E:Labman.UserInterface.CustomControls.AutoSuggestBox.Submit"/> event is fired when the return key is pressed while the control is focused</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.IsSubmitButtonActiveProperty">
            <summary>Determines whether the submit button responds to user input</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.SubmitButtonContentProperty">
            <summary>The content of the submit button</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.SearchMemberPathProperty">
            <summary>The path to a value on the source object to serve as the textual representation of the object.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.MaxSuggestionsProperty">
            <summary>The maximum number of suggestions shown</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.MinSearchCharactersProperty">
            <summary>The minimum number of characters that must be entered before the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource"/> is searched for suggestions</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.CommandProperty">
            <summary>The DependencyProperty for RoutedCommand executed on the <see cref="E:Labman.UserInterface.CustomControls.AutoSuggestBox.Submit"/> event</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.CommandParameterProperty">
            <summary>The DependencyProperty for the CommandParameter passed to the <see cref="F:Labman.UserInterface.CustomControls.AutoSuggestBox.CommandProperty"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.AutoSuggestBox.CommandTargetProperty">
            <summary>
            The DependencyProperty for Target property
            Flags:              None Default Value: null
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.AutoSuggestBox.#cctor">
            <summary>Static constructor to set the default style for <see cref="T:Labman.UserInterface.CustomControls.AutoSuggestBox"/>.</summary>
        </member>
        <member name="E:Labman.UserInterface.CustomControls.AutoSuggestBox.Submit">
            <summary>Event that is fired when the user presses the return key, clicks on an item or clicks the search icon.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.Command">
            <summary>Get or set the RoutedCommand executed on the <see cref="E:Labman.UserInterface.CustomControls.AutoSuggestBox.Submit"/> event</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.CommandParameter">
            <summary>Reflects the parameter to pass to the CommandProperty upon execution.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.CommandTarget">
            <summary>The target element on which to fire the command.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.TextBoxStyle">
            <summary>The <see cref="T:System.Windows.Style"/> (with <see cref="P:System.Windows.Style.TargetType"/> = <see cref="T:Labman.UserInterface.CustomControls.XTextBox"/>) applied to the textbox</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.SelectedItem">
            <summary>The selected suggestion</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.SubmitOnSuggestionClicked">
            <summary>Whether the <see cref="E:Labman.UserInterface.CustomControls.AutoSuggestBox.Submit"/> event is fired when a suggestion is clicked</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.SubmitOnReturn">
            <summary>Whether the <see cref="E:Labman.UserInterface.CustomControls.AutoSuggestBox.Submit"/> event is fired when the return key is pressed while the control is focused</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.IsSubmitButtonActive">
            <summary>Determines whether the submit button responds to user input</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.SubmitButtonContent">
            <summary>Gets and sets the content of the submit button</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.SearchMemberPath">
            <summary>Gets or sets a path to a value on the source object to serve as the textual representation of the object.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.MaxSuggestions">
            <summary>The maximum number of suggestions shown</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.AutoSuggestBox.MinSearchCharacters">
            <summary>Gets or sets the minimum number of characters that must be entered before the <see cref="P:System.Windows.Controls.ItemsControl.ItemsSource"/> is searched for suggestions</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.AutoSuggestBox.OnApplyTemplate">
            <summary>Invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/></summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.AutoSuggestBox.UpdateSuggestions">
            <summary>Refreshes the list of suggestions used to populate the popup.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.AutoSuggestBox.ChangeText(System.String)">
            <summary>Change the displayed text without invoking handlers</summary>
            <param name="newText">The new text</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.AutoSuggestBox.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>Handle heyboard presses</summary>
            <param name="e">The event args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.AutoSuggestBox.OnGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>Called when this element or any below gets focus.</summary>
            <param name="sender">The sender object</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.AutoSuggestBox.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when the keyboard focus changes</summary>
            <param name="e">The event args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.AutoSuggestBox.OnSubmit">
            <summary>Called when the <see cref="E:Labman.UserInterface.CustomControls.AutoSuggestBox.Submit"/> event is fired.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.AutoSuggestBox.IsIntValueNotNegative(System.Object)">
            <summary>Validates the given int to be non-negative. <see cref="P:System.Windows.DependencyProperty.ValidateValueCallback"/></summary>
            <param name="value">The int object to be validated</param>
            <returns>True if the given parameter is a non-negative int</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.Score">
            <summary>Represents an indicator of how good-a match a text string is against a search string</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.Score.#ctor(System.String,System.String)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.CustomControls.Score"/> given the specified text and search text</summary>
            <param name="thisText">The text of this object in which is searched</param>
            <param name="searchText">The text searched for</param>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Score.ExactMatch">
            <summary>True if there is an exact character for character match</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Score.ExactMatchIgnoringCase">
            <summary>True if there is an exact charcater for character match, ignoring case.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Score.NumberOfUniqueTermMatches">
            <summary>The number of search terms exactly matched, without re-using parts of the text.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Score.NumberOfUniqueTermMatchesIgnoringCase">
            <summary>The number of search terms exactly matched, without re-using parts of the text, ignoring case.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Score.OrderingOfTerms">
            <summary>How well the matched search terms are order. 0 is best.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Score.Position">
            <summary>The position of any matched terms</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Score.Match">
            <summary>Whether this result is in any way a match</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Score.FoundTerms">
            <summary>A list of search terms found in the text.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.Score.CompareTo(System.Object)">
            <summary>Compares this objet to another</summary>
            <param name="obj">The other object of type <see cref="T:Labman.UserInterface.CustomControls.Score"/></param>
            <returns>An integer indicating which object would come first in a sequence.</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.FixerPanel">
            <summary>A panel with specialised arrangement routines intended to compensate for the shortfalls in the available WPF layout techniques.</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.FixerPanel.FixModes">
            <summary>The possible modes of arrangement the <see cref="T:Labman.UserInterface.CustomControls.FixerPanel"/> supports.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.FixerPanel.FixModes.StretchThenScroll">
            <summary>
            Intended to be used inside a <see cref="T:System.Windows.Controls.ScrollViewer"/>, containing an element that would happily take up infinite horizontal and/or vertical space, but can take up less. For
            example, a <see cref="T:System.Windows.Controls.WrapPanel"/> in a <see cref="T:System.Windows.Controls.ScrollViewer"/> will normally not wrap and simply take up as much space as it wants. Content will be forced to stretch or shrink
            to the parent's size until that size is less than the content's <see cref="P:System.Windows.FrameworkElement.MinWidth"/> and/or <see cref="P:System.Windows.FrameworkElement.MinHeight"/> properties, at which point
            it can scroll. Use the <see cref="P:Labman.UserInterface.CustomControls.FixerPanel.FixOrientation"/> property to dictate in which orientation the child should stretch before scrolling. <see cref="F:Labman.UserInterface.CustomControls.FixerPanel.FixOrientations.Both"/> is not
            currently implemented.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.FixerPanel.FixModes.StretchWithAlignment">
            <summary>
            For use when it is desired that an element has an <see cref="T:System.Windows.HorizontalAlignment"/> or <see cref="T:System.Windows.VerticalAlignment"/> other than Stretch, but the element should stretch up to a
            maximum size, then align itself. Use the <see cref="F:Labman.UserInterface.CustomControls.FixerPanel.HorizontalStretchAlignmentProperty"/> and <see cref="F:Labman.UserInterface.CustomControls.FixerPanel.VerticalStretchAlignmentProperty"/> to dictate in which orientation this arrangement is applied.
            The child element(s) must have their native <see cref="T:System.Windows.HorizontalAlignment"/> and/or <see cref="T:System.Windows.VerticalAlignment"/> properties be Stretch.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.FixerPanel.FixOrientations">
            <summary>Used by some <see cref="T:Labman.UserInterface.CustomControls.FixerPanel.FixModes"/> to determine in which direction they operate</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.FixerPanel.FixOrientations.Horizontal">
            <summary>Horizontally</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.FixerPanel.FixOrientations.Vertical">
            <summary>Vertically</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.FixerPanel.FixOrientations.Both">
            <summary>In both directions</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.FixerPanel.FixMode">
            <summary>The type of arrangement this panel is being used for.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.FixerPanel.FixModeProperty">
            <summary>The type of arrangement this panel is being used for.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.FixerPanel.FixOrientation">
            <summary>The orientation in which the given <see cref="P:Labman.UserInterface.CustomControls.FixerPanel.FixMode"/> is applied.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.FixerPanel.OrientationModeProperty">
            <summary>The orientation in which the given <see cref="P:Labman.UserInterface.CustomControls.FixerPanel.FixMode"/> is applied.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.FixerPanel.GetHorizontalStretchAlignment(System.Windows.DependencyObject)">
            <summary>Gets the HorizontalStretchAlignment</summary>
            <param name="obj">The dependency object</param>
            <returns>The HorizontalStretchAlignment</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.FixerPanel.SetHorizontalStretchAlignment(System.Windows.DependencyObject,System.Windows.HorizontalAlignment)">
            <summary>Sets the HorizontalStretchAlignment</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The HorizontalStretchAlignment</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.FixerPanel.HorizontalStretchAlignmentProperty">
            <summary>The HorizontalStretchAlignment</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.FixerPanel.GetVerticalStretchAlignment(System.Windows.DependencyObject)">
            <summary>Gets the VerticalStretchAlignment</summary>
            <param name="obj">The dependency object</param>
            <returns>The VerticalStretchAlignment</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.FixerPanel.SetVerticalStretchAlignment(System.Windows.DependencyObject,System.Windows.VerticalAlignment)">
            <summary>Sets the VerticalStretchAlignment</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The VerticalStretchAlignment</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.FixerPanel.VerticalStretchAlignmentProperty">
            <summary>The VerticalStretchAlignment</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.FixerPanel.MeasureOverride(System.Windows.Size)">
            <summary>Works out how much space will be needed by the child.</summary>
            <param name="constraint">The constraint on how much space is available</param>
            <returns>How space will be needed to arrange this element</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.FixerPanel.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges the child and determines the final size of this element</summary>
            <param name="finalSize">The space into whch this element should arrange</param>
            <returns>The final size of this element</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.Lasso">
            <summary>
            A control that provides visual feedback and hit-test information for when a user is performing a click-and-drag interaction. By default, a rectangle is displayed from the start point to the
            current point however, custom derrivations could do advanced things like drawing a path from the mouse points.
            </summary>
            <remarks>There's scope for another derrivation where all the <see cref="T:System.Windows.Point"/>s are <see cref="T:System.Drawing.PointF"/>s instead and are relative to the parent</remarks>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.StartPointProperty">
            <summary>The starting point of the lasso</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.CurrentPointProperty">
            <summary>The current (most recent) point in the lasso</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionWidthPropertyKey">
            <summary>Private property key for SelectionWidthProperty</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionWidthProperty">
            <summary>The current width of the lasso selection area</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionHeightPropertyKey">
            <summary>Private property key for SelectionHeightProperty</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionHeightProperty">
            <summary>The current Height of the lasso selection area</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionLeftPropertyKey">
            <summary>Private property key for SelectionLeftProperty</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionLeftProperty">
            <summary>The current left offset of the lasso selection area</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionTopPropertyKey">
            <summary>Private property key for SelectionTopProperty</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionTopProperty">
            <summary>The current top offset of the lasso selection area</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionRightPropertyKey">
            <summary>Private property key for SelectionRightProperty</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionRightProperty">
            <summary>The current right offset of the lasso selection area</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionBottomPropertyKey">
            <summary>Private property key for SelectionBottomProperty</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.SelectionBottomProperty">
            <summary>The current bottom offset of the lasso selection area</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.HighlightedItemsProperty">
            <summary>The currently highlighted items</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.StrokeProperty">
            <summary>The stroke of the Lasso</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.StrokeThicknessProperty">
            <summary>The stroke thickness of the Lasso</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.StrokeDashArrayProperty">
            <summary>The stroke dash array of the Lasso</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.Lasso.FillProperty">
            <summary>The fill of the Lasso</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.StartPoint">
            <summary>The starting point of the lasso</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.CurrentPoint">
            <summary>The current (most recent) point in the lasso</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.SelectionWidth">
            <summary>The current width of the lasso selection area</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.SelectionHeight">
            <summary>The current Height of the lasso selection area</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.SelectionLeft">
            <summary>The current left offset of the lasso selection area</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.SelectionTop">
            <summary>The current top offset of the lasso selection area</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.SelectionRight">
            <summary>The current right offset of the lasso selection area</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.SelectionBottom">
            <summary>The current bottom offset of the lasso selection area</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.HighlightedItems">
            <summary>The currently highlighted items</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.Stroke">
            <summary>The stroke of the Lasso</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.StrokeThickness">
            <summary>The stroke thickness of the Lasso</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.StrokeDashArray">
            <summary>The stroke dash array of the Lasso</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.Lasso.Fill">
            <summary>The fill of the Lasso</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.Lasso.GetCurrentGeometry(System.Windows.Point,System.Windows.Point)">
            <summary>Gets the geometry of the Lasso. This is used for hit-box testing to determine what is within the Lasso's bounds</summary>
            <param name="startPoint">The starting point of the mouse drag</param>
            <param name="currentPoint">The current point of the mouse drag</param>
            <returns>The resulting geometry (shape) of the Lasso</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.Lasso.Update(Labman.UserInterface.CustomControls.LassoUpdate)">
            <summary>The Update override can process <see cref="T:Labman.UserInterface.CustomControls.LassoUpdate"/> objects sent by the owning element to respond to changes in the Lasso</summary>
            <param name="lassoUpdate">The update information</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.Lasso.GetGeometryCore(System.Windows.Point,System.Windows.Point)">
            <summary>Updates the <see cref="P:Labman.UserInterface.CustomControls.Lasso.StartPoint"/> and <see cref="P:Labman.UserInterface.CustomControls.Lasso.CurrentPoint"/> properties and returns the geometry of the Lasso by calling <see cref="M:Labman.UserInterface.CustomControls.Lasso.GetCurrentGeometry(System.Windows.Point,System.Windows.Point)"/></summary>
            <param name="startPoint">The starting point of the mouse drag</param>
            <param name="currentPoint">The current point of the mouse drag</param>
            <returns>The resulting geometry (shape) of the Lasso</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.Lasso.UpdateCore(Labman.UserInterface.CustomControls.LassoUpdate)">
            <summary>Updates the Lasso with information from the owning element. Calls <see cref="M:Labman.UserInterface.CustomControls.Lasso.Update(Labman.UserInterface.CustomControls.LassoUpdate)"/></summary>
            <param name="lassoUpdate">The update information</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.Lasso.EmptyDoubleCollection">
            <summary>Helper to create a default freezeable double collection (because DoubleCollection.Empty is internal)</summary>
            <returns>A frozen new DoubleCollection</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.LassoUpdate">
            <summary>Update information sent from the consumer/owner of a <see cref="T:Labman.UserInterface.CustomControls.Lasso"/> (typically some kind of Selector UI control) to the <see cref="T:Labman.UserInterface.CustomControls.Lasso"/></summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.LassoUpdate.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.CustomControls.LassoUpdate"/></summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.LassoUpdate.#ctor(System.Windows.Point)">
            <summary>An update for the start of a click-and-drag interaction</summary>
            <param name="startPosition">The starting position</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.LassoUpdate.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>An update for an ongoing click-and-drag interaction</summary>
            <param name="startPosition">The starting position</param>
            <param name="currentPosition">The current position</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.LassoUpdate.#ctor(System.Windows.Point,System.Windows.Point,System.Collections.ICollection)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.CustomControls.LassoUpdate"/></summary>
            <param name="startPosition">The starting position</param>
            <param name="currentPosition">The current position</param>
            <param name="highlightedItems">The collection of items that pass hit box testing</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.LassoUpdate.#ctor(System.Windows.Point,System.Windows.Point,Labman.UserInterface.CustomControls.LassoUpdate.LassoUpdateType,System.Collections.ICollection)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.CustomControls.LassoUpdate"/></summary>
            <param name="startPosition">The starting position</param>
            <param name="currentPosition">The current position</param>
            <param name="updateType">The type of update</param>
            <param name="highlightedItems">The collection of items that pass hit box testing</param>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.LassoUpdate.LassoUpdateType">
            <summary>The possible type of <see cref="T:Labman.UserInterface.CustomControls.LassoUpdate"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.LassoUpdate.LassoUpdateType.Start">
            <summary>This is the first point of the lasso. The values of <see cref="P:Labman.UserInterface.CustomControls.LassoUpdate.CurrentPosition"/> and <see cref="P:Labman.UserInterface.CustomControls.LassoUpdate.HighlightedItems"/> are undefined</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.LassoUpdate.LassoUpdateType.Current">
            <summary>This is a point during the lasso selection.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.LassoUpdate.LassoUpdateType.End">
            <summary>The lasso selection has ended. All other properties are undefined</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.LassoUpdate.EndUpdate">
            <summary>An update for the end of a click-and-drag interaction.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.LassoUpdate.StartPosition">
            <summary>The position within the <see cref="T:Labman.UserInterface.CustomControls.Lasso"/> object's bound at which the click-and-drag interaction started</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.LassoUpdate.CurrentPosition">
            <summary>The current mouse position within the <see cref="T:Labman.UserInterface.CustomControls.Lasso"/> object's bound at which the click-and-drag interaction is happening</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.LassoUpdate.UpdateType">
            <summary>The <see cref="T:Labman.UserInterface.CustomControls.LassoUpdate.LassoUpdateType"/> of this update</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.LassoUpdate.HighlightedItems">
            <summary>The collection of items that have passed hit box testing for the current click-and-drag interaction</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.RackProperties">
            <summary>Properties and enumerations pertaining to rack controls</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.RackProperties.IndexingDirections">
            <summary>The direction in which indexes are ordered</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.RackProperties.IndexBasings">
            <summary>Whether indexes are 0-based or 1-based</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.RackProperties.PositionLabelsMode">
            <summary>Whether and where the position label is displayed</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.GetColumns(System.Windows.DependencyObject)">
            <summary>Gets the number of columns in a rack</summary>
            <param name="obj">The dependency object on which to get the direction in which indexes are ordered</param>
            <returns>The number of columns of the given object</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.SetColumns(System.Windows.DependencyObject,System.Int32)">
            <summary>Sets the number of columns in a rack</summary>
            <param name="obj">The dependency object on which to set the number of columns</param>
            <param name="value">The new number of columns</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.ColumnsProperty">
            <summary>The number of columns in a rack</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.GetRows(System.Windows.DependencyObject)">
            <summary>Gets the number of rows in a rack</summary>
            <param name="obj">The dependency object on which to get the direction in which indexes are ordered</param>
            <returns>The number of rows of the given object</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.SetRows(System.Windows.DependencyObject,System.Int32)">
            <summary>Sets the number of rows in a rack</summary>
            <param name="obj">The dependency object on which to set the number of rows</param>
            <param name="value">The new number of rows</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.RowsProperty">
            <summary>The number of rows in a rack</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.GetRackIndex(System.Windows.DependencyObject)">
            <summary>Static getter for the RackIndex attached property</summary>
            <param name="obj">The dependency object on which to get the rack index</param>
            <returns>The rack index of the given object</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.SetRackIndex(System.Windows.DependencyObject,System.Int32)">
            <summary>Internal setter for RackIndex. This property is not settable by an app, only by internal code</summary>
            <param name="obj">The dependency object on which to set the rack index</param>
            <param name="value">The new rack index</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.ClearRackIndex(System.Windows.DependencyObject)">
            <summary>Internal clearer for RackIndex. This property is not settable by an app, only by internal code.</summary>
            <param name="obj">The dependency object on which to clear the rack index</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.RackIndexPropertyKey">
            <summary>The position in the rack</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.RackIndexProperty">
            <summary>RackIndex is set on containers generated for a RackControl. The RackIndex lies in the range [0, NumberOfPositions].</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.GetIndexingDirection(System.Windows.DependencyObject)">
            <summary>Gets the direction in which indexes are ordered</summary>
            <param name="obj">The dependency object on which to get the direction in which indexes are ordered</param>
            <returns>The direction in which indexes are ordered</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.SetIndexingDirection(System.Windows.DependencyObject,Labman.UserInterface.CustomControls.RackProperties.IndexingDirections)">
            <summary>Sets the direction in which indexes are ordered</summary>
            <param name="obj">The dependency object on which to set the direction in which indexes are ordered</param>
            <param name="value">The new value</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.IndexingDirectionProperty">
            <summary>The direction in which indexes are ordered</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.GetIndexBasing(System.Windows.DependencyObject)">
            <summary>Gets whether rack indexes are 0-based or 1-based</summary>
            <param name="obj">The dependency object on which to get whether rack indexes are 0-based or 1-based</param>
            <returns>Whether rack indexes are 0-based or 1-based</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.SetIndexBasing(System.Windows.DependencyObject,Labman.UserInterface.CustomControls.RackProperties.IndexBasings)">
            <summary>Sets whether rack indexes are 0-based or 1-based</summary>
            <param name="obj">The dependency object on which to set whether rack indexes are 0-based or 1-based</param>
            <param name="value">The new value</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.IndexBasingProperty">
            <summary>Whether rack indexes are 0-based or 1-based</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.GetPositionLabelMode(System.Windows.DependencyObject)">
            <summary>Gets the position labels mode</summary>
            <param name="obj">The dependency object</param>
            <returns>The position labels mode</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.SetPositionLabelMode(System.Windows.DependencyObject,Labman.UserInterface.CustomControls.RackProperties.PositionLabelsMode)">
            <summary>Sets the position labels mode</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The position labels mode</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.PositionLabelsModeProperty">
            <summary>The position labels mode</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.GetPositionLabelsOverlap(System.Windows.DependencyObject)">
            <summary>Gets Whether the position labels take up space from the position or overlap it</summary>
            <param name="obj">The dependency object</param>
            <returns>Whether the position labels take up space from the position or overlap it</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.SetPositionLabelsOverlap(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets Whether the position labels take up space from the position or overlap it</summary>
            <param name="obj">The dependency object</param>
            <param name="value">Whether the position labels take up space from the position or overlap it</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.PositionLabelsOverlapProperty">
            <summary>Whether the position labels take up space from the position or overlap it</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.GetPositionLabelsStyle(System.Windows.DependencyObject)">
            <summary>Gets the style (of target type <see cref="T:System.Windows.Controls.Label"/> applied to position labels</summary>
            <param name="obj">The dependency object</param>
            <returns>The style (of target type <see cref="T:System.Windows.Controls.Label"/> applied to position labels</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.SetPositionLabelsStyle(System.Windows.DependencyObject,System.Windows.Style)">
            <summary>Sets the style (of target type <see cref="T:System.Windows.Controls.Label"/> applied to position labels</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The style (of target type <see cref="T:System.Windows.Controls.Label"/> applied to position labels</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.PositionLabelsStyleProperty">
            <summary>The style (of target type <see cref="T:System.Windows.Controls.Label"/> applied to position labels</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.GetEmptyPositionsTemplate(System.Windows.DependencyObject)">
            <summary>Gets the template for content displayed at empty positions</summary>
            <param name="obj">The dependency object</param>
            <returns>The template for content displayed at empty positions</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.SetEmptyPositionsTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>Sets the template for content displayed at empty positions</summary>
            <param name="obj">The dependency object</param>
            <param name="value">The template for content displayed at empty positions</param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.EmptyPositionsTemplateProperty">
            <summary>The template for content displayed at empty positions</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.GetShowGridLines(System.Windows.DependencyObject)">
            <summary>Gets whether grid lines will be shown on the <see cref="T:Labman.UserInterface.CustomControls.RackControlItem"/></summary>
            <param name="obj">The dependency object</param>
            <returns>The whether grid lines will be shown on the <see cref="T:Labman.UserInterface.CustomControls.RackControlItem"/></returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackProperties.SetShowGridLines(System.Windows.DependencyObject,System.Boolean)">
            <summary>Sets whether grid lines will be shown on the <see cref="T:Labman.UserInterface.CustomControls.RackControlItem"/></summary>
            <param name="obj">The dependency object</param>
            <param name="value">Whether grid lines will be shown on the <see cref="T:Labman.UserInterface.CustomControls.RackControlItem"/></param>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackProperties.ShowGridLinesProperty">
            <summary>Whether grid lines will be shown on the <see cref="T:Labman.UserInterface.CustomControls.RackControlItem"/></summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.RackControl">
            <summary>A ListBox that provides features for organising elements by an index, in accordance with standard rack arrangements.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.Columns">
            <summary>The number of columns of the RackControl</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.ColumnsProperty">
            <summary>The number of columns of the RackControl</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.Rows">
            <summary>The number of rows of the RackControl</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.RowsProperty">
            <summary>The number of rows of the RackControl</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.IndexBasing">
            <summary>Whether rack indexes are 0-based or 1-based</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.IndexBasingProperty">
            <summary>Whether rack indexes are 0-based or 1-based</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.IndexingDirection">
            <summary>The direction in which indexes are ordered</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.IndexingDirectionProperty">
            <summary>The direction in which indexes are ordered</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.NumberOfPositions">
            <summary>The total number of positions of the rack panel. If not set, the number of items in the <see cref="F:System.Windows.Controls.ItemsControl.ItemsSourceProperty"/> will be used.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.NumberOfPositionsProperty">
            <summary>The total number of positions of the rack panel. If not set, the number of items in the <see cref="F:System.Windows.Controls.ItemsControl.ItemsSourceProperty"/> will be used.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.IndexMemberPath">
            <summary>The path of the property that identifies that item's index</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.IndexMemberPathProperty">
            <summary>The path of the property that identifies that item's index</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.PositionLabelsMode">
            <summary>The position labels mode</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.PositionLabelsModeProperty">
            <summary>The position labels mode</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.PositionLabelsOverlap">
            <summary>Whether the position labels take up space from the position or overlap it</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.PositionLabelsOverlapProperty">
            <summary>Whether the position labels take up space from the position or overlap it</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.PositionLabelsStyle">
            <summary>The style (of target type <see cref="T:System.Windows.Controls.Label"/> applied to position labels</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.PositionLabelsStyleProperty">
            <summary>The style (of target type <see cref="T:System.Windows.Controls.Label"/> applied to position labels</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.EmptyPositionsTemplate">
            <summary>The template for content displayed at empty positions</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.EmptyPositionsTemplateProperty">
            <summary>The template for content displayed at empty positions</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControl.ShowGridLines">
            <summary>Whether grid lines will be shown on the <see cref="T:Labman.UserInterface.CustomControls.RackControlItem"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControl.ShowGridLinesProperty">
            <summary>Whether grid lines will be shown on the <see cref="T:Labman.UserInterface.CustomControls.RackControlItem"/></summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackControl.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.CustomControls.RackControl"/></summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackControl.#cctor">
            <summary>Static constructor for the <see cref="T:Labman.UserInterface.CustomControls.RackControl"/> class</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackControl.OnInitialized(System.EventArgs)">
            <summary>Invoked when the control is initialised</summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackControl.IsItemItsOwnContainerOverride(System.Object)">
            <summary>Determines if the specified item is (or is eligible to be) its own ItemContainer.</summary>
            <param name="item">Specified item.</param>
            <returns>true if the item is its own ItemContainer; otherwise, false.</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackControl.GetContainerForItemOverride">
            <summary>Creates or identifies the element used to display a specified item.</summary>
            <returns>The element used to display a specified item.</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackControl.ResetCollection(System.Collections.IEnumerable)">
            <summary>Regenerates the internal collection a-fresh from the input collection.</summary>
            <param name="newItemSource">The input collection we are bound to (or given as direct content)</param>
            <returns>The generated internal collection</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackControl.AddItem(System.Object,System.Int32,System.Boolean@)">
            <summary>Adds or inserts a new item into the internal collection. Replaces existing items or adds new empty items between the current collection and the new item if necessary</summary>
            <param name="item">The new item</param>
            <param name="defaultPosition">The position to add the item if no position is determinable from <see cref="P:Labman.UserInterface.CustomControls.RackControl.IndexMemberPath"/></param>
            <param name="indexIsFromPath">Whether the added item's position was determined using its <see cref="P:Labman.UserInterface.CustomControls.RackControl.IndexMemberPath"/> or not</param>
            <returns>The index the item was added</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.RackControlItem">
            <summary>Represents an item in a <see cref="T:Labman.UserInterface.CustomControls.RackControl"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControlItem.PositionLabelsMode">
            <summary>The position labels mode</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControlItem.PositionLabelsModeProperty">
            <summary>The position labels mode</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControlItem.PositionLabelsOverlap">
            <summary>Whether the position labels take up space from the position or overlap it</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControlItem.PositionLabelsOverlapProperty">
            <summary>Whether the position labels take up space from the position or overlap it</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControlItem.PositionLabelsStyle">
            <summary>The style (of target type <see cref="T:System.Windows.Controls.Label"/> applied to position labels</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControlItem.PositionLabelsStyleProperty">
            <summary>The style (of target type <see cref="T:System.Windows.Controls.Label"/> applied to position labels</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControlItem.EmptyPositionsTemplate">
            <summary>The template for content displayed at empty positions</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControlItem.EmptyPositionsTemplateProperty">
            <summary>The template for content displayed at empty positions</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackControlItem.ShowGridLines">
            <summary>Whether grid lines will be shown on the <see cref="T:Labman.UserInterface.CustomControls.RackControlItem"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackControlItem.ShowGridLinesProperty">
            <summary>Whether grid lines will be shown on the <see cref="T:Labman.UserInterface.CustomControls.RackControlItem"/></summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackControlItem.OnApplyTemplate">
            <summary>Invoked whenever application code or internal processes call System.Windows.FrameworkElement.ApplyTemplate.</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.RackPanel">
            <summary>A Panel for arranging items as they would be in a vial-rack, according to the given number of rows and columns, and the indexing direction.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackPanel.Columns">
            <summary>The number of columns in a rack</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackPanel.ColumnsProperty">
            <summary>The number of columns in a rack</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackPanel.Rows">
            <summary>The number of rows in a rack</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackPanel.RowsProperty">
            <summary>The number of rows in a rack</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.RackPanel.IndexingDirection">
            <summary>The direction in which indexes are ordered</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.RackPanel.IndexingDirectionProperty">
            <summary>The direction in which indexes are ordered</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackPanel.MeasureOverride(System.Windows.Size)">
            <summary>Measures the size in layout required for child elements and determines a size for the System.Windows.FrameworkElement-derived class.</summary>
            <param name="constraint">
            The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.
            </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.RackPanel.ArrangeOverride(System.Windows.Size)">
            <summary>Positions child elements and determines a size for a System.Windows.FrameworkElement derived class.</summary>
            <param name="arrangeSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XGridSplitter">
            <summary>An extension to the <see cref="T:System.Windows.Controls.GridSplitter"/> that supports touch input when inside a scroll viewer</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XGridSplitter.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
            <summary>Handles the PreviewTouchDown event</summary>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XGridSplitter.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
            <summary>Handles the PreviewTouchUp event</summary>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XGridSplitter.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
            <summary>Handles the OnLostTouchCapture event</summary>
            <param name="e">The args</param>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XListBox">
            <summary>Extension of ListBox that provides extra features like selection click behaviour, dragging selection and SelectedItems bindinable property.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XListBox.SelectionClickBehaviour">
            <summary>The click selection behaviour</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XListBox.SelectionClickBehaviourProperty">
            <summary>The click selection behaviour</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XListBox.EnableLasso">
            <summary>Whether lasso selection is enabled</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XListBox.EnableLassoProperty">
            <summary>Whether lasso selection is enabled</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XListBox.Lasso">
            <summary>Provides the geometry and visuals for the lasso selection.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XListBox.LassoProperty">
            <summary>Provides the geometry and visuals for the lasso selection.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XListBox.LassoStyle">
            <summary>The style applied to the <see cref="T:Labman.UserInterface.CustomControls.Lasso"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XListBox.LassoStyleProperty">
            <summary>The style applied to the <see cref="T:Labman.UserInterface.CustomControls.Lasso"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XListBox.IsSelectedMemberPath">
            <summary>The path to a writable property that will be updated with the value of <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XListBox.IsSelectedMemberPathProperty">
            <summary>The path to a writable property that will be updated with the value of <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XListBox.SelectedItems">
            <summary>A bindable collection of the selected items</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XListBox.SelectedItemsProperty">
            <summary>A bindable collection of the selected items</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.CustomControls.XListBox"/></summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.#cctor">
            <summary>Static constructor for the <see cref="T:Labman.UserInterface.CustomControls.XListBox"/> class</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.OnInitialized(System.EventArgs)">
            <summary>Invoked when the control is initialised</summary>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.OnApplyTemplate">
            <summary>
            Invoked whenever application code or internal processes call System.Windows.FrameworkElement.ApplyTemplate
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Raises the System.Windows.FrameworkElement.SizeChanged event, using the specified information as part of the eventual event data.
            </summary>
            <param name="sizeInfo">Details of the old and new size involved in the change</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.PreviewMouseLeftButtonDown routed event reaches an element in its route that is derived from this class.
            Stores the start position of any click-and-drag interactions and updates the <see cref="P:Labman.UserInterface.CustomControls.XListBox.Lasso"/> accordingly.
            </summary>
            <param name="e">The System.Windows.Input.MouseButtonEventArgs that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Called when a System.Windows.Controls.ListBox reports a mouse move.
            Processes the mouse move to update click-and-drag interactions.
            </summary>
            <param name="e">Provides data for System.Windows.Input.MouseEventArgs.</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonUp routed event reaches an element in its route that is derived from this class.
            Updates the selected state of items after a click-and-drag interaction.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            The event data reports that the left mouse button was released.
            </param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.CoerceSelectionClickBehaviour(System.Windows.DependencyObject,System.Object)">
            <summary>
            Ensures the <see cref="P:Labman.UserInterface.CustomControls.XListBox.SelectionClickBehaviour"/> is <see cref="F:Labman.UserInterface.AttachedProperties.ListBoxProperties.SelectionClickBehaviour.Click"/> when <see cref="P:Labman.UserInterface.CustomControls.XListBox.EnableLasso"/> is set.
            </summary>
            <param name="d">The dependency object</param>
            <param name="baseValue">The base value before coercion</param>
            <returns>The coerced value</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.SelectionClickBehaviourChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Forces value coercion of the <see cref="F:Labman.UserInterface.CustomControls.XListBox.SelectionClickBehaviourProperty"/>. Required for when the <see cref="P:Labman.UserInterface.CustomControls.XListBox.SelectionClickBehaviour"/> becomes unset which wouldn't noramlly cause value coercion.
            </summary>
            <param name="d">The dependency object</param>
            <param name="e">The property changed event arguments</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.CoerceEnableLasso(System.Windows.DependencyObject,System.Object)">
            <summary>
            Ensures the value of <see cref="P:Labman.UserInterface.CustomControls.XListBox.EnableLasso"/> is false when <see cref="T:System.Windows.Controls.SelectionMode"/> is <see cref="F:System.Windows.Controls.SelectionMode.Single"/>.
            Because <see cref="T:System.Windows.Controls.SelectionMode"/> is <see cref="F:System.Windows.Controls.SelectionMode.Single"/> by default, this means <see cref="P:Labman.UserInterface.CustomControls.XListBox.EnableLasso"/> is false by default.
            However, if <see cref="T:System.Windows.Controls.SelectionMode"/> is changed to anything else, the lasso is enabled/
            </summary>
            <param name="d">The dependency object</param>
            <param name="baseValue">The base value before coercion</param>
            <returns>The coerced value</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.EnableLassoChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Forces value coercion of the <see cref="F:Labman.UserInterface.CustomControls.XListBox.SelectionClickBehaviourProperty"/> whenever the <see cref="F:Labman.UserInterface.CustomControls.XListBox.EnableLassoProperty"/> changes
            </summary>
            <param name="d">The dependency object</param>
            <param name="e">The property changed event arguments</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.SelectionModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Forces value coercion of the <see cref="F:Labman.UserInterface.CustomControls.XListBox.EnableLassoProperty"/> whenever the value of <see cref="P:System.Windows.Controls.ListBox.SelectionMode"/> changes
            </summary>
            <param name="d">The dependency object</param>
            <param name="e">The property changed event arguments</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>Determines if the specified item is (or is eligible to be) its own ItemContainer.</summary>
            <param name="item">Specified item.</param>
            <returns>true if the item is its own ItemContainer; otherwise, false.</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBox.GetContainerForItemOverride">
            <summary>Creates or identifies the element used to display a specified item.</summary>
            <returns>The element used to display a specified item.</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XListBoxItem">
            <summary>Represents an item in an <see cref="T:Labman.UserInterface.CustomControls.XListBox"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XListBoxItem.IsSelectedMemberPath">
            <summary>The path to a writable property that will be updated with the value of <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XListBoxItem.IsSelectedMemberPathProperty">
            <summary>The path to a writable property that will be updated with the value of <see cref="P:System.Windows.Controls.ListBoxItem.IsSelected"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XListBoxItem.IsHighlighted">
            <summary>Whether the item is highlighted with the lasso</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XListBoxItem.IsHighlightedProperty">
            <summary>Whether the item is highlighted with the lasso</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XListBoxItem.SelectionClickBehaviour">
            <summary>The click selection behaviour</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XListBoxItem.SelectionClickBehaviourProperty">
            <summary>The click selection behaviour</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBoxItem.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>Invoked when this item is selected</summary>
            <param name="e">The selection arguments</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBoxItem.OnUnselected(System.Windows.RoutedEventArgs)">
            <summary>Invoked when this item is un-selected</summary>
            <param name="e">The selection arguments</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBoxItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonDown routed event reaches an element in its route that is derived from this class.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            The event data reports that the left mouse button was released.
            </param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBoxItem.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.MouseRightButtonDown routed event reaches an element in its route that is derived from this class.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            The event data reports that the left mouse button was released.
            </param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBoxItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.MouseLeftButtonUp routed event reaches an element in its route that is derived from this class.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            The event data reports that the left mouse button was released.
            </param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBoxItem.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.UIElement.MouseRightButtonUp routed event reaches an element in its route that is derived from this class.
            </summary>
            <param name="e">
            The System.Windows.Input.MouseButtonEventArgs that contains the event data.
            The event data reports that the left mouse button was released.
            </param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBoxItem.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <summary>
            Enable hit testing for <see cref="T:Labman.UserInterface.CustomControls.XListBoxItem"/>s
            </summary>
            <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
            <returns>Results of the test, including the evaluated point.</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XListBoxItem.HitTestCore(System.Windows.Media.GeometryHitTestParameters)">
            <summary>
            Enable hit testing for <see cref="T:Labman.UserInterface.CustomControls.XListBoxItem"/>s
            </summary>
            <param name="hitTestParameters">Describes the hit test to perform, including the initial hit point.</param>
            <returns>Results of the test, including the evaluated geometry.</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XThumb">
            <summary>An extension to the <see cref="T:System.Windows.Controls.Primitives.Thumb"/> class that supports touch input when inside a scroll viewer</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XThumb.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)">
            <summary>Handles the PreviewTouchDown event</summary>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XThumb.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)">
            <summary>Handles the PreviewTouchUp event</summary>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XThumb.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)">
            <summary>Handles the OnLostTouchCapture event</summary>
            <param name="e">The args</param>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XWrapPanel">
            <summary>Extension to the <see cref="T:System.Windows.Controls.WrapPanel"/> class that allows more control over how and when elements wrap, as well as the ability to have elements stretch to the container's size.</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XWrapPanel.Row">
            <summary>Represents a row of elements (either arranged vertically, like a column or horizontally like a traditional row)</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.Row.Elements">
            <summary>The children in this row</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.Row.NonStretchSpaceTaken">
            <summary>The space taken up in the flowing direction by non-stretching children</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.Row.StretchSpaceTaken">
            <summary>The space taken up in the flowing direction by stretching children at their minimum size</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.Row.StretchingInFlowElements">
            <summary>The number of element that stretch in the flowing direction</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.Row.MaxFlowSizeOfElements">
            <summary>The minimum size of the largest element in the flow direction. Only needed when the <see cref="T:Labman.UserInterface.CustomControls.XWrapPanel.StretchSizing"/> is <see cref="F:Labman.UserInterface.CustomControls.XWrapPanel.StretchSizing.Uniform"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.Row.RenderWrapSize">
            <summary>The size this row will be in the wrapping direction</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XWrapPanel.FlowWrapUIElement">
            <summary>A <see cref="T:Labman.UserInterface.CustomControls.XWrapPanel.FlowWrapElement"/> linked to an actual <see cref="T:System.Windows.UIElement"/></summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.FlowWrapUIElement.#ctor(System.Windows.UIElement,Labman.UserInterface.CustomControls.XWrapPanel,System.Double,System.Double,System.Windows.Size)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.CustomControls.XWrapPanel.FlowWrapUIElement"/> and measures it to get its minimum size and stretching characteristics</summary>
            <param name="element">The <see cref="T:System.Windows.UIElement"/> this object represents</param>
            <param name="xWrapPanelContext">The context under which this element exists</param>
            <param name="constraintFlow">The constraint in the flow direction</param>
            <param name="constraintWrap">The constraint in the wrap direction</param>
            <param name="constraint">The constraint. Passing three parameters in reduces CPU work</param>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.FlowWrapUIElement.Element">
            <summary>The <see cref="T:System.Windows.UIElement"/> this object represents</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XWrapPanel.FlowWrapElement">
            <summary>Describes sizing characteristics of interest of an element in the flow and wrap directions</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.FlowWrapElement.MinSizeFlow">
            <summary>The minimum size of the element in the flow direction</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.FlowWrapElement.MinSizeWrap">
            <summary>The minimum size of the element in the wrap direction</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.FlowWrapElement.StretchesInFlow">
            <summary>Whether the element stretchs in the flow direction</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.FlowWrapElement.StretchesInWrap">
            <summary>Whether the element stretches in the wrap direction</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel._infinite">
            <summary>A size with infinite width and height. Saves creating the same thing over and over</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel._rows">
            <summary>The internal model of the rows of this panel. Note, the rows are not always horizontal, depending on the <see cref="T:System.Windows.Controls.Orientation"/> of the panel</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XWrapPanel.StretchMode">
            <summary>Determines whether elements in an <see cref="T:Labman.UserInterface.CustomControls.XWrapPanel"/> are stretched to fill the available space</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel.StretchMode.Never">
            <summary>Elements are never stretched and will take up their minimum space</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel.StretchMode.AccordingToChild">
            <summary>Elements are only stretched if their Alignment in the relvant direction is Stretch</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel.StretchMode.Always">
            <summary>Elements are always stretched</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XWrapPanel.StretchSizing">
            <summary>Determines how much elements are stretch and in some cases whether elements need to wrap</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel.StretchSizing.ProRata">
            <summary>Elements are allowed to wrap as normal, then are stretched to fill the available space proportionally to their minimum size</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel.StretchSizing.Uniform">
            <summary>All elements are stretched to the same size such that they fill the available space. This may result in elements wrapping when they otherwise would not.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.FlowStretchMode">
            <summary>Whether elements should be stretched in the flow direction (horizontal when the <see cref="T:System.Windows.Controls.Orientation"/> is Horizontal).</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel.FlowStretchModeProperty">
            <summary>Whether elements should be stretched in the flow direction (horizontal when the <see cref="T:System.Windows.Controls.Orientation"/> is Horizontal).</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.WrapStretchMode">
            <summary>Whether elements should be stretched in the wrap direction (vertical when the <see cref="T:System.Windows.Controls.Orientation"/> is Horizontal).</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel.WrapStretchModeProperty">
            <summary>Whether elements should be stretched in the wrap direction (vertical when the <see cref="T:System.Windows.Controls.Orientation"/> is Horizontal).</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.FlowStretchSizing">
            <summary>How elements are stretched in the flow direction (horizontal when the <see cref="T:System.Windows.Controls.Orientation"/> is Horizontal).</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel.FlowStretchSizingProperty">
            <summary>How elements are stretched in the flow direction (horizontal when the <see cref="T:System.Windows.Controls.Orientation"/> is Horizontal).</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XWrapPanel.WrapStretchSizing">
            <summary>How elements are stretched in the wrap direction (vertical when the <see cref="T:System.Windows.Controls.Orientation"/> is Horizontal).</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XWrapPanel.WrapStretchSizingProperty">
            <summary>How elements are stretched in the wrap direction (vertical when the <see cref="T:System.Windows.Controls.Orientation"/> is Horizontal).</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.MeasureOverride(System.Windows.Size)">
            <summary>Works out how much space will be needed by the child.</summary>
            <param name="constraint">The constraint on how much space is available</param>
            <returns>How space will be needed to arrange this element</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.ArrangeOverride(System.Windows.Size)">
            <summary>Arranges the child and determines the final size of this element</summary>
            <param name="finalSize">The space into whch this element should arrange</param>
            <returns>The final size of this element</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.CalculateNumberOfRows(System.Double,System.Double,System.Windows.Size)">
            <summary>
            Calculates how many rows will be needed for the current children and determines various properties about the rows.
            </summary>
            <param name="constraintFlow">The constraint in the flow direction</param>
            <param name="constraintWrap">The constraint in the wrap direction</param>
            <param name="constraint">The constraint. Passing three parameters in reduces CPU work</param>
            <returns>A list of <see cref="T:Labman.UserInterface.CustomControls.XWrapPanel.Row"/> objects representing the rows required to arrange these children</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.GetFlow(System.Windows.Size)">
            <summary>Gets the length in the flowing direction, given on the current <see cref="T:System.Windows.Controls.Orientation"/></summary>
            <param name="size">The size from which to get the length</param>
            <returns>The length in the flowing direction, given the current <see cref="T:System.Windows.Controls.Orientation"/></returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.SetFlow(System.Windows.Size@,System.Double)">
            <summary>Sets the length in the flowing direction, given on the current <see cref="T:System.Windows.Controls.Orientation"/></summary>
            <param name="size">The size on which to set the length</param>
            <param name="value">The value to which the length should be set</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.GetWrap(System.Windows.Size)">
            <summary>Gets the length in the wrapping direction, given on the current <see cref="T:System.Windows.Controls.Orientation"/></summary>
            <param name="size">The size from which to get the length</param>
            <returns>The length in the wrapping direction, given the current <see cref="T:System.Windows.Controls.Orientation"/></returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.SetWrap(System.Windows.Size@,System.Double)">
            <summary>Sets the length in the wrapping direction, given on the current <see cref="T:System.Windows.Controls.Orientation"/></summary>
            <param name="size">The size on which to set the length</param>
            <param name="value">The value to which the length should be set</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.GetIsFlowStretch(System.Windows.FrameworkElement)">
            <summary>
            Returns whether the element has <see cref="T:System.Windows.HorizontalAlignment"/> or <see cref="T:System.Windows.VerticalAlignment"/> that is "Stretch" in the flowing direction, given the current <see cref="T:System.Windows.Controls.Orientation"/>.
            </summary>
            <param name="element">The element to be queried</param>
            <returns>Whether the element has <see cref="T:System.Windows.HorizontalAlignment"/> or <see cref="T:System.Windows.VerticalAlignment"/> that is "Stretch" in the flowing direction, given the current <see cref="T:System.Windows.Controls.Orientation"/>.</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.GetIsWrapStretch(System.Windows.FrameworkElement)">
            <summary>
            Returns whether the element has <see cref="T:System.Windows.HorizontalAlignment"/> or <see cref="T:System.Windows.VerticalAlignment"/> that is "Stretch" in the wrapping direction, given the current <see cref="T:System.Windows.Controls.Orientation"/>.
            </summary>
            <param name="element">The element to be queried</param>
            <returns>Whether the element has <see cref="T:System.Windows.HorizontalAlignment"/> or <see cref="T:System.Windows.VerticalAlignment"/> that is "Stretch" in the wrapping direction, given the current <see cref="T:System.Windows.Controls.Orientation"/>.</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.SetFlow(System.Windows.Point@,System.Double)">
            <summary>Sets the length in the flowing direction, given on the current <see cref="T:System.Windows.Controls.Orientation"/></summary>
            <param name="point">The point on which to set the length</param>
            <param name="value">The value to which the length should be set</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.SetWrap(System.Windows.Point@,System.Double)">
            <summary>Sets the length in the wrapping direction, given on the current <see cref="T:System.Windows.Controls.Orientation"/></summary>
            <param name="point">The point on which to set the length</param>
            <param name="value">The value to which the length should be set</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.ArrangeChild(System.Windows.UIElement,System.Windows.Rect,System.Windows.Size)">
            <summary>Arranges an element in the according to the given rectangle</summary>
            <param name="child">The element to arrange</param>
            <param name="rectangle">The rectangle the element should be arranged according to</param>
            <param name="finalSize">The final size of the area in which to arrange the element</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XWrapPanel.GetSizeOfRowsInDirection(System.Double,System.Double,Labman.UserInterface.CustomControls.XWrapPanel.StretchMode,System.Boolean,System.Func{Labman.UserInterface.CustomControls.XWrapPanel.Row,System.Boolean})">
            <summary>Calculates the final size required by the given rows in the direction of interest (flow or stretch) dictated by the arguments</summary>
            <param name="minSizeInThisDirection">The minimum size needed by the rows in this direction</param>
            <param name="constraintInThisDirection">The available space in the direction of interest</param>
            <param name="stretchModeInThisDirection">The stretch mode of the panel in the direction of interest</param>
            <param name="isPanelStretchingInThisDirection">Whether the panel is streching in the direction of interest</param>
            <param name="isRowStretchingInThisDirection">Whether a row is stretching in the direction of interest</param>
            <returns>The final size required by the given rows in the direction of interest</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XCheckBox">
            <summary>Interaction logic for XCheckBox.xaml</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XCheckBox.IsTouchFriendlyProperty">
            <summary>Whether the contorl is optimised for touch screens (makes it bigger).</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XCheckBox.#cctor">
            <summary>Static constructor to set the default style for XCheckBoxes.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XCheckBox.IsTouchFriendly">
            <summary>Whether the contorl is optimised for touch screens (makes it bigger).</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XComboBox">
            <summary>A ComboBox with extra features like being nullable, touch friendly and offering validation.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XComboBox.IsNullableProperty">
            <summary>Gets or sets whether the ComboBox has a button which clears the selection.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XComboBox.IsTouchFriendlyProperty">
            <summary>
            Gets or sets whether the ComboBox is optimized for touchscreens. This increases the default height size of the combobox, increases the nullable button size and style and increases the
            drop-down button size when <see cref="P:System.Windows.Controls.ComboBox.IsEditable"/> is set.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XComboBox.IsValidProperty">
            <summary>Whether the currently entered value is valid. If the current value is invalid, the bound property will remain and the most recent valid value.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XComboBox.ValidationCounterProperty">
            <summary>An integer to increment and decrement which the control becomes invalid/valid respectively</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XComboBox.InvalidityReasonProperty">
            <summary>Indicates why the control is invalid</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XComboBox.CustomValidationProperty">
            <summary>Custom validation performed when an item is selected by the user. The user can still select any item but the <see cref="T:Labman.UserInterface.CustomControls.XComboBox"/> will be styled as invalid.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XComboBox.CustomValidationInvalidityReasonStringProperty">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XComboBox.InvalidityReasonProperty"/> when <see cref="P:Labman.UserInterface.CustomControls.XComboBox.CustomValidation"/> fails</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XComboBox.IsEnabledMemberPathProperty">
            <summary>Gets or sets a path to a value on the source object to indicate if the object should be enabled for selection.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.#cctor">
            <summary>Static constructor to set the default style for XComboBoxes.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.CustomControls.XComboBox"/></summary>
        </member>
        <member name="E:Labman.UserInterface.CustomControls.XComboBox.ValidityChanged">
            <summary>Raised when the <see cref="P:Labman.UserInterface.CustomControls.XComboBox.IsValid"/> state changes.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XComboBox.IsNullable">
            <summary>Gets or sets whether the ComboBox has a button which clears the selection.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XComboBox.IsTouchFriendly">
            <summary>
            Gets or sets whether the ComboBox is optimized for touchscreens. This increases the default height size of the combobox, increases the nullable button size and style and increases the
            drop-down button size when <see cref="P:System.Windows.Controls.ComboBox.IsEditable"/> is set.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XComboBox.IsValid">
            <summary>Whether the currently entered value is valid. If the current value is invalid, the bound property will remain and the most recent valid value.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XComboBox.ValidationCounter">
            <summary>An integer to increment and decrement which the control becomes invalid/valid respectively</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XComboBox.InvalidityReason">
            <summary>Indicates why the control is invalid</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XComboBox.CustomValidation">
            <summary>Custom validation performed when an item is selected by the user. The user can still select any item but the <see cref="T:Labman.UserInterface.CustomControls.XComboBox"/> will be styled as invalid.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XComboBox.CustomValidationInvalidityReasonString">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XComboBox.InvalidityReasonProperty"/> when <see cref="P:Labman.UserInterface.CustomControls.XComboBox.CustomValidation"/> fails</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XComboBox.IsEnabledMemberPath">
            <summary>Gets or sets a path to a value on the source object to indicate if the object should be enabled for selection.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.OnApplyTemplate">
            <summary>Constructor for the nullable combo box control</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.OnInitialized(System.EventArgs)">
            <summary>Invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> is set to true internally.</summary>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.OnItemsSourceChanged(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>Called when the source of an item in a selector changes.</summary>
            <param name="oldItemsSource">Old value of the source</param>
            <param name="newItemsSource">New value of the source</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.NotifiableCollection_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            When the collection changes, we need to subscribe/unsubscribe to property changed events on added/removed items.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The arguments</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.ItemsSourceItemAdded(System.Object)">
            <summary>
            Subscribes to property changed events on the item.
            </summary>
            <param name="item">The item from the internal <see cref="P:System.Windows.Controls.ItemsControl.Items"/> collection</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.ItemsSourceItemRemoved(System.Object)">
            <summary>
            Unsubscribes to property changed events on the item.
            </summary>
            <param name="item">The item from the internal <see cref="P:System.Windows.Controls.ItemsControl.Items"/> collection</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.ItemsSourceReset">
            <summary>
            Subscribes to property changed events on all the items of the control.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.NotifiableItem_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Delegate that responds to property changes on the ComboBox's items and updates their IsEabled state when necessary.
            </summary>
            <param name="sender">The sender</param>
            <param name="propertyChangedEventArgs">The arguments</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.UpdateItemIsEnabled(System.Object)">
            <summary>
            Updates the enabled state of an item depending on the <see cref="P:Labman.UserInterface.CustomControls.XComboBox.IsEnabledMemberPath"/> of the <see cref="T:Labman.UserInterface.CustomControls.XComboBox"/>.
            </summary>
            <param name="item">The item from the internal <see cref="P:System.Windows.Controls.ItemsControl.Items"/> collection</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>Called when the selection is changed. Causes validation.</summary>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.OnIsValidChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when the <see cref="F:Labman.UserInterface.CustomControls.XComboBox.IsValidProperty"/> changes.</summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.OnValidationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when a property that affects validation is changed.</summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.OnInvalidityReasonChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when the <see cref="F:Labman.UserInterface.CustomControls.XComboBox.InvalidityReasonProperty"/> changes.</summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.OnEnabledItemsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when a property that affects which ComboBoxItems are enabled is changed.</summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.UpdateItemsEnabled">
            <summary>Updates the IsEnabled state of the ComboBoxItems</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XComboBox.Validate(System.Object)">
            <summary>Validates the currently selected item</summary>
            <param name="newItem">The new value being used or null to use the current <see cref="P:System.Windows.Controls.Primitives.Selector.SelectedItem"/></param>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XDatePicker">
            <summary>
            Extended version of the default <see cref="T:System.Windows.Controls.DatePicker"/>.
            Supports variable calendar size and touch-friendly operation.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XDatePicker.IsTouchFriendlyProperty">
            <summary>Whether the control is optimised for touch screens.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XDatePicker.CalendarSizeProperty">
            <summary>Sets the width and height of the <see cref="T:System.Windows.Controls.Calendar"/> drop-down.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XDatePicker.#cctor">
            <summary>Static constructor to set the default style for XDatePicker.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XDatePicker.IsTouchFriendly">
            <summary>Whether the control is optimised for touch screens.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XDatePicker.CalendarSize">
            <summary>Sets the width and height of the <see cref="T:System.Windows.Controls.Calendar"/> drop-down.</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XNumericUpDown">
            <summary>A TextBox that only accepts numeric types, displays up/down arrows and allows scroll wheel to increment/decrement the value and supports number of decimal places for a value.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XNumericUpDown.DecimalPlacesProperty">
            <summary>The number of decimal places allowed in the entered number.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XNumericUpDown.IncrementProperty">
            <summary>The base amount by which the current value is incremented. Any keyboard modifiers are then a applied after this.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XNumericUpDown.MinMaxBehaviourProperty">
            <summary>How the control behaves when the maximum/minimum values are reached/exceded</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XNumericUpDown._internalMinValue">
            <summary>Either the minimum value of the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/> or the user-specified <see cref="P:Labman.UserInterface.CustomControls.XTextBox.MinValue"/> as a dynamin</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XNumericUpDown._internalMaxValue">
            <summary>Either the maximum value of the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/> or the user-specified <see cref="P:Labman.UserInterface.CustomControls.XTextBox.MaxValue"/> as a dynamin</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XNumericUpDown.NumberCategory">
            <summary>The categories of type of number we support. All the types of each category are treated the same way</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XNumericUpDown.NumberCategory.Integer">
            <summary>Any of <see cref="T:System.Byte"/>, <see cref="T:System.SByte"/>, <see cref="T:System.Int16"/>, <see cref="T:System.UInt16"/>, <see cref="T:System.Int32"/>, <see cref="T:System.UInt32"/>, <see cref="T:System.Int64"/>, <see cref="T:System.UInt64"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XNumericUpDown.NumberCategory.FloatingPoint">
            <summary>Either <see cref="T:System.Single"/> or <see cref="T:System.Double"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XNumericUpDown.NumberCategory.Decimal">
            <summary><see cref="T:System.Decimal"/></summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.CustomControls.XNumericUpDown"/></summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XNumericUpDown.MinMaxBehaviours">
            <summary>How the control behaves when the maximum/minimum values are reached/exceded</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XNumericUpDown.MinMaxBehaviours.Cap">
            <summary>The value will be limitted to the minimum/maximum value and unable to cross it.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XNumericUpDown.MinMaxBehaviours.WrapAround">
            <summary>The value will wrap around to the oposite limit.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XNumericUpDown.DecimalPlaces">
            <summary>Gets or sets the decimal places.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XNumericUpDown.Increment">
            <summary>
            The base amount by which the current value is incremented.
            The incremental amount is equal to "Increment * 10^(-DecimalPlaces)".
            E.g. <see cref="P:Labman.UserInterface.CustomControls.XNumericUpDown.Increment"/> = 3 and <see cref="P:Labman.UserInterface.CustomControls.XNumericUpDown.DecimalPlaces"/> = 2, incremental amount = 3 * 1/10^2 = 0.03.
            Any keyboard modifiers are then a applied after this.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XNumericUpDown.MinMaxBehaviour">
            <summary>How the control behaves when the maximum/minimum values are reached/exceded</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.OnApplyTemplate">
            <summary>Is called when a control template is applied.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.OnIncrementChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Is called when the number of decimal places changes and recomputes the unit amount</summary>
            <param name="sender">The dependency object</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.OnDecimalPlacesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Is called when the number of decimal places changes and revalidates the entered number</summary>
            <param name="sender">The dependency object</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.OnInitialized(System.EventArgs)">
            <summary>Called when the control initialises</summary>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.OnMinValueChanged">
            <summary>Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MinValueProperty"/> changes.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.OnMaxValueChanged">
            <summary>Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MaxValueProperty"/> changes.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.OnValidatedTypeChanged">
            <summary>Invoked when the validated type changes.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.InternalPostConversionValidation(System.Object)">
            <summary>Checks if the entered number obeys the specified number of decimal places.</summary>
            <param name="value">The value to be validated after conversion to the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/></param>
            <returns>Whether validation was successful</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.XNumericUpDown_MouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>Handle the mouse wheel moving in the box</summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XNumericUpDown.AddValue(System.Object)">
            <summary>Turns out adding and subtracting stuff is pretty difficult when you don't know what the numbers are, what type they are and what limits must not be breached.</summary>
            <param name="increment">The increment</param>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XTextBox">
            <summary>
            Self validating textbox. Bound property must be two-way! Provides automatic conversion and validation to the bound type. Also exposes features like
            custom conversion, custom validation pre/post conversion, type conversion, stringformat, min/max values, regex. Validation order and datatypes:
            On screen input (string) => Optional pre-conversion validation (string) => Optional regex (string) => Conversion (validated type) => Optional min/max checking (validated type) => Optional post-conversion validation (validated type) => Optional IValueConverter (bound type) => Binding (bound type).
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.TextProperty">
            <summary>
            The object this control is bound to. Depending on the type of the bound object, different validation methods are used. e.g. bind to a float and
            only valid floating point numbers are allowed. Working types are: all numeric values, enums, DateTime, string, possibly more.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.IsValidProperty">
            <summary>Whether the currently entered value is valid. If the current value is invalid, the bound property will remain at the most recent valid value.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidProperty">
            <summary>Instructs when the control displays itself as invalid. See <see cref="T:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidMode"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.IsVisiblyInvalidProperty">
            <summary>Indicates whether the control should display itself as invalid. Behaviour depends upon the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidProperty"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ValidationCounterProperty">
            <summary>An integer to increment and decrement which the control becomes invalid/valid respectively. This is superseded by the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidationGroup"/> property which is more reliable</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ValidationGroupProperty">
            <summary>The <see cref="T:Labman.UserInterface.Validation.ValidationGroup"/> to which this control belongs. The <see cref="T:Labman.UserInterface.CustomControls.XTextBox"/> will add and update a <see cref="T:Labman.UserInterface.Validation.ValidationGroup.Property"/> item in this object</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty">
            <summary>Indicates why the control is invalid</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.CanBeEmptyProperty">
            <summary>Whether it is valid for the control to be empty.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.EmptyValueProperty">
            <summary>What value (if any) should be used when the control is empty. Note the value is applied to the bound object when the displayed text is empty and doesn't not effect the displayed text.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.HasClearButtonProperty">
            <summary>Dictates whether the clear button is visible.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.BoundTypeOverrideProperty">
            <summary>Explicitly declares the type that should be considered the bound type (e.g. when binding to object). Will be ignored when <see cref="F:Labman.UserInterface.CustomControls.XTextBox.TextProperty"/> is not bound.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ValidatedTypeOverrideProperty">
            <summary>Explicitly declares the type that should be validated against. Cannot be used while the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.TextProperty"/> is bound.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.MinValueProperty">
            <summary>
            The entered value is tested against this value after conversion. If the entered value is less than this, it is considered invalid.
            <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/> must be defined (either throuhg binding or <see cref="F:Labman.UserInterface.CustomControls.XTextBox.ValidatedTypeOverrideProperty"/>) and implement <see cref="T:System.IComparable"/>.
            If the value given for <see cref="P:Labman.UserInterface.CustomControls.XTextBox.MinValue"/> cannot be converted to the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/>, it will be ignored silently.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.MinValueInclusiveProperty">
            <summary>Whether the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.MinValue"/> should be interpreted as valid inclusively</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.MaxValueProperty">
            <summary>
            The entered value is tested against this value after conversion. If the entered value is more than this, it is considered invalid.
            <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/> must be defined (either throuhg binding or <see cref="F:Labman.UserInterface.CustomControls.XTextBox.ValidatedTypeOverrideProperty"/>) and implement <see cref="T:System.IComparable"/>.
            If the value given for <see cref="P:Labman.UserInterface.CustomControls.XTextBox.MaxValue"/> cannot be converted to the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/>, it will be ignored silently.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.MaxValueInclusiveProperty">
            <summary>Whether the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.MaxValue"/> should be interpreted as valid inclusively</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.MinValueInvalidityReasonStringProperty">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when the value is invalid due to the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MinValueProperty"/>.
            Use "{0}" and "{1}" notation in string to output current <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MinValueProperty"/> and the invalid value respectively.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.MaxValueInvalidityReasonStringProperty">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when the value is invalid due to the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MaxValueProperty"/>.
            Use "{0}" and "{1}" notation in string to output current <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MaxValueProperty"/> and the invalid value respectively.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.MinCharactersProperty">
            <summary>The minimum allowed number of characters</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.MaxCharactersProperty">
            <summary>The maximum allowed number of characters</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.MinCharactersInvalidityReasonStringProperty">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when the value is invalid due to the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MinCharactersProperty"/>.
            Use "{0}" and "{1}" notation in string to output current <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MinCharactersProperty"/> and the invalid value respectively.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.MaxCharactersInvalidityReasonStringProperty">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when the value is invalid due to the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MaxCharactersProperty"/>.
            Use "{0}" and "{1}" notation in string to output current <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MaxCharactersProperty"/> and the invalid value respectively.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PreConversionValidationProperty">
            <summary>Pre-validation conversion validation.</summary>.
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PreConversionInvalidityReasonStringProperty">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when <see cref="P:Labman.UserInterface.CustomControls.XTextBox.PreConversionValidation"/> fails</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PostConversionValidationProperty">
            <summary>Validation performed after conversion. Therefore must use the bound/converter type as the input type.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PostConversionInvalidityReasonStringProperty">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when <see cref="P:Labman.UserInterface.CustomControls.XTextBox.PostConversionValidation"/> fails</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.CustomConversionProperty">
            <summary>Overrides the default conversion between displayed text and bound/converter type.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.CustomConversionModeProperty">
            <summary>Specifies whether and in what order the default XTextBox conversion takes place relative to the supplied custom conversion</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ConversionInvalidityReasonStringProperty">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when <see cref="P:Labman.UserInterface.CustomControls.XTextBox.CustomConversion"/> or default conversion fails</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.RegexProperty">
            <summary>A regex to be used to validate the input string before conversion. Cannot be used with <see cref="P:Labman.UserInterface.CustomControls.XTextBox.PreConversionValidation"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.RegexInvalidityReasonStringProperty">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when <see cref="P:Labman.UserInterface.CustomControls.XTextBox.Regex"/> validity check fails</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.EndContentProperty">
            <summary>Content that is presented at the right end of the control such as units, a submit button or icon.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderProperty">
            <summary>The content that is presented as a place-holder. Presented behvaviour depends on <see cref="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviourProperty"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderControlTemplateProperty">
            <summary>The <see cref="T:System.Windows.Controls.ControlTemplate"/> (with <see cref="P:System.Windows.Controls.ControlTemplate.TargetType"/> = <see cref="T:System.Windows.Controls.ContentControl"/>) applied to the place-holder</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderStyleProperty">
            <summary>The <see cref="T:System.Windows.Style"/> (with <see cref="P:System.Windows.Style.TargetType"/> = <see cref="T:System.Windows.Controls.ContentControl"/>) applied to the place-holder</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviourProperty">
            <summary>How the place-holder will behave. See <see cref="T:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviours"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.SelectAllOnFocusProperty">
            <summary>When true, all text is selected when the control is first clicked or otherwise navigated to. When false, the caret is placed at the cursor position</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ReFormatOnBlurProperty">
            <summary>When true, the displayed text will be re-computed from the bound value when the control loses focus.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.RemoveUnprintableCharactersProperty">
            <summary>Removes most unprintable characters from the entered text. Defaults to true.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox._placeHolderStore">
            <summary>Stores the full placeholder content. Needed when <see cref="P:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviour"/> is <see cref="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviours.Overwrite"/></summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviours">
            <summary>Represents how the place-holder will behave.</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviours.DisappearOnFocus">
            <summary>Place-holder disappears when the control has focus or content</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviours.VisibleWhenEmpty">
            <summary>Place-holder disappears when the control has content that is not null or empty</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviours.EditableOnFocus">
            <summary>Place-holder is highlighted and editable when the control gains focus. <see cref="P:Labman.UserInterface.CustomControls.XTextBox.PlaceHolder"/> must be of type <see cref="T:System.String"/></summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviours.StayToRight">
            <summary>Place-holder stays visible to the right of content</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviours.Overwrite">
            <summary>Place-holder is overwritten by control content letter-by-letter. Useful when the place-holder is used to depict the format of the required text, e.g. YYYY-MM-DD. <see cref="P:Labman.UserInterface.CustomControls.XTextBox.PlaceHolder"/> must be of type <see cref="T:System.String"/>.</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XTextBox.CustomConversionModes">
            <summary>Enumeration of when custom conversion is called relative or instead of default conversion</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.CustomConversionModes.InsteadOf">
            <summary>Custom conversion happens instead of default conversion</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.CustomConversionModes.BeforeDefaultConversion">
            <summary>Custom conversion happens before default conversion</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.CustomConversionModes.AfterDefaultConversion">
            <summary>Custom conversion happens after default conversion</summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidMode">
            <summary>Enumeration of how invalidity can be shown</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidMode.Auto">
            <summary>Invalidity is visible when the control is invalid</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidMode.Never">
            <summary>The control is forced to never show invalidity, even when invalid</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidMode.Always">
            <summary>The control is forced to show invalidity, even when valid</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidMode.OnceFocused">
            <summary>Invalidity is only visible once the control has ever received focus and is invalid</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidMode.OnceBlurred">
            <summary>Invalidity is only visible once the control has ever received then lost focus and is invalid or if the user transitions the control from valid to invalid</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidMode.WhenFocused">
            <summary>Invalidity is visible when the control is invalid and currently has focus</summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidMode.WhenBlurred">
            <summary>Invalidity is visible when the control is invalid and does not have focus</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.#ctor">
            <summary>
            Instantiates a new instance of <see cref="T:Labman.UserInterface.CustomControls.XTextBox"/>
            </summary>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XTextBox.ConversionDelegate">
            <summary>
            Delegate for converting the input text into the valid type, ready for the bound property or <see
            cref="T:System.Windows.Data.IValueConverter"/>, if given.
            </summary>
            <param name="input">The input text from the user</param>
            <param name="result">
            The output of the conversion. If true is returned, this is passed onto the bound property or a supplied <see cref="T:System.Windows.Data.IValueConverter"/>
            </param>
            <returns>Whether the input was valid</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XTextBox.TypeChangedHandler">
            <summary>
            Delegate for change of type events.
            </summary>
            <param name="sender">The object on which the type changed happened</param>
            <param name="e">Parameters about the type change</param>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XTextBox.TypeChangedEventArgs">
            <summary>
            Provides data for type change events.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.TypeChangedEventArgs.#ctor(System.Type,System.Type)">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.CustomControls.XTextBox.TypeChangedEventArgs"/>
            </summary>
            <param name="oldType">The new type</param>
            <param name="newType">The previous type</param>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.TypeChangedEventArgs.OldType">
            <summary>
            The type that has been changed from.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.TypeChangedEventArgs.NewType">
            <summary>
            The type that has been changed to.
            </summary>
        </member>
        <member name="E:Labman.UserInterface.CustomControls.XTextBox.BoundTypeChanged">
            <summary>
            Called when the bound type changes.
            </summary>
        </member>
        <member name="E:Labman.UserInterface.CustomControls.XTextBox.ValidatedTypeChanged">
            <summary>
            Called when the validated type changes.
            </summary>
        </member>
        <member name="E:Labman.UserInterface.CustomControls.XTextBox.ValidityChanged">
            <summary>
            Raised when the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.IsValid"/> state changes.
            </summary>
        </member>
        <member name="E:Labman.UserInterface.CustomControls.XTextBox.InternalMinValueChanged">
            <summary>
            Called when the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.InternalMinValue"/> property changes.
            </summary>
        </member>
        <member name="E:Labman.UserInterface.CustomControls.XTextBox.InternalMaxValueChanged">
            <summary>
            Called when the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.InternalMaxValue"/> property changes.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.Text">
            <summary>
            The object this control is bound to. Depending on the type of the bound object, different validation methods are used. e.g. bind to a float and
            only valid floating point numbers are allowed. Working types are: all numeric values, enums, DateTime, string, possibly more.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.BoundType">
            <summary>
            The type that is currently bound to.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType">
            <summary>
            The type this control is validating for.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedTypeDefaultActivator">
            <summary>Quick way of creating and instance of the validated type</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.IsValid">
            <summary>
            Whether the currently entered value is valid. If the current value is invalid, the bound property will remain at the most recent valid value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.ShowInvalid">
            <summary>Instructs when the control displays itself as invalid. See <see cref="T:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidMode"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.IsVisiblyInvalid">
            <summary>Indicates whether the control should display itself as invalid. Behaviour depends upon the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidProperty"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.ValidationCounter">
            <summary>An integer to increment and decrement which the control becomes invalid/valid respectively. This is superseded by the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidationGroup"/> property which is more reliable</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.ValidationGroup">
            <summary>The <see cref="T:Labman.UserInterface.Validation.ValidationGroup"/> to which this control belongs. The <see cref="T:Labman.UserInterface.CustomControls.XTextBox"/> will add and update a <see cref="T:Labman.UserInterface.Validation.ValidationGroup.Property"/> item in this object</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.InvalidityReason">
            <summary>Indicates why the control is invalid</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.CanBeEmpty">
            <summary>Whether it is valid for the control to be empty.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.EmptyValue">
            <summary>What value (if any) should be used when the control is empty. Note thie value is applied to the bound object when the displayed text is empty and doesn't not effect the displayed text.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.HasClearButton">
            <summary>Dictates whether the clear button is visible.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.InternalMinValue">
            <summary>The minimum value internally used for comparison</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.InternalMaxValue">
            <summary>The maximum value internally used for comparison</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.MinValue">
            <summary>
            The entered value is tested against this value after conversion. If the entered value is less than this, it is considered invalid.
            <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/> must be defined (either throuhg binding or <see cref="F:Labman.UserInterface.CustomControls.XTextBox.ValidatedTypeOverrideProperty"/>) and implement <see cref="T:System.IComparable"/>.
            If the value given for <see cref="P:Labman.UserInterface.CustomControls.XTextBox.MinValue"/> cannot be converted to the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/>, it will be ignored silently.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.MinValueInclusive">
            <summary>Whether the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.MinValue"/> should be interpreted as valid inclusively</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.MaxValue">
            <summary>
            The entered value is tested against this value after conversion. If the entered value is more than this, it is considered invalid.
            <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/> must be defined (either throuhg binding or <see cref="F:Labman.UserInterface.CustomControls.XTextBox.ValidatedTypeOverrideProperty"/>) and implement <see cref="T:System.IComparable"/>.
            If the value given for <see cref="P:Labman.UserInterface.CustomControls.XTextBox.MaxValue"/> cannot be converted to the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/>, it will be ignored silently.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.MaxValueInclusive">
            <summary>Whether the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.MaxValue"/> should be interpreted as valid inclusively</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.MinValueInvalidtyReasonString">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when the value is invalid due to the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MinValueProperty"/>.
            Use "{0}" and "{1}" notation in string to output current <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MinValueProperty"/> and the invalid value respectively.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.MaxValueInvalidtyReasonString">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when the value is invalid due to the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MaxValueProperty"/>.
            Use "{0}" and "{1}" notation in string to output current <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MaxValueProperty"/> and the invalid value respectively.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.MinCharacters">
            <summary>The minimum allowed number of characters</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.MaxCharacters">
            <summary>The maximum allowed number of characters</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.MinCharactersInvalidtyReasonString">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when the value is invalid due to the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MinCharactersProperty"/>.
            Use "{0}" and "{1}" notation in string to output current <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MinCharactersProperty"/> and the number of characters invalidly used respectively.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.MaxCharactersInvalidtyReasonString">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when the value is invalid due to the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MaxCharactersProperty"/>.
            Use "{0}" and "{1}" notation in string to output current <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MaxCharactersProperty"/> and the number of characters invalidly used respectively.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.PreConversionValidation">
            <summary>Pre-validation conversion validation.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.PreConversionInvalidityReasonString">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when <see cref="P:Labman.UserInterface.CustomControls.XTextBox.PreConversionValidation"/> fails</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.PostConversionValidation">
            <summary>Validation performed after conversion. Therefore must use the bound/converter type as the input type.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.PostConversionInvalidityReasonString">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when <see cref="P:Labman.UserInterface.CustomControls.XTextBox.PostConversionValidation"/> fails</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.CustomConversion">
            <summary>Overrides the default conversion between displayed text and bound/converter type.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.CustomConversionMode">
            <summary>Specifies whether and in what order the default XTextBox conversion takes place relative to the supplied custom conversion</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.ConversionInvalidityReasonString">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when <see cref="P:Labman.UserInterface.CustomControls.XTextBox.CustomConversion"/> or default conversion fails</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.Regex">
            <summary>A regex to be used to validate the input string before conversion. Cannot be used with <see cref="P:Labman.UserInterface.CustomControls.XTextBox.CustomConversion"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.RegexInvalidityReasonString">
            <summary>Used as the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> when <see cref="P:Labman.UserInterface.CustomControls.XTextBox.Regex"/> validity check fails</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.BoundTypeOverride">
            <summary>Explicitly declares the type that should be considered the bound type (e.g. when binding to object). Will be ignored when <see cref="F:Labman.UserInterface.CustomControls.XTextBox.TextProperty"/> is not bound.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedTypeOverride">
            <summary>Explicitly declares the type that should be validated against. Will be ignored while <see cref="F:Labman.UserInterface.CustomControls.XTextBox.TextProperty"/> is bound.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.EndContent">
            <summary>Content that is presented at the right end of the control such as units, a submit button or icon.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.PlaceHolder">
            <summary>The content that is presented as a place-holder. Presented behvaviour depends on <see cref="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviourProperty"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderControlTemplate">
            <summary>The <see cref="T:System.Windows.Controls.ControlTemplate"/> (with <see cref="P:System.Windows.Controls.ControlTemplate.TargetType"/> = <see cref="T:System.Windows.Controls.ContentControl"/>) applied to the placeholder</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderStyle">
            <summary>The <see cref="T:System.Windows.Style"/> (with <see cref="P:System.Windows.Style.TargetType"/> = <see cref="T:System.Windows.Controls.ContentControl"/>) applied to the place-holder</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviour">
            <summary>How the place-holder will behave. See <see cref="T:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviours"/></summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.SelectAllOnFocus">
            <summary>When true, all text is selected when the control is first clicked or otherwise navigated to. When false, the caret is placed at the cursor position</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.ReFormatOnBlur">
            <summary>When true, the displayed text will be re-computed from the bound value when the control loses focus.</summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTextBox.RemoveUnprintableCharacters">
            <summary>Removes most unprintable characters from the entered text. Defaults to true.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnApplyTemplate">
            <summary>
            Is called when a control template is applied.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnInitialized(System.EventArgs)">
            <summary>
            Invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> is set to true internally.
            </summary>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus"/> event reaches this element in its route.</summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.LostFocus"/> event reaches this element in its route.</summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnIsValidChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.IsValidProperty"/> changes.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnShowInvalidChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.ShowInvalidProperty"/> changes.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnValidationGroupChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.ValidationGroupProperty"/> changes.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnValidationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a property that effects validation is changed.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnInvalidityReasonChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.InvalidityReasonProperty"/> changes.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnLoaded(System.Windows.RoutedEventArgs)">
            <summary>Occurs when the element is laid out, rendered, and ready for interaction.</summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
            <remarks>
            The above description is taken from the <see cref="E:System.Windows.FrameworkElement.Loaded"/> event.
            However, in practice the loaded event can fire more than once in an element's lifetime.
            For example, if the element is first instantiated in a collapsed state, it'll still
            fire the Loaded event, but will fire it again upon becoming visible.
            </remarks>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnUnloaded(System.Windows.RoutedEventArgs)">
            <summary>Occurs when the element is removed from within an element tree of loaded elements.</summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnMinValueChanged">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MinValueProperty"/> changes.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnMaxValueChanged">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.MaxValueProperty"/> changes.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnPlaceHolderControlTemplateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderControlTemplateProperty"/> changes.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnPlaceHolderStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderStyleProperty"/> changes.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnPlaceHolderChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderProperty"/> changes.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnPlaceHolderBehaviourChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviourProperty"/> changes.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.UpdatePlaceHolderVisibilities">
            <summary>
            Sets whether each placeholder container should be visible given whether the control is being edited and the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviour"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnEndContentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.EndContentProperty"/> changes.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnInputScopeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the <see cref="T:System.Windows.Input.InputScope"/> changes.
            </summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.UpdateEndContent">
            <summary>
            Sets the end content to the correct end content host and sets the visibilities of the end content host.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnClearButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the clear button is clicked
            </summary>
            <param name="sender">The control the click occured on</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnEditingAreaMouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when the user clicks in the editing area. Used to stop propergation of click event to base when control is gaining focus.
            Stops the base setting the selection point, when we might want it to select all.
            </summary>
            <param name="sender">The control the click occured on</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnTextEditorGotFocus">
            <summary>Called when the text-editor control component gets focus.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnTextEditorLostFocus">
            <summary>Called when the text-editor control component loses focus.</summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnEndContentGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when <see cref="P:Labman.UserInterface.CustomControls.XTextBox.EndContent"/> has <see cref="P:System.Windows.UIElement.Focusable"/> = true and the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.EndContent"/> gets focus.
            </summary>
            <param name="sender">The object that raised the event (the end content)</param>
            <param name="e">The event args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.InternalPostConversionValidation(System.Object)">
            <summary>
            Applies any validation necessary in derrived types.
            Returns whether validaiton was successful.
            </summary>
            <param name="value">The value to be validated after conversion to the <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/></param>
            <returns>Whether validation was successful</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.Validate">
            <summary>
            Validates the currently entered text against the bound type and any defined custom validation function. Sets the
            bound value to the successfully validated text. Shouldn't need to be calledfrom user code.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnBindingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when the binding changes or when the bound value changes.</summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnBindingChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the binding or bound value changes on the <see cref="F:Labman.UserInterface.CustomControls.XTextBox.TextProperty"/>, <see cref="F:Labman.UserInterface.CustomControls.XTextBox.BoundTypeOverrideProperty"/> or <see cref="F:Labman.UserInterface.CustomControls.XTextBox.ValidatedTypeOverrideProperty"/>.
            </summary>
            <param name="args">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.GetBindingType(System.Windows.Data.BindingExpression)">
            <summary>Searches the binding source and its ancestors for the specified property, returning the type of the matching property declared furthest down the inheritance tree</summary>
            <param name="expression">The binding expression</param>
            <returns>The type of the property matching the binding expressions that is declared furthest down the inheritance tree</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.UpdateValidatedType">
            <summary>
            Works out the validated type, bound type, how to convert and how to validate.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.Convert(System.Object,System.Object@)">
            <summary>
            Tries to convert the given object to the current <see cref="P:Labman.UserInterface.CustomControls.XTextBox.ValidatedType"/>.
            </summary>
            <param name="input">The input object</param>
            <param name="output">The output object</param>
            <returns>Whether the conversion was successful</returns>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.DisplayValue(System.Object)">
            <summary>Displays the given value as text using any Stringformat provided, without invoking handlers.</summary>
            <param name="value">The value to display</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.ChangeDisplayText(System.String)">
            <summary>Helper function to change the displayed text without invoking event handlers.</summary>
            <param name="newText">The new text to display</param>
            <remarks>
            Note: this function has the effect of de-synchronising the displayed value from the bound value.
            The control won't validate the given text, so the validation state won't change.
            In general, this method shouldn't be needed but there are rare cases when it's useful,
            like setting/clearing a starting value when bound to a value-type (not-nullable).
            </remarks>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.ChangeBackingProperty(System.Object)">
            <summary>Helper function to change the bound property without invoking event handlers.</summary>
            <param name="newText">The new value for the backing property</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>Called when the displayed text changes (usually due to user input).</summary>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.UpdatePlaceHoldersOnTextChanged">
            <summary>
            Updates the placeholder text when in <see cref="F:Labman.UserInterface.CustomControls.XTextBox.PlaceHolderBehaviours.Overwrite"/> mode.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTextBox.GetEffectiveStringFormat(System.String)">
            <summary>
            Builds a format string suitable for String.Format from the given argument by expanding the convenience form, if necessary.
            This code is taken directly from .NET source code file "\Source\wpf\src\Framework\MS\Internal\Helper.cs", used by BindingExpressionBase.cs.
            </summary>
            <param name="stringFormat">The user-created StringFormat string</param>
            <returns>A StringFormat string suitable for String.Format</returns>
        </member>
        <member name="T:Labman.UserInterface.CustomControls.XTreeView">
            <summary>
            Extended version of the default <see cref="T:System.Windows.Controls.TreeView"/>.
            Supports touchscreens.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CustomControls.XTreeView.#cctor">
            <summary>
            Interaction logic for the <see cref="T:Labman.UserInterface.CustomControls.XTreeView"/> control.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.CustomControls.XTreeView.IsTouchFriendly">
            <summary>
            Whether the control is optimised for touch screens.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CustomControls.XTreeView.IsTouchFriendlyProperty">
            <summary>
            Whether the control is optimised for touch screens.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater">
            <summary>
            This class is used to update a rack control's positions to example statuses
            </summary>
        </member>
        <member name="F:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater._rnd">
            <summary>
            Random number generator used for demo creation
            </summary>
        </member>
        <member name="F:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater._nextUpdate">
            <summary>
            The scheduled time of the next update
            </summary>
        </member>
        <member name="F:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater._minStatus">
            <summary>
            The minimum status number to generate
            </summary>
        </member>
        <member name="F:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater._maxStatus">
            <summary>
            The mamimum status number to generate
            </summary>
        </member>
        <member name="F:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater._vm">
            <summary> 
            View model to update
            </summary>
        </member>
        <member name="T:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater.RackType">
            <summary>
            What type of rack this is.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater.#ctor(System.Int32,System.Int32,Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater.RackType,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor for the updater, sets up the required parameters for updating
            </summary>
            <param name="minStatus">The minimum status number to generate</param>
            <param name="maxStatus">The maximum status number to generate</param>
            <param name="type">The type of rack see <see cref="T:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater.RackType"/></param>
            <param name="emptyStatus">The status number of empty stations</param>
            <param name="unprocessedStatus">The status number of unprocessed vials</param>
            <param name="workingStatus">The status number of working vials</param>
            <param name="completeStatus">The status number of completed vials</param>
            <param name="showLabels">Whether vial position numbers should be displayed</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater.#ctor(Labman.UserInterface.ViewModels.RackControlViewModel,System.Int32,System.Int32,Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater.RackType,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor for the updater, sets up the required parameters for updating
            </summary>
            <param name="vm">The view model to update</param>
            <param name="minStatus">The minimum status number to generate</param>
            <param name="maxStatus">The maximum status number to generate</param>
            <param name="type">The type of rack see <see cref="T:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater.RackType"/></param>
            <param name="emptyStatus">The status number of empty stations</param>
            <param name="unprocessedStatus">The status number of unprocessed vials</param>
            <param name="workingStatus">The status number of working vials</param>
            <param name="completeStatus">The status number of completed vials</param>
            <param name="showLabels">Whether vial position numbers should be displayed</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater.SetViewModel(System.Object)">
            <summary>
            Method which allows the view model to be set
            </summary>
            <param name="vm">The vm.</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDemoFormUpdater.Update">
            <summary>
            Update the view model
            </summary>
        </member>
        <member name="T:Labman.UserInterface.FormUpdaters.IFormUpdater">
            <summary>
            Standard interface which is used to update an element of the user interface
            </summary>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.IFormUpdater.Update">
            <summary>
            An update method that will be periodically called to update the GUI
            </summary>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.IFormUpdater.SetViewModel(System.Object)">
            <summary>
            Method which allows the view model to be set
            </summary>
            <param name="vm">The vm.</param>
        </member>
        <member name="T:Labman.UserInterface.FormUpdaters.RackControlDatabaseFormUpdater">
            <summary>
            This class is used to update a rack control in a window with status values from a database
            </summary>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDatabaseFormUpdater.#ctor(Labman.UserInterface.ViewModels.RackControlViewModel,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for the updater, sets up the required parameters for updating
            </summary>
            <param name="vm">The view model to update</param>
            <param name="databaseName">The name of the database connection to query</param>
            <param name="tableName">The table to query from</param>
            <param name="rackNameField">The name of the field used to store the rack name</param>
            <param name="positionField">The name of the field used to store the position index</param>
            <param name="statusField">The name of the field used to store the status values</param>
            <param name="rackName">The name of this rack to lookup</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDatabaseFormUpdater.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for the updater, sets up the required parameters for updating.
            The view model must be specified before the update method is called.
            </summary>
            <param name="databaseName">The name of the database connection to query</param>
            <param name="tableName">The table to query from</param>
            <param name="rackNameField">The name of the field used to store the rack name</param>
            <param name="positionField">The name of the field used to store the position index</param>
            <param name="statusField">The name of the field used to store the status values</param>
            <param name="rackName">The name of this rack to lookup</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDatabaseFormUpdater.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor for the updater, sets up the required parameters for updating.
            The view model must be specified before the update method is called.
            </summary>
            <param name="databaseName">The name of the database connection to query</param>
            <param name="tableName">The table to query from</param>
            <param name="rackNameField">The name of the field used to store the rack name</param>
            <param name="positionField">The name of the field used to store the position index</param>
            <param name="statusField">The name of the field used to store the status values</param>
            <param name="rackName">The name of this rack to lookup</param>
            <param name="startPosition">The number of the first position in the rack</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDatabaseFormUpdater.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor for the updater, sets up the required parameters for updating.
            The view model must be specified before the update method is called.
            </summary>
            <param name="databaseName">The name of the database connection to query</param>
            <param name="tableName">The table to query from</param>
            <param name="positionField">The name of the field used to store the position index</param>
            <param name="statusField">The name of the field used to store the status values</param>
            <param name="startPosition">The number of the first position in the rack</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDatabaseFormUpdater.#ctor(Labman.UserInterface.ViewModels.RackControlViewModel,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for the updater, sets up the required parameters for updating
            </summary>
            <param name="vm">The view model to update</param>
            <param name="databaseName">The name of the database connection to query</param>
            <param name="tableName">The table to query from</param>
            <param name="positionField">The name of the field used to store the position index</param>
            <param name="statusField">The name of the field used to store the status values</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDatabaseFormUpdater.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructor for the updater, sets up the required parameters for updating.
            The view model must be specified before the update method is called.
            </summary>
            <param name="databaseName">The name of the database connection to query</param>
            <param name="tableName">The table to query from</param>
            <param name="positionField">The name of the field used to store the position index</param>
            <param name="statusField">The name of the field used to store the status values</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDatabaseFormUpdater.SetViewModel(System.Object)">
            <summary>
            Method which allows the view model to be set
            </summary>
            <param name="vm">The vm.</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlDatabaseFormUpdater.Update">
            <summary>
            Update the view model
            </summary>
        </member>
        <member name="T:Labman.UserInterface.FormUpdaters.RackControlRandomStatusFormUpdater">
            <summary>
            This class is used to update a rack control using a random status for each position
            </summary>
        </member>
        <member name="F:Labman.UserInterface.FormUpdaters.RackControlRandomStatusFormUpdater._rnd">
            <summary>
            Random number generator used for testing
            </summary>
        </member>
        <member name="F:Labman.UserInterface.FormUpdaters.RackControlRandomStatusFormUpdater._minStatus">
            <summary>
            The minimum status number to generate
            </summary>
        </member>
        <member name="F:Labman.UserInterface.FormUpdaters.RackControlRandomStatusFormUpdater._maxStatus">
            <summary>
            The mamimum status number to generate
            </summary>
        </member>
        <member name="F:Labman.UserInterface.FormUpdaters.RackControlRandomStatusFormUpdater._vm">
            <summary> 
            View model to update
            </summary>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlRandomStatusFormUpdater.#ctor(Labman.UserInterface.ViewModels.RackControlViewModel,System.Int32,System.Int32)">
            <summary>
            Constructor for the updater, sets up the required parameters for updating
            </summary>
            <param name="vm">The view model to update</param>
            <param name="minStatus">The minimum status number to generate</param>
            <param name="maxStatus">The maximum status number to generate</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlRandomStatusFormUpdater.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor for the updater, sets up the required parameters for updating.
            The view model must be specified before the update method is called.
            </summary>
            <param name="minStatus">The minimum status number to generate</param>
            <param name="maxStatus">The maximum status number to generate</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlRandomStatusFormUpdater.SetViewModel(System.Object)">
            <summary>
            Method which allows the view model to be set
            </summary>
            <param name="vm">The vm.</param>
        </member>
        <member name="M:Labman.UserInterface.FormUpdaters.RackControlRandomStatusFormUpdater.Update">
            <summary>
            Update the view model
            </summary>
        </member>
        <member name="T:Labman.UserInterface.InputBoxes.StringInputBox">
            <summary>
            Interaction logic for IntegerInputBox.xaml
            </summary>
            <summary>
            StringInputBox
            </summary>
        </member>
        <member name="F:Labman.UserInterface.InputBoxes.StringInputBox._vm">
            <summary>
            View Model
            </summary>
        </member>
        <member name="P:Labman.UserInterface.InputBoxes.StringInputBox.ValueAccepted">
            <summary>
            Flag which is set based on whether the value has been accepted
            </summary>
        </member>
        <member name="P:Labman.UserInterface.InputBoxes.StringInputBox.CurrentValue">
            <summary>
            Current string Value
            </summary>
        </member>
        <member name="M:Labman.UserInterface.InputBoxes.StringInputBox.#ctor(System.String,System.String)">
            <summary>
            Constructor for window
            </summary>
            <param name="prompt">The prompt.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Labman.UserInterface.InputBoxes.StringInputBox.TextBox_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Submit on the enter and escape keys
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.InputBoxes.StringInputBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.InputBoxes.IntegerInputBox">
            <summary>
            Interaction logic for IntegerInputBox.xaml
            </summary>
            <summary>
            IntegerInputBox
            </summary>
        </member>
        <member name="F:Labman.UserInterface.InputBoxes.IntegerInputBox._vm">
            <summary>
            View Model
            </summary>
        </member>
        <member name="P:Labman.UserInterface.InputBoxes.IntegerInputBox.ValueAccepted">
            <summary>
            Flag which is set based on whether the value has been accepted
            </summary>
        </member>
        <member name="P:Labman.UserInterface.InputBoxes.IntegerInputBox.CurrentValue">
            <summary>
            Current Input Value
            </summary>
        </member>
        <member name="M:Labman.UserInterface.InputBoxes.IntegerInputBox.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for window
            </summary>
            <param name="prompt">The prompt.</param>
            <param name="defaultValue">The default value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="M:Labman.UserInterface.InputBoxes.IntegerInputBox.TextBox_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Submit on the enter and escape keys
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.InputBoxes.IntegerInputBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.MarkupExtensions.EnumBindingSourceExtension">
            <summary>Creates a simple ItemsSource from the values of an Enum</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.EnumBindingSourceExtension.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.MarkupExtensions.EnumBindingSourceExtension"/> class.</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.EnumBindingSourceExtension.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.MarkupExtensions.EnumBindingSourceExtension"/> class.</summary>
            <param name="enumType">The enum type</param>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.EnumBindingSourceExtension.EnumType">
            <summary>The type of the enum.</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.EnumBindingSourceExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension">
            <summary>Creates an ItemsSource from the values of an Enum, using their <see cref="T:System.ComponentModel.DataAnnotations.DisplayAttribute"/> s to provide Name and Description data too</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension"/> class.</summary>
            <param name="enumType">The enum type</param>
        </member>
        <member name="E:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.Value">
            <summary>The value created by this markup extension</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.EnumDisplay">
            <summary>Represents an Enum value and its metadata</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.EnumDisplay.#ctor(System.Enum)">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.EnumDisplay"/> class.</summary>
            <param name="value">The Enum value</param>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.EnumDisplay.Value">
            <summary>The enum value</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.EnumDisplay.Name">
            <summary>The display name of the value. If not provided, the <see cref="P:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.EnumDisplay.Value"/> will be converted to a string</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.EnumDisplay.Description">
            <summary>The description of the value for use in tooltips. Null if not provided</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.DisplayEnumBindingSourceExtension.EnumDisplay.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Labman.UserInterface.MarkupExtensions.GenericType">
            <summary>Markup extension that allows the specification of generic types in xaml</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.GenericType.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.MarkupExtensions.GenericType"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.GenericType.BaseType">
            <summary>The base type, e.g. <see cref="T:System.Collections.Generic.IList`1"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.GenericType.InnerTypes">
            <summary>The inner generic types. This property overrides the individual properties <see cref="P:Labman.UserInterface.MarkupExtensions.GenericType.T1"/><see cref="P:Labman.UserInterface.MarkupExtensions.GenericType.T2"/>......</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.GenericType.T1">
            <summary>The first generic type</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.GenericType.T2">
            <summary>The second generic type</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.GenericType.T3">
            <summary>The third generic type</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.GenericType.T4">
            <summary>The fourth generic type</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.GenericType.ProvideValue(System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Labman.UserInterface.MarkupExtensions.IfExtension">
            <summary>Allows the target property to be set conditionally to another property</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.IfExtension.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.MarkupExtensions.EnumBindingSourceExtension"/> class.</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.Property">
            <summary>The property one which this is dependant</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.RelativeSource">
            <summary>Relative source to the property if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.FallbackValue">
            <summary>The value used when the bound path can't return a value, if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.TargetNullValue">
            <summary>The value used when the bound path returns null, if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.Mode">
            <summary>The binding mode for the given <see cref="P:Labman.UserInterface.MarkupExtensions.IfExtension.Property"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.Is">
            <summary>When the <see cref="P:Labman.UserInterface.MarkupExtensions.IfExtension.Property"/> is equal to this value, the provided value will be <see cref="P:Labman.UserInterface.MarkupExtensions.IfExtension.Value"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.IsNot">
            <summary>When the <see cref="P:Labman.UserInterface.MarkupExtensions.IfExtension.Property"/> is not equal to this value, the provided value will be <see cref="P:Labman.UserInterface.MarkupExtensions.IfExtension.Value"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.IsIn">
            <summary>When the value is in this collection, the provided value will be <see cref="P:Labman.UserInterface.MarkupExtensions.IfExtension.Value"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.IsNotIn">
            <summary>When the value is not in this collection, the provided value will be <see cref="P:Labman.UserInterface.MarkupExtensions.IfExtension.Value"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.Value">
            <summary>The value that is used when the condition is true</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IfExtension.Otherwise">
            <summary>The value that is used when the condition is not true</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.IfExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.IfExtension.ConvertValues(System.IServiceProvider,System.Object,System.Object)">
            <summary>Converts the values specified in xaml to the appropriate type, given the bound type</summary>
            <param name="serviceProvider">The service provider, used to deduce the bound type</param>
            <param name="value">The first value to convert</param>
            <param name="otherwise">The second value to convert</param>
            <returns>The <paramref name="value"/> and <paramref name="otherwise"/> parameters converted to the appropriate type</returns>
        </member>
        <member name="T:Labman.UserInterface.MarkupExtensions.VisibleIfExtension">
            <summary>Allows <see cref="P:System.Windows.UIElement.Visibility"/> to be set conditionally to another property</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.Property">
            <summary>The property one which this is dependant</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.RelativeSource">
            <summary>Relative source to the property if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.FallbackValue">
            <summary>The value used when the bound path can't return a value, if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.TargetNullValue">
            <summary>The value used when the bound path returns null, if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.Mode">
            <summary>The binding mode for the given <see cref="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.Property"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.Is">
            <summary>When the <see cref="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.Property"/> is equal to this value, the providede value will be <see cref="F:System.Windows.Visibility.Visible"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.IsNot">
            <summary>When the <see cref="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.Property"/> is not equal to this value, the providede value will be <see cref="F:System.Windows.Visibility.Visible"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.IsIn">
            <summary>When the value is in this collection, the provided value will be <see cref="F:System.Windows.Visibility.Visible"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.IsNotIn">
            <summary>When the value is not in this collection, the provided value will be <see cref="F:System.Windows.Visibility.Visible"/></summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.VisibleIfExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Labman.UserInterface.MarkupExtensions.IsExtension">
            <summary>Allows the target property to be set conditionally to another property</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IsExtension.Property">
            <summary>The property one which this is dependant</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IsExtension.RelativeSource">
            <summary>Relative source to the property if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IsExtension.FallbackValue">
            <summary>The value used when the bound path can't return a value, if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IsExtension.TargetNullValue">
            <summary>The value used when the bound path returns null, if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IsExtension.Is">
            <summary>When the <see cref="P:Labman.UserInterface.MarkupExtensions.IsExtension.Property"/> is of this type, the provided value will be <see cref="P:Labman.UserInterface.MarkupExtensions.IsExtension.Value"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IsExtension.IsNot">
            <summary>When the <see cref="P:Labman.UserInterface.MarkupExtensions.IsExtension.Property"/> is not of this type, the provided value will be <see cref="P:Labman.UserInterface.MarkupExtensions.IsExtension.Value"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IsExtension.Value">
            <summary>The value that is used when the condition is true</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.IsExtension.Otherwise">
            <summary>The value that is used when the condition is not true</summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.IsExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Labman.UserInterface.MarkupExtensions.VisibleIfIsExtension">
            <summary>Allows <see cref="P:System.Windows.UIElement.Visibility"/> to be set conditionally to another property</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfIsExtension.Property">
            <summary>The property one which this is dependant</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfIsExtension.RelativeSource">
            <summary>Relative source to the property if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfIsExtension.FallbackValue">
            <summary>The value used when the bound path can't return a value, if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfIsExtension.TargetNullValue">
            <summary>The value used when the bound path returns null, if needed</summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfIsExtension.Is">
            <summary>When the <see cref="P:Labman.UserInterface.MarkupExtensions.VisibleIfIsExtension.Property"/> is equal to this value, the provided value will be <see cref="M:System.Windows.Visibility.#ctor"/></summary>
        </member>
        <member name="P:Labman.UserInterface.MarkupExtensions.VisibleIfIsExtension.IsNot">
            <summary>When the <see cref="P:Labman.UserInterface.MarkupExtensions.VisibleIfIsExtension.Property"/> is not equal to this value, the provided value will be <see cref="M:System.Windows.Visibility.#ctor"/></summary>
        </member>
        <member name="M:Labman.UserInterface.MarkupExtensions.VisibleIfIsExtension.ProvideValue(System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Labman.UserInterface.PasswordHelper">
            <summary>
            This class is required in order to allow binding to a password textbox in WPF
            </summary>
        </member>
        <member name="F:Labman.UserInterface.PasswordHelper.PasswordProperty">
            <summary>
            The password property
            </summary>
        </member>
        <member name="F:Labman.UserInterface.PasswordHelper.AttachProperty">
            <summary>
            The attach property
            </summary>
        </member>
        <member name="F:Labman.UserInterface.PasswordHelper.IsUpdatingProperty">
            <summary>
            The is updating property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.PasswordHelper.SetAttach(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the attach.
            </summary>
            <param name="dp">The dp.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Labman.UserInterface.PasswordHelper.GetAttach(System.Windows.DependencyObject)">
            <summary>
            Gets the attach.
            </summary>
            <param name="dp">The dp.</param>
            <returns>Flag that indicates if a property is attached to the dependary</returns>
        </member>
        <member name="M:Labman.UserInterface.PasswordHelper.GetPassword(System.Windows.DependencyObject)">
            <summary>
            Gets the password.
            </summary>
            <param name="dp">The dp.</param>
            <returns>The entered password</returns>
        </member>
        <member name="M:Labman.UserInterface.PasswordHelper.SetPassword(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets the password.
            </summary>
            <param name="dp">The dp.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Labman.UserInterface.StatusColours">
            <summary>
            Preferred colours for use in rack/vial/process status iconography.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.Red">
            <summary>
            OffRedLightBrush
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.Blue">
            <summary>
            53A5FF (Same as LabmanBlue)
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.DarkBlue">
            <summary>
            18329b
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.Green">
            <summary>
            OnGreenLightBrush
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.Gray">
            <summary>
            MenuBackgroundBrush
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.Orange">
            <summary>
            ff9c2d
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.Yellow">
            <summary>
            ffe614
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.Purple">
            <summary>
            b520ff
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.Pink">
            <summary>
            ff37b6
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.GreenHov">
            <summary>
            60ce77
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.RedHov">
            <summary>
            ce3e5d
            </summary>
        </member>
        <member name="P:Labman.UserInterface.StatusColours.SlateGrey">
            <summary>
            41424B
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.AnalogInputSettingsUserControl">
            <summary>
            Interaction logic for AnalogInputSettingsUserControl.xaml
            </summary>
            <summary>
            AnalogInputSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AnalogInputSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogInputSettingsUserControl.#ctor(Labman.IO.AnalogInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.AnalogInputSettingsUserControl"/> class.
            </summary>
            <param name="analogInput">The analog input.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogInputSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.AnalogOutputSettingsUserControl">
            <summary>
            Interaction logic for AnalogOutputSettingsUserControl.xaml
            </summary>
            <summary>
            AnalogOutputSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AnalogOutputSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogOutputSettingsUserControl.#ctor(Labman.IO.AnalogOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.AnalogOutputSettingsUserControl"/> class.
            </summary>
            <param name="analogOutput">The analog output.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogOutputSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.AntonPaarRheometerUserControl">
            <summary>
            Interaction logic for AntonPaarRheometerUserControl.xaml
            </summary>
            <summary>
            AntonPaarRheometerUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AntonPaarRheometerUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AntonPaarRheometerUserControl.#ctor(Labman.Hardware.Rheometers.AntonPaar)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AntonPaarRheometerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.ArmSettingsUserControl">
            <summary>Interaction logic for ArmSettingsUserControl.xaml</summary>
            <summary>
            ArmSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ArmSettingsUserControl.ExcludedPropertiesProperty">
            <summary>A list of strings that represent controls that should be excluded (Visibility = Collapsed) from this instance of the control.</summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ArmSettingsUserControl.#ctor(Labman.MotionControl.Arm)">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.ArmSettingsUserControl"/> class.</summary>
            <param name="arm">The arm.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ArmSettingsUserControl.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.ArmSettingsUserControl"/> For use within other user controls where the DataContext is already set</summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.ArmSettingsUserControl.ExcludedProperties">
            <summary>A list of strings that represent controls that should be excluded (Visibility = Collapsed) from this instance of the control.</summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ArmSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.ArmUserControl">
            <summary>
            Interaction logic for ArmUserControl.xaml
            </summary>
            <summary>
            ArmUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ArmUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ArmUserControl.#ctor(Labman.MotionControl.Arm)">
            <summary>
            WPF Constructor.
            </summary>
            <param name="arm">The arm.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ArmUserControl.#ctor">
            <summary>
            WPF Constructor.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ArmUserControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ArmUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl">
            <summary>
            Interaction logic for AutomaticallyGeneratedEngineeringUserControl.xaml
            </summary>
            <summary>
            AutomaticallyGeneratedEngineeringUserControl
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.VM">
            <summary>
            Property that exposes the view model for the user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.TitleProperty">
            <summary>
            The path of the assembly.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.AssemblyPath">
            <summary>
            AssemblyPath
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.AssemblyPathProperty">
            <summary>
            The path of the assembly.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.ClassName">
            <summary>
            Property that allows the class name to be specified for the engineering form
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.ClassNameProperty">
            <summary>
            Property that allows the class name to be specified for the engineering form
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.ClassInstance">
            <summary>
            Property that allows the class instance object to be set, commands are executed on this instance
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.ClassInstanceProperty">
            <summary>
            Property that allows the class instance object to be set, commands are executed on this instance
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.#ctor">
            <summary>
            Constructor for the engineering user control
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedEngineeringUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedParametersUserControl">
            <summary>
            Interaction logic for AutomaticallyGeneratedParametersUserControl.xaml
            </summary>
            <summary>
            AutomaticallyGeneratedParametersUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedParametersUserControl.#ctor">
            <summary>
            Constructor for the engineering user control
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AutomaticallyGeneratedParametersUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.BaumerCameraSettingsUserControl">
            <summary>
            Interaction logic for BaumerCameraSettingsUserControl.xaml
            </summary>
            <summary>
            BaumerCameraSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BaumerCameraSettingsUserControl.#ctor(Labman.Hardware.Cameras.BaumerCamera2)">
            <summary>
            Interaction logic for BaumerCameraSettingsUserControl.xaml
            </summary>
            <param name="device">The baumer camera to represent.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BaumerCameraSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.BeckhoffPlcLinkedIODeviceSettingsUserControl">
            <summary>
            Interaction logic for BeckhoffPlcLinkedIODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            BeckhoffPlcLinkedIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.BeckhoffPlcLinkedIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BeckhoffPlcLinkedIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BeckhoffPlcLinkedIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.DscLoadCellConverterSettingsUserControl">
            <summary>
            Interaction logic for DSCLoadCellConverterSettingsUserControl.xaml
            </summary>
            <summary>
            DscLoadCellConverterSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.DscLoadCellConverterSettingsUserControl.#ctor(Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet)">
            <summary>
            Interaction logic for DSCLoadCellConverterSettingsUserControl.xaml
            </summary>
            <param name="device">The hardware device related to this settings user control.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.DscLoadCellConverterSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.DscLoadCellConverterUserControl">
            <summary>
            Interaction logic for DSCLoadCellConverterUserControl.xaml
            </summary>
            <summary>
            DscLoadCellConverterUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.DscLoadCellConverterUserControl.#ctor(Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet)">
            <summary>
            Interaction logic for DSCLoadCellConverterUserControl.xaml
            </summary>
            <param name="device">The hardware device related to this user control.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.DscLoadCellConverterUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.NtiEnviromuxEMicroTrhEnvironmentSensorSettingsUserControl">
            <summary>
            Interaction logic for EnvironmentSensorSettingsUserControl.xaml
            </summary>
            <summary>
            NtiEnviromuxEMicroTrhEnvironmentSensorSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NtiEnviromuxEMicroTrhEnvironmentSensorSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NtiEnviromuxEMicroTrhEnvironmentSensorSettingsUserControl.#ctor(Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NtiEnviromuxEMicroTrhEnvironmentSensorSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.EpsonRobotArmSettingsUserControl">
            <summary>
            Interaction logic for EpsonRobotArmsSettingUserControl.xaml
            </summary>
            <summary>
            EpsonRobotArmSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.EpsonRobotArmSettingsUserControl.#ctor(Labman.Hardware.RobotArms.EpsonRobotArm)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.EpsonRobotArmSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCANCPXTemperaturePT100DeviceUserControl">
            <summary>
            Interaction logic for FestoCANCPXTemperaturePT100DeviceUserControl.xaml
            </summary>
            <summary>
            FestoCANCPXTemperaturePT100DeviceUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCANCPXTemperaturePT100DeviceUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANCPXTemperaturePT100DeviceUserControl.#ctor(Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.FestoCANCPXTemperaturePT100DeviceUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANCPXTemperaturePT100DeviceUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoTemperatureAnalogueInputSettingsUserControl">
            <summary>
            Interaction logic for FestoTemperatureAnalogueInputSettingsUserControl.xaml
            </summary>
            <summary>
            FestoTemperatureAnalogueInputSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoTemperatureAnalogueInputSettingsUserControl.#ctor(Labman.Hardware.IODevices.FestoCANCPXTemperaturePT100Device)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.FestoTemperatureAnalogueInputSettingsUserControl"/></summary>
            <param name="device">The device</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoTemperatureAnalogueInputSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FlavourSpecInstrumentSettingsUserControl">
            <summary>
            Interaction logic for FlavourSpecInstrumentSettingsUserControl.xaml
            </summary>
            <summary>
            FlavourSpecInstrumentSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FlavourSpecInstrumentSettingsUserControl._vm">
            <summary>
            FlavourSpec settings view model
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FlavourSpecInstrumentSettingsUserControl.#ctor(Labman.Hardware.Instruments.FlavourSpecInstrument)">
            <summary>
            Constructor
            </summary>
            <param name="device">Instance of FlavourSpec instrument class</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FlavourSpecInstrumentSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FlavourSpecInstrumentUserControl">
            <summary>
            Interaction logic for FlavourInstrumentSpecUserControl.xaml
            </summary>
            <summary>
            FlavourSpecInstrumentUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FlavourSpecInstrumentUserControl.#ctor(Labman.Hardware.Instruments.FlavourSpecInstrument)">
            <summary>
            Class constructor
            </summary>
            <param name="device">Instance of FlavourSpec class</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FlavourSpecInstrumentUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.HettichCentrifugeSettingsUserControl">
            <summary>
            Interaction logic for CentrifugeSettingsUserControl.xaml
            </summary>
            <summary>
            HettichCentrifugeSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.HettichCentrifugeSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.HettichCentrifugeSettingsUserControl.#ctor(Labman.Hardware.Centrifuges.HettichCentrifuge)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.HettichCentrifugeSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.LabmanLMCMotorControllerSettingsUserControl">
            <summary>
            Interaction logic for MotorControllerSettingsUserControl.xaml
            </summary>
            <summary>
            LabmanLMCMotorControllerSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.LabmanLMCMotorControllerSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LabmanLMCMotorControllerSettingsUserControl.#ctor(Labman.Hardware.MotorControllers.MotorController)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LabmanLMCMotorControllerSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.LMA201916ANeopixelLedControllerSettingsUserControl">
            <summary>
            Interaction logic for LMA201916ANeopixelLedControllerSettingsUserControl.xaml
            </summary>
            <summary>
            LMA201916ANeopixelLedControllerSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LMA201916ANeopixelLedControllerSettingsUserControl.#ctor(Labman.Hardware.Instruments.LMA201916ANeopixelLedController)">
            <summary>
            User control for changing the device settings of a LMA2019-16A Neopixel Led Controller
            </summary>
            <param name="device">The device to alter the settings of.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LMA201916ANeopixelLedControllerSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.LMA201916ANeopixelLedControllerUserControl">
            <summary>
            Interaction logic for LMA201916A_NeopixelControlBoard.xaml
            </summary>
            <summary>
            LMA201916ANeopixelLedControllerUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LMA201916ANeopixelLedControllerUserControl.#ctor(Labman.Hardware.Instruments.LMA201916ANeopixelLedController)">
            <summary>
             User control for controlling a LMA2019-16A Neopixel Led Controller device.
            </summary>
            <param name="device">The device to control</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LMA201916ANeopixelLedControllerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.LmcAxisSettingsUserControl">
            <summary>
            Interaction logic for LmcAxisSettingsUserControl.xaml
            </summary>
            <summary>
            LmcAxisSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.LmcAxisSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LmcAxisSettingsUserControl.#ctor(Labman.MotionControl.LmcAxis)">
            <summary>
            User control for the LMC axis settings
            </summary>
            <param name="axis">The axis object</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LmcAxisSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MettlerMoistureAnalyserSettingsUserControl">
            <summary>
            Interaction logic for MettlerMoistureAnalyserSettingsUserControl.xaml
            </summary>
            <summary>
            MettlerMoistureAnalyserSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.MettlerMoistureAnalyserSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MettlerMoistureAnalyserSettingsUserControl.#ctor(Labman.Hardware.Balances.MettlerMoistureAnalyser)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MettlerMoistureAnalyserSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.DlogicNanoNfcReaderUserControl">
            <summary>
            Interaction logic for BalanceUserControl.xaml
            </summary>
            <summary>
            DlogicNanoNfcReaderUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.DlogicNanoNfcReaderUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.DlogicNanoNfcReaderUserControl.#ctor(Labman.Hardware.Instruments.DlogicNanoNfcReader)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.DlogicNanoNfcReaderUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MettlerMoistureAnalyserUserControl">
            <summary>
            Interaction logic for BalanceUserControl.xaml
            </summary>
            <summary>
            MettlerMoistureAnalyserUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.MettlerMoistureAnalyserUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MettlerMoistureAnalyserUserControl.#ctor(Labman.Hardware.Balances.MettlerMoistureAnalyser)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MettlerMoistureAnalyserUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.BeckhoffAxisSettingsUserControl">
            <summary>
            Interaction logic for BeckhoffAxisSettingsUserControl.xaml
            </summary>
            <summary>
            BeckhoffAxisSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.BeckhoffAxisSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BeckhoffAxisSettingsUserControl.#ctor(Labman.MotionControl.BeckhoffAxis)">
            <summary>
            WPF Constructor
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BeckhoffAxisSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.BeckhoffIODeviceSettingsUserControl">
            <summary>
            Interaction logic for IODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            BeckhoffIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.BeckhoffIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BeckhoffIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.BeckhoffIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BeckhoffIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CartesianConfigurationUserControl">
            <summary>
            Interaction logic for NewCartesianConfigurationUserControl.xaml
            </summary>
            <summary>
            CartesianConfigurationUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CartesianConfigurationUserControl.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.CartesianConfigurationUserControl"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CartesianConfigurationUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CANCoderSettingsUserControl">
            <summary>
            Interaction logic for CANCoderSettingsUserControl.xaml
            </summary>
            <summary>
            CANCoderSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CANCoderSettingsUserControl.#ctor(Labman.Hardware.Instruments.CANCoder)">
            <summary>
            Constructs the CANCoderSettingsUserControl.
            </summary>
            <param name="device">The device to base the usercontrol around.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CANCoderSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CANCoderUserControl">
            <summary>
            Interaction logic for CANCoderUserControl.xaml
            </summary>
            <summary>
            CANCoderUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CANCoderUserControl.#ctor(Labman.Hardware.Instruments.CANCoder)">
            <summary>
            Constructs the CANCoderUserControl.
            </summary>
            <param name="device">The device to base the usercontrol around.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CANCoderUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.EdmundBuhlerOrbitalShakerUserControl">
            <summary>
            Interaction logic for EdmundBuhlerOrbitalShakerUserControl.xaml
            </summary>
            <summary>
            EdmundBuhlerOrbitalShakerUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.EdmundBuhlerOrbitalShakerUserControl.#ctor(Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.EdmundBuhlerOrbitalShakerUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.EdmundBuhlerOrbitalShakerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CartesianConfigurationAxisUserControl">
            <summary>
            Interaction logic for NewCartesianConfigurationAxisUserControl.xaml
            </summary>
            <summary>
            CartesianConfigurationAxisUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CartesianConfigurationAxisUserControl.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.CartesianConfigurationAxisUserControl"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CartesianConfigurationAxisUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.IconBrowserUserControl">
            <summary>
            Interaction logic for IconBrowserUserControl.xaml
            </summary>
            <summary>
            IconBrowserUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.IconBrowserUserControl.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.IconBrowserUserControl"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.IconBrowserUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.LogUserControl">
            <summary>
            Interaction logic for LogUserControl.xaml.
            </summary>
            <summary>
            LogUserControl
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.LogUserControl.BoundLogName">
            <summary>
            Log name property is used to pass the name of the log file object to bind
            to through to the view model instance for this view
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.LogUserControl.BoundLogNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for LogName.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LogUserControl.OnLogNameChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event fired when the log name gets changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LogUserControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.LogUserControl"/> class.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LogUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MicrowaveDigesterSettingsUserControl">
            <summary>
            Interaction logic for MicrowaveDigesterSettingsUserControl.xaml
            </summary>
            <summary>
            MicrowaveDigesterSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.MicrowaveDigesterSettingsUserControl._vm">
            <summary>
            Settings view model
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MicrowaveDigesterSettingsUserControl.#ctor(Labman.Hardware.MicrowaveDigesters.MicrowaveDigester)">
            <summary>
            Class constructor
            </summary>
            <param name="device">Microwave digester object</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MicrowaveDigesterSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MicrowaveDigesterStageUserControl">
            <summary>
            Interaction logic for MicrowaveDigesterStageUserControl.xaml
            </summary>
            <summary>
            MicrowaveDigesterStageUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.MicrowaveDigesterStageUserControl._vm">
            <summary>
            View model of a stage
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MicrowaveDigesterStageUserControl.#ctor">
            <summary>
            Class constructor to initilise the view
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MicrowaveDigesterStageUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MicrowaveDigesterUserControl">
            <summary>
            Interaction logic for MicrowaveDigesterUserControl.xaml
            </summary>
            <summary>
            MicrowaveDigesterUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MicrowaveDigesterUserControl.#ctor(Labman.Hardware.MicrowaveDigesters.MicrowaveDigester)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MicrowaveDigesterUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MitsubishiRobotArmEngineeringUserControl">
            <summary>
            Interaction logic for MelfaEngineeringUserControl.xaml
            </summary>
            <summary>
            MitsubishiRobotArmEngineeringUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MitsubishiRobotArmEngineeringUserControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.MitsubishiRobotArmEngineeringUserControl"/> class.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MitsubishiRobotArmEngineeringUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl">
            <summary>
            Interaction logic for NullableComboBoxUserControl.xaml
            </summary>
            <summary>
            NullableComboBoxUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.DisplayMemberPathProperty">
            <summary>
            The DisplayMemberPathProperty property.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.DisplayMemberPath">
            <summary>
            Gets or sets the display member path.
            </summary>
            <value>
            The display member path.
            </value>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.DisplayMemberPathPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
             Method that is called when the DisplayMemberPath property is changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.ItemsSource">
            <summary>
            Item source collection
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.ItemsSourceProperty">
            <summary>
            Dependency Property for the Item source collection
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.SelectedItem">
            <summary>
            SelectedItem property for the combobox
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.SelectedItemProperty">
            <summary>
            Dependency Property for the SelectedItem value
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.ItemsSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method that is called when the ItemsSource property is changed
            </summary>
            <param name="sender">The control that fired the changed event</param>
            <param name="args">The propery changed event args that contains both the old and new values</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.SelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method that is called when the SelectedItem property is changed
            </summary>
            <param name="sender">The control that fired the changed event</param>
            <param name="args">The propery changed event args that contains both the old and new values</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.#ctor">
            <summary>
            Constructor for the nullable combo box control
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.NullValue_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Click handler for the null button on the control
            </summary>
            <param name="sender">Not used</param>
            <param name="e">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.ComboItem_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Handler for when the combo item is changed
            </summary>
            <param name="sender">Not used</param>
            <param name="e">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NullableComboBoxUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.NumericUpDownUserControl">
            <summary>
            Interaction logic for NumericUpDownUserControl.xaml
            </summary>
            <summary>
            NumericUpDownUserControl
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.MaximumValue">
            <summary>
            Maximum value to accept
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.MaximumValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for MaximumValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.MinimumValue">
            <summary>
            Minimum value to accept
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.MinimumValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for MinimumValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.DecimalPlaces">
            <summary>
            The number of decimal places to use
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.DecimalPlacesProperty">
            <summary>
            Using a DependencyProperty as the backing store for DecimalPlaces.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.CurrentValue">
            <summary>
            Current Value
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.CurrentValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for CurrentValue.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.PassedValidation">
            <summary>
            Reports to the viewmodel if the value has passed or failed validation READ ONLY
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.PassedValidationProperty">
            <summary>
            Using a DependencyProperty as the backing store for PassedValidation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.TextAlignment">
            <summary>
            Sets the text alignment property of the internal textbox
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.TextAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for PassedValidation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.Increment">
            <summary>
            The amount to add or subtract when the increase/decrease buttons are clicked
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.IncrementProperty">
            <summary>
            Using a DependencyProperty as the backing store for PassedValidation.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.NumericUpDownUserControl"/> class.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.IsNumeric(System.Object)">
            <summary>
            Verifies if the passed value is numeric or not
            </summary>
            <param name="value">The value to check and parse</param>
            <returns>True if the value is numeric, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.ValidateValue(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Validate the current value whenever the CurrentValue dependency property is changed
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.ChangeValue(System.Double)">
            <summary>
            Changes the current value
            </summary>
            <param name="amount">The amount to increase or decrease by</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.IncreaseValue_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Increase value button
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.DecreaseValue_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Decrease value button
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.TextBox_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called whenever the text is changed in the textbox
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Controls.TextChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.TextBox_MouseWheel(System.Object,System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            Handle the mouse wheel moving in the box
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseWheelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.SetText(System.String)">
            <summary>
            Set the text in the textbox
            </summary>
            <param name="value">The text to set</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NumericUpDownUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.DoubleValidationRule">
            <summary>
            Class for validation of a double value in a textbox
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.DoubleValidationRule.Validate(System.Object,System.Globalization.CultureInfo)">
            <summary>
            Class constructor performs the validation of the entered text
            </summary>
            <param name="value">The value to check</param>
            <param name="cultureInfo">Culture info</param>
            <returns>A ValidationResult which details whether the value is acceptable or not</returns>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.OmniKey5022SettingsUserControl">
            <summary>
            Interaction logic for OmniKey5022SettingsUserControl.xaml
            </summary>
            <summary>
            OmniKey5022SettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OmniKey5022SettingsUserControl.#ctor(Labman.Hardware.Instruments.OmniKey5022RfidReader)">
            <summary>
            Class constructor
            </summary>
            <param name="device">Device</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OmniKey5022SettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.OmniKey5022UserControl">
            <summary>
            Interaction logic for OmniKey5022UserControl.xaml
            </summary>
            <summary>
            OmniKey5022UserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OmniKey5022UserControl.#ctor(Labman.Hardware.Instruments.OmniKey5022RfidReader)">
            <summary>
            Class constructor
            </summary>
            <param name="device">Device</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OmniKey5022UserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.ProcessStatesIndicatorUserControl">
            <summary>
            Interaction logic for ProcessStatesUserControl.xaml
            </summary>
            <summary>
            ProcessStatesIndicatorUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatesIndicatorUserControl.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.ProcessStatesIndicatorUserControl"/>
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.ProcessStatesIndicatorUserControl.IndicatorTemplate">
            <summary>The datatemplate used to display process states.</summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ProcessStatesIndicatorUserControl.IndicatorTemplateProperty">
            <summary>The datatemplate used to display process states.</summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.ProcessStatesIndicatorUserControl.Orientation">
            <summary>The orientation of the statuses</summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ProcessStatesIndicatorUserControl.OrientationProperty">
            <summary>The orientation of the statuses</summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatesIndicatorUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RfIdeasUniversalRfidReaderUserControl">
            <summary>
            Interaction logic for RfIdeasUniversalRfidReaderUserControl.xaml
            </summary>
            <summary>
            RfIdeasUniversalRfidReaderUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RfIdeasUniversalRfidReaderUserControl.#ctor(Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader)">
            <summary>
            Class constructor
            </summary>
            <param name="device">Device</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RfIdeasUniversalRfidReaderUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RheometerUserControl">
            <summary>
            Interaction logic for RheometerUserControl.xaml
            </summary>
            <summary>
            RheometerUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RheometerUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RheometerUserControl.#ctor(Labman.Hardware.Rheometers.Rheometer)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RheometerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RobotArmConfigurationUserControl">
            <summary>
            Interaction logic for RobotArmConfigurationUserControl.xaml
            </summary>
            <summary>
            RobotArmConfigurationUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RobotArmConfigurationUserControl.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.RobotArmConfigurationUserControl"/></summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RobotArmConfigurationUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SartoriusBiohitSettingsUserControl">
            <summary>
            Interaction logic for SartoriusBiohitSettingsUserControl.xaml
            </summary>
            <summary>
            SartoriusBiohitSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SartoriusBiohitSettingsUserControl.#ctor(Labman.Hardware.Instruments.SartoriusBiohitPipettor)">
            <summary>
            Default constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SartoriusBiohitSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SartoriusBiohitUserControl">
            <summary>
            Interaction logic for SartoriusBiohitUserControl.xaml
            </summary>
            <summary>
            SartoriusBiohitUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SartoriusBiohitUserControl.#ctor(Labman.Hardware.Instruments.SartoriusBiohitPipettor)">
            <summary>
            Default constructor
            </summary>
            <param name="device">Device to control</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SartoriusBiohitUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SchneiderAxisSettingsUserControl">
            <summary>Interaction logic for SchneiderAxisSettingsUserControl.xaml</summary>
            <summary>
            SchneiderAxisSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SchneiderAxisSettingsUserControl.#ctor(Labman.MotionControl.Axis)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.SchneiderAxisSettingsUserControl"/></summary>
            <param name="axis">The axis for this control</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SchneiderAxisSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SicEC1EngraverInstrumentSettingsUserControl">
            <summary>
            Interaction logic for BalanceSettingsUserControl.xaml
            </summary>
            <summary>
            SicEC1EngraverInstrumentSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.SicEC1EngraverInstrumentSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SicEC1EngraverInstrumentSettingsUserControl.#ctor(Labman.Hardware.Instruments.SicEC1EngraverInstrument)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SicEC1EngraverInstrumentSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MasterflexLSDigitalInstrumentUserControl">
            <summary>
            Interaction logic for SicEC1EngraverInstrumentUserControl.xaml
            </summary>
            <summary>
            MasterflexLSDigitalInstrumentUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.MasterflexLSDigitalInstrumentUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MasterflexLSDigitalInstrumentUserControl.#ctor(Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MasterflexLSDigitalInstrumentUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SicEC1EngraverInstrumentUserControl">
            <summary>
            Interaction logic for SicEC1EngraverInstrumentUserControl.xaml
            </summary>
            <summary>
            SicEC1EngraverInstrumentUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.SicEC1EngraverInstrumentUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SicEC1EngraverInstrumentUserControl.#ctor(Labman.Hardware.Instruments.SicEC1EngraverInstrument)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SicEC1EngraverInstrumentUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SoakTestUserControl">
            <summary>
            Interaction logic for SoakTestUserControl.xaml
            </summary>
            <summary>
            SoakTestUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SoakTestUserControl.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.SoakTestUserControl"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SoakTestUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.PhidgetsIODeviceSettingsUserControl">
            <summary>
            Interaction logic for FestoCANCPXIODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            PhidgetsIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.PhidgetsIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PhidgetsIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.PhidgetsIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PhidgetsIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.HidenMassSpectrometerUserControl">
            <summary>
            Interaction logic for HidenMassSpectrometerUserControl.xaml
            </summary>
            <summary>
            HidenMassSpectrometerUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.HidenMassSpectrometerUserControl.#ctor(Labman.Hardware.Instruments.HidenMassSpectrometer)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.HidenMassSpectrometerUserControl" /> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.HidenMassSpectrometerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.PositionIOSettingsUserControl">
            <summary>
            Interaction logic for IODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            PositionIOSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.PositionIOSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PositionIOSettingsUserControl.#ctor(Labman.Hardware.IODevices.PositionIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PositionIOSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.NewportSolarSimulatorUserControl">
            <summary>
            Interaction logic for NewportSolarSimulatorUserControl.xaml
            </summary>
            <summary>
            NewportSolarSimulatorUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NewportSolarSimulatorUserControl.#ctor(Labman.Hardware.Instruments.NewportSolarSimulator)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.NewportSolarSimulatorUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NewportSolarSimulatorUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.ProcessStatesUserControl">
            <summary>
            Interaction logic for ProcessStatesUserControl.xaml
            </summary>
            <summary>
            ProcessStatesUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatesUserControl.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.ProcessStatesUserControl"/>
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.ProcessStatesUserControl.ProcessNamesWidth">
            <summary>
            The width of the first column that displays the name of each process.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ProcessStatesUserControl.ProcessNamesWidthProperty">
            <summary>
            The width of the first column that displays the name of each process.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.ProcessStatesUserControl.ProcessStatesWidth">
            <summary>
            The width of the second column that displays the status of each process.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ProcessStatesUserControl.ProcessStatesWidthProperty">
            <summary>
            The width of the second column that displays the status of each process.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatesUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.GridLengthToSizingGroupConverter">
            <summary>Converter to set the sizing group of a column or row definition to null if the corresponding width or height value is star type</summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.GridLengthToSizingGroupConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Returns null if the value is a GridLength that is star type</summary>
            <param name="value">The GridLength</param>
            <param name="targetType">Not used</param>
            <param name="parameter">The value to return if the GridLength is not star type</param>
            <param name="culture">Not used</param>
            <returns>null if the value is a GridLength that is star type, the parameter value otherwise</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.GridLengthToSizingGroupConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>Not impletmented</summary>
            <param name="value">Not used</param>
            <param name="targetType">Not used</param>
            <param name="parameter">Not used</param>
            <param name="culture">Not used</param>
            <returns>Not used</returns>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RackLegendUserControl">
            <summary>
            Interaction logic for RackLegendUserControl.xaml
            </summary>
            <summary>
            RackLegendUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackLegendUserControl.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.RackLegendUserControl"/>
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackLegendUserControl.Orientation">
            <summary>
            The orientation of the rack legend.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackLegendUserControl.OrientationProperty">
            <summary>
            The orientation of the rack legend.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackLegendUserControl.LabelStyle">
            <summary>
            The style of the labels for each legend item.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackLegendUserControl.LabelStyleProperty">
            <summary>
            The style of the labels for each legend item.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackLegendUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TrinamicAxisSettingsUserControl">
            <summary>Interaction logic for TriamicAxisSettingsUserControl.xaml</summary>
            <summary>
            TrinamicAxisSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TrinamicAxisSettingsUserControl.#ctor(Labman.MotionControl.TrinamicAxis)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.TrinamicAxisSettingsUserControl"/></summary>
            <param name="axis">The axis for this control</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TrinamicAxisSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.VermesMicroDispenserSettingsUserControl">
            <summary>
            Interaction logic for the vermes microdispenser settings user control.
            </summary>
            <summary>
            VermesMicroDispenserSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VermesMicroDispenserSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VermesMicroDispenserSettingsUserControl.#ctor(Labman.Hardware.Syringes.VermesMicroDispenser)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VermesMicroDispenserSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.VermesMicroDispenserUserControl">
            <summary>
            Interaction logic for SyringeUserControl.xaml
            </summary>
            <summary>
            VermesMicroDispenserUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VermesMicroDispenserUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VermesMicroDispenserUserControl.#ctor(Labman.Hardware.Syringes.VermesMicroDispenser)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VermesMicroDispenserUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.WatersBackPressureRegulatorUserControl">
            <summary>
            Interaction logic for WatersBackPressureRegulatorUserControl.xaml
            </summary>
            <summary>
            WatersBackPressureRegulatorUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.WatersBackPressureRegulatorUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.WatersBackPressureRegulatorUserControl.#ctor(Labman.Hardware.Instruments.WatersBackPressureRegulator)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.WatersBackPressureRegulatorUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.BrookfieldRheometerUserControl">
            <summary>
            Interaction logic for BrookfieldRheometerUserControl.xaml
            </summary>
            <summary>
            BrookfieldRheometerUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.BrookfieldRheometerUserControl._vm">
            <summary>
            Create the viewModel object for this specific view
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BrookfieldRheometerUserControl.#ctor(Labman.Hardware.Rheometers.BrookField)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.BrookfieldRheometerUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BrookfieldRheometerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CentrifugeCameraSettingsUserControl">
            <summary>
            Interaction logic for CentrifugeCameraSettingsUserControl.xaml
            </summary>
            <summary>
            CentrifugeCameraSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CentrifugeCameraSettingsUserControl.#ctor(Labman.Hardware.CentrifugeCameras.CentrifugeCamera)">
            <summary>
            Constructor, sets the datacontext 
            </summary>
            <param name="device">The device linked to the user control</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CentrifugeCameraSettingsUserControl.Image_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Detects where in the image is being clicked to set the centre of the centrifuge
            </summary>
            <param name="sender">The image that is clicked on</param>
            <param name="e">The event</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CentrifugeCameraSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CentrifugeCameraUserControl">
            <summary>
            Interaction logic for CentrifugeCamera.xaml
            </summary>
            <summary>
            CentrifugeCameraUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CentrifugeCameraUserControl.#ctor(Labman.Hardware.CentrifugeCameras.CentrifugeCamera)">
            <summary>
            Sets data context
            </summary>
            <param name="device">device user control is linked to</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CentrifugeCameraUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.ElectricGripperSettingsUserControl">
            <summary>
            Interaction logic for GripperSettingsUserControl.xaml
            </summary>
            <summary>
            ElectricGripperSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ElectricGripperSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ElectricGripperSettingsUserControl.#ctor(Labman.Hardware.ElectricGrippers.ElectricGripper)">
            <summary>
            WPF constructor 
            </summary>
            <param name="device">The device</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ElectricGripperSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.ElectricGripperUserControl">
            <summary>
            Interaction logic for GripperUserControl.xaml
            </summary>
            <summary>
            ElectricGripperUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ElectricGripperUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ElectricGripperUserControl.#ctor(Labman.Hardware.ElectricGrippers.ElectricGripper)">
            <summary>
            WPF constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ElectricGripperUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCANAnalogInputDeviceSettingsUserControl">
            <summary>
            Interaction logic for FestoCANAnalogIODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            FestoCANAnalogInputDeviceSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANAnalogInputDeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.FestoCANAnalogInputDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.FestoCANAnalogInputDeviceSettingsUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANAnalogInputDeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCANAnalogInputDeviceUserControl">
            <summary>
            Interaction logic for FestoCANAnalogIODeviceUserControl.xaml
            </summary>
            <summary>
            FestoCANAnalogInputDeviceUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCANAnalogInputDeviceUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANAnalogInputDeviceUserControl.#ctor(Labman.Hardware.IODevices.FestoCANAnalogInputDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.FestoCANAnalogInputDeviceUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANAnalogInputDeviceUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCANAnalogOutputDeviceSettingsUserControl">
            <summary>
            Interaction logic for FestoCANAnalogOutputDeviceSettingsUserControl.xaml
            </summary>
            <summary>
            FestoCANAnalogOutputDeviceSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANAnalogOutputDeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.FestoCANAnalogOutputDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.FestoCANAnalogOutputDeviceSettingsUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANAnalogOutputDeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCANAnalogOutputDeviceUserControl">
            <summary>
            Interaction logic for FestoCANAnalogOutputUserControl.xaml
            </summary>
            <summary>
            FestoCANAnalogOutputDeviceUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCANAnalogOutputDeviceUserControl.InputRefreshInterval">
            <summary>
            The input refresh interval - Due to reading the inputs one at a time the refresh must be fairly slow
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCANAnalogOutputDeviceUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANAnalogOutputDeviceUserControl.#ctor(Labman.Hardware.IODevices.FestoCANAnalogOutputDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.FestoCANAnalogOutputDeviceUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANAnalogOutputDeviceUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCANCPXCPStringDoubleValveBankIODeviceSettingsUserControl">
            <summary>
            Interaction logic for FestoCANCPXCPStringDoubleValveBankIODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            FestoCANCPXCPStringDoubleValveBankIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCANCPXCPStringDoubleValveBankIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANCPXCPStringDoubleValveBankIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANCPXCPStringDoubleValveBankIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCANCPXCPStringIODeviceSettingsUserControl">
            <summary>
            Interaction logic for FestoCANCPXCPStringIODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            FestoCANCPXCPStringIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCANCPXCPStringIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANCPXCPStringIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice)">
            <summary>
            WPF Constructor for this user control
            </summary>
            <param name="device">The device</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANCPXCPStringIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCANCPXIODeviceSettingsUserControl">
            <summary>
            Interaction logic for FestoCANCPXIODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            FestoCANCPXIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCANCPXIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANCPXIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.FestoCANCPXIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANCPXIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCANDoubleValveBankIODeviceSettingsUserControl">
            <summary>
            Interaction logic for IODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            FestoCANDoubleValveBankIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCANDoubleValveBankIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANDoubleValveBankIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANDoubleValveBankIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.HachDR3900SpectrophotometerSettingsUserControl">
            <summary>
            Interaction logic for HachDR3900SpectrophotometerSettingsUserControl.xaml
            </summary>
            <summary>
            HachDR3900SpectrophotometerSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.HachDR3900SpectrophotometerSettingsUserControl.#ctor(Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.HachDR3900SpectrophotometerSettingsUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.HachDR3900SpectrophotometerSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.HachDR3900SpectrophotometerUserControl">
            <summary>
            Interaction logic for HachDR3900SpectrophotometerUserControl.xaml
            </summary>
            <summary>
            HachDR3900SpectrophotometerUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.HachDR3900SpectrophotometerUserControl.#ctor(Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.HachDR3900SpectrophotometerUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.HachDR3900SpectrophotometerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.HardwareConfigUserControl">
            <summary>
            Interaction logic for HardwareConfigUserControl.xaml
            </summary>
            <summary>
            HardwareConfigUserControl
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.HardwareConfigUserControl.TreeViewIsResizable">
            <summary>Determines whether the tree view can be resized horizontally</summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.HardwareConfigUserControl.TreeViewIsResizableProperty">
            <summary>Determines whether the tree view can be resized horizontally</summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.HardwareConfigUserControl.DefaultTreeViewWidth">
            <summary>Sets the starting width of the treeview</summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.HardwareConfigUserControl.DefaultTreeViewWidthProperty">
            <summary>Sets the starting width of the treeview</summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.HardwareConfigUserControl.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.HardwareConfigUserControl"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.HardwareConfigUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.PILZPNOZMulti2IODeviceSettingsUserControl">
            <summary>
            Interaction logic for PILZPNOZMulti2IODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            PILZPNOZMulti2IODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.PILZPNOZMulti2IODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PILZPNOZMulti2IODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.PILZPNOZMulti2IODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PILZPNOZMulti2IODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.JandelRM3000PlusUserControl">
            <summary>
            Interaction logic for JandelRM3000PlusUserControl.xaml
            </summary>
            <summary>
            JandelRM3000PlusUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.JandelRM3000PlusUserControl.#ctor(Labman.Hardware.Instruments.JandelRM3000Plus)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.JandelRM3000PlusUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.JandelRM3000PlusUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.KawasakiRobotArmUserControl">
            <summary>
            Interaction logic for RobotArmUserControl.xaml
            </summary>
            <summary>
            KawasakiRobotArmUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.KawasakiRobotArmUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.KawasakiRobotArmUserControl.#ctor(Labman.Hardware.RobotArms.KawasakiRobotArm)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.KawasakiRobotArmUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.KloehnSyringeSettingsUserControl">
            <summary>
            Interaction logic for KloehnSyringeSettingsUserControl.xaml
            </summary>
            <summary>
            KloehnSyringeSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.KloehnSyringeSettingsUserControl.#ctor(Labman.Hardware.Syringes.KloehnSyringe)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.KloehnSyringeSettingsUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.KloehnSyringeSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.KloehnSyringeUserControl">
            <summary>
            Interaction logic for KloehnSyringeUserControl.xaml
            </summary>
            <summary>
            KloehnSyringeUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.KloehnSyringeUserControl.#ctor(Labman.Hardware.Syringes.KloehnSyringe)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.KloehnSyringeUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.KloehnSyringeUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.LaserSettingsUserControl">
            <summary>
            Interaction logic for LaserSettingsUserControl.xaml
            </summary>
            <summary>
            LaserSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.LaserSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LaserSettingsUserControl.#ctor(Labman.Hardware.Lasers.Laser)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LaserSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.LaserUserControl">
            <summary>
            Interaction logic for LaserUserControl.xaml
            </summary>
            <summary>
            LaserUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.LaserUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LaserUserControl.#ctor(Labman.Hardware.Lasers.Laser)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LaserUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FanucRobotArmSettingsUserControl">
            <summary>
            Interaction logic for IODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            FanucRobotArmSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FanucRobotArmSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FanucRobotArmSettingsUserControl.#ctor(Labman.Hardware.RobotArms.FanucRobotArm)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FanucRobotArmSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MettlerPowderScaleUserControl">
            <summary>
            Interaction logic for BalanceUserControl.xaml
            </summary>
            <summary>
            MettlerPowderScaleUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.MettlerPowderScaleUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MettlerPowderScaleUserControl.#ctor(Labman.Hardware.Instruments.MettlerPowderScale)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MettlerPowderScaleUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.OceanOpticsUserControl">
            <summary>
            Interaction logic for OceanOpticsUserControl.xaml
            </summary>
            <summary>
            OceanOpticsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OceanOpticsUserControl.#ctor(Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.OceanOpticsUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OceanOpticsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.OmronE5ZNSettingsUserControl">
            <summary>
            Interaction logic for PIDSettingsUserControl.xaml
            </summary>
            <summary>
            OmronE5ZNSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.OmronE5ZNSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OmronE5ZNSettingsUserControl.#ctor(Labman.Hardware.PIDs.OmronE5ZNPID)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OmronE5ZNSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.OmronE5ZNUserControl">
            <summary>
            Interaction logic for OmronE5ZNUserControl.xaml
            </summary>
            <summary>
            OmronE5ZNUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.OmronE5ZNUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OmronE5ZNUserControl.#ctor(Labman.Hardware.PIDs.OmronE5ZNPID)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OmronE5ZNUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.OrionStarA211UserControl">
            <summary>
            Interaction logic for OrionStarA211UserControl.xaml
            </summary>
            <summary>
            OrionStarA211UserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.OrionStarA211UserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OrionStarA211UserControl.#ctor(Labman.Hardware.Instruments.OrionStarA211Instrument)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.OrionStarA211UserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OrionStarA211UserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.OrionVersaStarUserControl">
            <summary>
            Interaction logic for OrionVersaStarUserControl.xaml
            </summary>
            <summary>
            OrionVersaStarUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.OrionVersaStarUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OrionVersaStarUserControl.#ctor(Labman.Hardware.Instruments.OrionVersaStarInstrument)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.OrionVersaStarUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OrionVersaStarUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.PositionsDatabaseUserControl">
            <summary>
            Interaction logic for PositionsDatabaseUserControl.xaml
            </summary>
            <summary>
            PositionsDatabaseUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PositionsDatabaseUserControl.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.PositionsDatabaseUserControl"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PositionsDatabaseUserControl.ScrollingTabControl_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Changes the visibility of the first "Group" column depending on what item has been selected in the scrolling tab control.
            Unfortunately, it's code behind or type converters for this one.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PositionsDatabaseUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.QuasarRGBLEDControllerSettingsUserControl">
            <summary>
            Interaction logic for QuasarRGBLEDControllerSettingsUserControl.xaml
            </summary>
            <summary>
            QuasarRGBLEDControllerSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.QuasarRGBLEDControllerSettingsUserControl.#ctor(Labman.Hardware.Instruments.QuasarRGBLEDController)">
            <summary>
            Constuctor for QuasarRGBLEDControllerSettingsUserControl
            </summary>
            <param name="device">The Quasar LED Controller</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.QuasarRGBLEDControllerSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.QuasarRGBLEDControllerUserControl">
            <summary>
            Interaction logic for QuasarRBGLEDControllerUserControl.xaml
            </summary>
            <summary>
            QuasarRGBLEDControllerUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.QuasarRGBLEDControllerUserControl.#ctor(Labman.Hardware.Instruments.QuasarRGBLEDController)">
            <summary>
            Constructor for QuasarRGBLEDControllerUserControl
            </summary>
            <param name="device">Quasar LED Controller Device</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.QuasarRGBLEDControllerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RhopointGlossmeterUserControl">
            <summary>
            Interaction logic for SpectrophotometerUserControl.xaml
            </summary>
            <summary>
            RhopointGlossmeterUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RhopointGlossmeterUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RhopointGlossmeterUserControl.#ctor(Labman.Hardware.Spectrophotometers.RhopointGlossmeter)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RhopointGlossmeterUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RobotArmSettingsUserControl">
            <summary>
            Interaction logic for RobotArmSettingsUserControl.xaml
            </summary>
            <summary>
            RobotArmSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RobotArmSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RobotArmSettingsUserControl.#ctor(Labman.Hardware.RobotArms.RobotArm)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RobotArmSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RobotArmUserControl">
            <summary>
            Interaction logic for RobotArmUserControl.xaml
            </summary>
            <summary>
            RobotArmUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RobotArmUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RobotArmUserControl.#ctor(Labman.Hardware.RobotArms.RobotArm)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RobotArmUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RotronicHygroLogNtUserControlView">
            <summary>
            Interaction logic for RotronicHygroLogNtUserControlView.xaml
            </summary>
            <summary>
            RotronicHygroLogNtUserControlView
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RotronicHygroLogNtUserControlView._vm">
            <summary>
            The Model object to be used by the view model
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RotronicHygroLogNtUserControlView.#ctor(Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.RotronicHygroLogNtUserControlView"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RotronicHygroLogNtUserControlView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SartoriusSettingsUserControl">
            <summary>
            Interaction logic for SartoriusSettingsUserControl.xaml
            </summary>
            <summary>
            SartoriusSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.SartoriusSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SartoriusSettingsUserControl.#ctor(Labman.Hardware.Balances.Balance)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SartoriusSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TecanSmartValveSettingsUserControl">
            <summary>
            Interaction logic for TecanSmartValveSettingsUserControl.xaml
            </summary>
            <summary>
            TecanSmartValveSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TecanSmartValveSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanSmartValveSettingsUserControl.#ctor(Labman.Hardware.Syringes.TecanSmartValve)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanSmartValveSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TecanSmartValveUserControl">
            <summary>
            Interaction logic for TecanSmartValveUserControl.xaml
            </summary>
            <summary>
            TecanSmartValveUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TecanSmartValveUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanSmartValveUserControl.#ctor(Labman.Hardware.Syringes.TecanSmartValve)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanSmartValveUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TracxerCodeReaderSettingsUserControl">
            <summary>
            Interaction logic for TracxerCodeReaderSettingsUserControl.xaml
            </summary>
            <summary>
            TracxerCodeReaderSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TracxerCodeReaderSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TracxerCodeReaderSettingsUserControl.#ctor(Labman.Hardware.BarcodeReaders.TracxerCodeReader)">
            <summary>
            The Tracxer Code Trader settings user control
            </summary>
            <param name="device">The code reader device</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TracxerCodeReaderSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TracxerCodeReaderUserControl">
            <summary>
            Interaction logic for TracxerCodeReaderUserControl.xaml
            </summary>
            <summary>
            TracxerCodeReaderUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TracxerCodeReaderUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TracxerCodeReaderUserControl.#ctor(Labman.Hardware.BarcodeReaders.TracxerCodeReader)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TracxerCodeReaderUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TrinamicPD1180UserControl">
            <summary>
            Interaction logic for SchneiderATV12MotorControllerUserControl.xaml
            </summary>
            <summary>
            TrinamicPD1180UserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TrinamicPD1180UserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TrinamicPD1180UserControl.#ctor(Labman.Hardware.MotorControllers.TrinamicPD1180MotorController)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TrinamicPD1180UserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.ServotronixAxisSettingsUserControl">
            <summary>
            Interaction logic for ServotronixAxisSettingsUserControl.xaml
            </summary>
            <summary>
            ServotronixAxisSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ServotronixAxisSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ServotronixAxisSettingsUserControl.#ctor(Labman.MotionControl.ServotronixAxis)">
            <summary>
            WPF Constructor
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ServotronixAxisSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TecanAirDisplacementPipettorSyringeSettingsUserControl">
            <summary>
            Interaction logic for TecanAirDisplacementPipettorSyringeSettingsUserControl.xaml
            </summary>
            <summary>
            TecanAirDisplacementPipettorSyringeSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TecanAirDisplacementPipettorSyringeSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanAirDisplacementPipettorSyringeSettingsUserControl.#ctor(Labman.Hardware.Syringes.TecanAirDisplacementPipettor)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanAirDisplacementPipettorSyringeSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TecanAirDisplacementPipettorSyringeUserControl">
            <summary>
            Interaction logic for TecanAirDisplacementPipettorSyringeUserControl.xaml
            </summary>
            <summary>
            TecanAirDisplacementPipettorSyringeUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TecanAirDisplacementPipettorSyringeUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanAirDisplacementPipettorSyringeUserControl.#ctor(Labman.Hardware.Syringes.TecanAirDisplacementPipettor)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanAirDisplacementPipettorSyringeUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TrioMotionMotorControllerUserControl">
            <summary>
            Interaction logic for TrioMotionMotorControllerUserControl.xaml
            </summary>
            <summary>
            TrioMotionMotorControllerUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TrioMotionMotorControllerUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TrioMotionMotorControllerUserControl.#ctor(Labman.Hardware.MotorControllers.TrioMotionMotorController)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TrioMotionMotorControllerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCANValveBankIODeviceSettingsUserControl">
            <summary>
            Interaction logic for IODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            FestoCANValveBankIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCANValveBankIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANValveBankIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.FestoCANValveBankIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCANValveBankIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TurbidityMeterSettingsUserControl">
            <summary>
            Interaction logic for TurbidityMeterSettingsUserControl.xaml
            </summary>
            <summary>
            TurbidityMeterSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TurbidityMeterSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TurbidityMeterSettingsUserControl.#ctor(Labman.Hardware.TurbidityMeters.TurbidityMeter)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TurbidityMeterSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TurbidityMeterUserControl">
            <summary>
            Interaction logic for TurbidityMeterUserControl.xaml
            </summary>
            <summary>
            TurbidityMeterUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TurbidityMeterUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TurbidityMeterUserControl.#ctor(Labman.Hardware.TurbidityMeters.TurbidityMeter)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TurbidityMeterUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.Videojet1550InstrumentSettingsUserControl">
            <summary>
            Interaction logic for Videojet1550InstrumentSettingsUserControl.xaml
            </summary>
            <summary>
            Videojet1550InstrumentSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.Videojet1550InstrumentSettingsUserControl.#ctor(Labman.Hardware.Instruments.Videojet1550Instrument)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.Videojet1550InstrumentSettingsUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.Videojet1550InstrumentSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.WeedtechWtpctmCounterInstrumentSettingsUserControl">
            <summary>
            Interaction logic for WeedtechWtpctmCounterInstrumentSettingsUserControl.xaml
            </summary>
            <summary>
            WeedtechWtpctmCounterInstrumentSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.WeedtechWtpctmCounterInstrumentSettingsUserControl.#ctor(Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.WeedtechWtpctmCounterInstrumentSettingsUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.WeedtechWtpctmCounterInstrumentSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.WeedtechWtpctmCounterInstrumentUserControl">
            <summary>
            Interaction logic for WeedtechWtpctmCounterInstrumentUserControl.xaml
            </summary>
            <summary>
            WeedtechWtpctmCounterInstrumentUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.WeedtechWtpctmCounterInstrumentUserControl.#ctor(Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.WeedtechWtpctmCounterInstrumentUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.WeedtechWtpctmCounterInstrumentUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.Videojet1550InstrumentUserControl">
            <summary>
            Interaction logic for Videojet1550InstrumentUserControl.xaml
            </summary>
            <summary>
            Videojet1550InstrumentUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.Videojet1550InstrumentUserControl.#ctor(Labman.Hardware.Instruments.Videojet1550Instrument)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.Videojet1550InstrumentUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.Videojet1550InstrumentUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CentrifugeSettingsUserControl">
            <summary>
            Interaction logic for CentrifugeSettingsUserControl.xaml
            </summary>
            <summary>
            CentrifugeSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.CentrifugeSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CentrifugeSettingsUserControl.#ctor(Labman.Hardware.Centrifuges.Centrifuge)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CentrifugeSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CentrifugeUserControl">
            <summary>
            Interaction logic for CentrifugeUserControl.xaml
            </summary>
            <summary>
            CentrifugeUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.CentrifugeUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CentrifugeUserControl.#ctor(Labman.Hardware.Centrifuges.Centrifuge)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CentrifugeUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CoolmuscleMotorControllerUserControl">
            <summary>
            Interaction logic for CoolmuscleMotorControllerUserControl.xaml
            </summary>
            <summary>
            CoolmuscleMotorControllerUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.CoolmuscleMotorControllerUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CoolmuscleMotorControllerUserControl.#ctor(Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CoolmuscleMotorControllerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CameraSettingsUserControl">
            <summary>
            Interaction logic for CameraSettingsUserControl.xaml
            </summary>
            <summary>
            CameraSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.CameraSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CameraSettingsUserControl.#ctor(Labman.Hardware.Cameras.Camera)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CameraSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CameraUserControl">
            <summary>
            Interaction logic for CameraUserControl.xaml
            </summary>
            <summary>
            CameraUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.CameraUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CameraUserControl.#ctor(Labman.Hardware.Cameras.Camera)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CameraUserControl.Dispose">
            <summary>
            Dispose of unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CameraUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.ADAMIODeviceSettingsUserControl">
            <summary>
            Interaction logic for IODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            ADAMIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ADAMIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ADAMIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.ADAMIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ADAMIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.AnalogInputUserControl">
            <summary>
            Interaction logic for AnalogInputUserControl.xaml
            </summary>
            <summary>
            AnalogInputUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AnalogInputUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogInputUserControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.AnalogInputUserControl" /> class.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogInputUserControl.#ctor(Labman.IO.AnalogInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.AnalogInputUserControl" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogInputUserControl.#ctor(Labman.IO.AnalogInput,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.InputUserControl"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="refreshInterval">The refresh interval.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogInputUserControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogInputUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.AnalogOutputUserControl">
            <summary>
            Interaction logic for AnalogOutputUserControl.xaml
            </summary>
            <summary>
            AnalogOutputUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AnalogOutputUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogOutputUserControl.#ctor">
            <summary>
            WPF Constructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogOutputUserControl.#ctor(Labman.IO.AnalogOutput)">
            <summary>
            WPF Constructor
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogOutputUserControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AnalogOutputUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsUserControl">
            <summary>
            Interaction logic for FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.FestoCPXCoDeSysEmbeddedControllerIODeviceUserControl">
            <summary>
            Interaction logic for FestoCPXCoDeSysEmbeddedControllerIODeviceUserControl.xaml
            </summary>
            <summary>
            FestoCPXCoDeSysEmbeddedControllerIODeviceUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCPXCoDeSysEmbeddedControllerIODeviceUserControl.InputRefreshInterval">
            <summary>
            The input refresh interval - Due to reading the inputs one at a time the refresh must be fairly slow
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.FestoCPXCoDeSysEmbeddedControllerIODeviceUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCPXCoDeSysEmbeddedControllerIODeviceUserControl.#ctor(Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCPXCoDeSysEmbeddedControllerIODeviceUserControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.FestoCPXCoDeSysEmbeddedControllerIODeviceUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.LumbergFieldBusIODeviceSettingsUserControl">
            <summary>
            Interaction logic for IODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            LumbergFieldBusIODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.LumbergFieldBusIODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LumbergFieldBusIODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.LumbergFieldBusIODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.LumbergFieldBusIODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MDriveMotorControlUserControl">
            <summary>
            Interaction logic for MDriveMotorControlUserControl.xaml
            </summary>
            <summary>
            MDriveMotorControlUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.MDriveMotorControlUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MDriveMotorControlUserControl.#ctor(Labman.Hardware.MotorControllers.MotorController)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MDriveMotorControlUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RecirculatingCoolerSettingsUserControl">
            <summary>
            Interaction logic for RecirculatingCoolerSettingsUserControl.xaml
            </summary>
            <summary>
            RecirculatingCoolerSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RecirculatingCoolerSettingsUserControl.#ctor(Labman.Hardware.RecirculatingCoolers.RecirculatingCooler)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.RecirculatingCoolerSettingsUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RecirculatingCoolerSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RecirculatingCoolerUserControl">
            <summary>
            Interaction logic for RecirculatingCoolerUserControl.xaml
            </summary>
            <summary>
            RecirculatingCoolerUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RecirculatingCoolerUserControl.#ctor(Labman.Hardware.RecirculatingCoolers.RecirculatingCooler)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.RecirculatingCoolerUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RecirculatingCoolerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SheenTriGlossMeterUserControl">
            <summary>
            Interaction logic for SheenTriGlossMeterUserControls.xaml
            </summary>
            <summary>
            SheenTriGlossMeterUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SheenTriGlossMeterUserControl.#ctor(Labman.Hardware.Spectrophotometers.SheenTriGlossmeter)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.SheenTriGlossMeterUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SheenTriGlossMeterUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SpectrophotometerSettingsUserControl">
            <summary>
            Interaction logic for SpectrophotometerSettingsUserControl.xaml
            </summary>
            <summary>
            SpectrophotometerSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.SpectrophotometerSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SpectrophotometerSettingsUserControl.#ctor(Labman.Hardware.Spectrophotometers.Spectrophotometer)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SpectrophotometerSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SpectrophotometerUserControl">
            <summary>
            Interaction logic for SpectrophotometerUserControl.xaml
            </summary>
            <summary>
            SpectrophotometerUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.SpectrophotometerUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SpectrophotometerUserControl.#ctor(Labman.Hardware.Spectrophotometers.Spectrophotometer)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SpectrophotometerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.InstrumentUserControl">
            <summary>
            Interaction logic for InstrumentUserControl.xaml
            </summary>
            <summary>
            InstrumentUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.InstrumentUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InstrumentUserControl.#ctor(Labman.Hardware.Instruments.Instrument)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InstrumentUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.InstrumentSettingsUserControl">
            <summary>
            Interaction logic for InstrumentSettingsUserControl.xaml
            </summary>
            <summary>
            InstrumentSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.InstrumentSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InstrumentSettingsUserControl.#ctor(Labman.Hardware.Instruments.Instrument)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InstrumentSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SchneiderATV12MotorControllerUserControl">
            <summary>
            Interaction logic for SchneiderATV12MotorControllerUserControl.xaml
            </summary>
            <summary>
            SchneiderATV12MotorControllerUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.SchneiderATV12MotorControllerUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SchneiderATV12MotorControllerUserControl.#ctor(Labman.Hardware.MotorControllers.SchneiderATV12MotorController)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SchneiderATV12MotorControllerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TorqueTransducerSettingsUserControl">
            <summary>
            Interaction logic for TorqueTransducerSettingsUserControl.xaml
            </summary>
            <summary>
            TorqueTransducerSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TorqueTransducerSettingsUserControl._vm">
            <summary>
            View model object.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TorqueTransducerSettingsUserControl.#ctor(Labman.Hardware.TorqueTransducers.TorqueTransducer)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.TorqueTransducerSettingsUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TorqueTransducerSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TorqueTransducerUserControl">
            <summary>
            Interaction logic for TorqueTransducerUserControl.xaml
            </summary>
            <summary>
            TorqueTransducerUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TorqueTransducerUserControl._vm">
            <summary>
            View model object.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TorqueTransducerUserControl.#ctor(Labman.Hardware.TorqueTransducers.TorqueTransducer)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.TorqueTransducerUserControl"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TorqueTransducerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TReXMotorControllerAxisUserControl">
            <summary>
            Interaction logic for TReXMotorControllerAxisUserControl.xaml
            </summary>
            <summary>
            TReXMotorControllerAxisUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TReXMotorControllerAxisUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TReXMotorControllerAxisUserControl.#ctor(Labman.Hardware.MotorControllers.TReXMotorController,System.Int32)">
            <summary>
            WPF Constructor
            </summary>
            <param name="motorController">The motor controller.</param>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TReXMotorControllerAxisUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TReXMotorControllerUserControl">
            <summary>
            Interaction logic for TReXMotorControllerSettingsUserControl.xaml
            </summary>
            <summary>
            TReXMotorControllerUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TReXMotorControllerUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TReXMotorControllerUserControl.#ctor(Labman.Hardware.MotorControllers.TReXMotorController)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TReXMotorControllerUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.SiasIxionCentrifugeUserControl">
            <summary>
            Interaction logic for CentrifugeUserControl.xaml
            </summary>
            <summary>
            SiasIxionCentrifugeUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.SiasIxionCentrifugeUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SiasIxionCentrifugeUserControl.#ctor(Labman.Hardware.Centrifuges.SiasIxion)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.SiasIxionCentrifugeUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.EnvironmentSensorUserControl">
            <summary>
            Interaction logic for EnvironmentSensorUserControl.xaml
            </summary>
            <summary>
            EnvironmentSensorUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.EnvironmentSensorUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.EnvironmentSensorUserControl.#ctor(Labman.Hardware.EnvironmentSensors.EnvironmentSensor)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.EnvironmentSensorUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.EnvironmentSensorSettingsUserControl">
            <summary>
            Interaction logic for EnvironmentSensorSettingsUserControl.xaml
            </summary>
            <summary>
            EnvironmentSensorSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.EnvironmentSensorSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.EnvironmentSensorSettingsUserControl.#ctor(Labman.Hardware.EnvironmentSensors.EnvironmentSensor)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.EnvironmentSensorSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.VerticalLegendRackControl">
            <summary>
            Interaction logic for VerticalLegendRackControl.xaml
            </summary>
            <summary>
            VerticalLegendRackControl
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirections">
            <summary>
            Possible rack indexing directions.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirections.HORIZ_LTOR_TTOB">
            <summary>
            Rack indexing is left to right, top to bottom.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirections.HORIZ_RTOL_TTOB">
            <summary>
            Rack indexing is right to left, top to bottom.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirections.HORIZ_LTOR_BTOT">
            <summary>
             Rack indexing is left to right, bottom to top.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirections.HORIZ_RTOL_BTOT">
            <summary>
            Rack indexing is right to left, bottom to top.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirections.VERT_TTOB_LTOR">
            <summary>
            Rack indexing is top to bottom, left to right.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirections.VERT_TTOB_RTOL">
            <summary>
            Rack indexing top to bottom, right to left.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirections.VERT_BTOT_LTOR">
            <summary>
             Rack indexing is bottom to top, left to right.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirections.VERT_BTOT_RTOL">
            <summary>
            Rack indexing is bottom to top, right to left.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.PositionShapes">
            <summary>
            Possible positiontypes.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.PositionShapes.CIRCULAR">
            <summary>
            Position is circular.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.PositionShapes.RECTANGULAR">
            <summary>
            Position is rectangular.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.PositionShapes.TRIANGULAR">
            <summary>
            Position is a triangle.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.PositionShapes.HEXAGONAL">
            <summary>
            Position is a hexagonal.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirectionTypeConverter">
            <summary>
            IndexingDirections enumeration type converter.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirectionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type 
            of this converter, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from. in this 
            case  must be a string.</param>
            <returns>Boolean true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirectionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Override ConvertFrom() to convert from a string to an enumeration of IndexingDirections.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirectionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>Boolean, true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Override ConvertTo() to convert from an enumeration of IndexingDirections to a string.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo. If Nothing is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.Rows">
            <summary>
            Sets or gets the number of rack rows.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.Columns">
            <summary>
            Sets or gets the number of rack columns.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.RackNumber">
            <summary>
            Sets or gets the rack number.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.RackNumberProperty">
            <summary>
            Using a DependencyProperty as the backing store for RackNumber.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.XStartOffset">
            <summary>
            Gets or sets the X start offset - x offset into rack control where first rack position is created.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.XStartOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for XStartOffset.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.YStartOffset">
            <summary>
            Gets or sets the y start offset - y offset into rack control where first rack position is created.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.YStartOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for YStartOffsetProperty.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.XPitch">
            <summary>
            Gets or sets the x pitch, picth between rack positions in x direction.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.YPitch">
            <summary>
            Gets or sets the x pitch, picth between rack positions in x direction.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.YPitchProperty">
            <summary>
            Using a DependencyProperty as the backing store for YPitch.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.PositionDiameter">
            <summary>
            Gets or sets the position diameter - the size of the rack positions for racks containing circular positions.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.PositionDiameterProperty">
            <summary>
            Using a DependencyProperty as the backing store for Diameter.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.RackBorderThickness">
            <summary>
            Gets or sets the thickness of the rack border.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.RackBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for BorderThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.BorderBrush">
            <summary>
            Gets or sets the rack border color.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.BorderBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for Border.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.IndexingDirection">
            <summary>
            Gets or sets the rack indexing direction.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.OnDepedencyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called on a dependency property value change.
            </summary>
            <param name="d">The dependency property changed.</param>
            <param name="e">Provides data for property change.</param>tu
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.GetPositionLabel(System.Int32)">
            <summary>
            Retrieves the label for a specified position
            </summary>
            <param name="position">The position to lookup</param>
            <returns>The label required or null if not found</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.CreatePositionStyle(System.Windows.Media.Color,System.Windows.Media.Color,Labman.UserInterface.UserControlViews.VerticalLegendRackControl.PositionShapes)">
            <summary>
            Static method used to create a style template ready to be assigned to a rack control
            </summary>
            <param name="fillColor">The fill colour of the position</param>
            <param name="borderColor">The border colour of the position</param>
            <param name="shape">The shape to use</param>
            <returns>The new style</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.CreatePositionLabel(System.Int32)">
            <summary>
            Create a label for the specified position
            </summary>
            <param name="index">The position to create a label for</param>
            <returns>The new label</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.CreatePositionStyleAndAddToResources(System.String,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Cretes a position style and adds it to the control resource collection.
            </summary>
            <param name="styleName">Specifies a name for the style.</param>
            <param name="color">Specifies the color for the position style.</param>
            <param name="borderColor">Specifies the border color for the position style.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.CreateHorizontalRackLayout">
            <summary>
            Creates labels for a rack with positions that run horizontally accross the rack.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.CreateVerticalRackLayout">
            <summary>
            Creates labels for a rack with positions that run vertically 
            up and down the rack.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.Redraw">
            <summary>
            Redraws the rack control.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.SetPositionStyle(System.Int32,System.String)">
            <summary>
            Method that sets the style of a given position
            </summary>
            <param name="position">The position to set</param>
            <param name="style">The style to set the position to use</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.RackControl_DataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method used to re-draw the rack when the data context is changed
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.#ctor">
            <summary>
            Rack control constructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.VerticalLegendRackControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.ProcessStatusMiniControl">
            <summary>
            Interaction logic for ProcessStatusMiniControl.xaml
            </summary>
            <summary>
            ProcessStatusMiniControl
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.ProcessStatusMiniControl.ProcessName">
            <summary>
            Dependancy property to assign the process to bind with
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ProcessStatusMiniControl.ProcessNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for ProcessName.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatusMiniControl.OnNameChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method that is fired when the value of the name changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatusMiniControl.#ctor">
            <summary>
            Constructor for the view
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatusMiniControl.NameChanged(System.String)">
            <summary>
            Name changed handler
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatusMiniControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.ProcessStatusControl">
            <summary>
            Interaction logic for ProcessStatusControl.xaml
            </summary>
            <summary>
            ProcessStatusControl
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.ProcessStatusControl.ProcessName">
            <summary>
            Dependancy property to assign the process to bind with
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.ProcessStatusControl.ProcessNameProperty">
            <summary>
            Using a DependencyProperty as the backing store for ProcessName.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatusControl.OnNameChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method that is fired when the value of the name changes
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatusControl.#ctor">
            <summary>
            Constructor for the view
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatusControl.NameChanged(System.String)">
            <summary>
            Name changed handler
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.ProcessStatusControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.AxisSettingsUserControl">
            <summary>Interaction logic for AxisSettingsUserControl.xaml</summary>
            <summary>
            AxisSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AxisSettingsUserControl.ExcludedPropertiesProperty">
            <summary>A list of strings that represent controls that should be excluded (Visibility = Collapsed) from this instance of the control.</summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AxisSettingsUserControl.#ctor(Labman.MotionControl.Axis)">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.AxisSettingsUserControl"/> class.</summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AxisSettingsUserControl.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.AxisSettingsUserControl"/> For use within other user controls where the DataContext is already set</summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.AxisSettingsUserControl.ExcludedProperties">
            <summary>A list of strings that represent controls that should be excluded (Visibility = Collapsed) from this instance of the control.</summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AxisSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.AxisUserControl">
            <summary>
            Interaction logic for AxisUserControl.xaml
            </summary>
            <summary>
            AxisUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.AxisUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AxisUserControl.#ctor(Labman.MotionControl.Axis)">
            <summary>
            WPF Constructor.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AxisUserControl.#ctor">
            <summary>
            WPF Constructor.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AxisUserControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.AxisUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CartesianConfigurationSettingsUserControl">
            <summary>
            Interaction logic for CartesianConfigurationSettingsUserControl.xaml
            </summary>
            <summary>
            CartesianConfigurationSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CartesianConfigurationSettingsUserControl.#ctor(Labman.MotionControl.CartesianConfiguration)">
            <summary>
            WPF Constructor
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CartesianConfigurationSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.CartesianConfigurationMiniUserControl">
            <summary>
            Interaction logic for CartesianConfigurationMiniUserControl.xaml
            </summary>
            <summary>
            CartesianConfigurationMiniUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.CartesianConfigurationMiniUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CartesianConfigurationMiniUserControl.#ctor(Labman.MotionControl.CartesianConfiguration)">
            <summary>
            WPF Constructor
            </summary>
            <param name="configuration">The configuration.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CartesianConfigurationMiniUserControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.CartesianConfigurationMiniUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.OutputUserControl">
            <summary>
            Interaction logic for OutputUserControl.xaml
            </summary>
            <summary>
            OutputUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.OutputUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OutputUserControl.#ctor">
            <summary>
            WPF Constructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OutputUserControl.#ctor(Labman.IO.Output)">
            <summary>
            WPF Constructor
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OutputUserControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OutputUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.InputUserControl">
            <summary>
            Interaction logic for InputUserControl.xaml
            </summary>
            <summary>
            InputUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.InputUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InputUserControl.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.UserControlViews.InputUserControl"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InputUserControl.#ctor(Labman.IO.Input)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.InputUserControl" /> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InputUserControl.#ctor(Labman.IO.Input,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.InputUserControl"/> class.
            </summary>
            <param name="input">The input.</param>
            <param name="refreshInterval">The refresh interval.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InputUserControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InputUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.InputSettingsUserControl">
            <summary>
            Interaction logic for InputSettingsUserControl.xaml
            </summary>
            <summary>
            InputSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InputSettingsUserControl.#ctor(Labman.IO.Input)">
            <summary>
            WPF Constructor
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InputSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.InterfaceSettingsUserControl">
            <summary>
            Interaction logic for InterfaceSettingsUserControl.xaml
            </summary>
            <summary>
            InterfaceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.InterfaceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InterfaceSettingsUserControl.#ctor">
            <summary>
            WPF Constructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InterfaceSettingsUserControl.CreateVM(Labman.Communication.Interfaces.InterfaceSettings)">
            <summary>
            Sets the view model instance up
            </summary>
            <param name="settings">The interface settings to pass into the view model</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.InterfaceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.OutputSettingsUserControl">
            <summary>
            Interaction logic for OutputSettingsUserControl.xaml
            </summary>
            <summary>
            OutputSettingsUserControl
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OutputSettingsUserControl.#ctor(Labman.IO.Output)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.UserControlViews.OutputSettingsUserControl"/> class.
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.OutputSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.PIDSettingsUserControl">
            <summary>
            Interaction logic for PIDSettingsUserControl.xaml
            </summary>
            <summary>
            PIDSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.PIDSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PIDSettingsUserControl.#ctor(Labman.Hardware.PIDs.PID)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PIDSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.PIDUserControl">
            <summary>
            Interaction logic for PIDUserControl.xaml
            </summary>
            <summary>
            PIDUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.PIDUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PIDUserControl.#ctor(Labman.Hardware.PIDs.PID)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PIDUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.PositionLabelMultiValueConverter">
            <summary>
            Multibinding converter for position labels
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PositionLabelMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert bindings
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">Rack position</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A string to display in the label for the position
            </returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PositionLabelMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back - not used
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <exception cref="T:System.NotImplementedException">Not implemented</exception>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.NonNumericPositionLabelMultiValueConverter">
            <summary>
            Multibinding converter for position labels. This converter does not attempt to convert the labels to integers.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NonNumericPositionLabelMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert bindings
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">Rack position</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A string to display in the label for the position
            </returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.NonNumericPositionLabelMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back - not used
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <exception cref="T:System.NotImplementedException">Not implemented</exception>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.StyleMultiValueConverter">
            <summary>
            Obtain the correct style for each position in the rack based on its status value
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.StyleMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert styles
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.StyleMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back - not used
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <exception cref="T:System.NotImplementedException">Not implemented</exception>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.PositionTooltipMultiValueConverter">
            <summary>
            Multibinding converter for position tooltips
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PositionTooltipMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert bindings
            </summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.</param>
            <param name="parameter">Rack position</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            A string to display in the label for the position
            </returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.PositionTooltipMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back - not used
            </summary>
            <param name="value">The value that the binding target produces.</param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.</param>
            <param name="parameter">The converter parameter to use.</param>
            <param name="culture">The culture to use in the converter.</param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <exception cref="T:System.NotImplementedException">Method not implemented</exception>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RackControl">
            <summary>
            Interaction logic for RackControl.xaml
            </summary>
            <summary>
            RackControl
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RackControl.PositionClickedDelegate">
            <summary>
            Definition for position clicked event
            </summary>
            <param name="rackName">The name of the rack raising the event</param>
            <param name="position">The position that was clicked on</param>
        </member>
        <member name="E:Labman.UserInterface.UserControlViews.RackControl.PositionClicked">
            <summary>
            Event that is raised when a position in the rack control is clicked
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RackControl.PositionsSelectedDelegate">
            <summary>
            Definition for rubber band selection event
            </summary>
            <param name="rackName">The name of the rack raising the event</param>
            <param name="positions">The positions that were selected</param>
        </member>
        <member name="E:Labman.UserInterface.UserControlViews.RackControl.PositionsSelected">
            <summary>
            Event that is raised when positions in the rack control are selected
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections">
            <summary>
            Possible rack indexing directions.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.HORIZ_LTOR_TTOB">
            <summary>
            Rack indexing is left to right, top to bottom.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.HORIZ_RTOL_TTOB">
            <summary>
            Rack indexing is right to left, top to bottom.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.HORIZ_LTOR_BTOT">
            <summary>
             Rack indexing is left to right, bottom to top.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.HORIZ_RTOL_BTOT">
            <summary>
            Rack indexing is right to left, bottom to top.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.VERT_TTOB_LTOR">
            <summary>
            Rack indexing is top to bottom, left to right.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.VERT_TTOB_RTOL">
            <summary>
            Rack indexing top to bottom, right to left.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.VERT_BTOT_LTOR">
            <summary>
             Rack indexing is bottom to top, left to right.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.VERT_BTOT_RTOL">
            <summary>
            Rack indexing is bottom to top, right to left.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.STAG_HORIZ_LTOR_TTOB">
            <summary>
            Rack indexing is left to right, top to bottom.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.STAG_HORIZ_RTOL_TTOB">
            <summary>
            Rack indexing is right to left, top to bottom.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.STAG_HORIZ_LTOR_BTOT">
            <summary>
             Rack indexing is left to right, bottom to top.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.STAG_HORIZ_RTOL_BTOT">
            <summary>
            Rack indexing is right to left, bottom to top.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.STAG_VERT_TTOB_LTOR">
            <summary>
            Rack indexing is top to bottom, left to right.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.STAG_VERT_TTOB_RTOL">
            <summary>
            Rack indexing top to bottom, right to left.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.STAG_VERT_BTOT_LTOR">
            <summary>
             Rack indexing is bottom to top, left to right.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.STAG_VERT_BTOT_RTOL">
            <summary>
            Rack indexing is bottom to top, right to left.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirections.CIRCULAR">
            <summary>
            Circular indexing.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RackControl.PositionShapes">
            <summary>
            Possible positiontypes.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.PositionShapes.CIRCULAR">
            <summary>
            Position is circular.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.PositionShapes.RECTANGULAR">
            <summary>
            Position is rectangular.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.PositionShapes.TRIANGULAR">
            <summary>
            Position is a triangle.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.PositionShapes.HEXAGONAL">
            <summary>
            Position is a hexagonal.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RackControl.IndexingDirectionTypeConverter">
            <summary>
            IndexingDirections enumeration type converter.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.IndexingDirectionTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type 
            of this converter, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from. in this 
            case  must be a string.</param>
            <returns>Boolean true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.IndexingDirectionTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Override ConvertFrom() to convert from a string to an enumeration of IndexingDirections.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.IndexingDirectionTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>Boolean, true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.IndexingDirectionTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Override ConvertTo() to convert from an enumeration of IndexingDirections to a string.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo. If Nothing is passed, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.RackCornerRadius">
            <summary>
            Property to set the rack's corner radius
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.RackCornerRadiusProperty">
            <summary>
            Using a DependencyProperty as the backing store for RackCornerRadius.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.PositionTextOffset">
            <summary>
            Gets or sets the position text offset.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.PositionTextOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for PositionTextOffset.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.NonNumericPositionLabels">
            <summary>
            Gets or sets whether the position labels are numeric
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.NonNumericPositionLabelsProperty">
            <summary>
            Using a DependencyProperty as the backing store for NonNumericPositionLabels.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.Rows">
            <summary>
            Sets or gets the number of rack rows.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.RowsProperty">
            <summary>
            Using a DependencyProperty as the backing store for Rows.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.Columns">
            <summary>
            Sets or gets the number of rack columns.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.ColumnsProperty">
            <summary>
            Using a DependencyProperty as the backing store for Columns.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.RackNumber">
            <summary>
            Sets or gets the rack number.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.RackNumberProperty">
            <summary>
            Using a DependencyProperty as the backing store for RackNumber.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.RackPadding">
            <summary>
            Gets or sets the amount of space between the rack positions and the rack border.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.RackPaddingProperty">
            <summary>
            Using a DependencyProperty as the backing store for RackPadding.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.RackPositionsOffset">
            <summary>
            Gets or sets where the positions are placed within the rack.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.RackPositionsOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for RackPositionsOffset.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.XStartOffset">
            <summary>
            Gets or sets the X start offset - x offset into rack control where first rack position is created. The same spacing is applied after the end of the row.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.XStartOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for XStartOffset.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.YStartOffset">
            <summary>
            Gets or sets the y start offset - y offset into rack control where first rack position is created. The same spacing is applied after the end of the column.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.YStartOffsetProperty">
            <summary>
            Using a DependencyProperty as the backing store for YStartOffsetProperty.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.XPitch">
            <summary>
            Gets or sets the x pitch, picth between rack positions in x direction.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.XPitchProperty">
            <summary>
            Using a DependencyProperty as the backing store for XPitch.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.YPitch">
            <summary>
            Gets or sets the x pitch, picth between rack positions in x direction.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.YPitchProperty">
            <summary>
            Using a DependencyProperty as the backing store for YPitch.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.RackWidth">
            <summary>
            Overrides the width of the rack control. The size of the rack contents will be ignored.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.RackWidthProperty">
            <summary>
            Using a DependencyProperty as the backing store for RackWidth.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.RackHeight">
            <summary>
            Overrides the height of the rack control. The size of the rack contents will be ignored.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.RackHeightProperty">
            <summary>
            Using a DependencyProperty as the backing store for RackHeight.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.PositionLabelColor">
            <summary>
            Gets or sets the position label color.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.PositionLabelColourProperty">
            <summary>
            Using a DependencyProperty as the backing store for PositionLabelColor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.PositionDiameter">
            <summary>
            Gets or sets the position diameter - the size of the rack positions for racks containing circular positions.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.PositionDiameterProperty">
            <summary>
            Using a DependencyProperty as the backing store for Diameter.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.PositionWidthScaleFactor">
            <summary>
            Gets or sets the scale factor for the width of the elements to the position diameter property
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.PositionWidthScaleFactorProperty">
            <summary>
            Using a DependencyProperty as the backing store for PositionWidthScaleFactor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.RackBorderThickness">
            <summary>
            Gets or sets the thickness of the rack border.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.RackBorderThicknessProperty">
            <summary>
            Using a DependencyProperty as the backing store for BorderThickness.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.Positions">
            <summary>
            Sets or gets the number of positions (circular racks only).
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.PositionsProperty">
            <summary>
            Using a DependencyProperty as the backing store for PositionsProperty.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.Radius">
            <summary>
            Sets or gets the radius for circular rack types.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.RadiusProperty">
            <summary>
            Using a DependencyProperty as the backing store for Radius.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.BorderBrush">
            <summary>
            Gets or sets the rack border color.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.RackBackgroundColor">
            <summary>
            Rack background colour
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.RackBackgroundColorProperty">
            <summary>
            Using a DependencyProperty as the backing store for RackBackgroundColor.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.BorderBrushProperty">
            <summary>
            Using a DependencyProperty as the backing store for Border.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.IndexingDirection">
            <summary>
            Gets or sets the rack indexing direction.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.IndexingDirectionProperty">
            <summary>
            Using a DependencyProperty as the backing store for IndexingDirection.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.StaggeredRackAdjustment">
            <summary>
            Gets or sets the staggered rack adjustment.
            </summary>
            <value>
            The staggered rack adjustment.
            </value>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.StaggeredRackAdjustmentProperty">
            <summary>
            Moves the positions in a staggered rack. Used to get the positions centrally aligned
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.InvertStaggering">
            <summary>
            Gets or sets a value indicating whether to switch which row is offset.
            </summary>
            <value>
              <c>true</c> if [invert staggering]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.InvertStaggeringProperty">
            <summary>
            Switches whether the even or odd rows are offset
            </summary>
        </member>
        <member name="P:Labman.UserInterface.UserControlViews.RackControl.AutoGenerateLabelColours">
            <summary>
            Gets or sets whether label text colour should be auto-generatedbasedon position background colour.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RackControl.AutoGenerateLabelColoursProperty">
            <summary>
            Gets or sets whether label text colour should be auto-generatedbasedon position background colour.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.OnDepedencyPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called on a dependency property value change.
            </summary>
            <param name="d">The dependency property changed.</param>
            <param name="e">Provides data for property change.</param>tu
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.GetPositionLabel(System.Int32)">
            <summary>
            Retrieves the label for a specified position
            </summary>
            <param name="position">The position to lookup</param>
            <returns>The label required or null if not found</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.CreatePositionStyle(System.Windows.Media.Color,System.Windows.Media.Color,Labman.UserInterface.UserControlViews.RackControl.PositionShapes,System.Int32)">
            <summary>
            Static method used to create a style template ready to be assigned to a rack control
            </summary>
            <param name="fillColor">The fill colour of the position</param>
            <param name="borderColor">The border colour of the position</param>
            <param name="shape">The shape to use</param>
            <param name="borderThickness">The border thickness.</param>
            <returns>
            The new style
            </returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.CreatePositionStyle(System.Windows.Media.Color,System.Windows.Media.Color,Labman.UserInterface.UserControlViews.RackControl.PositionShapes,System.Int32,System.Int32)">
            <summary>
            Static method used to create a style template ready to be assigned to a rack control
            </summary>
            <param name="fillColor">The fill colour of the position</param>
            <param name="borderColor">The border colour of the position</param>
            <param name="shape">The shape to use</param>
            <param name="cornerRadius">The corner radius value to use</param>
            <param name="borderThickness">The border thickness.</param>
            <returns>
            The new style
            </returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.CreatePositionLabel(System.Int32)">
            <summary>
            Create a label for the specified position
            </summary>
            <param name="index">The position to create a label for</param>
            <returns>The new label</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.PositionLabel_MouseDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method handles the mouse click on a label
            </summary>
            <param name="sender">The label sending the click</param>
            <param name="e">Click mouse events</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.PositionLabel_MouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Method handles the mouse move event and draws a rubber band around as the mouse moves
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.PositionLabel_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            This method handles the mouse click on a label
            </summary>
            <param name="sender">The label sending the click</param>
            <param name="e">Click mouse events</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.CreatePositionStyleAndAddToResources(System.String,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Cretes a position style and adds it to the control resource collection.
            </summary>
            <param name="styleName">Specifies a name for the style.</param>
            <param name="color">Specifies the color for the position style.</param>
            <param name="borderColor">Specifies the border color for the position style.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.CreateHorizontalRackLayout">
            <summary>
            Creates labels for a rack with positions that run horizontally accross the rack.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.DegreeToRadian(System.Double)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="angle">Degrees</param>
            <returns>Radians</returns>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.CreateCircularRackLayout">
            <summary>
            Creates labels for a circular rack.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.CreateVerticalRackLayout">
            <summary>
            Creates labels for a rack with positions that run vertically 
            up and down the rack.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.Redraw">
            <summary>
            Redraws the rack control.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.SetPositionStyle(System.Int32,System.String)">
            <summary>
            Method that sets the style of a given position
            </summary>
            <param name="position">The position to set</param>
            <param name="style">The style to set the position to use</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.RackControl_DataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method used to re-draw the rack when the data context is changed
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.#ctor">
            <summary>
            Rack control constructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RackControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.RheometerSettingsUserControl">
            <summary>
            Interaction logic for RheometerSettingsUserControl.xaml
            </summary>
            <summary>
            RheometerSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.RheometerSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RheometerSettingsUserControl.#ctor(Labman.Hardware.Rheometers.Rheometer)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.RheometerSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.BalanceSettingsUserControl">
            <summary>
            Interaction logic for BalanceSettingsUserControl.xaml
            </summary>
            <summary>
            BalanceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.BalanceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BalanceSettingsUserControl.#ctor(Labman.Hardware.Balances.Balance)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BalanceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.BarcodeReaderSettingsUserControl">
            <summary>
            Interaction logic for BarcodeReaderSettingsUserControl.xaml
            </summary>
            <summary>
            BarcodeReaderSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.BarcodeReaderSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BarcodeReaderSettingsUserControl.#ctor(Labman.Hardware.BarcodeReaders.BarcodeReader)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BarcodeReaderSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.BarcodeReaderUserControl">
            <summary>
            Interaction logic for BarcodeReaderUserControl.xaml
            </summary>
            <summary>
            BarcodeReaderUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.BarcodeReaderUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BarcodeReaderUserControl.#ctor(Labman.Hardware.BarcodeReaders.BarcodeReader)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BarcodeReaderUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.IODeviceSettingsUserControl">
            <summary>
            Interaction logic for IODeviceSettingsUserControl.xaml
            </summary>
            <summary>
            IODeviceSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.IODeviceSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.IODeviceSettingsUserControl.#ctor(Labman.Hardware.IODevices.IODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.IODeviceSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.IODeviceUserControl">
            <summary>
            Interaction logic for IODeviceUserControl.xaml
            </summary>
            <summary>
            IODeviceUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.IODeviceUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.IODeviceUserControl.#ctor(Labman.Hardware.IODevices.IODevice)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.IODeviceUserControl.#ctor">
            <summary>
            WPF Constructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.IODeviceUserControl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.IODeviceUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MotorControllerSettingsUserControl">
            <summary>
            Interaction logic for MotorControllerSettingsUserControl.xaml
            </summary>
            <summary>
            MotorControllerSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.MotorControllerSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MotorControllerSettingsUserControl.#ctor(Labman.Hardware.MotorControllers.MotorController)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MotorControllerSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.MotorControlUserControl">
            <summary>
            Interaction logic for MotorControlUserControl.xaml
            </summary>
            <summary>
            MotorControlUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.MotorControlUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MotorControlUserControl.#ctor(Labman.Hardware.MotorControllers.MotorController)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.MotorControlUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TecanSyringeSettingsUserControl">
            <summary>
            Interaction logic for SyringeSettingsUserControl.xaml
            </summary>
            <summary>
            TecanSyringeSettingsUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TecanSyringeSettingsUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanSyringeSettingsUserControl.#ctor(Labman.Hardware.Syringes.TecanSyringe)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanSyringeSettingsUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.TecanSyringeUserControl">
            <summary>
            Interaction logic for SyringeUserControl.xaml
            </summary>
            <summary>
            TecanSyringeUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.TecanSyringeUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanSyringeUserControl.#ctor(Labman.Hardware.Syringes.TecanSyringe)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.TecanSyringeUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.UserControlViews.BalanceUserControl">
            <summary>
            Interaction logic for BalanceUserControl.xaml
            </summary>
            <summary>
            BalanceUserControl
            </summary>
        </member>
        <member name="F:Labman.UserInterface.UserControlViews.BalanceUserControl._vm">
            <summary>
            View model object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BalanceUserControl.#ctor(Labman.Hardware.Balances.Balance)">
            <summary>
            WPF Constructor
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.UserControlViews.BalanceUserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.Validation.ValidationGroup">
            <summary>
            Represents a group of properties and whether they are valid. Provides a mechanism for checking whether any of the controls and properties in the group are invalid, and gives information
            about the invalidity if so.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.Validation.ValidationGroup._propertiesDictionary">
            <summary>A Dictionary of the properties in this group, keyed by the controls to which this object is bound</summary>
        </member>
        <member name="P:Labman.UserInterface.Validation.ValidationGroup.AllProperties">
            <summary>All the <see cref="T:Labman.UserInterface.Validation.ValidationGroup.Property"/> objects in this group</summary>
        </member>
        <member name="P:Labman.UserInterface.Validation.ValidationGroup.ValidProperties">
            <summary>The <see cref="T:Labman.UserInterface.Validation.ValidationGroup.Property"/> objects currently in an valid state</summary>
        </member>
        <member name="P:Labman.UserInterface.Validation.ValidationGroup.InvalidProperties">
            <summary>The <see cref="T:Labman.UserInterface.Validation.ValidationGroup.Property"/> objects currently in an invalid state</summary>
        </member>
        <member name="P:Labman.UserInterface.Validation.ValidationGroup.IsValid">
            <summary>Indicates if any of the properties in the group are invalid</summary>
        </member>
        <member name="M:Labman.UserInterface.Validation.ValidationGroup.AddOrUpdate(System.Object,Labman.UserInterface.Validation.ValidationGroup.Property)">
            <summary>Adds or updates the given a <see cref="T:Labman.UserInterface.Validation.ValidationGroup.Property"/> object with the given key.</summary>
            <param name="control">The control to which the property is bound</param>
            <param name="property">The property</param>
        </member>
        <member name="M:Labman.UserInterface.Validation.ValidationGroup.Remove(System.Object)">
            <summary>Removes the control and <see cref="T:Labman.UserInterface.Validation.ValidationGroup.Property"/> pair from this group, if it exists.</summary>
            <param name="control">The control to which the property is bound</param>
            <returns>Whether an entry with the given key was found and remove</returns>
        </member>
        <member name="M:Labman.UserInterface.Validation.ValidationGroup.UpdateBindingExpression(System.Object,System.Windows.Data.BindingExpression)">
            <summary>Updates the binding expression of the <see cref="T:Labman.UserInterface.Validation.ValidationGroup.Property"/> object with the given key.</summary>
            <param name="control">The control to which the property is bound</param>
            <param name="bindingExpression">The new <see cref="T:System.Windows.Data.BindingExpression"/> object</param>
        </member>
        <member name="M:Labman.UserInterface.Validation.ValidationGroup.UpdateIsValid(System.Object,System.Boolean)">
            <summary>Updates whether the <see cref="T:Labman.UserInterface.Validation.ValidationGroup.Property"/> object with the given key is valid.</summary>
            <param name="control">The control to which the property is bound</param>
            <param name="isValid">The new IsValid value</param>
        </member>
        <member name="M:Labman.UserInterface.Validation.ValidationGroup.UpdateInvalidityReason(System.Object,System.String)">
            <summary>Updates the <see cref="P:Labman.UserInterface.Validation.ValidationGroup.Property.InvalidityReason"/> of the <see cref="T:Labman.UserInterface.Validation.ValidationGroup.Property"/> object with the given key.</summary>
            <param name="control">The control to which the property is bound</param>
            <param name="invalidityReason">The new invalidity reason</param>
        </member>
        <member name="T:Labman.UserInterface.Validation.ValidationGroup.Property">
            <summary>Represents a single property in a <see cref="T:Labman.UserInterface.Validation.ValidationGroup"/></summary>
        </member>
        <member name="P:Labman.UserInterface.Validation.ValidationGroup.Property.BindingExpression">
            <summary>
            The binding expression of the bound property. Could be used to work out the <see cref="T:System.Reflection.PropertyInfo"/> of the bound property. This might be better being
            replaced at some point in the future with a set of attributes that can be applied and fetched from properties.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.Validation.ValidationGroup.Property.IsValid">
            <summary>Whether this property is in a valid state</summary>
        </member>
        <member name="P:Labman.UserInterface.Validation.ValidationGroup.Property.InvalidityReason">
            <summary>The reason for invalidity, when invalid. Null otherwise</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AnalogInputSettingsViewModel">
            <summary>
            View model for use with a analog input settings user control.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogInputSettingsViewModel.IODevicesAvailable">
            <summary>
            Property that exposes the available IO devices names
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogInputSettingsViewModel.AnalogInput">
            <summary>Reference to the item under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogInputSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogInputSettingsViewModel.SignalRanges">
            <summary>
            Possible signal ranges for data binding.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogInputSettingsViewModel.#ctor(Labman.IO.AnalogInput)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="analogInput">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AnalogOutputSettingsViewModel">
            <summary>
            View model for use with a analog input settings user control.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogOutputSettingsViewModel.IODevicesAvailable">
            <summary>
            Property that exposes the available IO devices names.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogOutputSettingsViewModel.AnalogOutput">
            <summary>Reference to the item under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogOutputSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogOutputSettingsViewModel.#ctor(Labman.IO.AnalogOutput)">
            <summary>
            Constructor for the view model, sets the output in use
            </summary>
            <param name="analogOutput">The output under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel">
            <summary>
            View model for the Anton Paar Rheometer user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.Rheometer">
            <summary>Reference to the device under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.Stepwise">
            <summary>
            Gets or sets a value indicating whether the stepwise (standard) value setting is being used.
            </summary>
            <remarks>
            If false then continous value setting is used
            </remarks>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.Timeout">
            <summary>
            The time which to timeout the rheometer program in seconds.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.DataPointsList">
            <summary>
            List of data points for the data grid
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ProfileTypesList">
            <summary>
            List of profile types for populating combo box
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.DurationTypesList">
            <summary>
            List of duration types for populating combo box
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.SetVariableTypesList">
            <summary>
            List of set variable types for populating combo box
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ValueList">
            <summary>
            List of values to pass to rheometer program. Format should be comma seperated.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.NumberOfDataPoints">
            <summary>
            Number of data points to pass to rheometer program.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.DataPointDuration">
            <summary>
            Data point duration to pass to rheometer program.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.FirstPoint">
            <summary>
            Time when to take the first point when running a linear or logarithmic duration type. This is passed to the rheometer program.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.PenultimatePoint">
            <summary>
            Time when to take the penultimate point when running a linear or logarithmic duration type. This is passed to the rheometer program.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.FinalPoint">
            <summary>
            Time when to take the final point when running a linear or logarithmic duration type. This is passed to the rheometer program.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ConstantValue">
            <summary>
            Interval to capture data points passed to rheometer program when running a constant data duration program. This is passed to the rheometer program.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.RampStartValue">
            <summary>
            Start value of the ramp when running a ramp based profile. This is passed to the rheometer program.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.RampEndValue">
            <summary>
            End value of the ramp when running a ramp based profile. This is passed to the rheometer program.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.DurationType">
            <summary>
            Types of duration to populate combo box with
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ProfileType">
            <summary>
            Types of profile to populate combo box with
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.SetVariableType">
            <summary>
            Types of set variable to populate combo box with
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.Allowance">
            <summary>
            The tolerance for a steady state to be registered. 
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.PointsPerInspection">
            <summary>
            The number of data points to capture when steady state is reached.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.RawPointsPerInspection">
            <summary>
            The number of data points to capture when steady state is reached. (10ms per point)
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.SteadyStateTimeout">
            <summary>
            The timeout if a steady state is not reached. 
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ProgramName">
            <summary>
            The name of the program to be passed to the rheometer program
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.SetSpeed">
            <summary>
            Gets or sets the speed.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.Torque">
            <summary>
            Gets or sets the current torque.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.RPS">
            <summary>
            The current speed RPS reported by the rheometer when a data snapshot is requested
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.Viscosity">
            <summary>
            Gets or sets the torque.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ExportResultsCommand">
            <summary>
            Gets the export results command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.RunProgram">
            <summary>
            Command triggred when the run program button is pressed. Builds and runs a rheometer program.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.GetData">
            <summary>
            Command triggred when the run program button is pressed. Gets a snapshot of the current rheometer data.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.StopSpin">
            <summary>
            Command triggred when the stop spinning button is pressed. Stops the rheometer from spinning.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.StartSpin">
            <summary>
            Command triggered when the start spinning button is pressed. Starts spinning the rheometer bob.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.StopSpinProgram">
            <summary>
            Command triggred when the stop spinning program button is pressed. Stops the rheometer from spinning  using a program command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.StartSpinProgram">
            <summary>
            Command triggered when the start spinning button is pressed. Starts spinning the rheometer bob  using a program command.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.#ctor(Labman.Hardware.Rheometers.AntonPaar)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.CanExecuteExportResultsCommand(System.Object)">
            <summary>
            Determines whether this instance [can execute export results command] the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns>
              <c>true</c> if this instance [can execute export results command] the specified arguments; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ExecuteExportResultsCommand(System.Object)">
            <summary>
            Executes the export results command.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.CanExecuteBuildProgram(System.Object)">
            <summary>
            Determines if the build program button can be pressed.
            </summary>
            <param name="args">Not used</param>
            <returns>If the build program button can be pressed.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ExecuteBuildProgram(System.Object)">
            <summary>
            Builds a rheometer program from values set on the hardware config UI
            </summary>
            <param name="args">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.CanExecuteGetData(System.Object)">
            <summary>
            Checks to see if the "Get Data" button can be pressed.
            </summary>
            <param name="args">Not used</param>
            <returns>true if we can press the get data button</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ExecuteGetData(System.Object)">
            <summary>
            Gets data from the rheometer.
            </summary>
            <param name="args">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ExecuteStart(System.Object)">
            <summary>
            Executes the start.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ExecuteStop(System.Object)">
            <summary>
            Executes the stop.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ExecuteStartProgram(System.Object)">
            <summary>
            Executes the start program command.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AntonPaarRheometerViewModel.ExecuteStopProgram(System.Object)">
            <summary>
            Executes the stop program command.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ArmSettingsViewModel">
            <summary>
            View Model for the arm settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ArmSettingsViewModel.RobotArmControllersAvailable">
            <summary>
            Property that exposes the available motor controller names
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ArmSettingsViewModel.Arm">
            <summary>Reference to the item under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ArmSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ArmSettingsViewModel.RobotArmControllerName">
            <summary>
            Middle-man property to validate the entered robot arm controller.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ArmSettingsViewModel.RobotArmControllerCompatibilityCheck">
            <summary>A function to validate the selected motor controller</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ArmSettingsViewModel.RobotArmControllerInvalidityReasonString">
            <summary>A string indicating the reason the selected motor controller is invalid</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ArmSettingsViewModel.#ctor(Labman.MotionControl.Arm)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="arm">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ArmViewModel">
            <summary>
            View Model for the Axis Control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.ArmViewModel._runProgramCommand">
            <summary>
            Relay command object for the RunProgram command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ArmViewModel.RunProgram">
            <summary>
            Command object used for executing commands using binding: {Binding RunProgram}
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ArmViewModel.Arm">
            <summary>
            Reference to the item under control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ArmViewModel.ProgramName">
            <summary>
            Property that exposes the program name
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ArmViewModel.#ctor(Labman.MotionControl.Arm)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="arm">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ArmViewModel.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ArmViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ArmViewModel.ExecuteRunProgram(System.Object)">
            <summary>
            Executes the RunProgram command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel">
            <summary>
            View model for the user control that allows an engineering form to be created for executing
            all of the public methods within a specified class.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.DatabaseConnectionName">
            <summary>
            The name of the database connection to use
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.ParametersTableName">
            <summary>
            The name of the parameters table to look in
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.ParametersSection">
            <summary>
            The name of the parameters section to look at
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.SectionFieldName">
            <summary>
            The name of the parameters section column
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.KeyFieldName">
            <summary>
            The name of the parameters key column
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.ValueFieldName">
            <summary>
            The name of the parameters value column
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.ParameterSections">
            <summary>
            The sections found in the parameters database
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.ParameterValueUnits">
            <summary>
            The units the value is in
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.SelectedParameterValidation">
            <summary>
            Gets or sets the selected parameter validation.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.SelectedParameterName">
            <summary>
            The name of the currently selected method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.SelectedParameterDescription">
            <summary>
            The description label text to display for the currently selected method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.SelectedParameter">
            <summary>
            Collection of parameter view models for the selected method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.UpdateParameterCommand">
            <summary>
            Gets the update parameter command.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.#ctor">
            <summary>
            View model constructor.
            First calls the constructor of the base view model.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.RefreshParameters">
            <summary>
            Populate the list of available methods in this class
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedParametersUserControlViewModel.ParameterSelected(System.String)">
            <summary>
            Handle when a parameter is selected in the list. 
            </summary>
            <param name="parameterName">The name of the parameter selected.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel">
            <summary>
            View model for the user control that allows an engineering form to be created for executing
            all of the public methods within a specified class.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.MethodParams">
            <summary>
            Method Parameters class - to hold information about the method name and a list of its parameters
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.MethodParams.MethodName">
            <summary>
            Gets or sets the method name
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.MethodParams.Parameters">
            <summary>
            Gets or sets a list of the parameters
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.MethodParams.CancellationTokenSource">
            <summary>
            Gets or sets the cancellation token source
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.MethodParams.Task">
            <summary>
            Gets or sets the task
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.MethodParams.ConditionalEngineeringMethodAttributes">
            <summary>
            Gets or sets the conditional engineering attributes
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.AssemblyPath">
            <summary>
            Gets or sets the assembly path.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.ClassName">
            <summary>
            The name of the class that this control is for.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.ClassInstance">
            <summary>
            The instance of the class that commands are invoked on. This can be null for a static class.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.RecentlyUsedMethods">
            <summary>
            Gets recently used methods.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.Methods">
            <summary>
            The list of methods containing a reference to there parameters
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.SelectedMethod">
            <summary>
            The selected method from the UI.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.SelectedMethodName">
            <summary>
            The name of the currently selected method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.SelectedMethodDescription">
            <summary>
            The description label text to display for the currently selected method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.ExecuteCommandVisibility">
            <summary>
            The description label text to display for the currently selected method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.ExecuteStopVisibility">
            <summary>
            Whether to show the stop button
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.AvailableParameters">
            <summary>
            Collection of parameter view models for the selected method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.Status">
            <summary>
            The status of the current command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.InvalidInputs">
            <summary>Whether all input parameter fields are valid</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.SearchForActionCommand">
            <summary>
            Gets the search for action command.
            </summary>
            <value>The search for action command.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.ExecuteMethodCommand">
            <summary>
            Gets the execute method.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.ExecuteStopCommand">
            <summary>
            Gets the execute method.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.SelectRecentlyUsedMethodCommand">
            <summary>
            Gets the select recently used method command.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel"/> class.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.CanExecuteMethodCommand(System.Object)">
            <summary>
            Checks if the ExecuteRobotAction command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.CanExecuteStopCommand(System.Object)">
            <summary>
            Checks if the ExecuteRobotAction command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.ExecuteMethod(System.Object)">
            <summary>
            Executes the ExecuteRobotAction command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.ExecuteStop(System.Object)">
            <summary>
            Executes the ExecuteRobotAction command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.PopulateMethods">
            <summary>
            Populate the list of available methods in this class
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.UpdateVisibleMethods">
            <summary>
            Updates the list of methods that are visible to the user
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.GetClassType">
            <summary>
            Gets the class type for the specified class name
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.RobotActionSelected(Labman.UserInterface.ViewModels.AutomaticallyGeneratedEngineeringUserControlViewModel.MethodParams)">
            <summary>
            Handle when a method is selected in the list. Display all of the parameters for the selected method.
            </summary>
            <param name="methodParameter">The method selected</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BaumerCameraSettingsViewModel">
            <summary>
            Constructor for a Baumer camera settings view model.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaumerCameraSettingsViewModel.#ctor(Labman.Hardware.Cameras.BaumerCamera2)">
            <summary>
            Constructor for a Baumer camera settings view model.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaumerCameraSettingsViewModel.BrowseToSimulationImagesFolderPath">
            <summary>
            Command invoked to open a folder dialog allowing the user to browse to a simulation images path.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaumerCameraSettingsViewModel.Device">
            <summary>
            Reference to the hardware device this view model is representing.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaumerCameraSettingsViewModel.SimulationImagesFolder">
            <summary>
            The folder path to where simulation images can be found for this device.
            Needs a view model OnPropertyChanged implementation so that the folder browser can update the UI.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BeckhoffPlClinkedIODeviceSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BeckhoffPlClinkedIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BeckhoffPlClinkedIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.BeckhoffPlcLinkedIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.DiscoverSPDSettingsViewModel">
            <summary>
            ViewModel for Discover SP-D Microwave Digester
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.DiscoverSPDSettingsViewModel._device">
            <summary>
            Device object
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.DiscoverSPDSettingsViewModel._settings">
            <summary>
            Device settings object
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DiscoverSPDSettingsViewModel.Settings">
            <summary>
            Property that exposes device settings object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DiscoverSPDSettingsViewModel.#ctor(Labman.Hardware.MicrowaveDigesters.MicrowaveDigester)">
            <summary>
            Property that exposes device object
            </summary>
            <param name="device">Instance of MicrowaveDigester class</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel">
            <summary>
            View model for the DLogic Nano NFC reader user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.Device">
            <summary>Reference to the device under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.CardUid">
            <summary>
            UID Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.ReaderSerial">
            <summary>
            Serial number Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.DataToWrite">
            <summary>The data to write, entered by the user</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.GetReaderSerial">
            <summary>Command used to Tare</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.GetCardUid">
            <summary>Command used to get card UID</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.WriteData">
            <summary>Command used to write data</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.#ctor(Labman.Hardware.Instruments.DlogicNanoNfcReader)">
            <summary>
            Constructor for the NFC reader control view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.CanExecute">
            <summary>
            Can execute function for this view
            </summary>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.ExecuteGetCardUid">
            <summary>Gets the Card UID</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.ExecuteGetReaderSerial">
            <summary>Gets the reader serial number</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DlogicNanoNfcReaderViewModel.ExecuteWriteData">
            <summary>Writes the user's data with the reader</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.DscLoadCellConverterSettingsViewModel">
            <summary>
            Hardware settings view model for the DSC load cell converter. 
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DscLoadCellConverterSettingsViewModel.#ctor(Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet)">
            <summary>
            Hardware settings view model for the DSC load cell converter. 
            </summary>
            <param name="device">The instance of the hardware device this view model should represent.</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterSettingsViewModel.LoadCalibrationSettingsFromDevice">
            <summary>
            Command to invoke the loading of calibration settings from what is currently stored on the device.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterSettingsViewModel.OutputRate">
            <summary>
            The output rate of the device. This is separate to the settings object as it requires a reboot of the device to take effect.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterSettingsViewModel.SaveCalibrationSettingsToDevice">
            <summary>
            Sends the current state of the calibration settings in the settings property to the device.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterSettingsViewModel.SetOutputRate">
            <summary>
            Sets the output rate of the device.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterSettingsViewModel.Settings">
            <summary>
            The settings object for the device containing the calibration settings etc.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel">
            <summary>
            Hardware control view model for the DSC load cell converter.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.#ctor(Labman.Hardware.Instruments.DscLoadCellConverterAsciiCommandSet)">
            <summary>
            Hardware control view model for the DSC load cell converter.
            </summary>
            <param name="device">
            The instance of the hardware device this view model should control.
            </param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.CellOutput">
            <summary>
            The last read value of the cell output.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.Device">
            <summary>
            The instance of the hardware device this view model should control.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.GetCellOutput">
            <summary>
            Gets the current value of the cell output.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.GetRawCellOutput">
            <summary>
            Gets the current value of the raw cell output. (Before linear correction).
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.GetRawSystemOutput">
            <summary>
            Gets the current value of the raw system output. (Before zero correction).
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.GetSystemOutput">
            <summary>
            Gets the current value of the system output.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.GetTemperatureCompensatedMillivoltsPerVolt">
            <summary>
            Gets the raw mV/V reading from the load cell after temperature compensation.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.RawCellOutput">
            <summary>
            The last read raw cell output.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.RawSystemOutput">
            <summary>
            The last read raw system output.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.SwitchDigitalOutput">
            <summary>
            Command to set the state of the digital output.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.SystemOutput">
            <summary>
            The last read system output.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.TemperatureCompensatedMillivoltsPerVolt">
            <summary>
            The last read raw mV/V reading from the load cell after temperature compensation.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DscLoadCellConverterViewModel.ZeroSystemOutput">
            <summary>
            Zeros the device by applying a zero offset within the devices EEPROM.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.NtiEnviromuxEMicroTrhEnvironmentSensorSettingsUserControlViewModel">
            <summary>
            View model for the environment sensor settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NtiEnviromuxEMicroTrhEnvironmentSensorSettingsUserControlViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NtiEnviromuxEMicroTrhEnvironmentSensorSettingsUserControlViewModel.#ctor(Labman.Hardware.EnvironmentSensors.NtiEnviromuxEMicroTrhEnvironmentSensor)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EpsonRobotArmSettingsUserControlViewModel">
            <summary>
            View model for the Epson robot arm settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EpsonRobotArmSettingsUserControlViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EpsonRobotArmSettingsUserControlViewModel.#ctor(Labman.Hardware.RobotArms.EpsonRobotArm)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EpsonRobotArmSettingsUserControlViewModel.BrowseForProject">
            <summary>
            Command to open the project file browser
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FlavourSpecInstrumentSettingsViewModel">
            <summary>
            ViewModel for FlsvourSpec
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.FlavourSpecInstrumentSettingsViewModel._device">
            <summary>
            Device object
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.FlavourSpecInstrumentSettingsViewModel._settings">
            <summary>
            Device settings object
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentSettingsViewModel.Settings">
            <summary>
            Property that exposes device settings object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentSettingsViewModel.#ctor(Labman.Hardware.Instruments.FlavourSpecInstrument)">
            <summary>
            Property that exposes device object
            </summary>
            <param name="device">Instance of FlavourSpec class</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel">
            <summary>
            FlavourSpec View Model class
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Device">
            <summary>
            Instance of device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Frequency">
            <summary>
            Beep Frequency
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Duration">
            <summary>
            Beep Duration
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Pause">
            <summary>
            Beep Pause
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Count">
            <summary>
            Number of beeps
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.BeepValidationCounter">
            <summary>
            Beep validation counter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.AbsX">
            <summary>
            Absolute position in X axis
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.AbsY">
            <summary>
            Absolute position in Y axis
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.AbsZ">
            <summary>
            Absolute position in Z axis
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.MoveAbsValidationCounter">
            <summary>
            Movement validation counter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.MovementObjectName">
            <summary>
            Movement object name
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Agitator">
            <summary>
            Agitator object name
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.State">
            <summary>
            The desired state of the agitator
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Speed">
            <summary>
            Speed of agitator in rpm
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.OnTime">
            <summary>
            Agitator On time in seconds
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.OffTime">
            <summary>
            Agitator Off time in seconds
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.StartTimer">
            <summary>
            Whether to start a timer and which timer if so
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.SetAgitatorValidationCounter">
            <summary>
            Validation counter for agitator fields
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Objects">
            <summary>
            Set of objects to populate comboboxes
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.ObjectName">
            <summary>
            Name of object
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Temperature">
            <summary>
            Temperature in degrees C
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Accuracy">
            <summary>
            Accuracy of temperature in degrees C when wetting temperature on device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.TemperatureValidationCounter">
            <summary>
            Validation counter for temperature field
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.ReadTemperature">
            <summary>
            Temperature received from device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.Beep">
            <summary>
            Beep command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.MoveAbs">
            <summary>
            Move to coordinate command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.MoveToObject">
            <summary>
            Move to object command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.SetAgitator">
            <summary>
            Set agitator settings command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.SetTemp">
            <summary>
            Set temperature command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.GetTemp">
            <summary>
            Get temperature command
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.ExecuteBeep">
            <summary>
            Beep
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.CanExecuteBeep">
            <summary>
            Whether or not can beep
            </summary>
            <returns>True if can, false otherwise</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.ExecuteMoveAbs">
            <summary>
            Move to coordinate
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.ExecuteMoveToObject">
            <summary>
            Move to specified object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.CanExecuteMoveAbs">
            <summary>
            Wheter or not can move to position
            </summary>
            <returns>Tru if can, false otherwise</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.ExecuteSetAgitator">
            <summary>
            Set agitator settings
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.CanExecuteSetAgitator">
            <summary>
            Whether or not can set agitator settings
            </summary>
            <returns>True if can, False otherwise</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.ExecuteSetTemp">
            <summary>
            Set temperature
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.CanExecuteSetTemp">
            <summary>
            Whether or not can set temperature
            </summary>
            <returns>True if can, false otherwise</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.ExecuteReadTemp">
            <summary>
            Get temperature from device
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.CanExecuteGetTemp">
            <summary>
            Whether or not can retrieve temperature
            </summary>
            <returns>True if can obtain temperature, False otherwise</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FlavourSpecInstrumentViewModel.#ctor(Labman.Hardware.Instruments.FlavourSpecInstrument)">
            <summary>
            Class constructor
            </summary>
            <param name="device">Instance of FlavourSpec class</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.HettichCentrifugeSettingsViewModel">
            <summary>
            View model for the centrifuge settings control
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HettichCentrifugeSettingsViewModel.#ctor(Labman.Hardware.Centrifuges.HettichCentrifuge)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HettichCentrifugeSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerSettingsViewModel">
            <summary>
            Viewmodel for the LMA2019-16A Neopixel Led Controller settings.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerSettingsViewModel.Settings">
            <summary>
            The settings to alter.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerSettingsViewModel.#ctor(Labman.Hardware.Instruments.LMA201916ANeopixelLedController)">
            <summary>
            Constructs a ViewModel for the LMA2019-16A Neopixel Led Controller settings.
            </summary>
            <param name="device">The device to alter the settings of.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel">
            <summary>
            Hardware configuration view model for controlling a LMA2019-16A Neopixel Led Controller.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.#ctor(Labman.Hardware.Instruments.LMA201916ANeopixelLedController)">
            <summary>
            Constructs the LMA201916ANeopixelLedControllerViewModel hardware control view model.
            </summary>
            <param name="device">The device to control</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.AnimateGroup">
            <summary>
            Command to invoke the animation of a group.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.Animation">
            <summary>
            The animation to apply to the group.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.BlueValue">
            <summary>
            Property that holds the blue value of the colour
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.ColourList">
            <summary>
            Property for list of system colours
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.CurrentColour">
            <summary>
            Property that holds the current colour for the preview pane
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.GreenValue">
            <summary>
            Property that holds the green value of the colour
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.GroupLength">
            <summary>
            The length to make the group being modified.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.GroupModificationIndex">
            <summary>
            The index of the group to modify.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.GroupStartingIndex">
            <summary>
            The index of the starting pixel for group being modified.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.Index">
            <summary>
            The index of the group or pixel to modify.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.ModifyGroup">
            <summary>
            Command to invoke the modification of a group.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.RedValue">
            <summary>
            Property that holds the red value of the colour
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.SearchText">
            <summary>The search text.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.SelectedColour">
            <summary>
            Property for selected colour, for system colours combobox
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.SetGroup">
            <summary>
            Command to invoke the setting of a group to a colour.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LMA201916ANeopixelLedControllerViewModel.SetPixel">
            <summary>
            Command to invoke the setting of a pixel to a colour.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LmcAxisMotorRatioCalculatorViewModel">
            <summary>
            View model for a linear axis motor ratio calculator view model.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LmcAxisMotorRatioCalculatorViewModel.#ctor">
            <summary>
            View model for a linear axis motor ratio calculator view model.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisMotorRatioCalculatorViewModel.AxisLead">
            <summary>
            The lead of the axis. Usually mm per revolution.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisMotorRatioCalculatorViewModel.Heading">
            <summary>
            The heading of this view model when displayed.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LmcAxisMotorRatioCalculatorViewModel.CalculateMotorRatio">
            <summary>
            Calculates the motor ratio based on axis lead.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel">
            <summary>
            View Model for the LMC axis settings control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel._applyPresetCommand">
            <summary>
            Relay command object for the ApplyPreset command
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.#ctor(Labman.MotionControl.LmcAxis)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="axis">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.ActionRef`1">
            <summary>
            Actionref delegate
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="item">Item</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.ApplyPreset">
            <summary>
            Command object used for executing commands using binding: {Binding ApplyPreset}
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.AvailableMicrosteps">
            <summary>
            List of available microstep settings and their respective values. Microsteps/step =
            256 / 2^n where n = microstepValue. 0 to 8.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.Axis">
            <summary>
            Reference to the item under control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.CurrentScaleRegisterDrive">
            <summary>
            The value of the current scale register on the TMC262 (CS) to apply during movement.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.CurrentScaleRegisterHold">
            <summary>
            The value of the current scale register on the TMC262 (CS) to apply during standstill.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.OpenRatioCalculator">
            <summary>
            Command to open the motor ratio calculator.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.PeakDriveCurrentAmps">
            <summary>
            The peak drive current in amps. This is calculated from the
            CurrentScaleRegisterDrive property at the time of get.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.PeakHoldCurrentAmps">
            <summary>
            The peak hold current in amps This is calculated from the CurrentScaleRegisterHold
            property at the time the getter is called.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.Presets">
            <summary>
            A list of presets of known settings that can be applied to LmcAxes.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.RmsDriveCurrentAmps">
            <summary>
            The RMS drive current in amps This is calculated from the CurrentScaleRegisterDrive
            property at the time the getter is called.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.RmsHoldCurrentAmps">
            <summary>
            The RMS hold current in amps This is calculated from the CurrentScaleRegisterHold
            property at the time the getter is called.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.SelectedPreset">
            <summary>
            The currently selected preset.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.ExecuteApplyPreset">
            <summary>
            Executes the ApplyPreset command
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LmcAxisSettingsViewModel.CanExecuteApplyPreset">
            <summary>
            Checks if the ApplyPreset command can be executed
            </summary>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorWindowViewModel">
            <summary>
            View model for the LMC motor ratio calculator window.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorWindowViewModel.#ctor">
            <summary>
             View model for the LMC motor ratio calculator window.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorWindowViewModel.Calculators">
            <summary>
            List of calculators displayable.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorWindowViewModel.CurrentCalculator">
            <summary>
            The currently displayed calculator.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LmcRotationalMotorRatioCalculatorViewModel">
            <summary>
            View model for a rotary axis motor ratio calculator view model.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcRotationalMotorRatioCalculatorViewModel.Heading">
            <summary>
            The heading to display on the UI for this calculator type.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LmcRotationalMotorRatioCalculatorViewModel.CalculateMotorRatio">
            <summary>
            Calculates the motor ratio to set the units to degrees.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel">
            <summary>View model for the balance user control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.Balance">
            <summary>Reference to the balance under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.Weight">
            <summary>The returned weight</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.StableWeight">
            <summary>Whether to get a stable or unstable weight</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.DryingData">
            <summary>The drying data returned by the balance</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.MethodName">
            <summary>The name of the mehtod to be loaded, entered by the user</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.CurrentAction">
            <summary>What the device is currently doing during log running operations.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.Tare">
            <summary>Command used to Tare</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.Calibrate">
            <summary>Command used to Calibrate</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.GetWeight">
            <summary>Command used to GetWeight</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.OpenDoor">
            <summary>Command used to open the door</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.CloseDoor">
            <summary>Command used to close the door</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.GetDryingData">
            <summary>Command used to get the drying data manually</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.RunMeasurement">
            <summary>Command used to run a measurement</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.LoadMethod">
            <summary>Command used to load a method</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.CancelCommand">
            <summary>Command used to cancel the current balance operation</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.StopDrying">
            <summary>Command used to stop the drying process</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.BaseState">
            <summary>Command to set the balance to its base state</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.#ctor(Labman.Hardware.Balances.MettlerMoistureAnalyser)">
            <summary>Constructor for the balance control view model, sets the balance device in use</summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserViewModel.CanExecute">
            <summary>Can execute function for this view</summary>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserSettingsViewModel">
            <summary>
            View Model for the balance settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserSettingsViewModel.StabilitySettingEnumValues">
            <summary>
            Property that allows the balance stability enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserSettingsViewModel.ResultUnitEnumValues">
            <summary>
            Property that allows the results unit enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerMoistureAnalyserSettingsViewModel.#ctor(Labman.Hardware.Balances.MettlerMoistureAnalyser)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BeckhoffAxisSettingsViewModel">
            <summary>
            View Model for the axis settings control
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BeckhoffAxisSettingsViewModel.#ctor(Labman.MotionControl.BeckhoffAxis)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="axis">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BeckhoffIODeviceSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BeckhoffIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BeckhoffIODeviceSettingsViewModel.DeviceTypeEnumValues">
            <summary>
            Property that allows the BeckhoffIODeviceType enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BeckhoffIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.BeckhoffIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CANCoderSettingsUserControlViewModel">
            <summary>
            View model for the CANCoders settings usercontrol. 
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CANCoderSettingsUserControlViewModel.Settings">
            <summary>
            The settings to expose for editing.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CANCoderSettingsUserControlViewModel.#ctor(Labman.Hardware.Instruments.CANCoder)">
            <summary>
            Constructs the CANCoderSettingsUserControlViewModel.
            </summary>
            <param name="device">The device to base the usercontrol around.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CANCoderUserControlViewModel">
            <summary>
            View model for the CANCoders device control. 
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CANCoderUserControlViewModel.EncoderValue">
            <summary>
            The last read encoder count.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CANCoderUserControlViewModel.GetEncoderValueCommand">
            <summary>
            Command to get the encoder count.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CANCoderUserControlViewModel.ResetEncoderCommand">
            <summary>
            Command to reset the encoder count.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CANCoderUserControlViewModel.#ctor(Labman.Hardware.Instruments.CANCoder)">
            <summary>
            Constructor for the view model.
            </summary>
            <param name="device">The CANCoders to provide an interface for.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CANCoderUserControlViewModel.CanResetEncoder(System.Object)">
            <summary>
            Determins if the encoder count can be reset.
            </summary>
            <param name="obj">Not used</param>
            <returns>True if the encoder count can be reset. Else false.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CANCoderUserControlViewModel.ResetEncoder(System.Object)">
            <summary>
            Resets the encoder count.
            </summary>
            <param name="obj">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CANCoderUserControlViewModel.CanGetEncoderValue(System.Object)">
            <summary>
            Determins if the encoder count can be read.
            </summary>
            <param name="obj">Not used</param>
            <returns>True if the encoder count can be read. Else false.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CANCoderUserControlViewModel.GetEncoderValue(System.Object)">
            <summary>
            Gets the encoder count.
            </summary>
            <param name="obj">Not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel">
            <summary>
            Settings user control for centrifuge camera
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.DeleteObject(System.IntPtr)">
            <summary>
            USed to gelete GDI image object
            </summary>
            <param name="hObject">handle for the GDI object</param>
            <returns>true if successful</returns>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.ColourEnumListItems">
            <summary>
            List of possible marker colours
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.DoBinarise">
            <summary>
            Flag for performing the binarising of the image
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.Image">
            <summary>
            Bitmap source to render the image
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.ProcessedImage">
            <summary>
            The image with the centre and mask
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.OriginalImage">
            <summary>
            The image captured by the camera
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.Settings">
            <summary>
            Exposes the settings of the device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.ConnectedCameras">
            <summary>
            List of all connected cameras
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.Capture">
            <summary>
            Command to capture an image
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.SetMask">
            <summary>
            Command to draw the mask
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.ClearMask">
            <summary>
            Command to clear the mask
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.CanExecuteSetMask(System.Object)">
            <summary>
            Indicates if mask can be drawn
            </summary>
            <param name="args">Not used</param>
            <returns>true if radius values are valid and image has been captured</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.ExecuteSetMask(System.Object)">
            <summary>
            Draws the mask on the image and sets the flag to keep drawing them
            </summary>
            <param name="args">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.CanExecuteCapture(System.Object)">
            <summary>
            Indicates if capture can be performed
            </summary>
            <param name="args">Not used</param>
            <returns>True if camera has been selected and camera is initialised</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.ExecuteCapture(System.Object)">
            <summary>
            Captures an image and draws the centre point and mask
            </summary>
            <param name="args">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.CanExecuteClearMask(System.Object)">
            <summary>
            checks if the mask can be cleared
            </summary>
            <param name="ards">Not used</param>
            <returns>true if mask drawing flag is set</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.ExecuteClearMask(System.Object)">
            <summary>
            Clears the mask and sets the flag to not draw anymore
            </summary>
            <param name="args">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.DrawCentreAndMask">
            <summary>
            Draws the mask and centre point on the image
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraSettingsViewModel.#ctor(Labman.Hardware.CentrifugeCameras.CentrifugeCamera)">
            <summary>
            Constructor, sets the device associated with this settings vm
            </summary>
            <param name="device">The device to set the settings for</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CentrifugeCameraViewModel">
            <summary>
            View model for the hardware config centrifuge camera user control
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraViewModel.DeleteObject(System.IntPtr)">
            <summary>
            Method used to delete GPI image object from memory
            </summary>
            <param name="hObject">The handle for the object</param>
            <returns>true if successful</returns>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraViewModel.ImageBmp">
            <summary>
            Stores the bitmap to be displayed
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeCameraViewModel.GetAngle">
            <summary>
            Command to get the angle of the centrifuge
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraViewModel.CanGetAngle(System.Object)">
            <summary>
            Checks if the camera is set and initialised
            </summary>
            <param name="args">Not used</param>
            <returns>true if the camera is set and initialised</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraViewModel.ExecuteGetAngle(System.Object)">
            <summary>
            Gets the angle of the cetrifuge and the debugging image
            </summary>
            <param name="args">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeCameraViewModel.#ctor(Labman.Hardware.CentrifugeCameras.CentrifugeCamera)">
            <summary>
            Constructor, sets the reference to the device
            </summary>
            <param name="device">The device being used by the control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EditDeviceNameViewModel">
            <summary>
            View model for the edit device name window
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EditDeviceNameViewModel.DeviceName">
            <summary>
            
            The name of the device being renamed
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EditDeviceNameViewModel.Result">
            <summary>
            Returns if the action was complete or cancelled. If save is clicked, set to ok.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EditDeviceNameViewModel.Save">
            <summary>
            Saves the new name
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EditDeviceNameViewModel.ExecuteSave(System.Object)">
            <summary>
            Sets the result to ok and closes to dialog to allow the main window to save the new name
            </summary>
            <param name="args">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EditDeviceNameViewModel.#ctor(System.String,System.Windows.Window)">
            <summary>
            Constructor
            </summary>
            <param name="deviceName">The current name of the device to rename</param>
            <param name="parent">The window the view model belongs to</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel">
            <summary>
            Orbital Shaker from Edmund Buhler Viewmodel
            </summary>
            <seealso cref="T:Labman.UserInterface.ViewModelBase" />
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.ShakingDirections">
            <summary>
            Gets the shaking directions.
            </summary>
            <value>
            The shaking directions.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.Shaker">
            <summary>
            Gets or sets the shaker.
            </summary>
            <value>
            The shaker.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.SetSpeed">
            <summary>
            Gets or sets the set speed.
            </summary>
            <value>
            The set speed.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.SetDirection">
            <summary>
            Gets or sets the set direction.
            </summary>
            <value>
            The set direction.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.QuerySetDirection">
            <summary>
            Gets or sets the query set direction.
            </summary>
            <value>
            The query set direction.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.QueryActualDirection">
            <summary>
            Gets or sets the query actual direction.
            </summary>
            <value>
            The query actual direction.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.QuerySetSpeed">
            <summary>
            Gets or sets the query set speed.
            </summary>
            <value>
            The query set speed.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.QueryActualSpeed">
            <summary>
            Gets or sets the query actual speed.
            </summary>
            <value>
            The query actual speed.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.SetSpeedCommand">
            <summary>
            Gets the set speed command.
            </summary>
            <value>
            The set speed command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.SetDirectionCommand">
            <summary>
            Gets the set direction command.
            </summary>
            <value>
            The set direction command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.QuerySetDirectionCommand">
            <summary>
            Gets the query set direction command.
            </summary>
            <value>
            The query set direction command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.QueryActualDirectionCommand">
            <summary>
            Gets the query actual direction command.
            </summary>
            <value>
            The query actual direction command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.QuerySetSpeedCommand">
            <summary>
            Gets the query set speed command.
            </summary>
            <value>
            The query set speed command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.QueryActualSpeedCommand">
            <summary>
            Gets the query actual speed command.
            </summary>
            <value>
            The query actual speed command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.StatusCommand">
            <summary>
            Gets the status command.
            </summary>
            <value>
            The status command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.StartCommand">
            <summary>
            Gets the start command.
            </summary>
            <value>
            The start command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.StopCommand">
            <summary>
            Gets the stop command.
            </summary>
            <value>
            The stop command.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.#ctor(Labman.Hardware.Instruments.EdmundBuhlerOrbitalShaker)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.CanExecuteSetSpeed(System.Object)">
            <summary>
            Determines whether the set speed command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.ExecuteSetSpeed(System.Object)">
            <summary>
            Executes the set speed command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.CanExecuteSetDirection(System.Object)">
            <summary>
            Determines whether the set direction command can be executed.
            </summary>
            <param name="args">The arguments = currenlty not used.</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.ExecuteSetDirection(System.Object)">
            <summary>
            Executes the set direction.
            </summary>
            <param name="args">The arguments - current item selected in the combo box</param>
            <exception cref="T:System.ArgumentNullException">thrown if no parameter is selected</exception>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.CanExecuteQuerySetDirection(System.Object)">
            <summary>
            Determines whether the command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.ExecuteQuerySetDirection(System.Object)">
            <summary>
            Executes the query set direction.
            </summary>
            <param name="args">The arguments - currently not used.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.CanExecuteQueryActualDirection(System.Object)">
            <summary>
            Determines whether the command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.ExecuteQueryActualDirection(System.Object)">
            <summary>
            Executes the query actual direction.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.CanExecuteQuerySetSpeed(System.Object)">
            <summary>
            Determines whether the command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.ExecuteQuerySetSpeed(System.Object)">
            <summary>
            Executes the query set speed.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.CanExecuteQueryActualSpeed(System.Object)">
            <summary>
            Determines whether the command can be executed.
            </summary>
            <param name="args">The arguments - currenlty not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.ExecuteQueryActualSpeed(System.Object)">
            <summary>
            Executes the query actual speed.
            </summary>
            <param name="args">The arguments - currently not used.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.CanExecuteStatusCommand(System.Object)">
            <summary>
            Determines whether the command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.ExecuteStatusCommand(System.Object)">
            <summary>
            Executes the status command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.CanExecuteStartCommand(System.Object)">
            <summary>
            Determines whether the command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.ExecuteStartCommand(System.Object)">
            <summary>
            Executes the start command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.CanExecuteStopCommand(System.Object)">
            <summary>
            Determines whether the command can be executed.
            </summary>
            <param name="args">The arguments - currenlty not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EdmundBuhlerViewModel.ExecuteStopCommand(System.Object)">
            <summary>
            Executes the stop command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ElectricGripperSettingsViewModel">
            <summary>
            View model for the Gripper settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ElectricGripperSettingsViewModel.#ctor(Labman.Hardware.ElectricGrippers.ElectricGripper)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ElectricGripperViewModel">
            <summary>
            Gripper view model base
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.ElectricGripper">
            <summary>
            Reference to the gripper under control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.Position">
            <summary>
            The position property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.TargetWidth">
            <summary>
            The target width property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.GripStrength">
            <summary>
            The position property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.Home">
            <summary>
            Command used to reference
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.Stop">
            <summary>
            Command used to stop
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.Grip">
            <summary>
            Command used to grip
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.GetStatus">
            <summary>
            Command used to get status
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.Move">
            <summary>
            Command used to move jaws
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.Reboot">
            <summary>
            Command used to reboot
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ElectricGripperViewModel.GetIO">
            <summary>
            Command used to get the IO
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ElectricGripperViewModel.#ctor(Labman.Hardware.ElectricGrippers.ElectricGripper)">
            <summary>
            Constructor for the gripper control view model, sets the gripper device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ElectricGripperViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ElectricGripperViewModel.ExecuteHome(System.Object)">
            <summary>
            Home the gripper
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ElectricGripperViewModel.ExecuteStop(System.Object)">
            <summary>
            Stop the gripper
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ElectricGripperViewModel.ExecuteGrip(System.Object)">
            <summary>
            Initiate a grip
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ElectricGripperViewModel.ExecuteGetStatus(System.Object)">
            <summary>
            Gets the status
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ElectricGripperViewModel.ExecuteMove(System.Object)">
            <summary>
            Gets the status
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ElectricGripperViewModel.ExecuteReboot(System.Object)">
            <summary>
            Reboot the device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ElectricGripperViewModel.ExecuteGetIO(System.Object)">
            <summary>
            Get the IO state
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterViewModel">
            <summary>
            Base View model for a parameter of a method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterViewModel.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterViewModel.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterViewModel.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterViewModel.IsValid">
            <summary>Get or sets whether the entered parameter is valid</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterViewModel.Units">
            <summary>
            Gets or sets the units.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterViewModel.PlaceHolder">
            <summary>
            Gets or set the placeholder.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterViewModel.Tooltip">
            <summary>
            Gets or sets the tooltip.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>parsed value</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterActionViewModel">
            <summary>
            Class that expands the parameter view model for an Action parameter
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterActionViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>
            parsed value
            </returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterStringViewModel">
            <summary>
            Class that expands the parameter view model for a string parameter
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterStringViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>
            parsed value
            </returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterBoolViewModel">
            <summary>
            Class that expands the parameter view model for a boolean parameter
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterBoolViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>
            parsed value
            </returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterEnumViewModel">
            <summary>
            Class that expands the parameter view model for an enum parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterEnumViewModel.EnumType">
            <summary>
            Gets or sets the type of the enum.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterEnumViewModel.AvailableValues">
            <summary>
            Gets or sets the available values.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterEnumViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>
            parsed value
            </returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterByteViewModel">
            <summary>
            Class that expands the parameter view model for a byte parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterByteViewModel.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterByteViewModel.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterByteViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>parsed value</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterShortViewModel">
            <summary>
            Class that expands the parameter view model for a short parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterShortViewModel.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterShortViewModel.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterShortViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>psrsed value</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterIntegerViewModel">
            <summary>
            Class that expands the parameter view model for a integer parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterIntegerViewModel.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterIntegerViewModel.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterIntegerViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>parsed value</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterLongViewModel">
            <summary>
            Class that expands the parameter view model for a long parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterLongViewModel.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterLongViewModel.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterLongViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>parsed value</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterSingleViewModel">
            <summary>
            Class that expands the parameter view model for a single parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterSingleViewModel.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterSingleViewModel.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterSingleViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>parsed value</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterDoubleViewModel">
            <summary>
            Class that expands the parameter view model for a double parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterDoubleViewModel.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterDoubleViewModel.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterDoubleViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>parsed value</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterDecimalViewModel">
            <summary>
            Class that expands the parameter view model for a decimal parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterDecimalViewModel.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterDecimalViewModel.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterDecimalViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>parsed value</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterStringCollectionViewModel">
            <summary>
            Class that expands the parameter view model for a parameter that can be one of a collection of string values
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterStringCollectionViewModel.AvailableValues">
            <summary>
            Gets or sets the available values.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterCancellationTokenViewModel">
            <summary>
            Class that expands the parameter view model for a cancellation token. This isn't actually used as a view model, but is used to respect the existing flow of method execution
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterCancellationTokenViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>
            parsed value
            </returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EngineeringParameterPathViewModel">
            <summary>
            Class that expands the parameter view model for a file path. This assumes the underlying parameter type is a string
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EngineeringParameterPathViewModel.Browse">
            <summary>
            Command to allow the user to select a file
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EngineeringParameterPathViewModel.GetParsedValue">
            <summary>
            Gets the parsed value.
            </summary>
            <returns>
            parsed value
            </returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FestoCANCPXCPStringDoubleValveBankIODeviceSettingsViewModel">
            <summary>
            VM class for CP String double valve bank.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FestoCANCPXCPStringDoubleValveBankIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FestoCANCPXCPStringDoubleValveBankIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.FestoCANCPXCPStringDoubleValveBankIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FestoCANCPXCPStringIODeviceSettingsViewModel">
            <summary>
            VM class for a CP String CPX IO device.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.FestoCANCPXCPStringIODeviceSettingsViewModel._device">
            <summary>
            The IO Device
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.FestoCANCPXCPStringIODeviceSettingsViewModel._settings">
            <summary>
            The device settings
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FestoCANCPXCPStringIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FestoCANCPXCPStringIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.FestoCANCPXCPStringIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The IO device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel">
            <summary>
            View model for use with cartesian configuration axis user controls.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel.#ctor(Labman.MotionControl.Axis)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel"/> class.
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel.Axis">
            <summary>The axis instance</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel.DemandPosition">
            <summary>The entered desired position</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel.Encoder">
            <summary>The encoder value</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel.HomeAxisCommand">
            <summary>Command to home the axis</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel.JogAxisNegativeCommand">
            <summary>Command to jog the axis in the negative direction</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel.JogAxisPositiveCommand">
            <summary>Command to jog the axis in the positive direction</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel.MoveAxisClickCommand">
            <summary>Command to move the axis to position with a click</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationAxisUserControlViewModel.MoveAxisCommand">
            <summary>Command to move the axis to position from pressing the enter key</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel">
            <summary>
            View model for use with cartesian configuration user controls.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.#ctor(Labman.MotionControl.CartesianConfiguration,Labman.PositionsDatabase.PositionDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel"/> class.
            </summary>
            <param name="cartesianConfiguration">The cartesian configuration.</param>
            <param name="positionDatabase">The position database.</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.CartesianConfiguration">
            <summary>
            Gets or sets the cartesian configuration.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.CartesianConfigurationPositionDatabaseAreas">
            <summary>
            Gets or sets the cartesian configuration position database area names.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.CartesianConfigurationXAxisUserControlViewModel">
            <summary>
            Gets or sets the cartesian configuration x axis user control view model.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.CartesianConfigurationYAxisUserControlViewModel">
            <summary>
            Gets or sets the cartesian configuration y axis user control view model.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.CartesianConfigurationZAxisUserControlViewModel">
            <summary>
            Gets or sets the cartesian configuration z axis user control view model.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.HomeAllAxesCommand">
            <summary>
            Gets the home all axes command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.HomeOrder">
            <summary>
            Exposes the home order as a well-formatted string.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.IndexIsValid">
            <summary>Whether the currently entered index is valid.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.MaxIndex">
            <summary>The minimum valid index for this area</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.MinIndex">
            <summary>The maximum valid index for this area</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.MoveCommand">
            <summary>
            Gets the run command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.OperateGripperCommand">
            <summary>
            Gets the operate gripper command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.PickPlaceCommand">
            <summary>
            Gets the pick place command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.SaveCurrentPositionCommand">
            <summary>
            Gets the save current position command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.SelectedArea">
            <summary>
            Gets or sets the selected area.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.RefreshAreas">
            <summary>
            Updates the areas.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationUserControlViewModel.UpdateAxisDemandPositions">
            <summary>
            Sets the displayed demand position values for each axis to the positions determined by the selected area/index or clears them if either area/index are null.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.IconBrowserViewModel">
            <summary>Viewmodel for <see cref="T:Labman.UserInterface.UserControlViews.IconBrowserUserControl"/></summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IconBrowserViewModel.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.IconBrowserViewModel"/></summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IconBrowserViewModel.Icons">
            <summary>The filtered list of icons.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IconBrowserViewModel.SearchText">
            <summary>The search text.</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LogUserControlViewModel">
            <summary>
            View model for new style log user control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.LogUserControlViewModel._hiddenLogTypes">
            <summary>
            A list of the log types that are currently hidden.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LogUserControlViewModel.LogMessages">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LogUserControlViewModel.InformationLogCount">
            <summary>
            Gets or sets the information log count.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LogUserControlViewModel.DataLogCount">
            <summary>
            Gets or sets the data log count.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LogUserControlViewModel.WarningLogCount">
            <summary>
            Gets or sets the warning log count.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LogUserControlViewModel.ErrorLogCount">
            <summary>
            Gets or sets the error log count.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LogUserControlViewModel.ExportStartDate">
            <summary>
            Gets or sets the export start date.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LogUserControlViewModel.ExportEndDate">
            <summary>
            Gets or sets the export end date.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LogUserControlViewModel.FilterCommand">
            <summary>
            Gets the filter command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LogUserControlViewModel.ExportLogsCommand">
            <summary>
            Gets the export logs command.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.Filter(System.Object)">
            <summary>
            Filter method decides on whether the specified item should be shown in the listview
            </summary>
            <param name="item">The item to check</param>
            <returns>True if it should be shown, else False to hide it</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.ShowHide(Labman.Logging.LogMessage.LogType,System.Boolean)">
            <summary>
            Method to show or hide a specific log message type.
            </summary>
            <param name="logType">The type of log message to show or hide</param>
            <param name="show">True to show, False to hide.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.RecentLogTypeCount_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This method handles the event fired when the collection of log messages that this view model is bound to adds or removes messages from the recent messages collection
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.GetLogFileName">
            <summary>
            Gets the name of the currently bound log
            </summary>
            <returns>Log file name that this view is bound with</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.SetLogFileName(System.String)">
            <summary>
            Sets the log file name to use for this view
            </summary>
            <param name="logName">The name of the log file to bind with</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.ExecuteFilter(System.Object)">
            <summary>
            Execute the command on the specified view model
            </summary>
            <param name="parameter">An array containing the log type to filter and a flag to indicate whether to show or hide the log type</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.LogFileNameToDate(System.String)">
            <summary>
            converts a log file name to a date
            </summary>
            <param name="logFileName">Name of the log file.</param>
            <returns>the date the log file was started</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.ExtractDateTimeFromLogLine(System.String)">
            <summary>
            Extracts the date from log line.
            </summary>
            <param name="logLine">The log line.</param>
            <returns>the datetime of the log line, null if datetime is not found</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.LogFileContainsValidDates(System.String,System.String,System.DateTime,System.DateTime)">
            <summary>
            determines if the file contains valid dates.
            </summary>
            <param name="logPath">The log path.</param>
            <param name="logFile">The log file.</param>
            <param name="startDate">The start date.</param>
            <param name="endDate">The end date.</param>
            <returns>true if valid date is found, false otherwise</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.ExecuteExportLogs">
            <summary>
            Exports the logs in the selected range to a zip file for emailing.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.CanExecuteExportLogs(System.Object)">
            <summary>
            Determines whether this instance can execute export logs.
            </summary>
            <param name="args">not used.</param>
            <returns>
              <c>true</c> if this instance can execute export logs; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LogUserControlViewModel.#ctor">
            <summary>
            Constructor for the view model
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel">
            <summary>
            Viewmodel for a stage within a method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.Enabled">
            <summary>
            Whether or not method is saved/sent to device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.Power">
            <summary>
            Stage Power Setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.HoldPower">
            <summary>
            Stage Hold Power setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.RunTime">
            <summary>
            Stage run time
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.HoldTime">
            <summary>
            Stage hold time
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.Temperature">
            <summary>
            Stage temprature
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.Pressure">
            <summary>
            Stage pressure
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.StageStirrerSpeed">
            <summary>
            Enumerable used populate stirrer speed combobox
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.StirrerSpeed">
            <summary>
            Stirrer speed property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.Cooling">
            <summary>
            Stage cooling switch
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.NumberOfVents">
            <summary>
            Number of times to vent during stage
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.GetStage">
            <summary>
            Retrieve a stage object from the user inputs
            </summary>
            <returns>Instance of MicrowaveDigesterStage object containing stage parameters</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterStageViewModel.LoadStage(Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterStage)">
            <summary>
            Load stage into the user interface controls
            </summary>
            <param name="stage">Instance of MicrowaveDigesterStage object used to populate the user interface</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel">
            <summary>
            ViewModel for micorwave digester
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.StageViewModels">
            <summary>
            Array of view models of stages. Allows to access stage data
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.MicrowaveDigester">
            <summary>
            Device object
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.IsDoorOpen">
            <summary>
            Door open property of device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.IsRunning">
            <summary>
            Whether or not the device is running a method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.MicrowavesOn">
            <summary>
            True - microwaves on, false otherwise
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.MethodRamping">
            <summary>
            Whether or not method ir ramping
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.StirrerOn">
            <summary>
            Stirrer switch
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.CoolingOn">
            <summary>
            Cooling Switch
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.CurrentStatus">
            <summary>
            The action currently being performed
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Temperature">
            <summary>
            Current temperature
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Pressure">
            <summary>
            Current pressure
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Stage">
            <summary>
            Current stage number, zero indexed
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.StageTime">
            <summary>
            Time left in a stage
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ElapsedTime">
            <summary>
            Time since startup
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.OtherStatistics">
            <summary>
            String property containing the rest of the statistics that wont normally fit on the screen
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.MethodName">
            <summary>
            Name of a method
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.MethodStyles">
            <summary>
            Enumerable used to populate method style combobox
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Style">
            <summary>
            Method style property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.MethodControlTypes">
            <summary>
            Enumerable used to populate method control type combobox
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.KeyboardKeys">
            <summary>
            Enumerable used to populate method control type combobox
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ControlType">
            <summary>
            Method control type property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.BoilingPoint">
            <summary>
            Method boiling point property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.PreMixTime">
            <summary>
            Method pre mix time property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Cycles">
            <summary>
            Number of pulses for powercycle
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.MinTemp">
            <summary>
            Temperature to turn back on for POWERCYCLING
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Options">
            <summary>
            Delta pressure value, 0 for OFF
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.CooldownTime">
            <summary>
            Time in seconds to cooldown, 0 for default
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.PressureReleaseLimit">
            <summary>
            Pressure release limit property, 0 for default
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.TempReleaseLimit">
            <summary>
            Temperature release limit property, 0 for default
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ErrorMessage">
            <summary>
            Device error message string, Not related to MicrowaveDigesterException
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.SelectedKey">
            <summary>
            Keypad key to press
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Start">
            <summary>
            Starts the method on the device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Abort">
            <summary>
            Aborts method on the device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Download">
            <summary>
            Downloads method to the device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Upload">
            <summary>
            Retrieves current method from device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Export">
            <summary>
            Saves method to file
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Import">
            <summary>
            Loads method from file
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.OpenPressureDevice">
            <summary>
            Open activent
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ClosePressureDevice">
            <summary>
            Close activent
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ForceOpenPressureDevice">
            <summary>
            Stop and open activent
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ForceClosePressureDevice">
            <summary>
            stop and close activent
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.StopAndClearErrors">
            <summary>
            Set stop and clear errors
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.PressKey">
            <summary>
            Press keyboard keys
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.#ctor(Labman.Hardware.MicrowaveDigesters.MicrowaveDigester)">
            <summary>
            Class constructor
            </summary>
            <param name="device">Instance of MicrowaveDigester class</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.Dispose">
            <summary>
            Disable and dispose of the UI refresh timer
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.TimerTick(System.Object)">
            <summary>
            Timer action refreshes display statistics
            </summary>
            <param name="state">Timer state field (not used)</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.CanExecute(System.Object)">
            <summary>
            Determines whether or not an action can be executed
            </summary>
            <param name="args">The arguments</param>
            <returns>True of a command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteStart(System.Object)">
            <summary>
            Begin method on device
            </summary>
            <param name="args">The arguments</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteAbort(System.Object)">
            <summary>
            Stop method on device
            </summary>
            <param name="args">The arguments</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteDownload(System.Object)">
            <summary>
            Download method to device
            </summary>
            <param name="args">The arguments</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteUpload(System.Object)">
            <summary>
            Get current method from the device
            </summary>
            <param name="args">The arguments</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteSave(System.Object)">
            <summary>
            Save method to file
            </summary>
            <param name="args">The arguments</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteLoad(System.Object)">
            <summary>
            Populate fields with information loaded from file
            </summary>
            <param name="args">The arguments</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteOpenPressureDevice(System.Object)">
            <summary>
            Open activent
            </summary>
            <param name="args">Arguments Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteClosePressureDevice(System.Object)">
            <summary>
            Close activent
            </summary>
            <param name="args">Arguments Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteForceOpenPressureDevice(System.Object)">
            <summary>
            Unconditional stop and open activent
            </summary>
            <param name="args">Arguments Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteForceClosePressureDevice(System.Object)">
            <summary>
            Unconditional stop and close activent
            </summary>
            <param name="args">Arguments Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecuteStopAndClearErrors(System.Object)">
            <summary>
            Set stop and clear errors
            </summary>
            <param name="args">Arguments Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ExecutePressKey(System.Object)">
            <summary>
            Set stop and clear errors
            </summary>
            <param name="args">Arguments Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.PopulateUserInterface(Labman.Hardware.MicrowaveDigesters.MicrowaveDigesterMethod)">
            <summary>
            Populate all user interface controls with given method
            </summary>
            <param name="method">Instance of a MicrowaveDigesterMethod class</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MicrowaveDigesterViewModel.ConstructMethod">
            <summary>
            Create Method from user inputs
            </summary>
            <returns>Instance of MicrowaveDigesterMethod created from the user input fields</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel">
            <summary>View model for use with Melfa Engineering user control.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.#ctor(Labman.Hardware.RobotArms.MitsubishiRobotArm,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel"/> class.</summary>
            <param name="mitsubishiRobotArm">Specifies a reference to a mitsi robot arm object.</param>
            <param name="showHandControls">Flag used to specify whether hand controls are shown.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.#ctor(Labman.Hardware.RobotArms.MitsubishiRobotArm)">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel"/> class.</summary>
            <param name="mitsubishiRobotArm">Specifies a reference to a mitsi robot arm object.</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.BaseRobotArmViewModel">
            <summary>The viewmodel for a generic robot arm</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.ChangeSpeedOverrideCommand">
            <summary>Gets the change speed override command.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.HandStates">
            <summary>Gets or sets the hand states.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.JogCommand">
            <summary>Gets the jog command.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.JogTypes">
            <summary>The possible jog types</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.Positions">
            <summary>The current positions of the arm.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.ProgramNames">
            <summary>The available program names</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.ResetAlarmCommand">
            <summary>Gets the reset alarm command.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.SelectedJogType">
            <summary>Gets or sets the selected jog type.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.SetHandStateCommand">
            <summary>Gets the set hand state command.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.SetServoStateCommand">
            <summary>Gets the set servo state command.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.ShowHandControls">
            <summary>Gets or sets a value indicating whether to show hand control.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MitsubishiRobotArmEngineeringUserControlViewModel.SpeedOverride">
            <summary>Gets or sets the speed override.</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorViewModel">
            <summary>
            Base view model for motor ratio calculators.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorViewModel.#ctor">
            <summary>
            Base view model for motor ratio calculators.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorViewModel.AvailableMicrosteps">
            <summary>
            List of available microstep settings and their respective values. Microsteps/step = 256 / 2^n where n = microstepValue. 0 to 8.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorViewModel.Heading">
            <summary>
            The heading of the calculator to be displayed on UI.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorViewModel.MicrostepRatio">
            <summary>
            The micro stepping ratio being used by the motor.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorViewModel.MotorRatio">
            <summary>
            The calculated motor ratio.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorViewModel.MotorStepsPerRev">
            <summary>
            The number of full steps in one revolution of the motor.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LmcMotorRatioCalculatorViewModel.CalculateMotorRatio">
            <summary>
            Calculates the motor ratio.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.OmniKey5022SettingsViewModel">
            <summary>
            Viewmodel for OmniKey 5022 settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmniKey5022SettingsViewModel.Settings">
            <summary>
            Device settings
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmniKey5022SettingsViewModel.AttachedDevices">
            <summary>
            Collection of serial numbers of available devices
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmniKey5022SettingsViewModel.#ctor(Labman.Hardware.Instruments.OmniKey5022RfidReader)">
            <summary>
            Class constructor
            </summary>
            <param name="device">Instance of OmniKey5022RfidReader</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.OmniKey5022ViewModel">
            <summary>
            Viemwodel for OmniKey 5022 device user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmniKey5022ViewModel.Reading">
            <summary>
            Latest rfid tag reading
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmniKey5022ViewModel.ReadCommand">
            <summary>
            Read rfid tag
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmniKey5022ViewModel.#ctor(Labman.Hardware.Instruments.OmniKey5022RfidReader)">
            <summary>
            Class constructor
            </summary>
            <param name="device">Instance of OmniKey5022RfidReader</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.PhidgetsIODeviceSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.PhidgetsIODeviceSettingsViewModel._device">
            <summary>
            The IO Device
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.PhidgetsIODeviceSettingsViewModel._settings">
            <summary>
            The device settings
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PhidgetsIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PhidgetsIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.PhidgetsIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The IO device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel">
            <summary>
            Base hardware config user control view model
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel._device">
            <summary>The selected device object, this can be used to execute commands on the device</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel._analogInput">
            <summary>The selected analog input.</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel._input">
            <summary>The selected input object</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel._analogOutput">
            <summary>The selected analog output.</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel._output">
            <summary>The selected output object</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel._axis">
            <summary>The selected axis object</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel._arm">
            <summary>The selected arm object</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel._cartesianConfiguration">
            <summary>The selected cartesian config object</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.SaveSettings">
            <summary>Command used to SaveSettings</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.InitialiseDevice">
            <summary>Command used to InitialiseDevice</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.Initialise">
            <summary>Command used to Initialise all devices</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.AddDevice">
            <summary>Command used to AddDevice</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.RemoveDevice">
            <summary>Command used to RemoveDevice</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.EditDeviceName">
            <summary>Command used to edit a device name</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.TreeViewSelectedItemChangedCommand">
            <summary>
            Gets the TreeView selected item changed command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.EntitiesInputs">
            <summary>
            Settings Property for inputs
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.EntitiesOutputs">
            <summary>
            Settings Property for outputs
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.EntitiesMotion">
            <summary>
            Settings Property for motion devices
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.EntitiesHardware">
            <summary>
            Settings Property for other hardware
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.DeviceControlUI">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.DeviceSettingsUI">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.DeviceHelpRtfFile">
            <summary>
            The device help RTF file.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.SelectedNode">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.#ctor">
            <summary>
            Hardware configuration form constructor is used to setup the initial tree view state
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.OnWindowClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when the window is being closed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.CanExecuteAdd(System.Object)">
            <summary>
            Can execute function for adding/removing buttons
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.CanExecuteRemove(System.Object)">
            <summary>
            Can execute function for adding/removing buttons
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.CanExecuteInitialise(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.RefreshTreeView">
            <summary>
            Refresh the treeview to contain all of the specified devices
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.DisposeCurrentView">
            <summary>
            Disposes the current view.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.SelectNode(Labman.UserInterface.ViewModels.TreeEntity)">
            <summary>
            Command called when the selected item on the treeview changes
            </summary>
            <param name="selectedEntity">The selected entity</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.ExecuteSaveSettings(System.Object)">
            <summary>
            Save the selected device settings
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.ExecuteInitialiseDevice(System.Object)">
            <summary>
            Initialise the selected device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.ExecuteInitialise(System.Object)">
            <summary>
            Initialise the system
            </summary>
            <param name="args">Command args</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.ExecuteAddDevice(System.Object)">
            <summary>
            Add a new device to the system
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.ExecuteRemoveDevice(System.Object)">
            <summary>
            Remove the selected device from the system
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.ExecuteEditDeviceName(System.Object)">
            <summary>
            Opens the edit name dialog then saves the new name for the hardware device
            </summary>
            <param name="args">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.ReloadHelpFile(System.Object)">
            <summary>
            Loads the help file for the passed object into the UI
            </summary>
            <param name="device">The device object</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigUserControlViewModel.GetSettingsFromNode(Labman.UserInterface.ViewModels.TreeEntity)">
            <summary>
            Gets the settings object from a tree entity via reflection.
            </summary>
            <param name="node">The tree node.</param>
            <returns>The settings object from a tree entity via reflection.</returns>
            <exception cref="T:System.Exception">Could not find settings object in device on node.</exception>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TreeEntity">
            <summary>
            Base Treeview Entity Class
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TreeEntity.Children">
            <summary>Collection of child nodes for this element</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TreeEntity.IsRootNode">
            <summary>Flag that defines if this is a root category node</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TreeEntity.IsSelected">
            <summary>Flag that is set through binding to indicate if this node is selected</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TreeEntity.NodeText">
            <summary>The name of the device this node is for (the node text)</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TreeEntity.ImplementingClass">
            <summary>The name of the device and its implementing class</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TreeEntity.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor when sets up a new node with a device name
            </summary>
            <param name="nodeText">The node text.</param>
            <param name="rootNode">if set to <c>true</c> [root node].</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.HardwareDeviceTreeEntity">
            <summary>
            Treeview class for a hardware device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HardwareDeviceTreeEntity.Device">
            <summary>
            A reference to the device this element is for (null for root nodes)
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareDeviceTreeEntity.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor when sets up a new node with a device name
            </summary>
            <param name="nodeText">The node text.</param>
            <param name="rootNode">if set to <c>true</c> [root node].</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareDeviceTreeEntity.#ctor(Labman.Hardware.Device)">
            <summary>
            Constructor which sets up a new node based on an existing hardware device
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AxisTreeEntity">
            <summary>
            Treeview class for an axis
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisTreeEntity.Axis">
            <summary>A reference to the device this element is for (null for root nodes)</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisTreeEntity.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor when sets up a new node with a device name
            </summary>
            <param name="nodeText">The node text.</param>
            <param name="rootNode">if set to <c>true</c> [root node].</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisTreeEntity.#ctor(Labman.MotionControl.Axis)">
            <summary>
            Constructor which sets up a new node based on an existing hardware device
            </summary>
            <param name="axis">The axis.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CartesianConfigurationTreeEntity">
            <summary>
            Treeview class for a cartesian configuration
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationTreeEntity.CartesianConfiguration">
            <summary>A reference to the device this element is for (null for root nodes)</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationTreeEntity.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor when sets up a new node with a device name
            </summary>
            <param name="nodeText">The node text.</param>
            <param name="rootNode">if set to <c>true</c> [root node].</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationTreeEntity.#ctor(Labman.MotionControl.CartesianConfiguration)">
            <summary>
            Constructor which sets up a new node based on an existing hardware device
            </summary>
            <param name="cartesianConfiguration">The cartesian configuration.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ArmTreeEntity">
            <summary>
            Treeview class for a cartesian configuration
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ArmTreeEntity.Arm">
            <summary>A reference to the device this element is for (null for root nodes)</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ArmTreeEntity.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor when sets up a new node with a device name
            </summary>
            <param name="nodeText">The node text.</param>
            <param name="rootNode">if set to <c>true</c> [root node].</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ArmTreeEntity.#ctor(Labman.MotionControl.Arm)">
            <summary>
            Constructor which sets up a new node based on an existing hardware device
            </summary>
            <param name="arm">The arm.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AnalogInputTreeEntity">
            <summary>
            Treeview class for an analog input configuration
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogInputTreeEntity.AnalogInput">
            <summary>A reference to the device this element is for (null for root nodes)</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogInputTreeEntity.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor when sets up a new node with a device name
            </summary>
            <param name="nodeText">The node text.</param>
            <param name="rootNode">if set to <c>true</c> [root node].</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogInputTreeEntity.#ctor(Labman.IO.AnalogInput)">
            <summary>
            Constructor which sets up a new node based on an existing hardware device
            </summary>
            <param name="analogInput">The input.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.InputTreeEntity">
            <summary>
            Treeview class for an input configuration
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InputTreeEntity.Input">
            <summary>A reference to the device this element is for (null for root nodes)</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InputTreeEntity.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor when sets up a new node with a device name
            </summary>
            <param name="nodeText">The node text.</param>
            <param name="rootNode">if set to <c>true</c> [root node].</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InputTreeEntity.#ctor(Labman.IO.Input)">
            <summary>
            Constructor which sets up a new node based on an existing hardware device
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AnalogOutputTreeEntity">
            <summary>
            Treeview class for an analog output configuration
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogOutputTreeEntity.AnalogOutput">
            <summary>A reference to the device this element is for (null for root nodes)</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogOutputTreeEntity.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor when sets up a new node with a device name
            </summary>
            <param name="nodeText">The node text.</param>
            <param name="rootNode">if set to <c>true</c> [root node].</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogOutputTreeEntity.#ctor(Labman.IO.AnalogOutput)">
            <summary>
            Constructor which sets up a new node based on an existing hardware device
            </summary>
            <param name="analogOutput">The output.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.OutputTreeEntity">
            <summary>
            Treeview class for an output configuration
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputTreeEntity.Output">
            <summary>A reference to the device this element is for (null for root nodes)</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputTreeEntity.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor when sets up a new node with a device name
            </summary>
            <param name="nodeText">The node text.</param>
            <param name="rootNode">if set to <c>true</c> [root node].</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputTreeEntity.#ctor(Labman.IO.Output)">
            <summary>
            Constructor which sets up a new node based on an existing hardware device
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel">
            <summary>
            Hiden Mass Spectrometer View Model 
            </summary>
            <seealso cref="T:Labman.UserInterface.ViewModelBase" />
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.HelpParams">
            <summary>
            Gets the help parameters.
            </summary>
            <value>
            The help parameters.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.HidenMassSpectrometer">
            <summary>
            Gets or sets the hiden mass spectrometer.
            </summary>
            <value>
            The hiden mass spectrometer.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
            <value>
            The file path.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.InterfaceUnitNumber">
            <summary>
            Gets or sets the interface unit number.
            </summary>
            <value>
            The interface unit number.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>
            The name of the file.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.Help">
            <summary>
            Gets or sets the help.
            </summary>
            <value>
            The help.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.GetStatusCommand">
            <summary>
            Gets the get status command.
            </summary>
            <value>
            The get status command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.OpenFileCommand">
            <summary>
            Gets the open file command.
            </summary>
            <value>
            The open file command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ActivateMSIUCommand">
            <summary>
            Gets the activate msiu command.
            </summary>
            <value>
            The activate msiu command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.StartCommand">
            <summary>
            Gets the start command.
            </summary>
            <value>
            The start command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.OpenFileExplorerCommand">
            <summary>
            Gets the open file explorer command.
            </summary>
            <value>
            The open file explorer command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.AbortCommand">
            <summary>
            Gets the abort command.
            </summary>
            <value>
            The abort command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.GetFilenameCommand">
            <summary>
            Gets the get filename command.
            </summary>
            <value>
            The get filename command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CloseCommand">
            <summary>
            Gets the close command.
            </summary>
            <value>
            The close command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExportDataCommand">
            <summary>
            Gets the export data command.
            </summary>
            <value>
            The export data command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.HelpCommand">
            <summary>
            Gets the help command.
            </summary>
            <value>
            The help command.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.#ctor(Labman.Hardware.Instruments.HidenMassSpectrometer)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CanExecuteGetStatus(System.Object)">
            <summary>
            Determines whether the get status command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExecuteGetStatus(System.Object)">
            <summary>
            Executes the get status.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CanExecuteOpenFile(System.Object)">
            <summary>
            Determines whether the open file command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExecuteOpenFile(System.Object)">
            <summary>
            Executes the open file.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CanExecuteActivateMSIU(System.Object)">
            <summary>
            Determines whether this command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExecuteActivateMSIU(System.Object)">
            <summary>
            Executes the activate msiu.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CanExecuteStart(System.Object)">
            <summary>
            Determines whether this command can be executed
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExecuteStart(System.Object)">
            <summary>
            Executes the start.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CanExecuteFileExplorer(System.Object)">
            <summary>
            Determines whether this command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExecuteOpenFileExplorer(System.Object)">
            <summary>
            Executes the open file explorer.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CanExecuteAbort(System.Object)">
            <summary>
            Determines whether this command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExecuteAbort(System.Object)">
            <summary>
            Executes the abort.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CanExecuteGetFilename(System.Object)">
            <summary>
            Determines whether this command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExecuteGetFilename(System.Object)">
            <summary>
            Executes the get filename.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CanExecuteClose(System.Object)">
            <summary>
            Determines whether this command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExecuteClose(System.Object)">
            <summary>
            Executes the close.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CanExecuteExportData(System.Object)">
            <summary>
            Determines whether this command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if this command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExecuteExportData(System.Object)">
            <summary>
            Executes the export data.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.CanExecuteHelp(System.Object)">
            <summary>
            Determines whether this command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if this can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HidenMassSpectrometerViewModel.ExecuteHelp(System.Object)">
            <summary>
            Executes the help.
            </summary>
            <param name="args">The arguments - the current selected item from the combo box</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.PositionIOSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionIOSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionIOSettingsViewModel.AxesAvailable">
            <summary>
            Property that exposes the available axis names
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PositionIOSettingsViewModel.#ctor(Labman.Hardware.IODevices.PositionIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel">
            <summary>
            Newport Solar Simulator (Oriel Sol3A Class AAA) View Model
            </summary>
            <seealso cref="T:Labman.UserInterface.ViewModelBase" />
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.NewportSolarSimulator">
            <summary>
            Gets or sets the newport solar simulator.
            </summary>
            <value>
            The newport solar simulator.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ErrorCode">
            <summary>
            Gets or sets the error code.
            </summary>
            <value>
            The error code.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.Current">
            <summary>
            Gets or sets the current.
            </summary>
            <value>
            The current.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.Voltage">
            <summary>
            Gets or sets the voltage.
            </summary>
            <value>
            The voltage.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.Wattage">
            <summary>
            Gets or sets the wattage.
            </summary>
            <value>
            The wattage.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.LampHours">
            <summary>
            Gets or sets the lamp hours.
            </summary>
            <value>
            The lamp hours.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CurrentLimit">
            <summary>
            Gets or sets the current limit.
            </summary>
            <value>
            The current limit.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.PowerLimit">
            <summary>
            Gets or sets the power limit.
            </summary>
            <value>
            The power limit.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.PowerSupplyModelNumber">
            <summary>
            Gets or sets the power supply model number.
            </summary>
            <value>
            The power supply model number.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.SetCurrent">
            <summary>
            Gets or sets the set current.
            </summary>
            <value>
            The set current.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.SetPower">
            <summary>
            Gets or sets the set power.
            </summary>
            <value>
            The set power.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.SetCurrentLimit">
            <summary>
            Gets or sets the set current limit.
            </summary>
            <value>
            The set current limit.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.SetPowerLimit">
            <summary>
            Gets or sets the set power limit.
            </summary>
            <value>
            The set power limit.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CurrentPreset">
            <summary>
            Gets or sets the current preset.
            </summary>
            <value>
            The current preset.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.PowerPreset">
            <summary>
            Gets or sets the power preset.
            </summary>
            <value>
            The power preset.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.GetStatusCommand">
            <summary>
            Gets the get status command.
            </summary>
            <value>
            The get status command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.GetErrorCommand">
            <summary>
            Gets the get error command.
            </summary>
            <value>
            The get error command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.GetCurrentCommand">
            <summary>
            Gets the get current command.
            </summary>
            <value>
            The get current command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.GetPowerCommand">
            <summary>
            Gets the get power command.
            </summary>
            <value>
            The get power command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.GetVoltageCommand">
            <summary>
            Gets the get voltage command.
            </summary>
            <value>
            The get voltage command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.GetLampHoursCommand">
            <summary>
            Gets the get lamp hours command.
            </summary>
            <value>
            The get lamp hours command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.GetCurrentLimit">
            <summary>
            Gets the get current limit.
            </summary>
            <value>
            The get current limit.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.GetPowerLimit">
            <summary>
            Gets the get power limit.
            </summary>
            <value>
            The get power limit.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.GetPowerSupplyModelNumber">
            <summary>
            Gets the get power supply model number.
            </summary>
            <value>
            The get power supply model number.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.StartCommand">
            <summary>
            Gets the start command.
            </summary>
            <value>
            The start command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.StopCommand">
            <summary>
            Gets the stop command.
            </summary>
            <value>
            The stop command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.SetCurrentCommand">
            <summary>
            Gets the set current command.
            </summary>
            <value>
            The set current command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.SetPowerCommand">
            <summary>
            Gets the set power command.
            </summary>
            <value>
            The set power command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.SetCurrentLimitCommand">
            <summary>
            Gets the set current limit command.
            </summary>
            <value>
            The set current limit command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.SetPowerLimitCommand">
            <summary>
            Gets the set power limit command.
            </summary>
            <value>
            The set power limit command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CurrentPresetCommand">
            <summary>
            Gets the current preset command.
            </summary>
            <value>
            The current preset command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.PowerPresetCommand">
            <summary>
            Gets the power preset command.
            </summary>
            <value>
            The power preset command.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.#ctor(Labman.Hardware.Instruments.NewportSolarSimulator)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteGetStatusCommand(System.Object)">
            <summary>
            Determines whether the get status command can be executed
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteGetStatus(System.Object)">
            <summary>
            Executes the get status command.
            </summary>
            <param name="args">The arguments - currently not used.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteGetErrorCommand(System.Object)">
            <summary>
            Determines whether the get error command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteGetError(System.Object)">
            <summary>
            Executes the get error command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteGetCurrentCommand(System.Object)">
            <summary>
            Determines whether the get current command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteGetCurrent(System.Object)">
            <summary>
            Executes the get current command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteGetPowerCommand(System.Object)">
            <summary>
            Determines whether the get power command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteGetPower(System.Object)">
            <summary>
            Executes the get power command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteGetVoltageCommand(System.Object)">
            <summary>
            Determines whether the get voltage command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteGetVoltage(System.Object)">
            <summary>
            Executes the get voltage command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteGetLampHoursCommand(System.Object)">
            <summary>
            Determines whether the get lamp hours command can be executed.
            </summary>
            <param name="args">The arguments - currently not used.</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteGetLampHours(System.Object)">
            <summary>
            Executes the get lamp hours command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteGetCurrentLimitCommand(System.Object)">
            <summary>
            Determines whether the get current limit command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteGetCurrentLimit(System.Object)">
            <summary>
            Executes the get current limit command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteGetPowerLimitCommand(System.Object)">
            <summary>
            Determines whether the get power command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteGetPowerLimit(System.Object)">
            <summary>
            Executes the get power limit command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteGetPowerSupplyModelNumberCommand(System.Object)">
            <summary>
            Determines whether the get power supply model number command can be executed.
            </summary>
            <param name="args">The arguments - currenlty not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteGetPowerSupplyModelNumber(System.Object)">
            <summary>
            Executes the get power supply model number command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteStartCommand(System.Object)">
            <summary>
            Determines whether the start command can be executed.
            </summary>
            <param name="args">The arguments - currently not used.</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteStart(System.Object)">
            <summary>
            Executes the start command.
            </summary>
            <param name="args">The arguments - currentyl not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteStopCommand(System.Object)">
            <summary>
            Determines whether the stop command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteStop(System.Object)">
            <summary>
            Executes the stop command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteSetCurrentCommand(System.Object)">
            <summary>
            Determines whether the set current command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteSetCurrent(System.Object)">
            <summary>
            Executes the set current command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteSetPowerCommand(System.Object)">
            <summary>
            Determines whether the set power command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteSetPower(System.Object)">
            <summary>
            Executes the set power command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteSetCurrentLimitCommand(System.Object)">
            <summary>
            Determines whether the set current limit command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteSetCurrentLimit(System.Object)">
            <summary>
            Executes the set current limit command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteSetPowerLimitCommand(System.Object)">
            <summary>
            Determines whether the set power limit command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteSetPowerLimit(System.Object)">
            <summary>
            Executes the set power limit command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecuteCurrentPresetCommand(System.Object)">
            <summary>
            Determines whether the get current preset value command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecuteCurrentPreset(System.Object)">
            <summary>
            Executes the get current preset value command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.CanExecutePowerPresetCommand(System.Object)">
            <summary>
            Determines whether the get power preset value command can be executed.
            </summary>
            <param name="args">The arguments - currently not used</param>
            <returns>
              <c>true</c> if the command can be executed; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.NewportSolarSimulatorViewModel.ExecutePowerPreset(System.Object)">
            <summary>
            Executes the get power preset value command.
            </summary>
            <param name="args">The arguments - currently not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.PILZPNOZMulti2IODeviceSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PILZPNOZMulti2IODeviceSettingsViewModel.DeviceTypes">
            <summary>
            Property that allows the device type enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PILZPNOZMulti2IODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PILZPNOZMulti2IODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.PILZPNOZMulti2IODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel">
            <summary>
            View model for use with JandelRM3000PlusUserControl.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.Device">
            <summary>Reference to the Orion Star A211 under control.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.CurrentUnits">
            <summary>
            Gets the current units.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.CurrentFlowDirections">
            <summary>
            Gets the current flow directions.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.Current">
            <summary>
            Gets or sets the current.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.Status">
            <summary>
            Gets or sets the status.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.Reading">
            <summary>
            Gets or sets the reading.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.StandByCommand">
            <summary>
            Gets the stand by command.
            </summary>
            <value>The stand by command.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.AutoRangeCommand">
            <summary>
            Gets the automatic range command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.SetCurrentCommand">
            <summary>
            Gets the set current command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.StartCurrentCommand">
            <summary>
            Gets the start current command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.GetStatusCommand">
            <summary>
            Gets the get status command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.GetReadingCommand">
            <summary>
            Gets the get reading.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel.#ctor(Labman.Hardware.Instruments.JandelRM3000Plus)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.JandelRM3000PlusViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel">
            <summary>
            Class that implements a custom view model for the Robot Arm window
            </summary>
            <seealso cref="T:Labman.UserInterface.ViewModelBase" />
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.RobotArm">
            <summary>Reference to the RobotArm under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.ProgramName">
            <summary>
            The name of the program to be passed to the robot arm.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.ProgramList">
            <summary>
            List of programs on the robot arm.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.JointPositions">
            <summary>
            Current positions of the joints.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.RunProgram">
            <summary>Command used to execute robot program</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.GoHome">
            <summary>Command used to execute robot program</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.SetPosition">
            <summary>Command used to execute robot program</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.#ctor(Labman.Hardware.RobotArms.KawasakiRobotArm)">
            <summary>
            Constructor for the RobotArm control view model, sets the RobotArm device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.ExecuteRunProgram(System.Object)">
            <summary>
            Executes the run program.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.ExecuteGoHome(System.Object)">
            <summary>
            Sets the Robot to home position
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KawasakiRobotArmViewModel.ExecuteSetJointPosition(System.Object)">
            <summary>
            Sets the Robot to home position
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LaserSettingsViewModel">
            <summary>
            The laser settings view model
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserSettingsViewModel.SelectFile">
            <summary>
            Opens a template
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserSettingsViewModel.LaserEnginePath">
            <summary>
            Document path
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserSettingsViewModel.#ctor(Labman.Hardware.Lasers.Laser)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserSettingsViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserSettingsViewModel.ExecuteSelectFile(System.Object)">
            <summary>
            Opens the file picker
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LaserViewModel">
            <summary>
            The laser view model
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.LaserViewModel._laserStates">
            <summary>
            A verbose version of states the laser may be in 
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.Laser">
            <summary>Reference to the device under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.CurrentStatus">
            <summary>
            The current device status message
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.Text">
            <summary>
            The current text to engrave
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.ElementID">
            <summary>
            The element ID
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.Document">
            <summary>
            Document path
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.GetVersion">
            <summary>
            Used to get the version
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.GetStatus">
            <summary>
            Used to get the status
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.ShowLimits">
            <summary>
            Used to show limits
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.StartMarking">
            <summary>
            Used to start marking
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.SetDataField">
            <summary>
            Sets a data field
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.StopMarking">
            <summary>
            Used to stop marking
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.OpenDocument">
            <summary>
            Opens a template
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LaserViewModel.SelectFile">
            <summary>
            Opens a template
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserViewModel.#ctor(Labman.Hardware.Lasers.Laser)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserViewModel.ExecuteGetVersion(System.Object)">
            <summary>
            Gets the device version
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserViewModel.ExecuteGetStatus(System.Object)">
            <summary>
            Gets the device status
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserViewModel.ExecuteShowLimits(System.Object)">
            <summary>
            Shows the laser draw limits
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserViewModel.ExecuteStartMarking(System.Object)">
            <summary>
            Starts the laser marking
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserViewModel.ExecuteStopMarking(System.Object)">
            <summary>
            Stops the laser marking
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserViewModel.ExecuteSetDataField(System.Object)">
            <summary>
            Sets a data field
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserViewModel.ExecuteOpenDocument(System.Object)">
            <summary>
            Opens a template document
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LaserViewModel.ExecuteSelectFile(System.Object)">
            <summary>
            Opens the file picker
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FanucRobotArmSettingsUserControlViewModel">
            <summary>
            View model for the Fanuc robot arm settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FanucRobotArmSettingsUserControlViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FanucRobotArmSettingsUserControlViewModel.#ctor(Labman.Hardware.RobotArms.FanucRobotArm)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel">
            <summary>
            View model for the balance user control 
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.MettlerPowderScale">
            <summary>Reference to the balance under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.Weight">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.StableWeight">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.TargetWeight">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.TargetPrecision">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.Tare">
            <summary>Command used to Tare</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.Calibrate">
            <summary>Command used to Calibrate</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.GetWeight">
            <summary>Command used to GetWeight</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.OpenFrontDoor">
            <summary>Command used to open the front door</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.CloseFrontDoor">
            <summary>Command used to close the front door</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.OpenSideDoor">
            <summary>Command used to open the side doors</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.CloseSideDoor">
            <summary>Command used to close the side doors</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.LockHeadPin">
            <summary>Command used to lock the dose head pin</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.UnlockHeadPin">
            <summary>Command used to unlock the dose head pin</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.SetTargetWeight">
            <summary>
            Command used to set the target weight
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.SetTargetPrecision">
            <summary>
            Command used to set the target precision
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.StartDosing">
            <summary>
            Command used to start dosing
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.CheckPanStatus">
            <summary>
            Check pan status
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ReadHead">
            <summary>
            Read head XML
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.#ctor(Labman.Hardware.Instruments.MettlerPowderScale)">
            <summary>
            Constructor for the balance control view model, sets the balance device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteTare(System.Object)">
            <summary>
            Tare the balance
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteCalibrate(System.Object)">
            <summary>
            Calibrate the balance
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteGetWeight(System.Object)">
            <summary>
            Get a balance weight
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteOpenFrontDoor(System.Object)">
            <summary>
            Opens the front door
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteCloseFrontDoor(System.Object)">
            <summary>
            Closes the front door
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteOpenSideDoor(System.Object)">
            <summary>
            Opens the side door
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteCloseSideDoor(System.Object)">
            <summary>
            Closes the side door
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteLockHeadPin(System.Object)">
            <summary>
            Locks the dose head pin
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteUnlockHeadPin(System.Object)">
            <summary>
            Unlocks the dose head pin
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteSetTargetWeight(System.Object)">
            <summary>
            Sets the target weight
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteSetTargetPrecision(System.Object)">
            <summary>
            Sets the target precision
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteStartDosing(System.Object)">
            <summary>
            Starts a dosing
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteCheckPanStatus(System.Object)">
            <summary>
            Checks pan status
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MettlerPowderScaleViewModel.ExecuteReadHead(System.Object)">
            <summary>
            Reads the dosing head
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.PreRunChecksViewModel">
            <summary>The view model for the pre run checks window</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck">
            <summary>A single pre run check</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck.Name">
            <summary>the name/title of the check</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck.IsChecked">
            <summary>Indicates if the check has been performed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck.HelpContent">
            <summary>The content to be displayed in the help popup, shown when the question-mark is clicked</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck.Check">
            <summary>Command that triggers setting IsChecked to true</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck.ExecuteCheck(System.Object)">
            <summary>Sets the ischecked property to true</summary>
            <param name="args">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="name">The name of the pre run check</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck.#ctor(System.String,System.Object)">
            <summary>Constructor with help content</summary>
            <param name="name">name of the check</param>
            <param name="helpContent">the help content see <see cref="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck.HelpContent"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck.#ctor(System.String,System.String)">
            <summary>Constructor with help content</summary>
            <param name="name">name of the check</param>
            <param name="helpImage">an image to use as the help content, see <see cref="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck.HelpContent"/></param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.PreRunChecksViewModel.DoneAction">
            <summary>the action performed once the user has approved the checks and starts the process</summary>
        </member>
        <member name="E:Labman.UserInterface.ViewModels.PreRunChecksViewModel.RequestClose">
            <summary>Occurs when [request close].</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.PreRunChecksViewModel._doneAction">
            <summary>The done action</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunChecks">
            <summary>A collection of pre run checks to display to the user</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.WaitMessage">
            <summary>Message to show to users if done action takes a particularly long time</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.WaitMessageVisability">
            <summary>Visibility of the wait message</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.Result">
            <summary>The result of the pre run checks. True if all passed, false if not passed.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.Done">
            <summary>Command to trigger starting the process</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.Cancel">
            <summary>Command triggered when cancel is clicked</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PreRunChecksViewModel.CanExecuteDone(System.Object)">
            <summary>returns if can execute done</summary>
            <param name="args">Not used</param>
            <returns>Returns if can execute done</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PreRunChecksViewModel.ExecuteDone(System.Object)">
            <summary>Executes when done is clicked, sends done message and starts process</summary>
            <param name="args">not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PreRunChecksViewModel.ExecuteCancel(System.Object)">
            <summary>Executes when cancel is clicked</summary>
            <param name="args">not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PreRunChecksViewModel.CanExecuteCancel(System.Object)">
            <summary>Indicates if the cancel button is enabled</summary>
            <param name="args">not used</param>
            <returns>false if done action is running, true otherwise</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PreRunChecksViewModel.#ctor(Labman.UserInterface.ViewModels.PreRunChecksViewModel.DoneAction,System.Collections.Generic.IEnumerable{Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck})">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.PreRunChecksViewModel"/> class.</summary>
            <param name="doneAction">The action to be performed when the user clicks start.</param>
            <param name="preRunChecks">The pre run checks to be fulfilled.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PreRunChecksViewModel.#ctor(Labman.UserInterface.ViewModels.PreRunChecksViewModel.DoneAction,Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck[])">
            <summary>Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.PreRunChecksViewModel"/> class.</summary>
            <param name="doneAction">The action to be performed when the user clicks start.</param>
            <param name="preRunChecks">The pre run checks to be fulfilled.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel">
            <summary>Viewmodel for process states user control</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.#ctor(System.Collections.Generic.IEnumerable{Labman.UserInterface.ViewModels.ProcessViewModel})">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel"/> with the given processes. Allows more specified control of the <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel"/> objects.</summary>
            <param name="processes">The <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel"/> objects listed by this <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.#ctor(Labman.UserInterface.ViewModels.ProcessViewModel[])">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel"/> with the given processes. Allows more specified control of the <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel"/> objects.</summary>
            <param name="processes">The <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel"/> objects listed by this <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.#ctor(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IDictionary{System.Int32,Labman.UserInterface.ViewModels.ProcessStateViewModel}})">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel"/> with the given mappings between process state numbers and displayable states for the given processes.
            With this constructor, each process in the <see cref="P:Labman.ProcessList.Processes"/> can have it's own mapping.
            </summary>
            <param name="stateMappings">A mapping between process state numbers and <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.#ctor(System.String,System.Collections.Generic.IDictionary{System.Int32,Labman.UserInterface.ViewModels.ProcessStateViewModel})">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel"/> for just the process with the given name with the given mappings between process state numbers and displayable states.</summary>
            <param name="processName">The name of the process to represent</param>
            <param name="stateMappings">A mapping between process state numbers and <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/>. This mapping is used for all processes</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.#ctor(System.Collections.Generic.IDictionary{System.Int32,Labman.UserInterface.ViewModels.ProcessStateViewModel})">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel"/> for all processes with the given mappings between process state numbers and displayable states.</summary>
            <param name="stateMappings">A mapping between process state numbers and <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/>. This mapping is used for all processes</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel"/></summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates">
            <summary>The process states for which we display different styles.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.Processes">
            <summary>The list of processes being modelled.</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1">
            <summary>Viewmodel for process states user control</summary>
            <typeparam name="T">The <see cref="T:System.Enum"/> type that the processes in this control use as their states</typeparam>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1.#ctor(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IDictionary{`0,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates}},System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1"/> with the given mappings between process state numbers and displayable states for the given processes.
            With this constructor, each process in the <see cref="P:Labman.ProcessList.Processes"/> can have its own mapping.
            </summary>
            <param name="stateMappings">A mapping between process state numbers and <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
            <param name="fillInValues">When false, states that are ommitted in the mapping will be ommited visually. When true they will be auto-generated</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1.#ctor(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IDictionary{`0,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates}})">
            <summary>
            Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1"/> with the given mappings between process state numbers and displayable states for the given processes.
            process in the <see cref="P:Labman.ProcessList.Processes"/> can have it's own mapping.
            </summary>
            <param name="stateMappings">A mapping between process state numbers and <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1.#ctor(System.String,System.Collections.Generic.IDictionary{`0,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates},System.Boolean)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1"/> for just the process with the given name with the given mappings between process state numbers and displayable states.</summary>
            <param name="processName">The name of the process to represent</param>
            <param name="stateMappings">A mapping between process state numbers and <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
            <param name="fillInValues">When false, states that are ommitted in the mapping will be ommited visually. When true they will be auto-generated</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1.#ctor(System.String,System.Collections.Generic.IDictionary{`0,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates})">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1"/> for just the process with the given name with the given mappings between process state numbers and displayable states.</summary>
            <param name="processName">The name of the process to represent</param>
            <param name="stateMappings">A mapping between process state numbers and <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1.#ctor(System.Collections.Generic.IDictionary{`0,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates},System.Boolean)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1"/> for all processes with the given mappings between process state numbers and displayable states.</summary>
            <param name="stateMappings">A mapping between process state numbers and <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
            <param name="fillInValues">When false, states that are ommitted in the mapping will be ommited visually. When true they will be auto-generated</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1.#ctor(System.Collections.Generic.IDictionary{`0,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates})">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1"/> for all processes with the given mappings between process state numbers and displayable states.</summary>
            <param name="stateMappings">A mapping between process state numbers and <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel`1"/>. The possible process states will be inferred from the generic type.</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ProcessViewModel">
            <summary>Represents a process, the states it can have and the state it is currently in.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel.#ctor(Labman.Processes.ProcessBase,System.Collections.Generic.List{Labman.UserInterface.ViewModels.ProcessStateViewModel})">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel"/> from the given process with the given mappings</summary>
            <param name="process">The <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="stateMappings">The mappings for this process (can be null) see <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel.#ctor(System.String,System.Collections.Generic.List{Labman.UserInterface.ViewModels.ProcessStateViewModel})">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel"/> from the given process with the given mappings</summary>
            <param name="processName">The name of the <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="stateMappings">The mappings for this process (can be null) see <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel.#ctor(Labman.Processes.ProcessBase,System.Collections.Generic.IDictionary{System.Int32,Labman.UserInterface.ViewModels.ProcessStateViewModel})">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel"/> from the given process with the given mappings</summary>
            <param name="process">The <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="stateMappings">The mappings for this process (can be null) see <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel.#ctor(System.String,System.Collections.Generic.IDictionary{System.Int32,Labman.UserInterface.ViewModels.ProcessStateViewModel})">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel"/> from the given process with the given mappings</summary>
            <param name="processName">The name of the <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="stateMappings">The mappings for this process (can be null) see <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessViewModel.ProcessStates">
            <summary>The possible states of this process</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessViewModel.ProcessName">
            <summary>The name of the process</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessViewModel.IsRunning">
            <summary>Whether the process is running.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessViewModel.State">
            <summary>The current state of this process</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ProcessViewModel`1">
            <summary>Represents a process, the states it can have and the state it is currently in.</summary>
            <typeparam name="K">The <see cref="T:System.Enum"/> type that this process uses as its states</typeparam>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel`1.#ctor(Labman.Processes.ProcessBase,System.Boolean,Labman.UserInterface.ViewModels.ProcessStateViewModel[])">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel`1"/> from the given process with the given mappings. Allows more specified control of the <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/> objects.</summary>
            <param name="process">The <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="fillInValues">When false, <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/> that are ommitted in the mapping will be ommited visually. When true they will be auto-generated</param>
            <param name="stateMappings">The <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/> for this process</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel`1.#ctor(System.String,System.Boolean,Labman.UserInterface.ViewModels.ProcessStateViewModel[])">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel`1"/> from the given process with the given mappings</summary>
            <param name="processName">The name of the <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="fillInValues">When false, states that are ommitted in the mapping will be ommited visually. When true they will be auto-generated</param>
            <param name="stateMappings">The <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/> for this process</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel`1.#ctor(Labman.Processes.ProcessBase,Labman.UserInterface.ViewModels.ProcessStateViewModel[])">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel`1"/> from the given process with the given mappings</summary>
            <param name="process">The <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="stateMappings">The <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/> for this process</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel`1.#ctor(System.String,Labman.UserInterface.ViewModels.ProcessStateViewModel[])">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel`1"/> from the given process with the given mappings</summary>
            <param name="processName">The name of the <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="stateMappings">The <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/> for this process</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel`1.#ctor(Labman.Processes.ProcessBase,System.Collections.Generic.IDictionary{`0,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates},System.Boolean)">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel`1"/> from the given process with the given mappings</summary>
            <param name="process">The <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="stateMappings">The mappings for this process (can be null) see <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
            <param name="fillInValues">When false, states that are ommitted in the mapping will be ommited visually. When true they will be auto-generated</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel`1.#ctor(System.String,System.Collections.Generic.IDictionary{`0,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates},System.Boolean)">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel`1"/> from the given process with the given mappings</summary>
            <param name="processName">The name of the <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="stateMappings">The mappings for this process (can be null) see <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
            <param name="fillInValues">When false, states that are ommitted in the mapping will be ommited visually. When true they will be auto-generated</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel`1.#ctor(Labman.Processes.ProcessBase,System.Collections.Generic.IDictionary{`0,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates})">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel`1"/> from the given process with the given mappings</summary>
            <param name="process">The <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="stateMappings">The mappings for this process (can be null) see <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel`1.#ctor(System.String,System.Collections.Generic.IDictionary{`0,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates})">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel`1"/> from the given process with the given mappings</summary>
            <param name="processName">The name of the <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
            <param name="stateMappings">The mappings for this process (can be null) see <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel`1.#ctor(Labman.Processes.ProcessBase)">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel`1"/> from the given process using the generic enum type to automatically generate the state mappings</summary>
            <param name="process">The <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessViewModel`1.#ctor(System.String)">
            <summary>Creates a new instance of a <see cref="T:Labman.UserInterface.ViewModels.ProcessViewModel`1"/> from the given process using the generic enum type to automatically generate the state mappings</summary>
            <param name="processName">The name of the <see cref="T:Labman.Processes.ProcessBase"/> on which this process is based</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ProcessStateViewModel">
            <summary>Represents an individual process state. E.g. "Capping". Stores the state name, integer number and how it should be displayed</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStateViewModel.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/></summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStateViewModel.#ctor(System.String,System.Int32,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/></summary>
            <param name="stateName">The name of the state (e.g. capping)</param>
            <param name="stateNumber">The numeric value of the state (e.g. what <see cref="P:Labman.Processes.ProcessBase.CurrentState"/> would be)</param>
            <param name="visualState">How the process state is represented to the user (working, completed, faulted, not started)</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStateViewModel.#ctor(System.String,System.Enum,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/></summary>
            <param name="stateName">The name of the state. This overrides the name determined from the stateEnum parameter</param>
            <param name="stateEnum">The enum value this state represents</param>
            <param name="visualState">How the process state is represented to the user (working, completed, faulted, not started)</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStateViewModel.#ctor(System.Enum,Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/></summary>
            <param name="stateEnum">The enum value this state represents</param>
            <param name="visualState">How the process state is represented to the user (working, completed, faulted, not started)</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStateViewModel.#ctor(System.String,System.Int32)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/></summary>
            <param name="stateName">The name of the state (e.g. capping)</param>
            <param name="stateNumber">The numeric value of the state (e.g. what <see cref="P:Labman.Processes.ProcessBase.CurrentState"/> would be)</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStateViewModel.#ctor(System.String,System.Enum)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/></summary>
            <param name="stateName">The name of the state. This overrides the name determined from the stateEnum parameter</param>
            <param name="stateEnum">The enum value this state represents</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStateViewModel.#ctor(System.Enum)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.ProcessStateViewModel"/></summary>
            <param name="stateEnum">The enum value this state represents</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStateViewModel.StateName">
            <summary>The name of the state (should be the enum value .ToPascalCaseWithSpaces()</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStateViewModel.StateNumber">
            <summary>The process state - the enum value this process state represents</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStateViewModel.VisualState">
            <summary>The visual state of this state - how it appears to the user.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStateViewModel.VisualStateFromStateString(System.String)">
            <summary>Attempts to determine which <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/> value maps to the process state with the given string.</summary>
            <param name="stateName">The string name of the process state</param>
            <returns>A <see cref="T:Labman.UserInterface.ViewModels.ProcessStatesUserControlViewModel.VisualProcessStates"/> that represents the given process state string</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.QuasarRGBLEDControllerSettingsViewModel">
            <summary>
            ViewModel for QuasarRGBLEDControllerSettings
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDControllerSettingsViewModel.Settings">
            <summary>
            Settings property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDControllerSettingsViewModel.#ctor(Labman.Hardware.Instruments.QuasarRGBLEDController)">
            <summary>
            Constructor for QuasarRGBLEDControllerSettingsViewModel
            </summary>
            <param name="device">Quasar LED Controller Device</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel">
            <summary>
            ViewModel for QuasarRGBLED
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.LEDController">
            <summary>
            Property for LED controller
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.CurrentColour">
            <summary>
            Property that holds the current colour for the preview pane
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.SelectedColour">
            <summary>
            Property for selected colour, for system colours combobox
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.RedValue">
            <summary>
            Property that holds the red value of the colour
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.GreenValue">
            <summary>
            Property that holds the green value of the colour
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.BlueValue">
            <summary>
            Property that holds the blue value of the colour
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.ColourList">
            <summary>
            Property for list of system colours
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.SearchText">
            <summary>The search text.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.SequenceName1">
            <summary>
            Property that returns the name of sequence 1
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.SequenceName2">
            <summary>
            Property that returns the name of sequence 2
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.SequenceName3">
            <summary>
            Property that returns the name of sequence 3
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.SequenceName4">
            <summary>
            Property that returns the name of sequence 4
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.SequenceName5">
            <summary>
            Property that returns the name of sequence 5
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.SequenceName6">
            <summary>
            Property that returns the name of sequence 6
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.SequenceInterval">
            <summary>
            Property for sequence interval
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.ShowStandardControls">
            <summary>
            Property used to enable/disabled controls during calibration
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.Calibrate">
            <summary>
            Property used to enable/disabled controls during calibration
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.RedScalar">
            <summary>
            Property for red scalar value
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.GreenScalar">
            <summary>
            Property for red scalar value
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.BlueScalar">
            <summary>
            Property for red scalar value
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.CalibrateButtonText">
            <summary>
            Property for calbirate button text
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.Preview">
            <summary>
            Command used to preview colour
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.Sequence1">
            <summary>
            Command used to start sequence 1
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.Sequence2">
            <summary>
            Command used to start sequence 2
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.Sequence3">
            <summary>
            Command used to start sequence 3
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.Sequence4">
            <summary>
            Command used to start sequence 4
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.Sequence5">
            <summary>
            Command used to start sequence 5
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.Sequence6">
            <summary>
            Command used to start sequence 6
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.CalibrateCommand">
            <summary>
            Comamand for calibrating LED
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.#ctor(Labman.Hardware.Instruments.QuasarRGBLEDController)">
            <summary>
            Consturctor for QuasarLEDRGBController viewmodel
            </summary>
            <param name="device">The Quasar LED Controller device</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.PreviewColour(System.Object)">
            <summary>
            Preview the colour on the LEDs
            </summary>
            <param name="args">Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.ExecuteSequence1(System.Object)">
            <summary>
            Start sequence 1
            </summary>
            <param name="args">Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.ExecuteSequence2(System.Object)">
            <summary>
            Start sequence 2
            </summary>
            <param name="args">Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.ExecuteSequence3(System.Object)">
            <summary>
            Start sequence 3
            </summary>
            <param name="args">Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.ExecuteSequence4(System.Object)">
            <summary>
            Start sequence 4
            </summary>
            <param name="args">Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.ExecuteSequence5(System.Object)">
            <summary>
            Start sequence 5
            </summary>
            <param name="args">Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.ExecuteSequence6(System.Object)">
            <summary>
            Start sequence 6
            </summary>
            <param name="args">Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.QuasarRGBLEDViewModel.ExecuteCalibrate(System.Object)">
            <summary>
            Peform calibration
            </summary>
            <param name="args">not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RackLegendUserControlViewModel`1">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.RackLegendUserControlViewModel`1"/></summary>
            <typeparam name="T">The enum type that list the possible rack position status numbers and names</typeparam>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RackLegendUserControlViewModel`1.#ctor(System.Collections.Generic.SortedList{System.Int32,System.Windows.Style})">
            <summary>Rack control view model constructor, creates the view model ready for use</summary>
            <param name="statusStyles">Array of each style the legend should display</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackLegendUserControlViewModel`1.LegendItems">
            <summary>The legend items displayed by this control</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RackLegendUserControlViewModel`1.NamedStyle">
            <summary>Represents a style and name of that status</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackLegendUserControlViewModel`1.NamedStyle.StyleName">
            <summary>
            The name of the style status (e.g. "Unprocessed")
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackLegendUserControlViewModel`1.NamedStyle.LabelStyle">
            <summary>
            The style used to represent this status
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RegistrationWindowViewModel">
            <summary>
            The Registration Window view model
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.ApplicationName">
            <summary>
            Gets the name of the application.
            </summary>
            <value>The name of the application.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.ApplicationVersion">
            <summary>
            Gets the application version.
            </summary>
            <value>The application version.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.BaseApplicationVersion">
            <summary>
            Gets the base application version
            </summary>
            <value>The base application version</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.IsRegistered">
            <summary>
            Gets or sets a value indicating whether this instance is registered.
            </summary>
            <value><c>true</c> if this instance is registered; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.HardwareId">
            <summary>
            Gets or sets the hardware identifier.
            </summary>
            <value>The hardware identifier.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.HardwareKey">
            <summary>
            Gets or sets the hardware key.
            </summary>
            <value>The hardware key.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.CopyHardwareIdCommand">
            <summary>
            Gets the copy hardware identifier command.
            </summary>
            <value>The copy hardware identifier command.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.RegisterHardwareKeyCommand">
            <summary>
            Gets the register hardware key command.
            </summary>
            <value>The register hardware key command.</value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.ExecuteCopyHardwareId(System.Object)">
            <summary>
            Executes the copy hardware identifier.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.CanExecuteRegisterHardwareKey(System.Object)">
            <summary>
            Determines whether this instance [can execute register hardware key] the specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns><c>true</c> if this instance [can execute register hardware key] the specified arguments; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.ExecuteRegisterHardwareKey(System.Object)">
            <summary>
            Executes the register hardware key.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RegistrationWindowViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.RegistrationWindowViewModel"/> class.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RfIdeasUniversalRfidReaderViewModel">
            <summary>
            View model for rfIDEAS Universal RFID reader device user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RfIdeasUniversalRfidReaderViewModel.Reading">
            <summary>
            Latest rfid tag reading
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RfIdeasUniversalRfidReaderViewModel.ReadCommand">
            <summary>
            Read RFID tag
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RfIdeasUniversalRfidReaderViewModel.#ctor(Labman.Hardware.BarcodeReaders.RfIdeasUniversalRfidReader)">
            <summary>
            Class constructor
            </summary>
            <param name="device">Instance of RfIdeasUniversalRfidReader</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RheometerViewModel">
            <summary>
            View model for the Rheometer user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RheometerViewModel.Rheometer">
            <summary>Reference to the device under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RheometerViewModel.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RheometerViewModel.Torque">
            <summary>
            Gets or sets the torque.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RheometerViewModel.#ctor(Labman.Hardware.Rheometers.Rheometer)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RheometerViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RheometerViewModel.ExecuteStop(System.Object)">
            <summary>
            Executes the stop.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel">
            <summary>
            The view model for Brookfield rheometer device control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel._dataCaptured">
            <summary>
            The _data captured
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel._deg20">
            <summary>
            The _start value
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel._deg60">
            <summary>
            The _end value
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel._deg85">
            <summary>
            The _total time
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel._riq">
            <summary>
            The _each duration
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel._haze">
            <summary>
            The _number of measurements
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel._rspec">
            <summary>
            The rspec value
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel._doi">
            <summary>
            The doi value
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.RhopointGlossmeter">
            <summary>Reference to the device under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.Deg20">
            <summary>
            Gets or sets the deg20.
            </summary>
            <value>
            The deg20.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.Deg60">
            <summary>
            Gets or sets the deg60.
            </summary>
            <value>
            The deg60.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.Deg85">
            <summary>
            Gets or sets the deg85.
            </summary>
            <value>
            The deg85.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.RIQ">
            <summary>
            Gets or sets the riq.
            </summary>
            <value>
            The riq.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.Haze">
            <summary>
            Gets or sets the haze.
            </summary>
            <value>
            The haze.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.Rspec">
            <summary>
            Gets or sets the rspec.
            </summary>
            <value>
            The rspec.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.DOI">
            <summary>
            Gets or sets the doi.
            </summary>
            <value>
            The doi.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.CalibrateDevice">
            <summary>
            Calibrate the device with the standard calibration block.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.GetData">
            <summary>
            Get details of measurement from the device
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.#ctor(Labman.Hardware.Spectrophotometers.RhopointGlossmeter)">
            <summary>
            Constructor for the Syringe control view model, sets the Syringe device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.ExecuteGetMeasurementData(System.Object)">
            <summary>
            Executes the stop.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RhopointGlossMeterViewModel.ExecuteDeviceCalibratiobn(System.Object)">
            <summary>
            Executes the start.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel">
            <summary>
            The view model for Brookfield rheometer device control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel._dataCaptured">
            <summary>
            The _data captured
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel._mode">
            <summary>
            The _mode
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel._startValue">
            <summary>
            The _start value
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel._endValue">
            <summary>
            The _end value
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel._totalTime">
            <summary>
            The _total time
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel._eachDuration">
            <summary>
            The _each duration
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel._numberOfMeasurements">
            <summary>
            The _number of measurements
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.Rheometer">
            <summary>Reference to the device under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.StartValue">
            <summary>
            Gets or sets the start value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.EndValue">
            <summary>
            Gets or sets the end value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.TotalTime">
            <summary>
            Gets or sets the total time.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.EachDuration">
            <summary>
            Gets or sets the duration of the each.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.NumberOfMeasurements">
            <summary>
            Gets or sets the number of measurements.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.Mode">
            <summary>
            Gets or sets the mode.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.DataTableContent">
            <summary>
            Gets the content of the data table.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.ConvertToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            Converts to data table.
            </summary>
            <typeparam name="T">The list to be conveted to a dataTable</typeparam>
            <param name="data">The data.</param>
            <returns>A dataTable of the objects in a list</returns>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.StopSpin">
            <summary>
            Gets the stop spin.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.StartSpin">
            <summary>
            Gets the start spin.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel._onlineCommand">
            <summary>
            Relaycommand for online mode
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel._offlineCommand">
            <summary>
            Relaycommand for offline mode
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.GoOnline">
            <summary>
            Gets the Command to make the device go online
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.GoOffline">
            <summary>
            Command to make the device go offline
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.ExecuteOffline(System.Object)">
            <summary>
            Executes the funtion to go online.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.ExecuteOnline(System.Object)">
            <summary>
            Executes the function to go offline.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.#ctor(Labman.Hardware.Rheometers.BrookField)">
            <summary>
            Constructor for the Syringe control view model, sets the Syringe device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.ExecuteStop(System.Object)">
            <summary>
            Executes the stop.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BrookfieldRheometerViewModel.ExecuteStart(System.Object)">
            <summary>
            Executes the start.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.DataInString">
            <summary>
            Convert the Rheometer data class to a string class with individuall accessible property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DataInString.Temperature">
            <summary>
            Gets or sets the temperature.
            </summary>
            <value>
            The temperature.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DataInString.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
            <value>
            The speed.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DataInString.Torque">
            <summary>
            Gets or sets the torque.
            </summary>
            <value>
            The torque.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DataInString.ShearRate">
            <summary>
            Gets or sets the shear rate.
            </summary>
            <value>
            The shear rate.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DataInString.ShearStress">
            <summary>
            Gets or sets the shear stress.
            </summary>
            <value>
            The shear stress.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DataInString.Viscosity">
            <summary>
            Gets or sets the viscosity.
            </summary>
            <value>
            The viscosity.
            </value>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FestoCANAnalogInputDeviceSettingsViewModel">
            <summary>
            Viewmodel for Festo CAN analog input device settings use control.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FestoCANAnalogInputDeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FestoCANAnalogInputDeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.FestoCANAnalogInputDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.FestoCANAnalogInputDeviceSettingsViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FestoCANAnalogOutputDeviceSettingsViewModel">
            <summary>
            Viewmodel for Festo CAN analog ouptut device settings use control.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FestoCANAnalogOutputDeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FestoCANAnalogOutputDeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.FestoCANAnalogOutputDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.FestoCANAnalogOutputDeviceSettingsViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FestoCANCPXIODeviceSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.FestoCANCPXIODeviceSettingsViewModel._device">
            <summary>
            The IO Device
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.FestoCANCPXIODeviceSettingsViewModel._settings">
            <summary>
            The device settings
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FestoCANCPXIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FestoCANCPXIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.FestoCANCPXIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The IO device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FestoCANDoubleValveBankIODeviceSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FestoCANDoubleValveBankIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FestoCANDoubleValveBankIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.FestoCANDoubleValveBankIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerSettingsViewModel">
            <summary>
            Viewmodel for Hach DR3900 Spectrophotometer settings use control.
            </summary>
            <seealso cref="T:Labman.UserInterface.ViewModelBase" />
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerSettingsViewModel.#ctor(Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.FestoCANAnalogOutputDeviceSettingsViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerViewModel">
            <summary>
            View model for the Hach DR3900 Spectrophotometer
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerViewModel.Wavelength">
            <summary>
            Gets or sets the wavelength.
            </summary>
            <value>
            The wavelength.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerViewModel.Absorbtion">
            <summary>
            Gets or sets the absorbtion.
            </summary>
            <value>
            The absorbtion.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerViewModel.CanExecute(System.Object)">
            <summary>
            Method used by command binding to determine if a command can execute.
            </summary>
            <param name="param">N/A.</param>
            <returns>bool, command can execute, false otherwise.</returns>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerViewModel.GetAbsorbtion">
            <summary>
            Gets the 'Get Absorbtion' command for binding with a get absorbtion button.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerViewModel.Zero">
            <summary>
            Gets the 'Zero' command for binding with a Zero button.
            </summary>
            <value>
            The zero command.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerViewModel.ExecuteGetAbsorbtion(System.Object)">
            <summary>
            Method that is executed when the take measurement command is invoked.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerViewModel.ExecuteZero(System.Object)">
            <summary>
            Zeros the device.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HachDR3900SpectrophotometerViewModel.#ctor(Labman.Hardware.Spectrophotometers.HachDR3900Spectrophotometer)">
            <summary>
            Class construction, intialises members with passed in values.
            </summary>
            <param name="device">Specifies a reference to a HachDR3900Spectrophotometer device that is 
            assigned to a class member for class wide use.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.KloehnSyringeSettingsViewModel">
            <summary>
            Kloeh syringe view model class
            </summary>
            <seealso cref="T:Labman.UserInterface.ViewModelBase" />
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeSettingsViewModel.PlungerForceEnumValues">
            <summary>
            Property that allows the syringe plunger force enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeSettingsViewModel.ValveInitialisationSequenceEnumValues">
            <summary>
            Property that allows the syringe initialisation sequence enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeSettingsViewModel.ValvePositionEnumValues">
            <summary>
            Property that allows the syringe valve position enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KloehnSyringeSettingsViewModel.#ctor(Labman.Hardware.Syringes.KloehnSyringe)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">Tecan syringe device</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.KloehnSyringeViewModel">
            <summary>
            Kloehn syringe view model 
            </summary>
            <seealso cref="T:Labman.UserInterface.ViewModelBase" />
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.Syringe">
            <summary>Reference to the Syringe under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.VolumeDemand">
            <summary>
            VolumeDemand Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.Speed">
            <summary>
            Speed Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.Volume">
            <summary>
            Volume Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ResetAndHome">
            <summary>Command used to ResetAndHome</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.Aspirate">
            <summary>Command used to Aspirate</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.Dispense">
            <summary>Command used to Dispense</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ValveLeft">
            <summary>Command used to switch valve left</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ValveTop">
            <summary>Command used to switch valve top</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ValveRight">
            <summary>Command used to switch valve right</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.SetSpeed">
            <summary>Command used to set speed</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.#ctor(Labman.Hardware.Syringes.KloehnSyringe)">
            <summary>
            Constructor for the Syringe control view model, sets the Syringe device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>poda</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ExecuteResetAndHome(System.Object)">
            <summary>
            Executes command to ExecuteResetAndHome
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ExecuteAspirate(System.Object)">
            <summary>
            Executes command to aspirate
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ExecuteDispense(System.Object)">
            <summary>
            Executes command to dispense
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ExecuteSwicthValveLeft(System.Object)">
            <summary>
            Executes command to switch valve left
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ExecuteSwicthValveTop(System.Object)">
            <summary>
            Executes command to switch valve top
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ExecuteSwicthValveRight(System.Object)">
            <summary>
            Executes command to switch valve right
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.KloehnSyringeViewModel.ExecuteSetSpeed(System.Object)">
            <summary>
            Executes command to set syringe speed
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.OceanOpticsViewModel">
            <summary>
            View model for the Ocean Optics window
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OceanOpticsViewModel.SelectedSerialNumber">
            <summary>
            A property used to hold the selected serial number on the engineering screen drop down box
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.OceanOpticsViewModel._integrationTime">
            <summary>
            Used to store the integration time value entered on the engineering screen
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OceanOpticsViewModel.IntegrationTime">
            <summary>
            Gets or sets the integration time.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OceanOpticsViewModel.SerialNumbers">
            <summary>
            A list of the serial numbers of all spectrophotometers found on the computer
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OceanOpticsViewModel.SpectraOutput">
            <summary>
            A double array of values return from the spectrophotometer when the user asks for a spectra to be acquired
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OceanOpticsViewModel.AcquireSpectra">
            <summary>
            Retrieves a spectra from the spectrophotometer
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OceanOpticsViewModel.CanExecute(System.Object)">
            <summary>
            Method used by command binding to determine if a command can execute.
            </summary>
            <param name="param">N/A.</param>
            <returns>bool, command can execute, false otherwise.</returns>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OceanOpticsViewModel.AcquireSpectraCommand">
            <summary>
            Gets the acquire spectra command for binding with a acquire spectra button.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OceanOpticsViewModel.ExecuteAcquireSpectraCommand(System.Object)">
            <summary>
            Method that is executed when the aqcuire spectra command is invoked.
            </summary>
            <param name="param">N/A.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OceanOpticsViewModel.#ctor(Labman.Hardware.Spectrophotometers.OceanOpticsSpectrophotometers)">
            <summary>
            Class construction, intialises members with passed in values.
            </summary>
            <param name="device">Specifies a reference to a OceanOptics device that is 
            assigned to a class member for class wide use.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel">
            <summary>
            The view model class for the Rotronic user control view
            </summary>
            <seealso cref="T:Labman.UserInterface.ViewModelBase" />
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._rotronicSensor">
            <summary>
            The Rotronic hardware instance
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe1Temperature">
            <summary>
            The probe1 temperature
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe1Humidity">
            <summary>
            The probe1 humidity
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe2Temperature">
            <summary>
            The probe2 temperature
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe2Humidity">
            <summary>
            The probe2 humidity
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe3Temperature">
            <summary>
            The probe3 temperature
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe3Humidity">
            <summary>
            The probe3 humidity
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe4Temperature">
            <summary>
            The probe4 temperature
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe4Humidity">
            <summary>
            The probe4 humidity
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe5Temperature">
            <summary>
            The probe5 temperature
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe5Humidity">
            <summary>
            The probe5 humidity
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe6Temperature">
            <summary>
            The probe6 temperature
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe6Humidity">
            <summary>
            The probe6 humidity
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe7Temperature">
            <summary>
            The probe7 temperature
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._probe7Humidity">
            <summary>
            The probe7 humidity
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe1Temperature">
            <summary>
            Gets or sets the probe1 temperature.
            </summary>
            <value>
            The probe1 temperature.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe1Humidity">
            <summary>
            Gets or sets the probe1 humidity.
            </summary>
            <value>
            The probe1 humidity.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe2Temperature">
            <summary>
            Gets or sets the probe2 temperature.
            </summary>
            <value>
            The probe2 temperature.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe2Humidity">
            <summary>
            Gets or sets the probe2 humidity.
            </summary>
            <value>
            The probe2 humidity.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe3Temperature">
            <summary>
            Gets or sets the probe3 temperature.
            </summary>
            <value>
            The probe3 temperature.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe3Humidity">
            <summary>
            Gets or sets the probe3 humidity.
            </summary>
            <value>
            The probe3 humidity.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe4Temperature">
            <summary>
            Gets or sets the probe4 temperature.
            </summary>
            <value>
            The probe4 temperature.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe4Humidity">
            <summary>
            Gets or sets the probe4 humidity.
            </summary>
            <value>
            The probe4 humidity.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe5Temperature">
            <summary>
            Gets or sets the probe5 temperature.
            </summary>
            <value>
            The probe5 temperature.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe5Humidity">
            <summary>
            Gets or sets the probe5 humidity.
            </summary>
            <value>
            The probe5 humidity.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe6Temperature">
            <summary>
            Gets or sets the probe6 temperature.
            </summary>
            <value>
            The probe6 temperature.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe6Humidity">
            <summary>
            Gets or sets the probe6 humidity.
            </summary>
            <value>
            The probe6 humidity.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe7Temperature">
            <summary>
            Gets or sets the probe7 temperature.
            </summary>
            <value>
            The probe7 temperature.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.Probe7Humidity">
            <summary>
            Gets or sets the probe7 humidity.
            </summary>
            <value>
            The probe7 humidity.
            </value>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._getTemperatureCommand">
            <summary>
            The get temperature command
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel._getHumidityCommand">
            <summary>
            The get humidity command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.GetTemperature">
            <summary>
            Gets the get temperature.
            </summary>
            <value>
            The get temperature.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.GetHumidity">
            <summary>
            Gets the get humidity.
            </summary>
            <value>
            The get humidity.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.#ctor(Labman.Hardware.EnvironmentSensors.RotronicHygroLogNT)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.ExecuteHumidityGet(System.Object)">
            <summary>
            Executes the humidity get.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RotoronicHygroLogNTViewModel.ExecuteTemperatureGet(System.Object)">
            <summary>
            Executes the temperature get.
            </summary>
            <param name="obj">The object.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel">
            <summary>
            View model for biohit user control
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.#ctor(Labman.Hardware.Instruments.SartoriusBiohitPipettor)">
            <summary>
            Default constructor
            </summary>
            <param name="device">Device to control</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.Aspirate">
            <summary>Command to use to get aspirate volume</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.Biohit">
            <summary>Reference to the biohit under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.Dispense">
            <summary>Command to use to get dispense volume</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.EjectTip">
            <summary>Command to use to eject the tip</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.Blowoff">
            <summary>Command to use to perform a blowoff</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.GetAspirateSpeed">
            <summary>Command to use to get aspirate speed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.GetDispenseSpeed">
            <summary>Command to use to get dispense speed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.GetPosition">
            <summary>Command to use to get Position</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.Position">
            <summary>Position</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.ReturnToZero">
            <summary>Command to use to return to zero</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.SetAspirateSpeed">
            <summary>Command to use to set aspirate speed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.SetDispenseSpeed">
            <summary>Command to use to set dispense speed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.SetSpeed">
            <summary>Set Speed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.Speed">
            <summary>Speed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.VolumeDemand">
            <summary>Volume Demand</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SartoriusBiohitPipettorViewModel.CanExecute">
            <summary>Can execute function for this view</summary>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SartoriusBiohitSettingsViewModel">
            <summary>
            Sartorius Biohit Settings View Model
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitSettingsViewModel.ModelEnumValues">
            <summary>
            Enumeration of models.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SartoriusBiohitSettingsViewModel.#ctor(Labman.Hardware.Instruments.SartoriusBiohitPipettor)">
            <summary>
            Constructor for the view model
            </summary>
            <param name="device">Biohit device</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusBiohitSettingsViewModel.Settings">
            <summary>Settings property</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SartoriusSettingsViewModel">
            <summary>
            View Model for the balance settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusSettingsViewModel.StabilitySettingEnumValues">
            <summary>
            Property that allows the balance stability enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusSettingsViewModel.SartoriusTypeEnumValues">
            <summary>
            Property that allows the sartorius type enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SartoriusSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SartoriusSettingsViewModel.#ctor(Labman.Hardware.Balances.Balance)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SicEc1EngraverInstrumentSettingsUserControlViewModel">
            <summary>
            View model for the SIC EC1 Engraver settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SicEc1EngraverInstrumentSettingsUserControlViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SicEc1EngraverInstrumentSettingsUserControlViewModel.#ctor(Labman.Hardware.Instruments.SicEC1EngraverInstrument)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel">
            <summary>
            View model for the SIC EC1 Engraver user control 
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.Device">
            <summary>Reference to the instrument under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.MotorDirection">
            <summary>
            Gets or sets the direction to pump
            </summary>
            <value>The direction.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.MotorSpeed">
            <summary>
            Gets or sets the speed to pump in RPM
            </summary>
            <value>The speed.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.MotorRevolutions">
            <summary>
            Gets or sets the number of revolutions to pump 
            </summary>
            <value>The number of revs.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.WaitForComplete">
            <summary>
            Whether to wait for completion
            </summary>
            <value>wait?</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.MotorDirectionEnumValues">
            <summary>
            Motor direction enum values
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.SetMotorDirection">
            <summary>Command used to set motor direction</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.SetMotorSpeed">
            <summary>Command used to set motor speed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.StartPump">
            <summary>Command to start pump</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.StartPumpContinuous">
            <summary>Command to start pump</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.StopPump">
            <summary>Command to start pump</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.#ctor(Labman.Hardware.Instruments.MasterflexLSDigitalPumpInstrument)">
            <summary>
            Constructor for the engraver control view model, sets the engraver device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.ExecuteSetMotorSpeed(System.Object)">
            <summary>
            Sets the motor speed
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.ExecuteSetMotorDirection(System.Object)">
            <summary>
            sets the motor direction
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.ExecuteStartPump(System.Object)">
            <summary>
            starts the pump for the specified number of revs
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.ExecuteStartPumpContinuous(System.Object)">
            <summary>
            starts the pump continuously
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MasterflexLSDigitalPumpInstrumentViewModel.ExecuteStopPump(System.Object)">
            <summary>
            Stops the pump
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SicEC1EngraverInstrumentViewModel">
            <summary>
            View model for the SIC EC1 Engraver user control 
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SicEC1EngraverInstrumentViewModel.Engraver">
            <summary>Reference to the instrument under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SicEC1EngraverInstrumentViewModel.TextToEngrave">
            <summary>
            Gets or sets the text to engrave.
            </summary>
            <value>The text to engrave.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SicEC1EngraverInstrumentViewModel.TimeoutSeconds">
            <summary>
            Gets or sets the number of seconds before timeout engraving
            </summary>
            <value>The text to engrave.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SicEC1EngraverInstrumentViewModel.EngraveText">
            <summary>Command used to engrave text</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SicEC1EngraverInstrumentViewModel.Home">
            <summary>Command used to home motors</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SicEC1EngraverInstrumentViewModel.#ctor(Labman.Hardware.Instruments.SicEC1EngraverInstrument)">
            <summary>
            Constructor for the engraver control view model, sets the engraver device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SicEC1EngraverInstrumentViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SicEC1EngraverInstrumentViewModel.ExecuteEngraveText(System.Object)">
            <summary>
            Engrave the specified text
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SicEC1EngraverInstrumentViewModel.ExecuteHome(System.Object)">
            <summary>
            Move the motors to the home position
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TecanSmartValveSettingsViewModel">
            <summary>
            View model for the smart valve settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSmartValveSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSmartValveSettingsViewModel.ValveConfigurationEnumValues">
            <summary>
            Property that allows the smart valve configuration enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSmartValveSettingsViewModel.#ctor(Labman.Hardware.Syringes.TecanSmartValve)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">Tecan smart valve device</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TecanSmartValveViewModel">
            <summary>
            View model for the Tecan Smart Valve
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSmartValveViewModel.Valve">
            <summary>Reference to the Valve under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSmartValveViewModel.ValvePosition">
            <summary>
            ValvePosition Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSmartValveViewModel.CurrentValvePosition">
            <summary>
            CurrentValvePosition Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSmartValveViewModel.ExecuteCommand">
            <summary>
            Execute Command to send the valve postioning
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSmartValveViewModel.#ctor(Labman.Hardware.Syringes.TecanSmartValve)">
            <summary>
            Constructor for the Valve control view model, sets the Valve device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSmartValveViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSmartValveViewModel.ExecuteValvePosition(System.Object)">
            <summary>
            Executes command to ExecuteValvePosition
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TracxerCodeReaderSettingsViewModel">
            <summary>
            The Tracxer Code Reader view model
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TracxerCodeReaderSettingsViewModel.SelectFile">
            <summary>
            Opens a template
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TracxerCodeReaderSettingsViewModel.ApplicationPath">
            <summary>
            Document path
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TracxerCodeReaderSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TracxerCodeReaderSettingsViewModel.#ctor(Labman.Hardware.BarcodeReaders.TracxerCodeReader)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TracxerCodeReaderSettingsViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TracxerCodeReaderSettingsViewModel.ExecuteSelectFile(System.Object)">
            <summary>
            Opens the file picker
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TracxerCodeReaderViewModel">
            <summary>
            The view model for the Tracxer Code Reader
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TracxerCodeReaderViewModel.Result">
            <summary>
            The text for the result box
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TracxerCodeReaderViewModel.StartScan">
            <summary>
            Command to start the scan
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TracxerCodeReaderViewModel.SetLayout">
            <summary>
            Command to start the scan
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TracxerCodeReaderViewModel.SelectedLayout">
            <summary>
            The selected layout
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TracxerCodeReaderViewModel.#ctor(Labman.Hardware.BarcodeReaders.TracxerCodeReader)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TracxerCodeReaderViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TracxerCodeReaderViewModel.ExecuteStartScan(System.Object)">
            <summary>
            Starts a scan
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TracxerCodeReaderViewModel.ExecuteSetLayout(System.Object)">
            <summary>
            Sets the layout
            </summary>
            <param name="args">Command args. Currently unused</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel">
            <summary>View model for the Trinamic settings user control</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel.#ctor(Labman.MotionControl.TrinamicAxis)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel"/></summary>
            <param name="axis">The axis</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel.MicrosteppingResolutions">
            <summary>The avaialble micro-stepping resolutions for this axis</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel.HomeSequenceModes">
            <summary>The available home sequence modes for this axis.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel.MaxCurrent">
            <summary>The maximum current for this axis</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel.BoostSameAsMax">
            <summary>Gets or sets whether the boost current is the same as the max (drive) current for this axis.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel.PositioningModes">
            <summary>The available positioning modes for this axis.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel.UnitModes">
            <summary>The available unit modes for this axis.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel.EncoderModes">
            <summary>The available encoder modes for this axis.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrinamicAxisSettingsViewModel.TrinamicType">
            <summary>The type of trinamic motor controller this axis is attached to.</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TrinamicPD1180ViewModel">
            <summary>
            View model for the SchneiderATV12MotorController user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrinamicPD1180ViewModel.TrinamicMotorController">
            <summary>
            Reference to the MotorController under control
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TrinamicPD1180ViewModel.#ctor(Labman.Hardware.MotorControllers.TrinamicPD1180MotorController)">
            <summary>
            Constructor for the MotorController control view model, sets the MotorController device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.VermesMicroDispenserSettingsViewModel">
            <summary>
            View Model for the Vermes micro dispenser settings user control.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VermesMicroDispenserSettingsViewModel.#ctor(Labman.Hardware.Syringes.VermesMicroDispenser)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">Tecan syringe device</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel">
            <summary>View Model for the Vermes micro dispenser user control.</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel._getInformationCommand">
            <summary>Relay command object for the GetInformation command</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel._openCommand">
            <summary>Relay command object for the Open command</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel._closeCommand">
            <summary>Relay command object for the Close command</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel._getParametersCommand">
            <summary>Relay command object for the GetParameters command</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel._setParametersCommand">
            <summary>Relay command object for the SetParameters command</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.#ctor(Labman.Hardware.Syringes.VermesMicroDispenser)">
            <summary>Constructor for the Syringe control view model, sets the Syringe device in use</summary>
            <param name="device">The device under control</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.Syringe">
            <summary>Reference to the Syringe under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.VolumeDemand">
            <summary>VolumeDemand Property</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.Speed">
            <summary>Speed Property</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.Volume">
            <summary>Volume Property</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.Information">
            <summary>The status information about the dispenser.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.Dispense">
            <summary>Command used to Dispense</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.GetInformation">
            <summary>Command object used for executing commands using binding: {Binding GetInformation}</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.Open">
            <summary>Command object used for executing commands using binding: {Binding Open}</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.Close">
            <summary>Command object used for executing commands using binding: {Binding Close}</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.PulseParameters">
            <summary>The pulse parameters currently in use by the user.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.TriggerMode">
            <summary>The triggering mode.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.RisingTime">
            <summary>The rising time.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.OpenTime">
            <summary>The open time.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.FallingTime">
            <summary>The falling time.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.Cycles">
            <summary>The number of cycles.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.DelayTime">
            <summary>The delay between cycles.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.NeedleLift">
            <summary>The needles lift percentage</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.GetParameters">
            <summary>Command object used for executing commands using binding: {Binding GetParameters}</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.SetParameters">
            <summary>Command object used for executing commands using binding: {Binding SetParameters}</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.ExecuteGetParameters(System.Object)">
            <summary>Executes the GetParameters command</summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.ExecuteSetParameters(System.Object)">
            <summary>Executes the SetParameters command</summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.ExecuteOpen(System.Object)">
            <summary>Executes the Open command</summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.ExecuteClose(System.Object)">
            <summary>Executes the Close command</summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.ExecuteGetInformation(System.Object)">
            <summary>Executes the GetInformation command</summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.ExecuteDispense(System.Object)">
            <summary>Executes command to dispense</summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.CanExecute(System.Object)">
            <summary>Can execute function for this view</summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VermesMicroDispenserViewModel.TimerTick(System.Object)">
            <summary>This method is periodically called by the update timer</summary>
            <param name="state">Timer state field (not used)</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.Videojet1550InstrumentSettingsUserControlViewModel">
            <summary>
            Class to interact with the settings control for the Videojet 1550 printer
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentSettingsUserControlViewModel.FieldNames">
            <summary>
            Gets the field names.
            </summary>
            <value>
            The field names.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentSettingsUserControlViewModel.NameToAdd">
            <summary>
            Gets or sets the name to add.
            </summary>
            <value>
            The name to add.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentSettingsUserControlViewModel.AddName">
            <summary>
            Gets the add name command.
            </summary>
            <value>
            The name of the add.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentSettingsUserControlViewModel.ClearNames">
            <summary>
            Gets the clear names method.
            </summary>
            <value>
            The clear names.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentSettingsUserControlViewModel.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>
            The settings.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentSettingsUserControlViewModel.#ctor(Labman.Hardware.Instruments.Videojet1550Instrument)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentSettingsUserControlViewModel.ExecuteAddName(System.Object)">
            <summary>
            Executes the add name method.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentSettingsUserControlViewModel.ExecuteClearNames(System.Object)">
            <summary>
            Executes the clear names method.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel">
            <summary>
            View model for the control to interact with the Videojet 1550 printer
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.#ctor(Labman.Hardware.Instruments.Videojet1550Instrument)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel"/> class.
            </summary>
            <param name="printer">The printer.</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.SendString">
            <summary>
            Gets the send string method.
            </summary>
            <value>
            The send string.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.Print">
            <summary>
            Gets the print method.
            </summary>
            <value>
            The print.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.AddText">
            <summary>
            Gets the add text method.
            </summary>
            <value>
            The add text.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.AddJob">
            <summary>
            Gets the add job method.
            </summary>
            <value>
            The add job.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.ClearText">
            <summary>
            Gets the clear text method.
            </summary>
            <value>
            The clear text.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.Run">
            <summary>
            Gets the run method.
            </summary>
            <value>
            The run.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.CheckIfRunning">
            <summary>
            Gets the check if running method.
            </summary>
            <value>
            The check if running.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.CheckForFaults">
            <summary>
            Gets the check for faults method.
            </summary>
            <value>
            The check for faults.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.Test">
            <summary>
            Gets the test method.
            </summary>
            <value>
            The test.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.TextToAdd">
            <summary>
            Gets or sets the text to add.
            </summary>
            <value>
            The text to add.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.JobName">
            <summary>
            Gets or sets the name of the job.
            </summary>
            <value>
            The name of the job.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.TextToPrint">
            <summary>
            Gets or sets the text to print.
            </summary>
            <value>
            The text to print.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.FieldData">
            <summary>
            Gets or sets the field data.
            </summary>
            <value>
            The field data.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.ExecuteSendString(System.Object)">
            <summary>
            Executes the send string method.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.ExecutePrint(System.Object)">
            <summary>
            Executes the print method.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.ExecuteRun(System.Object)">
            <summary>
            Executes the run method.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.ExecuteCheckForFaults(System.Object)">
            <summary>
            Executes the check for faults method.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.ExecuteCheckIfRunning(System.Object)">
            <summary>
            Executes the check if running method.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.ExecuteAddText(System.Object)">
            <summary>
            Executes the add text method.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.ExecuteAddJob(System.Object)">
            <summary>
            Executes the add job method.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.ExecuteClearText(System.Object)">
            <summary>
            Executes the clear text method.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.Videojet1550InstrumentUserControlViewModel.ExecuteTest(System.Object)">
            <summary>
            Tests the SendString method and the comms.
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.UpdaterViewModelBase">
            <summary>
            A ViewModel that has an updater timer action that only ticks when the ViewModel is visible.
            Corresponding views must have the <see cref="F:Labman.UserInterface.AttachedProperties.Visibility.NotifyOnVisibilityChangedProperty"/> set to true,
            in order to notify this object of changes in visibility.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.UpdaterViewModelBase.#ctor(System.Int32)">
            <summary>Creats a new instance of <see cref="T:Labman.UserInterface.ViewModels.UpdaterViewModelBase"/></summary>
            <param name="updatePeriod">The period between updates in milliseconds, when this ViewModel is visible, according to <see cref="P:Labman.UserInterface.ViewModels.VisibleViewModelBase.IsVisible"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.UpdaterViewModelBase.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.UpdaterViewModelBase"/> with no updater action and a default update period of 1000ms</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.UpdaterViewModelBase.UpdaterAction">
            <summary>The updater action that is run by this ViewModel on a timer whenever the <see cref="P:Labman.UserInterface.ViewModels.VisibleViewModelBase.IsVisible"/> property is true</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.UpdaterViewModelBase.Dispose">
            <summary>Disposes of unmanaged resources.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.UpdaterViewModelBase.OnShow">
            <summary>When the ViewModel becomes visible, we start the updater timer if an updater action has been defined.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.UpdaterViewModelBase.OnHide">
            <summary>When the ViewModel is no longer visible, we stop the updater timer.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.UpdaterViewModelBase.StartUpdating">
            <summary>Calls the update action once and starts the timer.</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.VisibleViewModelBase">
            <summary>
            A ViewModel that knows whether it is currently being displayed by views in the application.
            Corresponding views must have the <see cref="F:Labman.UserInterface.AttachedProperties.Visibility.NotifyOnVisibilityChangedProperty"/> set to true,
            in order to notify this object of changes in visibility.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.VisibleViewModelBase.IsVisible">
            <summary>A property indicating whether this ViewModel has visible views attached to it.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VisibleViewModelBase.InvokeShown">
            <summary>Internal method that allows the <see cref="F:Labman.UserInterface.AttachedProperties.Visibility.NotifyOnVisibilityChangedProperty"/> to inform this ViewModel that it is visible</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VisibleViewModelBase.InvokeHidden">
            <summary>Internal method that allows the <see cref="F:Labman.UserInterface.AttachedProperties.Visibility.NotifyOnVisibilityChangedProperty"/> to inform this ViewModel that it is no longer visible</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VisibleViewModelBase.OnShow">
            <summary>Override method, invoked when this ViewModel becomes visible.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VisibleViewModelBase.OnHide">
            <summary>Override method, invoked when this ViewModel becomes invisible.</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel">
            <summary>
            View model for the Waters back pressure regulator
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.Regulator">
            <summary>Reference to the hardware under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.Interval">
            <summary>
            Respresents the interval at which the device sends data to the pc.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.RunAtPressure">
            <summary>
            Set the pressure used when the run at command is used.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.Pressure">
            <summary>
            The pressure
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.CurrentPressure">
            <summary>
            Represnet the current pressure
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.ValveTemperature">
            <summary>
            The temperature of the valve
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.CurrentValveTemperature">
            <summary>
            The temperature of the valve
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.ExternalHeaterTemperature">
            <summary>
            The external valve temperature
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.CurrentExternalHeaterTemperature">
            <summary>
            The temperature of the external heater (if connected)
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.NeedlePosition">
            <summary>
            Represents the needle position of the device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.RunAt">
            <summary>Command used to start the device at the specified pressure</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.Stop">
            <summary>Command used to stop the device</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.SetPressure">
            <summary>Sets the pressure of the device</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.SetValveTemperature">
            <summary>Sets the valve temperature of the device</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.SetExternalHeaterTemperature">
            <summary>CoSets the external heater temperature</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.SetNeedlePosition">
            <summary>
            Set needle position on device
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.UpdateValues">
            <summary>Command used to updat the values on the hardware config window.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.#ctor(Labman.Hardware.Instruments.WatersBackPressureRegulator)">
            <summary>
            Constructor for the regulaotor view model, sets the regulator device in use
            </summary>
            <param name="regulator">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.ExecuteRunAt(System.Object)">
            <summary>
            Starts the automated pressure regulator at the set pressure
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.ExecuteStop(System.Object)">
            <summary>
            Stops the pressure regulation
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.ExecuteSetPressure(System.Object)">
            <summary>
            Sets the pressure oif the device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.ExecuteSetValveTemperature(System.Object)">
            <summary>
            Sets the valve temperature of the device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.ExecuteSetExternalHeaterTemperature(System.Object)">
            <summary>
            Stets the external heater temperature of the device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.ExecuteSetNeedlePosition(System.Object)">
            <summary>
            Set needle position on device
            </summary>
            <param name="args">Command Arguments. This is currently unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WatersBackPressureRegulatorViewModel.ExecuteUpdateValues(System.Object)">
            <summary>
            Starts the automated pressure regulator at the set pressureUpdates the value in the hardware config window</summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleSettingsUserControlViewModel">
            <summary>
            View model for the PID settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleSettingsUserControlViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleSettingsUserControlViewModel.#ctor(Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleSettingsUserControlViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.OmronE5ZNSettingsViewModel">
            <summary>
            View model for the PID settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNSettingsViewModel.UnitNumberList">
            <summary>
            Possible unit addresses
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNSettingsViewModel.ResolutionList">
            <summary>
            Gets or sets the resolution list.
            </summary>
            <value>
            The resolution list.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNSettingsViewModel.#ctor(Labman.Hardware.PIDs.OmronE5ZNPID)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.OmronE5ZNViewModel">
            <summary>
            View model for the PID user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.PID">
            <summary>Reference to the device under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CurrentTemperatureChOne">
            <summary>
            Settings Property for Ch1
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CurrentTemperatureChTwo">
            <summary>
            Settings Property for Ch2
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CurrentSetPointChOne">
            <summary>
            Settings Property for Ch1
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CurrentSetPointChTwo">
            <summary>
            Settings Property for Ch2
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.TemperatureSetPointChOne">
            <summary>
            Settings Property on Ch1
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.TemperatureSetPointChTwo">
            <summary>
            Settings Property on Ch2
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.GetTemperatureChOne">
            <summary>
            Command used to get the current temperature on Ch1
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.GetTemperatureChTwo">
            <summary>
            Command used to get the current temperature on Ch2
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.GetSetPointChOne">
            <summary>
            Command used to get the current set point on Ch1
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.GetSetPointChTwo">
            <summary>
            Command used to get the current set point on Ch2
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.SetTemperatureChOne">
            <summary>
            Command used to set the PID temperature on Ch1
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.SetTemperatureChTwo">
            <summary>
            Command used to set the PID temperature on Ch2.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.StartChOne">
            <summary>
            Command used to start the PID on Ch1.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.StartChTwo">
            <summary>
            Command used to start the PID on Ch2.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.StopChOne">
            <summary>
            Command used to stop the PID on Ch1.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.StopChTwo">
            <summary>
            Command used to stop the PID on Ch2.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.#ctor(Labman.Hardware.PIDs.OmronE5ZNPID)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CanExecuteCh1(System.Object)">
            <summary>
            Determines if channel ones usercontrol can be used.
            </summary>
            <param name="args">Not used.</param>
            <returns>True if channel one's usercontrol can be used.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CanExecuteCh2(System.Object)">
            <summary>
            Determines if channel twos usercontrol can be used.
            </summary>
            <param name="args">Not used.</param>
            <returns>True if channel two's usercontrol can be used.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CanExecuteStartCh1(System.Object)">
            <summary>
            Determines if channel one can be activated.
            </summary>
            <param name="args">Not used.</param>
            <returns>True if channel one can be activated.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CanExecuteStartCh2(System.Object)">
            <summary>
            Determines if channel two can be activated.
            </summary>
            <param name="args">Not used.</param>
            <returns>True if channel two can be activated.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CanExecuteStopCh1(System.Object)">
            <summary>
            Determines if channel one can be deactivated.
            </summary>
            <param name="args">Not used.</param>
            <returns>True if channel one can be deactivated.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.CanExecuteStopCh2(System.Object)">
            <summary>
            Determines if channel two can be deactivated.
            </summary>
            <param name="args">Not used.</param>
            <returns>True if channel two can be deactivated.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.ExecuteGetTemperatureCh1(System.Object)">
            <summary>
            Get the current temperature on channel 1.
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.ExecuteGetTemperatureCh2(System.Object)">
            <summary>
            Get the current temperature on channel 2
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.ExecuteGetSetPointCh1(System.Object)">
            <summary>
            Get the current set point temperature on channel 1
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.ExecuteGetSetPointCh2(System.Object)">
            <summary>
            Get the current set point temperature on channel 2
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.ExecuteSetTemperatureCh1(System.Object)">
            <summary>
            Set the PID temperature on channel 1
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.ExecuteSetTemperatureCh2(System.Object)">
            <summary>
            Set the PID temperature on channel 2
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.ExecuteStartCh1(System.Object)">
            <summary>
            Starts channel one of this PID.
            </summary>
            <param name="args">Not used.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.ExecuteStartCh2(System.Object)">
            <summary>
            Starts channel two of this PID.
            </summary>
            <param name="args">Not used.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.ExecuteStopCh1(System.Object)">
            <summary>
            Stops channel one of this PID.
            </summary>
            <param name="args">Not used.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OmronE5ZNViewModel.ExecuteStopCh2(System.Object)">
            <summary>
            Stops channel two of this PID.
            </summary>
            <param name="args">Not used.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.OrionStarA211ViewModel">
            <summary>
            ViewModel for use with OrionStarA211UserControl.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OrionStarA211ViewModel.OrionStarA211">
            <summary>Reference to the Orion Star A211 under control.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OrionStarA211ViewModel.pH">
            <summary>
            Gets or sets the pH.
            </summary>
            <value>
            The p h.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OrionStarA211ViewModel.GetpHCommand">
            <summary>
            Gets the get pH command.
            </summary>
            <value>
            The get pH command.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OrionStarA211ViewModel.#ctor(Labman.Hardware.Instruments.OrionStarA211Instrument)">
            <summary>
            Constructor for the Spectrophotometer control view model, sets the Spectrophotometer device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleUserControlViewModel">
            <summary>
            ViewModel for use with Weedtech Counter Module user control.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleUserControlViewModel.WeedtechWtpctmCounterInstrument">
            <summary>
            Gets or sets the weedtech WTPCTM counter instrument.
            </summary>
            <value>The weedtech WTPCTM counter instrument.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleUserControlViewModel.CurrentCount">
            <summary>
            Gets or sets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleUserControlViewModel.UserCount">
            <summary>
            Gets or sets the user count.
            </summary>
            <value>The user count.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleUserControlViewModel.GetCount">
            <summary>
            Gets the get count command.
            </summary>
            <value>The get count command.</value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleUserControlViewModel.SetCount">
            <summary>
            Gets the set count command.
            </summary>
            <value>The set count command.</value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.WeedtechWtpctmCounterModuleUserControlViewModel.#ctor(Labman.Hardware.Instruments.WeedtechWtpctmCounterInstrument)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.OrionVersaStarViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.OrionVersaStarViewModel">
            <summary>
            ViewModel for use with OrionVersaStar user control.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.OrionVersaStarViewModel._measurements">
            <summary>
            List of measurements.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OrionVersaStarViewModel.OrionVersaStar">
            <summary>Reference to the Orion Star A211 under control.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OrionVersaStarViewModel.Measurements">
            <summary>
            Gets or sets the measurements.
            </summary>
            <value>
            The measurements.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OrionVersaStarViewModel.GetMeasurementsCommand">
            <summary>
            Gets the get pH command.
            </summary>
            <value>
            The get pH command.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OrionVersaStarViewModel.#ctor(Labman.Hardware.Instruments.OrionVersaStarInstrument)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.OrionVersaStarViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RobotArmSettingsViewModel">
            <summary>
            Custom view model for the Robot Arm Settings window
            </summary>
            <seealso cref="T:Labman.UserInterface.ViewModelBase" />
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RobotArmSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RobotArmSettingsViewModel.#ctor(Labman.Hardware.RobotArms.RobotArm)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RobotArmViewModel">
            <summary>Class that implements a custom view model for the Robot Arm window</summary>
            <seealso cref="T:Labman.UserInterface.ViewModelBase"/>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RobotArmViewModel.RobotArm">
            <summary>Reference to the RobotArm under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RobotArmViewModel.ProgramName">
            <summary>Gets or sets the name of the program.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RobotArmViewModel.RunProgram">
            <summary>Command used to run program</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RobotArmViewModel.ServosOn">
            <summary>Gets the servos on.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RobotArmViewModel.ServosOff">
            <summary>Gets the servos off.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RobotArmViewModel.#ctor(Labman.Hardware.RobotArms.RobotArm)">
            <summary>Constructor for the RobotArm control view model, sets the RobotArm device in use</summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RobotArmViewModel.ExecuteRunProgram">
            <summary>Executes the run program.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RobotArmViewModel.ExecuteRunServoOn">
            <summary>Executes the run servo on.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RobotArmViewModel.ExecuteRunServoOff">
            <summary>Executes the run servo off.</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ServotronixAxisSettingsViewModel">
            <summary>
            View Model for the axis settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ServotronixAxisSettingsViewModel.Settings">
            <summary>The servotronix axis settings</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ServotronixAxisSettingsViewModel.HomeTypeEnumValues">
            <summary>
            Property that allows the home type enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ServotronixAxisSettingsViewModel.#ctor(Labman.MotionControl.ServotronixAxis)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="axis">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SetupWizardViewModel">
            <summary>
            View model for the Setup Wizard window
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.SetupWizardViewModel._nextButtonCommand">
            <summary>
            Relay command object for the NextCommand command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardViewModel.NextButton">
            <summary>
            Command object used for executing commands using binding: {Binding NextCommand}
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.SetupWizardViewModel._cancelButtonCommand">
            <summary>
            Relay command object for the CancelButton command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardViewModel.CancelButton">
            <summary>
            Command object used for executing commands using binding: {Binding CancelButton}
            </summary>
        </member>
        <member name="E:Labman.UserInterface.ViewModels.SetupWizardViewModel.RequestClose">
            <summary>
            Event used to close the window.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardViewModel.StepNumber">
            <summary>
            The current step number in use
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardViewModel.WizardControls">
            <summary>
            A collection of controls to display in the wizard window
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SetupWizardViewModel.#ctor(System.Collections.Generic.List{Labman.UserInterface.ViewModels.SetupWizardStep})">
            <summary>
            Constructor for the wizard, shows the first step
            </summary>
            <param name="steps">The steps.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SetupWizardViewModel.CanExecuteNextButton(System.Object)">
            <summary>
            Checks if the NextButton command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SetupWizardViewModel.ExecuteNextButton(System.Object)">
            <summary>
            Executes the NextButton command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SetupWizardViewModel.CanExecuteCancelButton(System.Object)">
            <summary>
            Checks if the CancelButton command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SetupWizardViewModel.ExecuteCancelButton(System.Object)">
            <summary>
            Executes the CancelButton command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SetupWizardViewModel.ShowStepCommands(System.Int32)">
            <summary>
            Show the controls for a step
            </summary>
            <param name="step">Step Number</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SetupWizardStep">
            <summary>
            Class that represents a single step in the wizard
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardStep.ControlsForThisStep">
            <summary>
            Gets or sets the controls for this step.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SetupWizardStep.#ctor(System.Collections.ObjectModel.ObservableCollection{Labman.UserInterface.ViewModels.SetupWizardControlBaseViewModel})">
            <summary>
            Create a new instance of the setup wizard step class
            </summary>
            <param name="controlsForThisStep">The controls to display for this step</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SetupWizardControlBaseViewModel">
            <summary>
            Abstract control view model
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SetupWizardTitleViewModel">
            <summary>
            Class that expands the base view model for a string parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardTitleViewModel.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SetupWizardInstructionViewModel">
            <summary>
            Class that expands the base view model for a string parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardInstructionViewModel.Instruction">
            <summary>
            Gets or sets the instruction.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SetupWizardImageViewModel">
            <summary>
            Class that expands the base view model for an image
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardImageViewModel.ImageSource">
            <summary>
            Gets or sets the image source.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardImageViewModel.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardImageViewModel.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SetupWizardVideoViewModel">
            <summary>
            Class that expands the base view model for a video
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardVideoViewModel.VideoSource">
            <summary>
            Gets or sets the video source.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardVideoViewModel.Width">
            <summary>
            Gets or sets the width.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardVideoViewModel.Height">
            <summary>
            Gets or sets the height.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SetupWizardActionViewModel">
            <summary>
            Class that expands the base view model for a string parameter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardActionViewModel.ButtonText">
            <summary>
            Gets or sets the button text.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardActionViewModel.ActionMethod">
            <summary>
            Gets or sets the action method.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.SetupWizardActionViewModel._actionCommand">
            <summary>
            Relay command object for the Action command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SetupWizardActionViewModel.Action">
            <summary>
            Command object used for executing commands using binding: {Binding Action}
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SetupWizardActionViewModel.CanExecuteAction(System.Object)">
            <summary>
            Checks if the Action command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SetupWizardActionViewModel.ExecuteAction(System.Object)">
            <summary>
            Executes the Action command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeSettingsViewModel">
            <summary>
            View model for the syringe settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeSettingsViewModel.#ctor(Labman.Hardware.Syringes.TecanAirDisplacementPipettor)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">Tecan syringe device</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel">
            <summary>
            View model for the syringe user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.Syringe">
            <summary>Reference to the Syringe under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.Position">
            <summary>
            Position Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.VolumeDemand">
            <summary>
            VolumeDemand Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.Speed">
            <summary>
            Speed Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.Volume">
            <summary>
            Volume Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.Stop">
            <summary>Command used to Stop</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.CheckTipLoaded">
            <summary>Command used to CheckTipLoaded</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.DetectLiquid">
            <summary>Command used to DetectLiquid</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.Move">
            <summary>Command used to Move</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.EjectTip">
            <summary>Command used to EjectTip</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.ResetAndHome">
            <summary>Command used to ResetAndHome</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.Aspirate">
            <summary>Command used to Aspirate</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.Dispense">
            <summary>Command used to Dispense</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.SetSpeed">
            <summary>Command used to set speed</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.#ctor(Labman.Hardware.Syringes.TecanAirDisplacementPipettor)">
            <summary>
            Constructor for the Syringe control view model, sets the Syringe device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.ExecuteStop(System.Object)">
            <summary>
            Executes command to ExecuteStop
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.ExecuteCheckTipLoaded(System.Object)">
            <summary>
            Executes command to ExecuteCheckTipLoaded
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.ExecuteDetectLiquid(System.Object)">
            <summary>
            Executes command to ExecuteDetectLiquid
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.ExecuteMove(System.Object)">
            <summary>
            Executes command to ExecuteMove
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.ExecuteEjectTip(System.Object)">
            <summary>
            Executes command to ExecuteEjectTip
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.ExecuteResetAndHome(System.Object)">
            <summary>
            Executes command to ExecuteResetAndHome
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.ExecuteAspirate(System.Object)">
            <summary>
            Executes command to aspirate
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.ExecuteDispense(System.Object)">
            <summary>
            Executes command to dispense
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanAirDisplacementPipettorSyringeViewModel.ExecuteSetSpeed(System.Object)">
            <summary>
            Executes command to set syringe speed
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TrioMotionMotorControllerViewModel">
            <summary>
            View model for the Trio Motion motor controller user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrioMotionMotorControllerViewModel.TrioMotionMotorController">
            <summary>Reference to the MotorController under control</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TrioMotionMotorControllerViewModel.#ctor(Labman.Hardware.MotorControllers.TrioMotionMotorController)">
            <summary>
            Constructor for the MotorController control view model, sets the MotorController device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TrioMotionMotorControllerViewModel.CanExecute(System.Object)">
            <summary>
            Method used by command binding to determine if a command can execute.
            </summary>
            <param name="param">N/A.</param>
            <returns>bool, command can execute, false otherwise.</returns>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TrioMotionMotorControllerViewModel.ReadInputCommand">
            <summary>
            Gets the read input command for binding with a read input button.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TrioMotionMotorControllerViewModel.ExecuteReadInputCommand(System.Object)">
            <summary>
            Method that is executed when the aqcuire spectra command is invoked.
            </summary>
            <param name="param">N/A.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FestoValveBankIODeviceSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FestoValveBankIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FestoValveBankIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.FestoCANValveBankIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RecirculatingCoolerSettingsViewModel">
            <summary>
            View Model for a Recirculating Cooler Settings window
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerSettingsViewModel.Settings">
            <summary>
            Settings Property.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RecirculatingCoolerSettingsViewModel.#ctor(Labman.Hardware.RecirculatingCoolers.RecirculatingCooler)">
            <summary>
            Constructor for the view model, sets the device in use.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CentrifugeSettingsViewModel">
            <summary>
            View model for the centrifuge settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeSettingsViewModel.#ctor(Labman.Hardware.Centrifuges.Centrifuge)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CentrifugeViewModel">
            <summary>
            View model for the centrifuge user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeViewModel.Centrifuge">
            <summary>Reference to the Centrifuge under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeViewModel.Speed">
            <summary>
            This property exposes the speed of the centrifuge
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeViewModel.Start">
            <summary>Command used to start the centrifuge</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeViewModel.Stop">
            <summary>Command used to stop the centrifuge</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CentrifugeViewModel.SetSpeed">
            <summary>Command used to set the centrifuge speed</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeViewModel.#ctor(Labman.Hardware.Centrifuges.Centrifuge)">
            <summary>
            Constructor for the centrifuge control view model, sets the centrifuge device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeViewModel.ExecuteStart(System.Object)">
            <summary>
            Starts the centrifuge
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeViewModel.ExecuteStop(System.Object)">
            <summary>
            Stops the centrifuge
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CentrifugeViewModel.ExecuteSetSpeed(System.Object)">
            <summary>
            Sets the centrifuge speed
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel">
            <summary>
            View model for the cool muscle motor controller user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.CoolMuscleMotorController">
            <summary>Reference to the MotorController under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.CurrentSpeed">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.CurrentTorque">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.SwitchOn">
            <summary>Command used to SwitchOn</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.SwitchOff">
            <summary>Command used to SwitchOff</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.GetCurrentSpeed">
            <summary>Command used to get the current speed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.GetCurrentTorque">
            <summary>Command used to get the current speed</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.#ctor(Labman.Hardware.MotorControllers.CoolmuscleInterfaceMotorController)">
            <summary>
            Constructor for the MotorController control view model, sets the MotorController device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.ExecuteSwitchOutputOn(System.Object)">
            <summary>
            Execute the switch on command
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.ExecuteSwitchOutputOff(System.Object)">
            <summary>
            Execute the switch off command
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.ExcuteGetCurrentSpeed(System.Object)">
            <summary>
            Execute the get current speed command
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CoolmuscleMotorControllerViewModel.ExcuteGetCurrentTorque(System.Object)">
            <summary>
            Execute the get current torque command
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CameraSettingsViewModel">
            <summary>
            View model for the Camera settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CameraSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CameraSettingsViewModel.#ctor(Labman.Hardware.Cameras.Camera)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CameraViewModel">
            <summary>
            View model for the Camera user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CameraViewModel.Camera">
            <summary>Reference to the Camera under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CameraViewModel.FileName">
            <summary>
            File name to save the image to
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CameraViewModel.Exposure">
            <summary>
            Exposure time for camera in ms
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CameraViewModel.CurrentImage">
            <summary>
            Current image
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CameraViewModel.Images">
            <summary>
            The images that have been taken.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.CameraViewModel._captureImageCommand">
            <summary>
            Relay command object for the CaptureImage command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CameraViewModel.CaptureImage">
            <summary>
            Command object used for executing commands using binding: {Binding CaptureImage}
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CameraViewModel.SetExposure">
            <summary>
            Command to set the exposure time of the camera
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CameraViewModel.SaveImage">
            <summary>
            Command to save the current image
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CameraViewModel.#ctor(Labman.Hardware.Cameras.Camera)">
            <summary>
            Constructor for the Camera control view model, sets the Camera device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CameraViewModel.CanExecuteCaptureImage(System.Object)">
            <summary>
            Checks if the CaptureImage command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CameraViewModel.ExecuteCaptureImage(System.Object)">
            <summary>
            Executes the CaptureImage command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CameraViewModel.CanExecuteSetExposure(System.Object)">
            <summary>
            Indicates if exposure of camera can be set
            </summary>
            <param name="args">not used</param>
            <returns>true if the system is initialised</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CameraViewModel.ExecuteSetExposure(System.Object)">
            <summary>
            Sets the exposure time of the camera
            </summary>
            <param name="args">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CameraViewModel.CanExecuteSaveImage(System.Object)">
            <summary>
            Indicates if the image can be saved
            </summary>
            <param name="args">not used</param>
            <returns>true if image is not null and save name is not empty</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CameraViewModel.ExecuteSaveImage(System.Object)">
            <summary>
            Saves the current image
            </summary>
            <param name="args">not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CameraViewModel.Dispose">
            <summary>
            Dispose of unmanaged resources.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ADAMIODeviceSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ADAMIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ADAMIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.ADAMIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AnalogInputViewModel">
            <summary>
            View Model for the Analog I/O Control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.AnalogInputViewModel.DefaultRefreshInterval">
            <summary>
            The input refresh interval - Due to reading the inputs one at a time the refresh must be fairly slow
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogInputViewModel.Input">
            <summary>The input we are working with</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogInputViewModel.InputValue">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogInputViewModel.Mileage">
            <summary>
            The mileage of the input
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogInputViewModel.#ctor(Labman.IO.AnalogInput)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.AnalogInputViewModel"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogInputViewModel.#ctor(Labman.IO.AnalogInput,System.Int32)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="input">The input.</param>
            <param name="refreshInterval">The refresh interval.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogInputViewModel.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogInputViewModel.TimerTick(System.Object)">
            <summary>
            This method is periodically called by the update timer
            </summary>
            <param name="state">Timer state field (not used)</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AnalogOutputViewModel">
            <summary>
            View Model for the I/O Control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogOutputViewModel.Output">
            <summary>The output we are working with</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogOutputViewModel.NewValueValid">
            <summary>
            Gets or sets whether the new value is valid.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogOutputViewModel.NewValue">
            <summary>
            Gets or sets the new value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogOutputViewModel.Mileage">
            <summary>
            The mileage of the output
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AnalogOutputViewModel.SetValue">
            <summary>Command used to set the value</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogOutputViewModel.#ctor(Labman.IO.AnalogOutput)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogOutputViewModel.#ctor(Labman.IO.AnalogOutput,System.Int32)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="output">The output.</param>
            <param name="refreshInterval">The refresh interval.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogOutputViewModel.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogOutputViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogOutputViewModel.ExecuteSetValue(System.Object)">
            <summary>
            Execute the switch command
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AnalogOutputViewModel.TimerTick(System.Object)">
            <summary>
            This method is periodically called by the update timer
            </summary>
            <param name="state">Timer state field (not used)</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsViewModel">
            <summary>
            View model for the Festo CPX CoDeSys Embedded Controller IO Device settings user control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsViewModel._device">
            <summary>
            The hardware IO device
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsViewModel._settings">
            <summary>
            The device settings
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.FestoCPXCoDeSysEmbeddedControllerIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.FestoCPXCoDeSysEmbeddedControllerIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.LumbergFieldBusIODeviceSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.LumbergFieldBusIODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.LumbergFieldBusIODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.LumbergFieldBusIODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.MDriveMotorControllerViewModel">
            <summary>
            View model for the motor controller user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MDriveMotorControllerViewModel.MotorController">
            <summary>Reference to the MotorController under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MDriveMotorControllerViewModel.AvailableBaudRates">
            <summary>
            Property that allows the baud rate enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MDriveMotorControllerViewModel.NodeAddress">
            <summary>
            Gets or sets the node address.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MDriveMotorControllerViewModel.BaudRate">
            <summary>
            Gets or sets the baud rate.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.MDriveMotorControllerViewModel._writeSettingsCommand">
            <summary>
            Relay command object for the WriteSettings command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MDriveMotorControllerViewModel.WriteSettings">
            <summary>
            Command object used for executing commands using binding: {Binding WriteSettings}
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MDriveMotorControllerViewModel.#ctor(Labman.Hardware.MotorControllers.MotorController)">
            <summary>
            Constructor for the MotorController control view model, sets the MotorController device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MDriveMotorControllerViewModel.CanExecuteWriteSettings(System.Object)">
            <summary>
            Checks if the WriteSettings command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MDriveMotorControllerViewModel.ExecuteWriteSettings(System.Object)">
            <summary>
            Executes the WriteSettings command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel">
            <summary>
            View Model for a Recirculating Cooler Settings window
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.RecirculatingCooler">
            <summary>Reference to the Spectrophotometer under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.WorkingTemperature">
            <summary>
            Gets/sets working temperature.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.ActualTemperature">
            <summary>
            Gets/sets actual temperature.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.ActualExternalTemperature">
            <summary>
            Gets/sets actual temperature.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.Circulating">
            <summary>
            Gets/sets circulating state.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.StatusMessage">
            <summary>
            Gets/sets status message.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.GetWorkingTemperatureCommand">
            <summary>
            Gets the 'GetWorkingTemperature' command for binding on ui.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.SetWorkingTemperatureCommand">
            <summary>
            Gets the 'SetWorkingTemperature' command for binding on ui.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.GetActualTemperatureCommand">
            <summary>
            Gets the 'GetActualTemperature' command for binding on ui.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.GetActualExternalTemperatureCommand">
            <summary>
            Gets the 'GetActualTemperature' command for binding on ui.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.GetCirculatingCommand">
            <summary>
            Gets the 'GetCirculating' command for binding on ui.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.GetStatusMessageCommand">
            <summary>
            Gets the 'GetStatusMessage' command for binding on ui.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.SetCirculatingCommand">
            <summary>
            Gets the 'SwitchCirculator' command for binding on ui.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RecirculatingCoolerViewModel.#ctor(Labman.Hardware.RecirculatingCoolers.RecirculatingCooler)">
            <summary>
            Constructor for the TorqueTransducer control view model, sets the TorqueTransducer device in use.
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SheenTriGlossMeterViewModel">
            <summary>
            View model for the Sheen Tri Gloss Meter
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SheenTriGlossMeterViewModel.Gloss20Degree">
            <summary>
            Gets or sets the 20 degree gloss measurement value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SheenTriGlossMeterViewModel.Gloss60Degree">
            <summary>
            Gets or sets the 60 degree gloss measurement value.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SheenTriGlossMeterViewModel.Gloss85Degree">
            <summary>
            Gets or sets the 85 degree gloss measurement value.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SheenTriGlossMeterViewModel.CanExecute(System.Object)">
            <summary>
            Method used by command binding to determine if a command can execute.
            </summary>
            <param name="param">N/A.</param>
            <returns>bool, command can execute, false otherwise.</returns>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SheenTriGlossMeterViewModel.TakeMeasurementCommand">
            <summary>
            Gets the take measurement command for binding with a take measurement button.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SheenTriGlossMeterViewModel.ExecuteTakeMeasurementCommand(System.Object)">
            <summary>
            Method that is executed when the take measurement command is invoked.
            </summary>
            <param name="param">N/A.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SheenTriGlossMeterViewModel.#ctor(Labman.Hardware.Spectrophotometers.SheenTriGlossmeter)">
            <summary>
            Class construction, intialises members with passed in values.
            </summary>
            <param name="device">Specifies a reference to a SheenTriGlossMeter device that is 
            assigned to a class member for class wide use.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SpectrophotometerSettingsViewModel">
            <summary>
            View model for the Spectrophotometer settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SpectrophotometerSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SpectrophotometerSettingsViewModel.#ctor(Labman.Hardware.Spectrophotometers.Spectrophotometer)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SpectrophotometerViewModel">
            <summary>
            View model for the Spectrophotometer user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SpectrophotometerViewModel.Spectrophotometer">
            <summary>Reference to the Spectrophotometer under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SpectrophotometerViewModel.Spectra">
            <summary>
            Gets or sets the measured spectra.
            </summary>
            <value>
            The spectra.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SpectrophotometerViewModel.CalibrateBlackCommand">
            <summary>
            Gets the calibrate black command.
            </summary>
            <value>
            The calibrate black command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SpectrophotometerViewModel.CalibrateWhiteCommand">
            <summary>
            Gets the calibrate white command.
            </summary>
            <value>
            The calibrate white command.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SpectrophotometerViewModel.MeasureCommand">
            <summary>
            Gets the measure command.
            </summary>
            <value>
            The measure command.
            </value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SpectrophotometerViewModel.#ctor(Labman.Hardware.Spectrophotometers.Spectrophotometer)">
            <summary>
            Constructor for the Spectrophotometer control view model, sets the Spectrophotometer device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CountDownViewModel">
            <summary>
            View model for the countdown timer window
            </summary>
        </member>
        <member name="E:Labman.UserInterface.ViewModels.CountDownViewModel.RequestClose">
            <summary>
            Occurs when [request close].
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.CountDownViewModel._cancelCommand">
            <summary>
            Relay command object for the Cancel command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CountDownViewModel.Cancel">
            <summary>
            Command object used for executing commands using binding: {Binding Cancel}
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CountDownViewModel.CancelVisible">
            <summary>
            Property that exposes the cancel visibility
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CountDownViewModel.CountDownTitle">
            <summary>
            Property that exposes the count down title
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CountDownViewModel.CountDownText">
            <summary>
            Property that exposes the count down text
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CountDownViewModel.#ctor(System.String,System.TimeSpan,System.Action,System.Action,System.Action,System.Boolean)">
            <summary>
            Creates a new instance of the CountDownViewModel class
            </summary>
            <param name="title">The title for the countdown</param>
            <param name="time">The time to count down from</param>
            <param name="completionAction">An action to call when the countdown has completed</param>
            <param name="cancelAction">An action to call when the cancel button is pressed</param>
            <param name="tickAction">An action to call on each tick, can be used to check for an e/stop and close the window for example</param>
            <param name="showCancelButton">Flag to show or hide the cancel button</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CountDownViewModel.TimerTick(System.Object)">
            <summary>
            Method which is called on each timer tick
            </summary>
            <param name="arg">Not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CountDownViewModel.CanExecuteCancel(System.Object)">
            <summary>
            Checks if the Cancel command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CountDownViewModel.ExecuteCancel(System.Object)">
            <summary>
            Executes the Cancel command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.InstrumentViewModel">
            <summary>
            View model for the Intrument user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InstrumentViewModel.Instrument">
            <summary>Reference to the Instrument under control</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InstrumentViewModel.#ctor(Labman.Hardware.Instruments.Instrument)">
            <summary>
            Constructor for the IODevice control view model, sets the IODevice device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.InstrumentSettingsViewModel">
            <summary>
            View model for the Intrument settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InstrumentSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InstrumentSettingsViewModel.#ctor(Labman.Hardware.Instruments.Instrument)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel">
            <summary>
            View model for the SchneiderATV12MotorController user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.SchneiderATV12MotorController">
            <summary>
            Reference to the MotorController under control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.SetpointSpeed">
            <summary>
            Property that exposes the motor speed
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.AccelerationRamp">
            <summary>
            Property that exposes the motor AccelerationRamp
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.DecelerationRamp">
            <summary>
            Property that exposes the motor DecelerationRamp
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.CurrentSpeed">
            <summary>
            Property that exposes the motor speed
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.CurrentMotorCurrent">
            <summary>
            Property that exposes the motor current
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.CurrentMotorPower">
            <summary>
            Property that exposes the motor power
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.MotorEnabledState">
            <summary>
            Property that exposes the motor enabled state
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.MotorFault">
            <summary>
            Property that exposes the motor fault state
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.MotorReversed">
            <summary>
            Property that exposes the motor reversed
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel._startMotorCommand">
            <summary>
            Relay command object for the StartMotor command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.StartMotor">
            <summary>
            Command object used for executing commands using binding: {Binding StartMotor}
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel._stopMotorCommand">
            <summary>
            Relay command object for the StopMotor command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.StopMotor">
            <summary>
            Command object used for executing commands using binding: {Binding StopMotor}
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.#ctor(Labman.Hardware.MotorControllers.SchneiderATV12MotorController)">
            <summary>
            Constructor for the MotorController control view model, sets the MotorController device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.CanExecuteStartMotor(System.Object)">
            <summary>
            Checks if the StartMotor command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.ExecuteStartMotor(System.Object)">
            <summary>
            Executes the StartMotor command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.CanExecuteStopMotor(System.Object)">
            <summary>
            Checks if the StopMotor command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SchneiderATV12MotorControllerViewModel.ExecuteStopMotor(System.Object)">
            <summary>
            Executes the StopMotor command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.StatusWindowViewModel">
            <summary>
            View model for a status window
            </summary>
        </member>
        <member name="E:Labman.UserInterface.ViewModels.StatusWindowViewModel.RequestClose">
            <summary>
            Event that is fired to close the window
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.StatusWindowViewModel._closeButtonCommand">
            <summary>
            Relay command object for the CloseButton command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.StatusWindowViewModel.CloseButton">
            <summary>
            Command object used for executing commands using binding: {Binding CloseButton}
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.StatusWindowViewModel.CloseButtonVisibility">
            <summary>
            Property that exposes the close button visibility
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.StatusWindowViewModel.Title">
            <summary>
            Property that exposes the title
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.StatusWindowViewModel.Status">
            <summary>
            Property that exposes the status
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.StatusWindowViewModel.TextColor">
            <summary>
            The color of the text to display
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.StatusWindowViewModel.#ctor(System.String)">
            <summary>
            Creates a new instance of the StatusWindowViewModel class
            </summary>
            <param name="title">Window title</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.StatusWindowViewModel.CanExecuteCloseButton(System.Object)">
            <summary>
            Checks if the CloseButton command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.StatusWindowViewModel.ExecuteCloseButton(System.Object)">
            <summary>
            Executes the CloseButton command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ToolTipPopupViewModel">
            <summary>
            View Model for the Tooltip Popup User Control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.ToolTipPopupViewModel._dispatcher">
            <summary>UI thread dispatcher object</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.ToolTipPopupViewModel._hideToolTipCommand">
            <summary>
            Relay command object for the HideToolTip command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ToolTipPopupViewModel.HideToolTip">
            <summary>
            Command object used for executing commands using binding: {Binding ShowRobotCommands}
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ToolTipPopupViewModel.AutoCloseDuration">
            <summary>
            Gets or sets the duration of the automatic close.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ToolTipPopupViewModel.IsOpen">
            <summary>
            Gets or sets a value indicating whether this instance is open.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ToolTipPopupViewModel.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ToolTipPopupViewModel.Text">
            <summary>
            Gets or sets the text.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ToolTipPopupViewModel.#ctor">
            <summary>
            Creates a new instance of the view model
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ToolTipPopupViewModel.ExecuteHideToolTips(System.Object)">
            <summary>
            Hides the tooltip window
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ToolTipPopupViewModel.ResetTimer">
            <summary>
            Reset the close timer and show the popup
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ToolTipPopupViewModel.StopTimer">
            <summary>
            Stop the close timer and hide the popup
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ToolTipPopupViewModel.UpdateIsOpen(System.Boolean)">
            <summary>
            Update the IsOpen property, showing or hiding the control
            </summary>
            <param name="value">The new value for this property</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TorqueTransducerSettingsViewModel">
            <summary>
            View model for the Torque Tranducer settings window
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TorqueTransducerSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TorqueTransducerSettingsViewModel.#ctor(Labman.Hardware.TorqueTransducers.TorqueTransducer)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TorqueTransducerViewModel">
            <summary>
            View model for the TorqueTransducer user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TorqueTransducerViewModel.TorqueTransducer">
            <summary>Reference to the Spectrophotometer under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TorqueTransducerViewModel.Torque">
            <summary>
            Gets or sets the torque.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TorqueTransducerViewModel.GetTorqueCommand">
            <summary>
            Gets the get torque command.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TorqueTransducerViewModel.#ctor(Labman.Hardware.TorqueTransducers.TorqueTransducer)">
            <summary>
            Constructor for the TorqueTransducer control view model, sets the TorqueTransducer device in use.
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel">
            <summary>
            View Model for the Axis Control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel._speed">
            <summary>
            The motor speed
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel._startCommand">
            <summary>
            The start motor command
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel._stopCommand">
            <summary>
            The stop motor command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel.Start">
            <summary>
            Command used to start the motor
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel.Stop">
            <summary>
            Command used to stop the motor
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel.TReXMotorController">
            <summary>
            Reference to the MotorController under control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel.AxisNumber">
            <summary>
            Reference to the axis number
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel.Speed">
            <summary>
            Gets or sets the speed.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel.#ctor(Labman.Hardware.MotorControllers.TReXMotorController,System.Int32)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="motorController">The motor controller.</param>
            <param name="axis">The axis number.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel.ExecuteStart(System.Object)">
            <summary>
            Execute the start command
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TReXMotorControllerAxisViewModel.ExecuteStop(System.Object)">
            <summary>
            Execute the stop command
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TReXMotorControllerViewModel">
            <summary>
            View model for the TReX motor controller user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TReXMotorControllerViewModel.TReXMotorController">
            <summary>Reference to the MotorController under control</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TReXMotorControllerViewModel.#ctor(Labman.Hardware.MotorControllers.TReXMotorController)">
            <summary>
            Constructor for the MotorController control view model, sets the MotorController device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel">
            <summary>
            View model for the Sias Ixion Centrifuge user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.Centrifuge">
            <summary>Reference to the Centrifuge under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.RunTime">
            <summary>
            This property exposes the run time when starting the centrifuge
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.RunSpeed">
            <summary>
            This property exposes the run speed when starting the centrifuge
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.RunAcceleration">
            <summary>
            This property exposes the run acceleration when starting the centrifuge
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.Position">
            <summary>
            This property exposes the position to move to when executing the move to position command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.CurrentSpeed">
            <summary>
            This property exposes the current speed of the centrifuge when the get speed command is executed
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.Start">
            <summary>Command used to start the centrifuge</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.Stop">
            <summary>Command used to stop the centrifuge</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.OpenLid">
            <summary>Command used to open the centrifuge lid</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.CloseLid">
            <summary>Command used to close the centrifuge lid</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.MoveToPosition">
            <summary>Command used to move to a centrifuge position</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.GetSpeed">
            <summary>Command used to get the current centrifuge speed</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.#ctor(Labman.Hardware.Centrifuges.SiasIxion)">
            <summary>
            Constructor for the centrifuge control view model, sets the centrifuge device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.ExecuteStart(System.Object)">
            <summary>
            Starts the centrifuge
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.ExecuteStop(System.Object)">
            <summary>
            Stops the centrifuge
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.ExecuteOpenLid(System.Object)">
            <summary>
            Opens the centrifuge lid
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.ExecuteCloseLid(System.Object)">
            <summary>
            Closes the centrifuge lid
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.ExecuteMoveToPosition(System.Object)">
            <summary>
            Moves to position 1 or 2
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SiasIxionCentrifugeViewModel.ExecuteGetSpeed(System.Object)">
            <summary>
            Gets the current centrifuge speed
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.StringInputBoxViewModel">
            <summary>
            View Model for the StringInputBox Control
            </summary>
        </member>
        <member name="E:Labman.UserInterface.ViewModels.StringInputBoxViewModel.RequestClose">
            <summary>
            Event that is raised when we want the view to be closed
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.StringInputBoxViewModel.CancelButton">
            <summary>Command used to cancel the input</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.StringInputBoxViewModel.OkButton">
            <summary>Command used to ok the input</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.StringInputBoxViewModel.ValueAccepted">
            <summary>
            Flag which is set based on whether the value has been accepted
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.StringInputBoxViewModel.CurrentValue">
            <summary>
            Current Input Value
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.StringInputBoxViewModel.Prompt">
            <summary>
            Prompt
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.StringInputBoxViewModel.#ctor(System.String,System.String)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="prompt">The prompt.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.StringInputBoxViewModel.CanExecuteOk(System.Object)">
            <summary>
            Returns true if the OK button can be pressed
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.StringInputBoxViewModel.ExecuteCancel(System.Object)">
            <summary>
            Cancel the dialog
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.StringInputBoxViewModel.ExecuteOk(System.Object)">
            <summary>
            Ok the dialog
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel">
            <summary>
            View model for the environment sensor user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.EnvironmentSensor">
            <summary>Reference to the EnvironmentSensor under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.Temperature">
            <summary>
            This property exposes the last read temperature
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.Humidity">
            <summary>
            This property exposes the last read humidity
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.Pressure">
            <summary>
            This property exposes the last read pressure
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.Nitrogen">
            <summary>
            This property exposes the last read nitrogen content
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.Oxygen">
            <summary>
            This property exposes the last read oxygen content
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.CO2">
            <summary>
            This property exposes the last read CO2 content
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.GetTemperature">
            <summary>Command used to get the temperature</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.GetPressure">
            <summary>Command used to get the pressure</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.GetHumidity">
            <summary>Command used to get the humidity</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.GetNitrogen">
            <summary>Command used to get the Nitrogen</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.GetOxygen">
            <summary>Command used to get the oxygen</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.GetCO2">
            <summary>Command used to get the CO2 content</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.#ctor(Labman.Hardware.EnvironmentSensors.EnvironmentSensor)">
            <summary>
            Constructor for the EnvironmentSensor control view model, sets the EnvironmentSensor device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.ExecuteGetTemperature(System.Object)">
            <summary>
            Gets the temperature from the device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.ExecuteGetHumidity(System.Object)">
            <summary>
            Gets the humidity from the device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.ExecuteGetPressure(System.Object)">
            <summary>
            Gets the pressure from the device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.ExecuteGetNitrogen(System.Object)">
            <summary>
            Gets the nitrogen content from the device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.ExecuteGetOxygen(System.Object)">
            <summary>
            Gets the oxygen content from the device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EnvironmentSensorViewModel.ExecuteGetCO2(System.Object)">
            <summary>
            Gets the CO2 content from the device
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.EnvironmentSensorSettingsViewModel">
            <summary>
            View model for the environment sensor settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.EnvironmentSensorSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.EnvironmentSensorSettingsViewModel.#ctor(Labman.Hardware.EnvironmentSensors.EnvironmentSensor)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel">
            <summary>
            View Model for the IntegerInputBox Control
            </summary>
        </member>
        <member name="E:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.RequestClose">
            <summary>
            Event that is raised when we want the view to be closed
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.CancelButton">
            <summary>Command used to cancel the input</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.OkButton">
            <summary>Command used to ok the input</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.PlusButton">
            <summary>Command used to increase the value</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.MinusButton">
            <summary>Command used to decrease the value</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.ValueAccepted">
            <summary>
            Flag which is set based on whether the value has been accepted
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.CurrentValue">
            <summary>
            Current Input Value
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.Prompt">
            <summary>
            Prompt
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="prompt">The prompt.</param>
            <param name="defaultValue">The default value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.CanExecuteOk(System.Object)">
            <summary>
            Returns true if the OK button can be pressed
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.CanExecutePlus(System.Object)">
            <summary>
            Returns true if the plus button can be pressed
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.CanExecuteMinus(System.Object)">
            <summary>
            Returns true if the minus button can be pressed
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.ExecuteCancel(System.Object)">
            <summary>
            Cancel the dialog
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.ExecuteOk(System.Object)">
            <summary>
            Ok the dialog
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.ExecutePlus(System.Object)">
            <summary>
            Increment the value
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IntegerInputBoxViewModel.ExecuteMinus(System.Object)">
            <summary>
            Decrement the value
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.ProcessStatusViewModel">
            <summary>
            View model for the process status views
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStatusViewModel.ProcessName">
            <summary>
            The assigned process name
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStatusViewModel.IsRunning">
            <summary>
            Flag whether the process is currently running
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStatusViewModel.IsComplete">
            <summary>
            Flag whether the process is complete
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStatusViewModel.CurrentState">
            <summary>
            The current state of this process
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStatusViewModel.RunningIconVisibility">
            <summary>
            Property that exposes the running icon visibility
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStatusViewModel.StoppedIconVisibility">
            <summary>
            Property that exposes the stopped icon visibility
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.ProcessStatusViewModel.CompleteIconVisibility">
            <summary>
            Gets or sets the complete icon visibility.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatusViewModel.#ctor">
            <summary>
            Constructor for the view model
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatusViewModel.ProcessNameChanged(System.String)">
            <summary>
            The assigned process name changed handler
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatusViewModel.StateChanged(System.String)">
            <summary>
            This method is called when the process state changes
            </summary>
            <param name="newState">The new process state</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatusViewModel.RunningChanged(System.Boolean)">
            <summary>
            This method is called when the process running state changes
            </summary>
            <param name="newState">The new runing state</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.ProcessStatusViewModel.UpdateIcons">
            <summary>
            Updates the process state icons.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SoakTestViewModel">
            <summary>
            This class performs a soak test on a set of registered soak testable devices.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.SoakTestViewModel._results">
            <summary>
            Results for each tester
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.SoakTestViewModel._monitorTimer">
            <summary>
            Timer used to monitor running soak tests
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SoakTestViewModel.Results">
            <summary>
            Results for each tester
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SoakTestViewModel.Testers">
            <summary>
            List of registered soak tester objects
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SoakTestViewModel.Start">
            <summary>Command used to start the test</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SoakTestViewModel.Stop">
            <summary>Command used to stop the test</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SoakTestViewModel.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SoakTestViewModel.CanExecuteStart(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SoakTestViewModel.CanExecuteStop(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SoakTestViewModel.PrepareTesters">
            <summary>
            Prepares all testers for running
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SoakTestViewModel.StartSoakTests(System.Object)">
            <summary>
            Start the soak tests running
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SoakTestViewModel.StopSoakTests(System.Object)">
            <summary>
            Stop any active soak testers
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SoakTestViewModel.UpdateResults(System.Object)">
            <summary>
            Monitor and log the current soak test statuses
            </summary>
            <param name="state">Unused</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SoakTestViewModel.AddTest(Labman.SoakTesters.ISoakTester)">
            <summary>
            Add a new tester to the collection
            </summary>
            <param name="tester">The tester to add</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SoakTestViewModel.OnWindowClosing(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Called when window closing.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.ComponentModel.CancelEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.SoakTestViewModel.SoakTestResults">
            <summary>
            Class holds the results for a single tester
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SoakTestViewModel.SoakTestResults.TestName">
            <summary>
            Get / Set the name/description of the test
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SoakTestViewModel.SoakTestResults.CompletedIterations">
            <summary>
            Get the number of completed iterations
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SoakTestViewModel.SoakTestResults.ErroredIterations">
            <summary>
            Get the number of iterations that failed or caused an error
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.SoakTestViewModel.SoakTestResults.IsTestRunning">
            <summary>
            Get a flag which idicates whether the test is running or not
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.SoakTestViewModel.SoakTestResults.#ctor(System.String)">
            <summary>
            Create a new results object
            </summary>
            <param name="name">The test name to setup</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AxisSettingsViewModel">
            <summary>
            View Model for the axis settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisSettingsViewModel.MotorControllersAvailable">
            <summary>
            Property that exposes the available motor controller names
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisSettingsViewModel.PositionsDatabasesAvailable">
            <summary>
            Property that exposes the available positions database names
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisSettingsViewModel.DirectionEnumValues">
            <summary>
            Property that allows the direction enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisSettingsViewModel.PlaneOfMovementEnumValues">
            <summary>
            Property that allows the plane of movement enumeration to be evaluated by the view
            </summary> 
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisSettingsViewModel.Axis">
            <summary>Reference to the item under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisSettingsViewModel.MotorControllerName">
            <summary>
            Middle-man property to validate the entered motor controller.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisSettingsViewModel.MotorControllerCompatibilityCheck">
            <summary>A function to validate the selected motor controller</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisSettingsViewModel.MotorControllerInvalidityReasonString">
            <summary>A string indicating the reason the selected motor controller is invalid</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisSettingsViewModel.#ctor(Labman.MotionControl.Axis)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="axis">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.AxisViewModel">
            <summary>
            View Model for the Axis Control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.Home">
            <summary>Command used to home</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.MoveAbs">
            <summary>Command used to move</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.MoveInc">
            <summary>Command used to move</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.MoveContinuous">
            <summary>Command used to move</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.AxisViewModel._slowStopCommand">
            <summary>
            Relay command object for the SlowStop command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.SlowStop">
            <summary>
            Command object used for executing commands using binding: {Binding SlowStop}
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.AxisViewModel._quickstopCommand">
            <summary>
            Relay command object for the QuickStop command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.QuickStop">
            <summary>
            Command object used for executing commands using binding: {Binding QuickStop}
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.AxisViewModel._resetFaultsCommand">
            <summary>
            Relay command object for the ResetFaults command
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.ResetFaults">
            <summary>
            Command object used for executing commands using binding: {Binding ResetFaults}
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.Axis">
            <summary>
            Reference to the item under control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.DemandAbsPosition">
            <summary>
            Demand absolute position property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.DemandAbsPositionValid">
            <summary>
            Whether the entered value of absolute position demand is valid
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.DemandIncPosition">
            <summary>
            Demand relative position property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.DemandIncPositionValid">
            <summary>
            Whether the entered value of relative position demand is valid
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.EncoderPosition">
            <summary>
            Property that exposes the encoder position
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.LogicalPosition">
            <summary>
            Property that exposes the logical position
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.IsEStopped">
            <summary>
            Property that exposes the estopped state
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.AxisBusy">
            <summary>
            Property that exposes the home state
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.MotorStatusSummary">
            <summary>
            Property that exposes the motor status summary
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.AxisMileage">
            <summary>
            The distance this axis has travelled.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.MotorMoves">
            <summary>
            The number of movements this axis has done.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.AxisViewModel.IsOnHome">
            <summary>
            Property that exposes the home sensor state
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.#ctor(Labman.MotionControl.Axis)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="axis">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.Dispose">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.TimerTick(System.Object)">
            <summary>
            This method is periodically called by the update timer
            </summary>
            <param name="state">Timer state field (not used)</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.ExecuteHome(System.Object)">
            <summary>
            Home the axis
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.ExecuteMoveAbs(System.Object)">
            <summary>
            Move the axis
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.ExecuteMoveInc(System.Object)">
            <summary>
            Move the axis
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.ExecuteMoveContinuous(System.Object)">
            <summary>
            Move the axis
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.ExecuteSlowStop(System.Object)">
            <summary>
            Stops the axis
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.ExecuteQuickStop(System.Object)">
            <summary>
            Stops the axis
            </summary>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.AxisViewModel.ExecuteResetFaults(System.Object)">
            <summary>
            Executes the ResetFaults command
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BalancesRibbonTabViewModel">
            <summary>
            View model for use with balances ribbon tab.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BalancesRibbonTabViewModel._selectedBalance">
            <summary>Member to hold device name of the current selected balance.</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BalancesRibbonTabViewModel._selectedBalanceViewModel">
            <summary>Holds a refernce to a BalanceViewModel object for the current selected balance.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalancesRibbonTabViewModel.HardwareRibbonVisibility">
            <summary>
            Property that returns the visibility for the hardware ribbon controls
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalancesRibbonTabViewModel.SelectedBalance">
            <summary>
            Gets or sets the current selected balance.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalancesRibbonTabViewModel.BalanceDeviceNames">
            <summary>
            Gets a list of balance device names.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalancesRibbonTabViewModel.SelectedBalanceViewModel">
            <summary> 
            Gets or sets the balance view model for current balance.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BalancesRibbonTabViewModel.#ctor">
            <summary>
            Balance ribbon tabl view model construction.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BarcodeReadersRibbonTabViewModel">
            <summary>
            View model for use with barcode reader ribbon tab.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BarcodeReadersRibbonTabViewModel._selectedBarcodeReader">
            <summary>Member to hold device name of the current selected barcode reader.</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.BarcodeReadersRibbonTabViewModel._selectedBarcodeReaderViewModel">
            <summary>Holds a refernce to a BarcodeReaderViewModel object for the current selected barcode reader.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BarcodeReadersRibbonTabViewModel.HardwareRibbonVisibility">
            <summary>
            Property that returns the visibility for the hardware ribbon controls
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BarcodeReadersRibbonTabViewModel.SelectedBarcodeReader">
            <summary>
            Gets or sets the current selected barcode reader.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BarcodeReadersRibbonTabViewModel.BarcodeReaderDeviceNames">
            <summary>
            Gets a list of barcode reader device names.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BarcodeReadersRibbonTabViewModel.SelectedBarcodeReaderViewModel">
            <summary> 
            Gets or sets the barcode reader view model for current barcode reader.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BarcodeReadersRibbonTabViewModel.#ctor">
            <summary>
            Barcode reader ribbon tab view model construction.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BaseFormViewModel">
            <summary>The view model for the main window</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.ActionToRunWhenProcessIsBeingPaused">
            <summary>An optional action that will be fired when the user clicks on the pause button.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.UpdateWindowTick">
            <summary>
            Action that can be assigned in the inheritting class to call a custome action each time the window update timer ticks
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.FormUpdaters">
            <summary>A collection of form updaters that will be run on each form update cycle</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.SimulationModeIconVisibility">
            <summary>Boolean indicating wether the simulation mode icon should be displayed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.IsInitialised">
            <summary>Gets whether the system is currently initialised</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.IsProcessRunning">
            <summary>Indicates whether a process is running</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.PositionDatabaseVisibility">
            <summary>Gets or sets the position database visibility.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.CartesianVisibility">
            <summary>Gets or sets the cartesian visibility.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.RobotArmVisibility">
            <summary>Gets or sets the robot arm visibility.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.ProcessStatesVisibility">
            <summary>Gets or sets the process states visibility.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.EngineeringVisibility">
            <summary>Determines the visibility of the hardware config, engineering and parameters screens</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.IsHardwareConfigEnabled">
            <summary>Whether the hardware config nav item is enabled</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.IsEngineeringEnabled">
            <summary>Whether the engineering nav item is enabled</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.IsParametersEnabled">
            <summary>Whether the parameters nav item is enabled</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.IsPositionsDatabaseEnabled">
            <summary>Whether the positions database nav item is enabled</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.IsCartesianEnabled">
            <summary>Whether the cartesian config nav item is enabled</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.IsRobotArmEnabled">
            <summary>Whether the robot arm config nav item is enabled</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.IsSoakTestEnabled">
            <summary>Whether the soak test nav item is enabled</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.LockedIconVisibility">
            <summary>Gets or sets the locked icon visibility.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.UnLockedIconVisibility">
            <summary>Gets or sets the un locked icon visibility.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.UserLoginText">
            <summary>Gets or sets the user login text.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.UserLoginToolTip">
            <summary>Gets or sets the user login tool tip.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.RackViewModels">
            <summary>Property that exposes the array of rack view models that can be bound to from XAML.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.EStoppedText">
            <summary>Property that exposes the estopped text</summary>
        </member>
        <member name="E:Labman.UserInterface.ViewModels.BaseFormViewModel.RequestClose">
            <summary>Event that is raised when we want the view to be closed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.LoginCommand">
            <summary>Command used to login/logout.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.StartCommand">
            <summary>Gets the start command.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.StartProcess">
            <summary>Start the main process running</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.CanExecuteStartProcessCommand">
            <summary>Checks if the start command can be executed</summary>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.PauseCommand">
            <summary>Gets the pause command.</summary>
            <value>The pause command.</value>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.CanExecutePauseCommand(System.Object)">
            <summary>Checks if the pause command can be executed</summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.PauseProcess(System.Object)">
            <summary>Pause the main process running</summary>
            <param name="args">Arguments parameter - currently not used</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.StopCommand">
            <summary>Gets the stop command.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.CanExecuteStop">
            <summary>Checks if the stop command can be executed</summary>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.StopProcess">
            <summary>Stop the main process running</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.InitialiseCommand">
            <summary>Gets the initialise.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.HomeCommand">
            <summary>Gets the home command.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.CanExecuteHome">
            <summary>Checks if the home command can be executed</summary>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.HomeRobot">
            <summary>Homes the robot</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BaseFormViewModel.ExitCommand">
            <summary>Gets the exit command.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.SetUserLoginState">
            <summary>Set the login control states based on whether a user is logged in</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.IsACommandExecuting">
            <summary>This method checks all of the commands in the view model to see if any are running.</summary>
            <returns>True if one or more commands is running, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.CanExecuteInitialise">
            <summary>Checks if the initialise command can be executed</summary>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.InitialiseSystem">
            <summary>Initialises the system</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.CanExecuteOpenHardwareConfig(System.Object)">
            <summary>Checks if the open hardware config command can be executed</summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.UpdateTimerTick(System.Object)">
            <summary>This method is called periodically from a timer and updates the required view models</summary>
            <param name="state">State object - not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.SetupRackControls">
            <summary>Setup the rack control view models that we need for this window</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.AddRackControlViewModel(System.Int32,System.Collections.Generic.SortedList{System.Int32,System.Windows.Style},Labman.UserInterface.FormUpdaters.IFormUpdater)">
            <summary>Add a new rack control view model to the main window's view model</summary>
            <param name="positions">The number of positions in the rack</param>
            <param name="styles">The array of styles to use for the rack</param>
            <param name="formUpdater">The form updater to use to populate rack positions. This can be null if not required.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.#ctor(System.Int32)">
            <summary>The constructor for the base view model</summary>
            <param name="formUpdateTimePeriod">The time in milliseconds between form update cycles</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BaseFormViewModel.Dispose">
            <summary>Dispose method ensures the form timer is stopped when the window is closed</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CartesianConfigurationSettingsViewModel">
            <summary>
            View Model for the cartesian configuration settings
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationSettingsViewModel.HomeOrderEnumValues">
            <summary>
            Property that exposes the available home orders
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationSettingsViewModel.PositionsDatabasesAvailable">
            <summary>
            Property that exposes the available positions database names
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationSettingsViewModel.AxesAvailable">
            <summary>
            Property that exposes the available axis names
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationSettingsViewModel.OutputsAvailable">
            <summary>
            Property that exposes the available output names
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationSettingsViewModel.Configuration">
            <summary>Reference to the item under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationSettingsViewModel.#ctor(Labman.MotionControl.CartesianConfiguration)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="configuration">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel">
            <summary>
            View model for the cartesian configuration control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.AvailablePositionAreas">
            <summary>
            Gets the available position areas.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.SelectedArea">
            <summary>
            Gets or sets the selected area.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.Index">
            <summary>
            Gets or sets the index.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.IsAreaIndexValid">
            <summary>Whether the currently entered index is valid.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.MaxIndex">
            <summary>The minimum valid index for this area</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.MinIndex">
            <summary>The maximum valid index for this area</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.HomeCommand">
            <summary>
            Gets the home command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.MoveCommand">
            <summary>
            Gets the move command.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.PickCommand">
            <summary>Command used to Pick</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.PlaceCommand">
            <summary>Command used to Place</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.#ctor(Labman.MotionControl.CartesianConfiguration)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="configuration">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.CanExecuteHome(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.GetAreas">
            <summary>
            Get a list of available position areas that can be used by this configuration.
            </summary>
            <returns>List of areas.</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.ExecuteHome(System.Object)">
            <summary>
            Home the axis.
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.ExecuteMove(System.Object)">
            <summary>
            Move the axis.
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.ExecutePick(System.Object)">
            <summary>
            Pick from an area.
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.CartesianConfigurationMiniUserControlViewModel.ExecutePlace(System.Object)">
            <summary>
            Place to an area.
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.OutputViewModel">
            <summary>
            View Model for the I/O Control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputViewModel.Output">
            <summary>The output we are working with</summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.OutputViewModel._outputViewModelCyclingOnOff">
            <summary>
            A store for a bool to show whether the output is in a cycle mode using the output name as the key
            The bool being true indicates the cycle is running, turn false to stop the cycle
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputViewModel.Mileage">
            <summary>
            The mileage of this output
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputViewModel.OnSensor">
            <summary>
            The on sensor (if any) for this output.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputViewModel.OffSensor">
            <summary>
            The off sensor (if any) for this output.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputViewModel.Delay">
            <summary>
             The amount of time to delay on 
             a cycle between turning the output on
             and off
             </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputViewModel.SwitchOn">
            <summary>Command used to SwitchOn</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputViewModel.SwitchOff">
            <summary>Command used to SwitchOff</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputViewModel.CycleOn">
            <summary>
            Command used to start a cycle to turn the robot on and off 
            at an interval specified by the user
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputViewModel.CycleOff">
            <summary>
            Command used to turn off the current cycle
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputViewModel.#ctor(Labman.IO.Output)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="output">The output.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputViewModel.#ctor(Labman.IO.Output,System.Int32)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="output">The output.</param>
            <param name="refreshInterval">The refresh interval.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputViewModel.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputViewModel.ExecuteSwitchOutputOn(System.Object)">
            <summary>
            Execute the switch command
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputViewModel.ExecuteSwitchOutputOff(System.Object)">
            <summary>
            Execute the switch command
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputViewModel.ExecuteCycleOn(System.Object)">
            <summary>
            Creates a new thread that turns the output on then off based on either the sensors or the delay specified
            </summary>
            <param name="args">Command Arguments. This brings through whether the sensor Checks are enabled or not.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputViewModel.ExecuteCycleOff(System.Object)">
            <summary>
            Creates a new thread that turns the output on then off based on either the sensors or the delay specified
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputViewModel.TimerTick(System.Object)">
            <summary>
            This method is periodically called by the update timer
            </summary>
            <param name="state">Timer state field (not used)</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.InputViewModel">
            <summary>
            View Model for the I/O Control
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ViewModels.InputViewModel.DefaultRefreshInterval">
            <summary>
            The input refresh interval - Due to reading the inputs one at a time the refresh must be fairly slow.
            Note 27/04/19 - Put back to 1000ms as timer action blocking flag helps to not overload. This should run fine at this level, originally this used to be 100ms.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InputViewModel.Input">
            <summary>The input we are working with</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InputViewModel.InputState">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InputViewModel.BackColour">
            <summary>
            The back colour of the input
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InputViewModel.Mileage">
            <summary>
            The mileage of this input.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InputViewModel.#ctor(Labman.IO.Input)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.InputViewModel"/> class.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InputViewModel.#ctor(Labman.IO.Input,System.Int32)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="input">The input.</param>
            <param name="refreshInterval">The refresh interval.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InputViewModel.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InputViewModel.TimerTick(System.Object)">
            <summary>
            This method is periodically called by the update timer
            </summary>
            <param name="state">Timer state field (not used)</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.InputSettingsViewModel">
            <summary>
            View Model for the input settings
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InputSettingsViewModel.IODevicesAvailable">
            <summary>
            Property that exposes the available IO devices names
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InputSettingsViewModel.Input">
            <summary>Reference to the item under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InputSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InputSettingsViewModel.#ctor(Labman.IO.Input)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="input">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel">
            <summary>
            View model for the interface settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.CommunicationClassesEnumValues">
            <summary>
            Property that allows the communication class type enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.StopBitsEnumValues">
            <summary>
            Property that allows the stop bits enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.ParityEnumValues">
            <summary>
            Property that allows the parity enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.HandshakeEnumValues">
            <summary>
            Property that allows the handshaking enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.PeakCanBaudRateEnumValues">
            <summary>
            Property that allows the handshaking enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.KVaserCanBaudRateEnumValues">
            <summary>
            Property that allows the KVaser CAN baud rates enumeration to be evaluated by the view.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.Settings">
            <summary>
            Interface Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledHostName">
            <summary>
            Enabled state for the host name setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledCANNetName">
            <summary>
            Enabled state for the cannet name setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledPortNumber">
            <summary>
            Enabled state for the port number setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledDeviceAddress">
            <summary>
            Enabled state for the device address setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledSerialBaudRate">
            <summary>
            Enabled state for the serial baud setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledDataBits">
            <summary>
            Enabled state for the data bits setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledStopBits">
            <summary>
            Enabled state for the stop bits setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledParity">
            <summary>
            Enabled state for the parity setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledHandshaking">
            <summary>
            Enabled state for the handshaking setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledDtr">
            <summary>
            Enabled state for the dtr setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledRts">
            <summary>
            Enabled state for the rts setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledPeakCanBaudRate">
            <summary>
            Enabled state for the peakcan baud rate setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.IsEnabledKVaserCanBaudRate">
            <summary>
            Enabled state for the KVaser can baud rate setting
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.CommunicationType">
            <summary>
            Gets and sets the settings communication type.
            </summary>
            <remarks>
            Allows this viewmodel to update other visibilities dependant on this value, without subscribing to events in the model.
            Subscribing to events in the model would require making this viewmodel and everything that instatiates it (and everything that instantiates that...) support IDisposable.
            </remarks>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.#ctor(Labman.Communication.Interfaces.InterfaceSettings)">
            <summary>
            Class constructor for the view model
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.InterfaceSettingsViewModel.UpdateControlVisibilities">
            <summary>
            Updates which controls are visible based on the currently selected communication type.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BalanceSettingsViewModel">
            <summary>
            View Model for the balance settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalanceSettingsViewModel.StabilitySettingEnumValues">
            <summary>
            Property that allows the balance stability enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalanceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BalanceSettingsViewModel.#ctor(Labman.Hardware.Balances.Balance)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BalanceViewModel">
            <summary>
            View model for the balance user control 
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalanceViewModel.StabilitySettingEnumValues">
            <summary>
            Property that allows the balance stability enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalanceViewModel.Balance">
            <summary>Reference to the balance under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalanceViewModel.Weight">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalanceViewModel.StableWeight">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalanceViewModel.Tare">
            <summary>Command used to Tare</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalanceViewModel.Calibrate">
            <summary>Command used to Calibrate</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalanceViewModel.GetWeight">
            <summary>Command used to GetWeight</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BalanceViewModel.SetStability">
            <summary>Command used to SetStability</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BalanceViewModel.#ctor(Labman.Hardware.Balances.Balance)">
            <summary>
            Constructor for the balance control view model, sets the balance device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BalanceViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BalanceViewModel.ExecuteTare(System.Object)">
            <summary>
            Tare the balance
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BalanceViewModel.ExecuteCalibrate(System.Object)">
            <summary>
            Calibrate the balance
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BalanceViewModel.ExecuteGetWeight(System.Object)">
            <summary>
            Get a balance weight
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BalanceViewModel.ExecuteSetStability(System.Object)">
            <summary>
            Set the balance stability
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BarcodeReaderSettingsViewModel">
            <summary>
            View model for the barcode reader settings control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BarcodeReaderSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BarcodeReaderSettingsViewModel.#ctor(Labman.Hardware.BarcodeReaders.BarcodeReader)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.BarcodeReaderViewModel">
            <summary>
            View model for the barcode reader user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BarcodeReaderViewModel.BarcodeReader">
            <summary>Reference to the BarcodeReader under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BarcodeReaderViewModel.Barcode">
            <summary>
            This property exposes the last read barcode
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BarcodeReaderViewModel.TriggerRead">
            <summary>Command used to TriggerRead</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.BarcodeReaderViewModel.ReadCode">
            <summary>Command used to ReadCode</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BarcodeReaderViewModel.#ctor(Labman.Hardware.BarcodeReaders.BarcodeReader)">
            <summary>
            Constructor for the BarcodeReader control view model, sets the BarcodeReader device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BarcodeReaderViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BarcodeReaderViewModel.ExecuteTriggerRead(System.Object)">
            <summary>
            Triggers a code read
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.BarcodeReaderViewModel.ExecuteReadCode(System.Object)">
            <summary>
            Execute a read code
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.IODeviceSettingsViewModel">
            <summary>
            View model for the IO device settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IODeviceSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IODeviceSettingsViewModel.#ctor(Labman.Hardware.IODevices.IODevice)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.IODeviceViewModel">
            <summary>
            View model for the IO user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IODeviceViewModel.IODevice">
            <summary>Reference to the IODevice under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IODeviceViewModel.Inputs">
            <summary>
            Any inputs associated with this device.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IODeviceViewModel.Outputs">
            <summary>
            Any outputs associated with this device.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IODeviceViewModel.AnalogInputs">
            <summary>
            Any analog inputs associated with this device.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.IODeviceViewModel.AnalogOutputs">
            <summary>
            Any analog outputs associated with this device.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IODeviceViewModel.#ctor(Labman.Hardware.IODevices.IODevice)">
            <summary>
            Constructor for the IODevice control view model, sets the IODevice device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IODeviceViewModel.#ctor(Labman.Hardware.IODevices.IODevice,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Constructor for the IODevice control view model, sets the IODevice device in use
            </summary>
            <param name="device">The device under control</param>
            <param name="numberOfInputs">The number of connected inputs. Leave null to populate with any inputs from <see cref="P:Labman.ConnectedHardware.Inputs"/> that use this <see cref="P:Labman.UserInterface.ViewModels.IODeviceViewModel.IODevice"/></param>
            <param name="numberOfOutputs">The number of connected outputs. Leave null to populate with any outputs from <see cref="P:Labman.ConnectedHardware.Outputs"/> that use this <see cref="P:Labman.UserInterface.ViewModels.IODeviceViewModel.IODevice"/></param>
            <param name="numberOfAnalogInputs">The number of connected analog inputs. Leave null to populate with any analog inputs from <see cref="P:Labman.ConnectedHardware.AnalogInputs"/> that use this <see cref="P:Labman.UserInterface.ViewModels.IODeviceViewModel.IODevice"/></param>
            <param name="numberOfAnalogOutputs">The number of connected analog outputs. Leave null to populate with any analog outputs from <see cref="P:Labman.ConnectedHardware.AnalogOutputs"/> that use this <see cref="P:Labman.UserInterface.ViewModels.IODeviceViewModel.IODevice"/></param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.IODeviceViewModel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.MotorControllerSettingsViewModel">
            <summary>
            View model for the motor controller user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MotorControllerSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MotorControllerSettingsViewModel.#ctor(Labman.Hardware.MotorControllers.MotorController)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.MotorControllerViewModel">
            <summary>
            View model for the motor controller user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MotorControllerViewModel.MotorController">
            <summary>Reference to the MotorController under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.MotorControllerViewModel.Axes">
            <summary>
            The axes of this motor controller
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MotorControllerViewModel.#ctor(Labman.Hardware.MotorControllers.MotorController)">
            <summary>
            Constructor for the MotorController control view model, sets the MotorController device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.MotorControllerViewModel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.OutputSettingsViewModel">
            <summary>
            View model for the output settings
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputSettingsViewModel.IODevicesAvailable">
            <summary>
            Property that exposes the available IO devices names
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputSettingsViewModel.InputsAvailable">
            <summary>
            Property that exposes the available input names
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputSettingsViewModel.Output">
            <summary>Reference to the item under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.OutputSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.OutputSettingsViewModel.#ctor(Labman.IO.Output)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="output">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.PIDSettingsViewModel">
            <summary>
            View model for the PID settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PIDSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PIDSettingsViewModel.UnitNumberList">
            <summary>
            Possible unit addresses
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PIDSettingsViewModel.#ctor(Labman.Hardware.PIDs.PID)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.PIDViewModel">
            <summary>
            View model for the PID user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PIDViewModel.PID">
            <summary>Reference to the device under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PIDViewModel.CurrentTemperature">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PIDViewModel.CurrentSetPoint">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PIDViewModel.TemperatureSetPoint">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PIDViewModel.GetTemperature">
            <summary>
            Command used to get the current temperature
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PIDViewModel.GetSetPoint">
            <summary>
            Command used to get the current set point
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PIDViewModel.SetTemperature">
            <summary>
            Command used to set the PID temperature
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PIDViewModel.#ctor(Labman.Hardware.PIDs.PID)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PIDViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PIDViewModel.ExecuteGetTemperature(System.Object)">
            <summary>
            Get the current temperature
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PIDViewModel.ExecuteGetSetPoint(System.Object)">
            <summary>
            Get the current set point temperature
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PIDViewModel.ExecuteSetTemperature(System.Object)">
            <summary>
            Set the PID temperature
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.PositionDatabaseViewModel">
            <summary>
            Viewmodel for position database view - makes data in a position database object 
            available to a view.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.SaveState">
            <summary>
            Possible save states
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.#ctor(Labman.PositionsDatabase.PositionDatabase)">
            <summary>Class construction intialises position database member with passed in position database object.</summary>
            <param name="positionDatabase">Specifes the position database object.</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.PositionRecords">
            <summary>Gets or sets position records collection.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.GotPosition">
            <summary>Gets or sets the last position retrieved from the position database.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.GetPositionCommand">
            <summary>Gets the get position command.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.SavePositionRecordsCommand">
            <summary>Property that gets the command for updating/saving position records.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.RefreshPositionsCommand">
            <summary>Property that gets the command for refreshing the position datagrid.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.DesiredIndex">
            <summary>The index of the position to be returned by the <see cref="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.GetPositionCommand"/> command.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.PickPlace">
            <summary>
            Whether the position returned by the <see cref="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.GetPositionCommand"/> command should be a pick or place position.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.PositionTypes">
            <summary>
            The possible types of position.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.SelectedItem">
            <summary>
            Middle-man property. When the empty row is selected, the view tries to set the SelectedItem binding to a new object
            which is not of the correct type. If the bound type was specific, this would cause an exception so the grid is
            coloured red. Using a bound property of type object allows this but only passes on a useful value. We could avoid
            this by: Restyling the grid to ignore the validation border, but this is a lot of effort and removes a potentially
            useful behaviour. Just using this object property without the hard-typed property, but this requires casting everywhere.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.SelectedRecord">
            <summary>The currently selected record in the view.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.RecordsCollectionView">
            <summary>The groups currently being displayed, filtered, edited and added to by the view.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.PositionRecordGroups">
            <summary>The a unique list of the possible groups from the position database.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.GroupFilter">
            <summary>The currently selected position group, for filtering the displayed groups.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.SaveButtonState">
            <summary>
            The text displayed on the save button
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.SetSaveButtonState(Labman.UserInterface.ViewModels.PositionDatabaseViewModel.SaveState)">
            <summary>
            Set the save button state
            </summary>
            <param name="state">The state to move into</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.RefreshPositions">
            <summary>Synchronises positions list and positions collection members with positions in database.</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.PositionDatabaseViewModel.SavePositionsExecute">
            <summary>
            Synchronises the positions records in the datagrid and the database. This is called when the user switches which
            row they are looking at, which is used to save any changes. Therefore this does not need to cope with records being
            removed. Only records being added, or updated.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RackControlViewModel">
            <summary> 
            The view model for a rack control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackControlViewModel.PositionLabelText">
            <summary>
            Array of position labels for each position
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackControlViewModel.StatusDescriptions">
            <summary> 
            Array of descriptions for each status
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackControlViewModel.Statuses">
            <summary>
            Array of statuses for the rack. Positions are zero-based in the array.
            The status value represents an index in the style array.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackControlViewModel.PositionTooltipText">
            <summary>
            Array of tooltip text for each position
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackControlViewModel.StatusStyles">
            <summary>
            List of styles for the rack control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackControlViewModel.NumberOfPositions">
            <summary>
            Property that holds the number of positions in the rack 
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackControlViewModel.RackVisibility">
            <summary>
            Property that allows the visibility of the rack to be bound to and set
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackControlViewModel.RackRows">
            <summary>
            Property that allows the number of rows in the rack to be bound to a property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackControlViewModel.RackColumns">
            <summary>
            Property that allows the number of columns in the rack to be bound to a property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RackControlViewModel.RackBackgroundColor">
            <summary>
            Property that allows the rack background colour
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RackControlViewModel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RackControlViewModel.#ctor(System.Int32[],System.Collections.Generic.SortedList{System.Int32,System.Windows.Style})">
            <summary>
            Rack control view model constructor, creates the view model ready for use
            </summary>
            <param name="statuses">Initial statuses</param>
            <param name="statusStyles">Array of styles to use for each status</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RackControlViewModel.#ctor(System.Int32,System.Collections.Generic.SortedList{System.Int32,System.Windows.Style})">
            <summary>
            Rack control view model constructor, creates the view model ready for use
            </summary>
            <param name="positions">The number of positions in the rack</param>
            <param name="statusStyles">Array of styles to use for each status</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RackControlViewModel.#ctor(System.Int32)">
            <summary>
            Rack control view model constructor, creates the view model ready for use
            </summary>
            <param name="positions">The number of positions in the rack</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RackControlViewModel.SetPositionStatus(System.Int32,System.Int32)">
            <summary>
            Sets the status of a position
            </summary>
            <param name="position">The position to set the status of (1-n)</param>
            <param name="status">The status to set</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RackControlViewModel.SetPositionStatus(System.Int32[])">
            <summary>
            Sets all of the status in the rack
            </summary>
            <param name="statuses">The statuses to set</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RackControlViewModel.SetPositionTooltip(System.String[])">
            <summary>
            Sets all of the position tooltips in the rack.
            </summary>
            <param name="tooltips">The tooltips.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RackControlViewModel.SetPositionLabelText(System.String[])">
            <summary>
            Sets all of the labels in the rack
            </summary>
            <param name="positionLabels">The position labels to set</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RackControlViewModel.SetRackBackgroundColor(System.Windows.Media.Brush)">
            <summary>
            Sets the background color of the rack
            </summary>
            <param name="color">The color brush to paint the rack background with</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.RheometerSettingsViewModel">
            <summary>
            View model for the Rheometer Settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RheometerSettingsViewModel.Rheometer">
            <summary>Reference to the device under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RheometerSettingsViewModel.KGam">
            <summary>
            Gets or sets the k gam.
            </summary>
            <value>
            The k gam.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RheometerSettingsViewModel.KTa">
            <summary>
            Gets or sets the k ta.
            </summary>
            <value>
            The k ta.
            </value>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.RheometerSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RheometerSettingsViewModel.#ctor(Labman.Hardware.Rheometers.Rheometer)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.RheometerSettingsViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TecanSyringeSettingsViewModel">
            <summary>
            View model for the syringe settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeSettingsViewModel.PlungerForceEnumValues">
            <summary>
            Property that allows the syringe plunger force enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeSettingsViewModel.ValveInitialisationSequenceEnumValues">
            <summary>
            Property that allows the syringe initialisation sequence enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeSettingsViewModel.ValvePositionEnumValues">
            <summary>
            Property that allows the syringe valve position enumeration to be evaluated by the view
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSyringeSettingsViewModel.#ctor(Labman.Hardware.Syringes.TecanSyringe)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">Tecan syringe device</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TecanSyringeViewModel">
            <summary>
            View model for the syringe user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.Syringe">
            <summary>Reference to the Syringe under control</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.VolumeDemand">
            <summary>
            VolumeDemand Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.Speed">
            <summary>
            Speed Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.Volume">
            <summary>
            Volume Property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ResetAndHome">
            <summary>Command used to ResetAndHome</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.Aspirate">
            <summary>Command used to Aspirate</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.Dispense">
            <summary>Command used to Dispense</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ValveLeft">
            <summary>Command used to switch valve left</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ValveTop">
            <summary>Command used to switch valve top</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ValveRight">
            <summary>Command used to switch valve right</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TecanSyringeViewModel.SetSpeed">
            <summary>Command used to set speed</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSyringeViewModel.#ctor(Labman.Hardware.Syringes.TecanSyringe)">
            <summary>
            Constructor for the Syringe control view model, sets the Syringe device in use
            </summary>
            <param name="device">The device under control</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSyringeViewModel.CanExecute(System.Object)">
            <summary>
            Can execute function for this view
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ExecuteResetAndHome(System.Object)">
            <summary>
            Executes command to ExecuteResetAndHome
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ExecuteAspirate(System.Object)">
            <summary>
            Executes command to aspirate
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ExecuteDispense(System.Object)">
            <summary>
            Executes command to dispense
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ExecuteSwicthValveLeft(System.Object)">
            <summary>
            Executes command to switch valve left
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ExecuteSwicthValveTop(System.Object)">
            <summary>
            Executes command to switch valve top
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ExecuteSwicthValveRight(System.Object)">
            <summary>
            Executes command to switch valve right
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TecanSyringeViewModel.ExecuteSetSpeed(System.Object)">
            <summary>
            Executes command to set syringe speed
            </summary>
            <param name="args">Command Arguments. This is currently unused.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.DeviceSelectionViewModel">
            <summary>
            View model for the device selection window
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceTypeViewModel">
            <summary>Represents a <see cref="T:System.Type"/> that has a name indicating in which assembly it is and a category</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceTypeViewModel.TypeName">
            <summary>The name of the type, also indicates whether the type is not from the Merlin assembly.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceTypeViewModel.Type">
            <summary>The <see cref="T:System.Type"/> being represented</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceTypeViewModel.Category">
            <summary>The category to which this type belongs</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceTypeViewModel.#ctor(System.Type,System.String)">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceTypeViewModel"/></summary>
            <param name="type">The <see cref="T:System.Type"/> to be represented</param>
            <param name="category">The category to which the given type belongs</param>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceTypes">
            <summary>A flat list of all the device types, used to populate the <see cref="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.FilteredDeviceTypes"/> list and intended for searchability in the future.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceCategories">
            <summary>The available device categories</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.SelectedDeviceCategory">
            <summary>The selected device category</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.FilteredDeviceTypes">
            <summary>The list of devices that are in the selected category.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.SelectedDeviceType">
            <summary>The selected device</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceName">
            <summary>The entered device name.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.NameIsValid">
            <summary>Indicates whether the value entered for <see cref="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceName"/> is valid.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.NameValidation">
            <summary>A function that validates the <see cref="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceName"/> property.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.InvalidNameReason">
            <summary>A string that indicates why the <see cref="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.DeviceName"/> property is invalid.</summary>
        </member>
        <member name="E:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.RequestClose">
            <summary>Event that is raised when we want the view to be closed</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.Save">
            <summary>Command used to home</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.#ctor">
            <summary>View model constructor loads default values to pass to the view</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.CanExecute">
            <summary>Can execute function for this view</summary>
            <returns>Flag indicating whether the command can be executed</returns>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.LoadDevices">
            <summary>Loads a collection of the possible hardware device types</summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.DeviceSelectionViewModel.ExecuteSave">
            <summary>Saves the selected device to a NEW instance in the devices collection</summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.HardwareConfigurationViewModel">
            <summary>
            Hardware configuration view model class, exposes all data and methods used on the hardware configuration view
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.HardwareConfigurationViewModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.HardwareConfigurationViewModel"/> class.
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TurbidityMeterSettingsViewModel">
            <summary>
            View model for the turbidity meter settings user control
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TurbidityMeterSettingsViewModel.Settings">
            <summary>
            Settings Property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TurbidityMeterSettingsViewModel.#ctor(Labman.Hardware.TurbidityMeters.TurbidityMeter)">
            <summary>
            Constructor for the view model, sets the device in use
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.TurbidityMeterViewModel">
            <summary>
            View model for the turbidity meter user control.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TurbidityMeterViewModel.TurbidityMeter">
            <summary>Reference to the turbidity meter under control.</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TurbidityMeterViewModel.Turbidity">
            <summary>
            Gets or sets the turbidity.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.TurbidityMeterViewModel.MeasureCommand">
            <summary>
            Gets the measure command.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.TurbidityMeterViewModel.#ctor(Labman.Hardware.TurbidityMeters.TurbidityMeter)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.ViewModels.TurbidityMeterViewModel"/> class.
            </summary>
            <param name="device">The device.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.UserLoginViewModel">
            <summary>
            The view model for the user login window
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.UserLoginViewModel.Username">
            <summary>
            Username property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.UserLoginViewModel.Password">
            <summary>
            Password property
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.UserLoginViewModel.OK">
            <summary>Command used to to submit the form</summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModels.UserLoginViewModel.Cancel">
            <summary>Command used to to cancel the form</summary>
        </member>
        <member name="E:Labman.UserInterface.ViewModels.UserLoginViewModel.RequestClose">
            <summary>
            Event that is raised when we want the view to be closed
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.UserLoginViewModel.Submit(System.Object)">
            <summary>
            Command to submit the form
            </summary>
            <param name="args">Args - not used</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.UserLoginViewModel.Close(System.Object)">
            <summary>
            Command used to close the form
            </summary>
            <param name="args">Args - not used</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModels.VerticalLegendRackControlViewModel`1">
            <summary>
            View model for the verical legend rack control
            </summary>
            <typeparam name="T">template type parameter</typeparam>
        </member>
        <member name="M:Labman.UserInterface.ViewModels.VerticalLegendRackControlViewModel`1.#ctor(System.Collections.Generic.SortedList{System.Int32,System.Windows.Style})">
            <summary>
            Rack control view model constructor, creates the view model ready for use
            </summary>
            <param name="statusStyles">Array of styles to use for each status</param>
        </member>
        <member name="T:Labman.UserInterface.ToolboxViews.CountDown">
            <summary>
            Interaction logic for CountDown.xaml
            </summary>
            <summary>
            CountDown
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ToolboxViews.CountDown.#ctor(System.String,System.TimeSpan,System.Action,System.Action,System.Action,System.Boolean)">
            <summary>
            Creates a new instance of the CountDown Window
            </summary>
            <param name="title">The title for the countdown</param>
            <param name="time">The time to count down from</param>
            <param name="completionAction">An action to call when the countdown has completed</param>
            <param name="cancelAction">An action to call when the cancel button is pressed</param>
            <param name="tickAction">An action to call on each tick, can be used to check for an e/stop and close the window for example</param>
            <param name="showCancelButton">Flag to show or hide the cancel button</param>
        </member>
        <member name="M:Labman.UserInterface.ToolboxViews.CountDown.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.ToolboxViews.ToolTipPopup">
            <summary>
            Interaction logic for ToolTipPopup.xaml
            </summary>
            <summary>
            ToolTipPopup
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ToolboxViews.ToolTipPopup.XTitle">
            <summary>
            Property that exposes the tooltip title text
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ToolboxViews.ToolTipPopup.XTitleProperty">
            <summary>
            Using a DependencyProperty as the backing store for ToolTipTitle.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ToolboxViews.ToolTipPopup.XIsOpen">
            <summary>
            Flag which indicates whether the tooltip window is shown or not
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ToolboxViews.ToolTipPopup.XIsOpenProperty">
            <summary>
            Using a DependencyProperty as the backing store for ToolTipOpen.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ToolboxViews.ToolTipPopup.XText">
            <summary>
            Property that exposes the content property of the window
            </summary> 
        </member>
        <member name="F:Labman.UserInterface.ToolboxViews.ToolTipPopup.XTextProperty">
            <summary>
            Using a DependencyProperty as the backing store for ToolTipContent.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ToolboxViews.ToolTipPopup.XAutoCloseDuration">
            <summary>
            Property that allows the default auto close time to be modified
            </summary>
        </member>
        <member name="F:Labman.UserInterface.ToolboxViews.ToolTipPopup.XAutoCloseDurationProperty">
            <summary>
            Using a DependencyProperty as the backing store for XAutoCloseDuration.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ToolboxViews.ToolTipPopup.VM">
            <summary>
            Gets the vm.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ToolboxViews.ToolTipPopup.#ctor">
            <summary>
            Creates a new instance of thne popup control
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ToolboxViews.ToolTipPopup.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.CommandExecuter">
            <summary>
            Command Executer
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CommandExecuter.CommandProperty">
            <summary>
            The command property
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CommandExecuter.OnEventProperty">
            <summary>
            The on event property
            </summary>
        </member>
        <member name="F:Labman.UserInterface.CommandExecuter.CommandParameterProperty">
            <summary>
            The command parameter property
            </summary>
        </member>
        <member name="M:Labman.UserInterface.CommandExecuter.CommandPropertyChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Commands the property changed callback.
            </summary>
            <param name="depObj">The dep object.</param>
            <param name="args">The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Labman.UserInterface.CommandExecuter.GetCommand(System.Windows.UIElement)">
            <summary>
            Gets the command.
            </summary>
            <param name="element">The element.</param>
            <returns>The command</returns>
        </member>
        <member name="M:Labman.UserInterface.CommandExecuter.SetCommand(System.Windows.UIElement,System.Windows.Input.ICommand)">
            <summary>
            Sets the command.
            </summary>
            <param name="element">The element.</param>
            <param name="command">The command.</param>
        </member>
        <member name="M:Labman.UserInterface.CommandExecuter.GetOnEvent(System.Windows.UIElement)">
            <summary>
            Gets the on event.
            </summary>
            <param name="element">The element.</param>
            <returns>The OnEventProperty</returns>
        </member>
        <member name="M:Labman.UserInterface.CommandExecuter.SetOnEvent(System.Windows.UIElement,System.String)">
            <summary>
            Sets the on event.
            </summary>
            <param name="element">The element.</param>
            <param name="evnt">The evnt.</param>
        </member>
        <member name="M:Labman.UserInterface.CommandExecuter.GetCommandParameter(System.Windows.UIElement)">
            <summary>
            Gets the command parameter.
            </summary>
            <param name="element">The element.</param>
            <returns>The command</returns>
        </member>
        <member name="M:Labman.UserInterface.CommandExecuter.SetCommandParameter(System.Windows.UIElement,System.Object)">
            <summary>
            Sets the command parameter.
            </summary>
            <param name="element">The element.</param>
            <param name="commandParameter">The command parameter.</param>
        </member>
        <member name="M:Labman.UserInterface.CommandExecuter.OnRoutedEvent(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when [routed event].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Labman.UserInterface.ViewModelBase">
            <summary>
            Provides common functionality for ViewModel classes
            </summary>
        </member>
        <member name="P:Labman.UserInterface.ViewModelBase.BackgroundWorkerActionRunning">
            <summary>
            Gets a value used to indicate a background worker task is running
            </summary>
        </member>
        <member name="M:Labman.UserInterface.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Wrapper for GalaSoft function.
            Method which should be called when the parameter value changes
            </summary>
            <param name="propertyName">The name of the property that has changed</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModelBase.DoWork(System.Action)">
            <summary>
            DoWork method that is used to run a command in a background worker.
            </summary>
            <param name="method">The action that needs to be run.</param>
        </member>
        <member name="M:Labman.UserInterface.ViewModelBase.CanExecuteCommand(System.Object)">
            <summary>
            Checks if a command can be executed
            </summary>
            <param name="args">Arguments parameter - currently not used</param>
            <returns>True if this command can be executed, else False</returns>
        </member>
        <member name="T:Labman.UserInterface.RelayCommand">
            <summary>
            A class whose sole purpose is to relay its functionality to other objects by invoking delegates.
            </summary>
            <seealso cref="T:GalaSoft.MvvmLight.CommandWpf.RelayCommand" />
            <seealso cref="T:System.Windows.Input.ICommand" />
        </member>
        <member name="F:Labman.UserInterface.RelayCommand._canExecute">
            <summary>
            Member that holds the function to be called when ICommand.CanExecute() is called.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommand._relayCommand">
            <summary>
            Member that holds the galasoft relayCommand used behind the scenes
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommand._userActivityMessage">
            <summary>
            Member that holds the log message to be used by the Activity Log
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommand._targetSite">
            <summary>
            Member that hold the target site of the command to be used by the activity log
            </summary>
        </member>
        <member name="P:Labman.UserInterface.RelayCommand.IsRunning">
            <summary>
            Property that keeps track of whether this command is currently being executed
            </summary>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand.CanExecute(System.Object)">
            <summary>
            Implements ICommand.CanExecute().
            </summary>
            <param name="parameter">Specifies data used by the command.</param>
            <returns>bool, true if the command can be executed, false otherwise.</returns>
        </member>
        <member name="E:Labman.UserInterface.RelayCommand.CanExecuteChanged">
            <summary>
            Implements ICommand.CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand.Execute(System.Object)">
            <summary>
            Implements ICommand.Execute() method.
            </summary>
            <param name="parameter">Specifies data used by the command.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand.#ctor(System.Action,System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class that
            can always execute.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand.#ctor(System.Action,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class that
            can always execute.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand.#ctor(System.Action,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand.#ctor(System.Action,System.Func{System.Boolean},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="T:Labman.UserInterface.RelayCommand`1">
            <summary>
            A class whose sole purpose is to relay its functionality to other objects by invoking delegates.
            </summary>
            <typeparam name="T">The parameter type for the relay command</typeparam>
            <seealso cref="T:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1" />
            <seealso cref="T:System.Windows.Input.ICommand" />
        </member>
        <member name="F:Labman.UserInterface.RelayCommand`1._canExecute">
            <summary>
            Member that holds the function to be called when ICommand.CanExecute() is called.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommand`1._relayCommand">
            <summary>
            Member that holds the galasoft relayCommand used behind the scenes
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommand`1._userActivityMessage">
            <summary>
            Member that holds the log message to be used by the Activity Log
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommand`1._targetSite">
            <summary>
            Member that hold the target site of the command to be used by the activity log
            </summary>
        </member>
        <member name="P:Labman.UserInterface.RelayCommand`1.IsRunning">
            <summary>
            Property that keeps track of whether this command is currently being executed
            </summary>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Implements ICommand.CanExecute().
            </summary>
            <param name="parameter">Specifies data used by the command.</param>
            <returns>bool, true if the command can be executed, false otherwise.</returns>
        </member>
        <member name="E:Labman.UserInterface.RelayCommand`1.CanExecuteChanged">
            <summary>
            Implements ICommand.CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data
            to be passed, this object can be set to a null reference</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand`1.#ctor(System.Action{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class that
            can always execute.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand`1.#ctor(System.Action{`0},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class that
            can always execute.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="T:Labman.UserInterface.RelayCommandAsync">
            <summary>
            A class whose sole purpose is to relay its functionality to other objects by invoking delegates.
            The command's execution is carried out off the UI thread but awaited, such that the <see cref="P:Labman.UserInterface.RelayCommandAsync.IsRunning"/> flag is still correct.
            The default behaviour is that multiple instances of the same command cannot be executed concurrently - while executing, the <see cref="M:Labman.UserInterface.RelayCommandAsync.CanExecute(System.Object)"/> will return false.
            However, this behaviour can be disabled with the optional constructors.
            </summary>
            <seealso cref="T:GalaSoft.MvvmLight.CommandWpf.RelayCommand" />
            <seealso cref="T:System.Windows.Input.ICommand" />
        </member>
        <member name="F:Labman.UserInterface.RelayCommandAsync._canExecute">
            <summary>
            Member that holds the function to be called when ICommand.CanExecute() is called.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommandAsync._allowConcurrentExecution">
            <summary>
            Member the instructs whether the command can be executed multiple times concurrently.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommandAsync._relayCommand">
            <summary>
            Member that holds the galasoft relayCommand used behind the scenes
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommandAsync._userActivityMessage">
            <summary>
            Member that holds the log message to be used by the Activity Log
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommandAsync._targetSite">
            <summary>
            Member that hold the target site of the command to be used by the activity log
            </summary>
        </member>
        <member name="P:Labman.UserInterface.RelayCommandAsync.IsRunning">
            <summary>
            Property that keeps track of whether this command is currently being executed
            </summary>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.CanExecute(System.Object)">
            <summary>
            Implements ICommand.CanExecute().
            </summary>
            <param name="parameter">Specifies data used by the command.</param>
            <returns>bool, true if the command can be executed, false otherwise.</returns>
        </member>
        <member name="E:Labman.UserInterface.RelayCommandAsync.CanExecuteChanged">
            <summary>
            Implements ICommand.CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.RaiseCanExecuteChanged">
            <summary>
            Forces the CommandManager to raise the <see cref="E:System.Windows.Input.CommandManager.RequerySuggested"/> event, causing checks of the <see cref="M:Labman.UserInterface.RelayCommandAsync.CanExecute(System.Object)"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.Execute(System.Object)">
            <summary>
            Implements ICommand.Execute() method.
            </summary>
            <param name="parameter">Specifies data used by the command.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.#ctor(System.Action,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class that can execute only once at a time.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.#ctor(System.Action,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class that can execute only once at a time.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.#ctor(System.Action,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="allowConcurrentExecution">Instructs whether multiple executions of the <paramref name="execute"/> parameter can run concurrently.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.#ctor(System.Action,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="allowConcurrentExecution">Instructs whether multiple executions of the <paramref name="execute"/> parameter can run concurrently.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.#ctor(System.Action,System.Func{System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class that can execute once at a time and when the <paramref name="canExecute"/> is met.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.#ctor(System.Action,System.Func{System.Boolean},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class that can execute once at a time and when the <paramref name="canExecute"/> is met.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.#ctor(System.Action,System.Func{System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="allowConcurrentExecution">Instructs whether multiple executions of the <paramref name="execute"/> parameter can run concurrently.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync.#ctor(System.Action,System.Func{System.Boolean},System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="allowConcurrentExecution">Instructs whether multiple executions of the <paramref name="execute"/> parameter can run concurrently.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="T:Labman.UserInterface.RelayCommandAsync`1">
            <summary>
            A class whose sole purpose is to relay its functionality to other objects by invoking delegates.
            The command's execution is carried out off the UI thread but awaited, such that the <see cref="P:Labman.UserInterface.RelayCommandAsync`1.IsRunning"/> flag is still correct.
            The default behaviour is that multiple instances of the same command cannot be executed concurrently - while executing, the <see cref="M:Labman.UserInterface.RelayCommandAsync`1.CanExecute(System.Object)"/> will return false.
            However, this behaviour can be disabled with the optional constructors.
            </summary>
            <typeparam name="T">The parameter type for the relay command</typeparam>
            <seealso cref="T:GalaSoft.MvvmLight.CommandWpf.RelayCommand`1" />
            <seealso cref="T:System.Windows.Input.ICommand" />
        </member>
        <member name="F:Labman.UserInterface.RelayCommandAsync`1._canExecute">
            <summary>
            Member that holds the function to be called when ICommand.CanExecute() is called.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommandAsync`1._allowConcurrentExecution">
            <summary>
            Member the instructs whether the command can be executed multiple times concurrently.
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommandAsync`1._relayCommand">
            <summary>
            Member that holds the galasoft relayCommand used behind the scenes
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommandAsync`1._userActivityMessage">
            <summary>
            Member that holds the log message to be used by the Activity Log
            </summary>
        </member>
        <member name="F:Labman.UserInterface.RelayCommandAsync`1._targetSite">
            <summary>
            Member that hold the target site of the command to be used by the activity log
            </summary>
        </member>
        <member name="P:Labman.UserInterface.RelayCommandAsync`1.IsRunning">
            <summary>
            Property that keeps track of whether this command is currently being executed
            </summary>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.CanExecute(System.Object)">
            <summary>
            Implements ICommand.CanExecute().
            </summary>
            <param name="parameter">Specifies data used by the command.</param>
            <returns>bool, true if the command can be executed, false otherwise.</returns>
        </member>
        <member name="E:Labman.UserInterface.RelayCommandAsync`1.CanExecuteChanged">
            <summary>
            Implements ICommand.CanExecuteChanged event.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.RaiseCanExecuteChanged">
            <summary>
            Forces the CommandManager to raise the <see cref="E:System.Windows.Input.CommandManager.RequerySuggested"/> event, causing checks of the <see cref="M:Labman.UserInterface.RelayCommandAsync`1.CanExecute(System.Object)"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data
            to be passed, this object can be set to a null reference</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.#ctor(System.Action{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class that can execute only once at a time.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.#ctor(System.Action{`0},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class that can execute only once at a time.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.#ctor(System.Action{`0},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="allowConcurrentExecution">Instructs whether multiple executions of the <paramref name="execute"/> parameter can run concurrently.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.#ctor(System.Action{`0},System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="allowConcurrentExecution">Instructs whether multiple executions of the <paramref name="execute"/> parameter can run concurrently.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="allowConcurrentExecution">Instructs whether multiple executions of the <paramref name="execute"/> parameter can run concurrently.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="M:Labman.UserInterface.RelayCommandAsync`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean},System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.RelayCommandAsync"/> class.
            </summary>
            <param name="execute">The execution logic. IMPORTANT: If the action causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="canExecute">The execution status logic.  IMPORTANT: If the func causes a closure,
            you must set keepTargetAlive to true to avoid side effects.</param>
            <param name="allowConcurrentExecution">Instructs whether multiple executions of the <paramref name="execute"/> parameter can run concurrently.</param>
            <param name="userActivityLogMessage">The message to log in the activity log when this command is executed.</param>
            <param name="keepTargetAlive">If true, the target of the Action will
            be kept as a hard reference, which might cause a memory leak. You should only set this
            parameter to true if the action is causing a closure. See
            http://galasoft.ch/s/mvvmweakaction.</param>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.DeviceSelection">
            <summary>Interaction logic for DeviceSelection.xaml</summary>
            <summary>
            DeviceSelection
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.DeviceSelection.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.UserInterface.WindowViews.DeviceSelection"/></summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.DeviceSelection.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.EditDeviceName">
            <summary>
            Interaction logic for EditDeviceName.xaml
            </summary>
            <summary>
            EditDeviceName
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.EditDeviceName.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.EditDeviceName.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.MessageBox">
            <summary>
            Interaction logic for MessageBox.xaml
            </summary>
            <summary>
            MessageBox
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.String)">
            <summary>
            Displays a message box that has a message and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.String,System.String)">
            <summary>
            Displays a message box that has a message and title bar caption; and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Displays a message box that has a message, title bar caption, and button; and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A System.Windows.MessageBoxButton value that specifies which button or buttons to display.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A System.Windows.MessageBoxButton value that specifies which button or buttons to display.</param>
            <param name="icon">A System.Windows.MessageBoxImage value that specifies the icon to display.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result and returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A System.Windows.MessageBoxButton value that specifies which button or buttons to display.</param>
            <param name="icon">A System.Windows.MessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A System.Windows.MessageBoxResult value that specifies the default result of the message box.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
            <summary>
            Displays a message box that has a message, title bar caption, button, and icon; and that accepts a default message box result, complies with the specified options, and returns a result.
            </summary>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A System.Windows.MessageBoxButton value that specifies which button or buttons to display.</param>
            <param name="icon">A System.Windows.MessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A System.Windows.MessageBoxResult value that specifies the default result of the message box.</param>
            <param name="options">A System.Windows.MessageBoxOptions value object that specifies the options.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.Windows.Window,System.String)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message and returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.Windows.Window,System.String,System.String)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message and title bar caption; and it returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, and button; and it also returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A System.Windows.MessageBoxButton value that specifies which button or buttons to display.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and it also returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A System.Windows.MessageBoxButton value that specifies which button or buttons to display.</param>
            <param name="icon">A System.Windows.MessageBoxImage value that specifies the icon to display.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result and returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A System.Windows.MessageBoxButton value that specifies which button or buttons to display.</param>
            <param name="icon">A System.Windows.MessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A System.Windows.MessageBoxResult value that specifies the default result of the message box.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.Show(System.Windows.Window,System.String,System.String,System.Windows.MessageBoxButton,System.Windows.MessageBoxImage,System.Windows.MessageBoxResult,System.Windows.MessageBoxOptions)">
            <summary>
            Displays a message box in front of the specified window. The message box displays a message, title bar caption, button, and icon; and accepts a default message box result, complies with the specified options, and returns a result.
            </summary>
            <param name="owner">A System.Windows.Window that represents the owner window of the message box.</param>
            <param name="messageBoxText">A System.String that specifies the text to display.</param>
            <param name="caption">A System.String that specifies the title bar caption to display.</param>
            <param name="button">A System.Windows.MessageBoxButton value that specifies which button or buttons to display.</param>
            <param name="icon">A System.Windows.MessageBoxImage value that specifies the icon to display.</param>
            <param name="defaultResult">A System.Windows.MessageBoxResult value that specifies the default result of the message box.</param>
            <param name="options">A System.Windows.MessageBoxOptions value object that specifies the options.</param>
            <returns>A System.Windows.MessageBoxResult value that specifies which message box button is clicked by the user.</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.MessageBox.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.LmcMotorRatioCalculatorWindow">
            <summary>
            Interaction logic for MotorRatioCalculatorWindow.xaml
            </summary>
            <summary>
            LmcMotorRatioCalculatorWindow
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.LmcMotorRatioCalculatorWindow.#ctor">
            <summary>
            Initialises a new instance of the LcmMotorRatioCalculatorWindow
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.LmcMotorRatioCalculatorWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.PreRunChecks">
            <summary>
            Interaction logic for PreRunChecks.xaml
            </summary>
            <summary>
            PreRunChecks
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.PreRunChecks.#ctor(Labman.UserInterface.ViewModels.PreRunChecksViewModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.WindowViews.PreRunChecks"/> class.
            </summary>
            <param name="vm">The vm.</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.PreRunChecks.#ctor(Labman.UserInterface.ViewModels.PreRunChecksViewModel.DoneAction,System.Collections.Generic.IEnumerable{Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck})">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.WindowViews.PreRunChecks"/> class.
            </summary>
            <param name="doneAction">Action to be performed when the user start</param>
            <param name="preRunChecks">The pre run checks which must be fullfilled</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.PreRunChecks.#ctor(Labman.UserInterface.ViewModels.PreRunChecksViewModel.DoneAction,Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck[])">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.WindowViews.PreRunChecks"/> class.
            </summary>
            <param name="doneAction">Action to be performed when the user start</param>
            <param name="preRunChecks">The pre run checks which must be fullfilled</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.PreRunChecks.#ctor(Labman.UserInterface.ViewModels.PreRunChecksViewModel.DoneAction,System.Windows.Media.SolidColorBrush,System.Collections.Generic.IEnumerable{Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck})">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.WindowViews.PreRunChecks"/> class.
            </summary>
            <param name="doneAction">Action to be performed when the user start</param>
            <param name="backgroundColour">The background colour of the window. Not currently implemented in view.</param>
            <param name="preRunChecks">The pre run checks which must be fullfilled</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.PreRunChecks.#ctor(Labman.UserInterface.ViewModels.PreRunChecksViewModel.DoneAction,System.Windows.Media.SolidColorBrush,Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck[])">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.WindowViews.PreRunChecks"/> class.
            </summary>
            <param name="doneAction">Action to be performed when the user start</param>
            <param name="backgroundColour">The background colour of the window. Not currently implemented in view.</param>
            <param name="preRunChecks">The pre run checks which must be fullfilled</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.PreRunChecks.#ctor(Labman.UserInterface.ViewModels.PreRunChecksViewModel.DoneAction,System.Windows.Media.SolidColorBrush,System.Windows.Media.SolidColorBrush,System.Collections.Generic.IEnumerable{Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck})">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.WindowViews.PreRunChecks"/> class.
            </summary>
            <param name="doneAction">Action to be performed when the user start</param>
            <param name="backgroundColour">The background colour of the window. Not currently implemented in view.</param>
            <param name="highlightColour">The preruncheck highlight select colour</param>
            <param name="preRunChecks">The pre run checks which must be fullfilled</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.PreRunChecks.#ctor(Labman.UserInterface.ViewModels.PreRunChecksViewModel.DoneAction,System.Windows.Media.SolidColorBrush,System.Windows.Media.SolidColorBrush,Labman.UserInterface.ViewModels.PreRunChecksViewModel.PreRunCheck[])">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.WindowViews.PreRunChecks"/> class.
            </summary>
            <param name="doneAction">Action to be performed when the user start</param>
            <param name="backgroundColour">The background colour of the window. Not currently implemented in view.</param>
            <param name="highlightColour">The preruncheck highlight select colour</param>
            <param name="preRunChecks">The pre run checks which must be fullfilled</param>
        </member>
        <member name="E:Labman.UserInterface.WindowViews.PreRunChecks.PropertyChanged">
            <summary>
            Property changed event handler
            </summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.PreRunChecks.BackgroundBrush">
            <summary>
            The colour of the check background. Not currently implemented in view.
            </summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.PreRunChecks.HighlightBrush">
            <summary>
            The colour of the check highlight
            </summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.PreRunChecks.ShadowVisibility">
            <summary>
            Gets or sets the shadow visibility. Not currently implemented in view.
            </summary>
            <value>The shadow visibility.</value>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.PreRunChecks.VM">
            <summary>
            Gets or sets the viewmodel.
            </summary>
            <value>The vm.</value>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.PreRunChecks.StartButtonText">
            <summary>
            The text of the start button
            </summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.PreRunChecks.StartButtonTextProperty">
            <summary>
            Using a DependencyProperty as the backing store for StartButtonText.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.PreRunChecks.CancelButtonText">
            <summary>
            The text of the cancel button
            </summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.PreRunChecks.CancelButtonTextProperty">
            <summary>
            Using a DependencyProperty as the backing store for CancelButtonText.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.PreRunChecks.OnPropertyChanged(System.String)">
            <summary>
            notifys view when property has changed
            </summary>
            <param name="caller">The property to update</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.PreRunChecks.Close">
            <summary>
            Closes this window and sets the <see cref="P:System.Windows.Window.DialogResult"/> property according to the view model's <see cref="P:Labman.UserInterface.ViewModels.PreRunChecksViewModel.Result"/> property.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.PreRunChecks.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.RegistrationWindow">
            <summary>
            Class RegistrationWindow.
            </summary>
            <seealso cref="T:System.Windows.Window" />
            <seealso cref="T:System.Windows.Markup.IComponentConnector" />
            <summary>
            RegistrationWindow
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.RegistrationWindow.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.WindowViews.RegistrationWindow"/> class.
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.RegistrationWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.StatusWindow">
            <summary>
            Interaction logic for StatusWindow.xaml
            </summary>
            <summary>
            StatusWindow
            </summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.StatusWindow._dispatcher">
            <summary>UI thread dispatcher object</summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.StatusWindow.VM">
            <summary>
            View Model Object
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.StatusWindow.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Labman.UserInterface.WindowViews.StatusWindow"/> class
            </summary>
            <param name="title">Window title</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.StatusWindow.DisplayError(System.Exception)">
            <summary>
            Displays an exception error
            </summary>
            <param name="ex">The exception to display</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.StatusWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.UserLogin">
            <summary>
            Interaction logic for UserLogin.xaml
            </summary>
            <summary>
            UserLogin
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.UserLogin.#ctor">
            <summary>
            Constructor for the user login window
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.UserLogin.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.WindowBase">
            <summary>Base class for a Window</summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.WindowBase.CloseButtonEnabledProperty">
            <summary>Whether the close button is enabled. Default true.</summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.WindowBase.CloseEndsAppProperty">
            <summary>Whether the close button ends the application as well as closing the window. Default false.</summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.WindowBase.MaximiseOverTaskBarProperty">
            <summary>Whether the window maximises over the taskbar. Default false.</summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.#ctor">
            <summary>Instantiates a new instance of <see cref="T:Labman.UserInterface.WindowViews.WindowBase"/></summary>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.WindowBase.BlurOptions">
            <summary>Represents different ways of blurring windows when another window should have more focus.</summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.WindowBase.BlurOptions.None">
            <summary>Doesn't blur or darken other windows</summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.WindowBase.BlurOptions.Blur">
            <summary>Blurs other windows</summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.WindowBase.BlurOptions.Darken">
            <summary>Darkens other windows</summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.WindowBase.BlurOptions.BlurAndDarken">
            <summary>Blurs and darkens other windows</summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.WindowBase.DarkenBrush">
            <summary>The brush used to darken this window.</summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.WindowBase.DarkenOpacity">
            <summary>The transparency of the darkening effect. 0 = no effect, 1 = fully darkened colour.</summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.WindowBase.IsDarkened">
            <summary>Whether this window is in a darkened state.</summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.WindowBase.CloseButtonEnabled">
            <summary>Whether the close button is enabled. Default true.</summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.WindowBase.CloseEndsApp">
            <summary>Whether the close button ends the application as well as closing the window. Default false.</summary>
        </member>
        <member name="P:Labman.UserInterface.WindowViews.WindowBase.MaximiseOverTaskBar">
            <summary>Whether the window maximises over the taskbar. Default false.</summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.OnApplyTemplate">
            <summary>
            Is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>
            </summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.ShowDialog(Labman.UserInterface.WindowViews.WindowBase.BlurOptions)">
            <summary>Opens a window and returns only when the newly opened window is closed. Blurs all other windows according to the given parameter</summary>
            <param name="blurOption">Specifies how other windows should be blurred</param>
            <returns>
            A System.Nullable`1 value of type System.Boolean that specifies whether the activity was accepted (true) or
            canceled (false). The return value is the value of the System.Windows.Window.DialogResult property before a window closes.
            </returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.Show(Labman.UserInterface.WindowViews.WindowBase.BlurOptions)">
            <summary>Opens a window and returns immediately</summary>
            <param name="blurOption">The blur type to be applied to other windows</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.ForceWindowRemeasure(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            <see cref="T:System.Windows.PropertyChangedCallback"/> for when the <see cref="F:Labman.UserInterface.WindowViews.WindowBase.MaximiseOverTaskBarProperty"/> changes. Forces the window to redraw if the <see cref="T:System.Windows.WindowState"/> is <see cref="F:System.Windows.WindowState.Maximized"/>.
            </summary>
            <param name="d">The dependency object</param>
            <param name="e">The args</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.OnInitialized(System.EventArgs)">
            <summary>
            This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized"/> is set to true internally
            </summary>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> that contains the event data</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.ResizeModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when the <see cref="F:System.Windows.Window.ResizeModeProperty"/> changes. Causes value coercion of the <see cref="F:System.Windows.Window.AllowsTransparencyProperty"/></summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="e">The change event args</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.AllowsTransparencyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>Called when the <see cref="P:System.Windows.Window.AllowsTransparency"/> property changes.</summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="e">The change event args</param>
            <remarks>
            The only reason this function exists is so we can coerce the <see cref="P:System.Windows.Window.AllowsTransparency"/> property.
            However, the <see cref="T:System.Windows.FrameworkPropertyMetadata"/> constructor requires a property changed callback when using a coerce value callback
            </remarks>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.CoerceAllowsTransparency(System.Windows.DependencyObject,System.Object)">
            <summary>Coerces the <see cref="P:System.Windows.Window.AllowsTransparency"/> property based on the value of the <see cref="F:System.Windows.Window.ResizeModeProperty"/>.</summary>
            <param name="d">The object on which the changed occurred</param>
            <param name="baseValue">The incomming value for coercion</param>
            <returns>The coerced value for <see cref="P:System.Windows.Window.AllowsTransparency"/></returns>
            <remarks>
            Getting the desired behaviour in terms of window resize bars, drop shadows, window states and resize modes is tricky.
            The desired behaviour is summarised as follows:
            Unless the window is maximized, we always want a drop shadow.
            Unless the window is maximized, and when ResizeMode is CanResize[WithGrip] we always want drag bars to resize the edges of the window.
            
            Due to the way a window resizes, especially considering Min/Max Width/Heights, taskbar space and WindowStyle=None, the easiest way to acheive
            reliable window drag bars to resize a window, is using the <see cref="T:System.Windows.Shell.WindowChrome"/> as is implemented in Generic.xaml.
            This also gives us the built-in drop shadow for the window. However, when the ResizeMode is such that no drag bars should be visible, we have
            to remove the WindowChrome and implement our own drop shadow. This requires AllowsTransparency=true.
            This was previously acheived in the default style in Generic.xaml and worked fine for existing uses. However, when a window that can resize
            is created in code, rather than in xaml (e.g. a Popup window using ShowDialog), the values for AllowsTransparency defined in Generic.xaml
            aren't applied until after Show() or ShowDialog() are called. Because no local value has been defined for AllowsTransparency, when the values
            defined in Generic.xaml are applied, the property system performs value coercion on the incoming value (whether it be true or false). As part
            of the value coercion, the .NET code checks whether the window already has a SourceWindow, which, in effect, checks whether the Window has
            already had Show() or ShowDialog() called, which it has (see Window.CoerceAllowsTransparency, Window.cs, line ~827).
            As such, even if the incomming value of AllowsTransparency is the same as the current value, an error is thrown because the window has already
            been shown. When the window is instantiated in xaml, this seems to be avoided, probably because the properties are set before the window is
            shown, or perhaps because Show()/ShowDialog are not explicitly called.
            
            This all means that we have to ensure the value of AllowsTransparency is set correctly, depending on the value of ResizeMode. Setting one
            value depending on the value of another is what value coercion is for, so we use that.
            We also have to ensure the values of ResizeMode and WindowStyle are defaulted to the correct default values, but not in xaml. We do this by
            overriding their metadata in the static constructor. Note, however, we still have to coerce the AllowsTransparency value as the default value
            is ignored by value coercion.
            </remarks>
        </member>
        <member name="T:Labman.UserInterface.WindowViews.WindowBase.POINT">
            <summary>POINT aka POINTAPI</summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.WindowBase.POINT.x">
            <summary>x coordinate of point.</summary>
        </member>
        <member name="F:Labman.UserInterface.WindowViews.WindowBase.POINT.y">
            <summary>y coordinate of point.</summary>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.POINT.#ctor(System.Int32,System.Int32)">
            <summary>Construct a point of coordinates (x,y).</summary>
            <param name="x">x</param>
            <param name="y">y</param>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.RECT.ToString">
            <summary>Return a user friendly representation of this struct</summary>
            <returns>user friendly representation of this struct</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.RECT.Equals(System.Object)">
            <summary>Determine if 2 RECT are equal (deep compare)</summary>
            <param name="obj">object to compare with</param>
            <returns>true if equal</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.RECT.GetHashCode">
            <summary>Return the HashCode for this struct (not garanteed to be unique)</summary>
            <returns>the hashcode for this struct</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.RECT.op_Equality(Labman.UserInterface.WindowViews.WindowBase.RECT,Labman.UserInterface.WindowViews.WindowBase.RECT)">
            <summary>Determine if 2 RECT are equal (deep compare)</summary>
            <param name="rect1">lhs</param>
            <param name="rect2">rhs</param>
            <returns>true if equal</returns>
        </member>
        <member name="M:Labman.UserInterface.WindowViews.WindowBase.RECT.op_Inequality(Labman.UserInterface.WindowViews.WindowBase.RECT,Labman.UserInterface.WindowViews.WindowBase.RECT)">
            <summary>Determine if 2 RECT are different(deep compare)</summary>
            <param name="rect1">lhs</param>
            <param name="rect2">rhs</param>
            <returns>true if equal</returns>
        </member>
        <member name="T:Labman.UserInterface.SetupWizardWindow">
            <summary>
            Interaction logic for SetupWizardWindow.xaml
            </summary>
            <summary>
            SetupWizardWindow
            </summary>
        </member>
        <member name="M:Labman.UserInterface.SetupWizardWindow.#ctor(System.Collections.Generic.List{Labman.UserInterface.ViewModels.SetupWizardStep})">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.UserInterface.SetupWizardWindow" /> class.
            </summary>
            <param name="steps">The steps.</param>
        </member>
        <member name="M:Labman.UserInterface.SetupWizardWindow.Vm_RequestClose(System.Boolean)">
            <summary>
            Close the Dialog
            </summary>
            <param name="result">if set to <c>true</c> [result].</param>
        </member>
        <member name="M:Labman.UserInterface.SetupWizardWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Labman.IO.SignalRange">
            <summary>
            Class that represents an analog input signal range.
            </summary>
        </member>
        <member name="P:Labman.IO.SignalRange.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Labman.IO.SignalRange.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="M:Labman.IO.SignalRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:Labman.IO.SignalRanges">
            <summary>
            Static class containing single list of all possible analog input signal ranges.
            </summary>
        </member>
        <member name="M:Labman.IO.SignalRanges.#cctor">
            <summary>
            Initializes the <see cref="T:Labman.IO.SignalRanges"/> class.
            </summary>
        </member>
        <member name="P:Labman.IO.SignalRanges.Ranges">
            <summary>
            Gets or sets the signal ranges.
            </summary>
            <value>The ranges.</value>
        </member>
        <member name="T:Labman.IO.AnalogInput">
            <summary>
            The input class represents a single analog input in the system and is setup to bind to a particular hardware device.
            Input types are stored in the inputs collection in the connectedhardware class.
            </summary>
        </member>
        <member name="F:Labman.IO.AnalogInput._ioDevice">
            <summary>
            IO device reference
            </summary>
        </member>
        <member name="M:Labman.IO.AnalogInput.#ctor(Labman.IO.AnalogInputSettings)">
            <summary>
            Constructor creates a new instance of the input class
            </summary>
            <param name="settings">The settings to create the class with</param>
        </member>
        <member name="M:Labman.IO.AnalogInput.#ctor">
            <summary>
            Constructor creates a new instance of the input class
            </summary>
        </member>
        <member name="P:Labman.IO.AnalogInput.Settings">
            <summary>
            Settings for this input
            </summary>
        </member>
        <member name="P:Labman.IO.AnalogInput.HelpFile">
            <summary>
            The name of hardware device help rich text file. If left blank, the usercontrol will attempt to infer a path using
            reflection e.g. MitsubishiRobotArmHelpFile
            </summary>
        </member>
        <member name="M:Labman.IO.AnalogInput.Setup">
            <summary>
            Sets up the class instance and validates settings
            </summary>
        </member>
        <member name="M:Labman.IO.AnalogInput.ReadAnalogInput(System.Int32)">
            <summary>
            Reads the analog input.
            </summary>
            <param name="simulatedValue">The simulated value.</param>
            <returns>The value of the analog input</returns>
        </member>
        <member name="M:Labman.IO.AnalogInput.ReadAnalogInputDouble(System.Int32)">
            <summary>
            Reads the analog input as a double
            </summary>
            <param name="simulatedValue">The simulated value.</param>
            <returns>The value of the analog input</returns>
        </member>
        <member name="T:Labman.IO.AnalogInputSettings">
            <summary>
            Class that defines the settings for an Analog Input
            </summary>
        </member>
        <member name="M:Labman.IO.AnalogInputSettings.#ctor">
            <summary>
            Class constructor sets default parameters
            </summary>
        </member>
        <member name="P:Labman.IO.AnalogInputSettings.IODeviceName">
            <summary>The name of the IO device this input is on</summary>
        </member>
        <member name="P:Labman.IO.AnalogInputSettings.IODeviceInputIndex">
            <summary>The index of the index on the IO device</summary>
        </member>
        <member name="P:Labman.IO.AnalogInputSettings.InputName">
            <summary>The unique name of this input</summary>
        </member>
        <member name="P:Labman.IO.AnalogInputSettings.SignalRange">
            <summary>Gets or sets the signal range.</summary>
        </member>
        <member name="P:Labman.IO.AnalogInputSettings.UniqueKey">
            <summary>
            A unique key for the item that needs to be saved
            </summary>
        </member>
        <member name="M:Labman.IO.AnalogInputSettings.Validate">
            <summary>
            Validate that the settings are valid
            </summary>
        </member>
        <member name="T:Labman.IO.AnalogOutput">
            <summary>
            The output class represents a single output in the system and is setup to bind to a particular hardware device.
            Output types are stored in the outputs collection in the connectedhardware class.
            </summary>
        </member>
        <member name="P:Labman.IO.AnalogOutput.Settings">
            <summary>
            Settings for this output
            </summary>
        </member>
        <member name="F:Labman.IO.AnalogOutput._ioDevice">
            <summary>
            IO device reference
            </summary>
        </member>
        <member name="P:Labman.IO.AnalogOutput.HelpFile">
            <summary>
            The name of hardware device help rich text file. If left blank, the usercontrol will attempt to infer a path using reflection
            e.g. MitsubishiRobotArmHelpFile
            </summary>
        </member>
        <member name="M:Labman.IO.AnalogOutput.#ctor(Labman.IO.AnalogOutputSettings)">
            <summary>
            Constructor creates a new instance of the output class
            </summary>
            <param name="settings">The settings to create the class with</param>
        </member>
        <member name="M:Labman.IO.AnalogOutput.#ctor">
            <summary>
            Constructor creates a new instance of the output class
            </summary>
        </member>
        <member name="M:Labman.IO.AnalogOutput.Setup">
            <summary>
            Sets up the class instance and validates settings
            </summary>
        </member>
        <member name="M:Labman.IO.AnalogOutput.Setup(System.Boolean)">
            <summary>
            Sets up the class instance and validates settings
            </summary>
            <param name="logMileage">Whether mileage should be logged on this output. Default true. Set to false when creating dummy outputs for hardware config UI.</param>
        </member>
        <member name="M:Labman.IO.AnalogOutput.SetOutput(System.Int32)">
            <summary>
            Sets the value of analog output.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:Labman.IO.AnalogOutputSettings">
            <summary>
            Class that defines the settings for an Output
            </summary>
        </member>
        <member name="P:Labman.IO.AnalogOutputSettings.IODeviceName">
            <summary>The name of the IO device this output is on, this should exist in the connected hardware iodevices collection</summary>
        </member>
        <member name="P:Labman.IO.AnalogOutputSettings.IODeviceOutputIndex">
            <summary>The output index on the IO device</summary>
        </member>
        <member name="P:Labman.IO.AnalogOutputSettings.OutputName">
            <summary>The name of the output</summary>
        </member>
        <member name="P:Labman.IO.AnalogOutputSettings.IgnoreEstop">
            <summary>Flag to specify whether to ignore the e/stop when switching</summary>
        </member>
        <member name="M:Labman.IO.AnalogOutputSettings.#ctor">
            <summary>
            Class constructor sets default parameters
            </summary>
        </member>
        <member name="M:Labman.IO.AnalogOutputSettings.Validate">
            <summary>
            Validate that the settings are valid
            </summary>
        </member>
        <member name="P:Labman.IO.AnalogOutputSettings.UniqueKey">
            <summary>
            A unique key for the item that needs to be saved
            </summary>
        </member>
        <member name="T:Labman.IO.Cylinder">
            <summary>
            The cylinder class is identical to an output but has additional Fire and Retract methods.
            Cylinder types are stored in the cylinders collection in the connectedhardware class.
            </summary>
        </member>
        <member name="M:Labman.IO.Cylinder.#ctor(Labman.IO.OutputSettings)">
            <summary>
            Constructor creates a new instance of the output class
            </summary>
            <param name="settings">The settings to create the class with</param>
        </member>
        <member name="M:Labman.IO.Cylinder.Fire">
            <summary>
            Fire the cylinder (turn it to it's on state)
            </summary>
        </member>
        <member name="M:Labman.IO.Cylinder.Fire(Labman.IO.Output.SwitchParameters)">
            <summary>
            Fire the cylinder (turn it to it's on state)
            </summary>
            <param name="switchParameters">The switch parameters to use</param>
            <returns>Whether the cylinder move suceeded</returns>
        </member>
        <member name="M:Labman.IO.Cylinder.FireWithRetries(System.Int32)">
            <summary>
            Fire the cylinder (turn it to it's on state).
            Retries by reverting state and trying again if sensor check fails
            </summary>
            <param name="attempts">The number of attempts to make at firing</param>
        </member>
        <member name="M:Labman.IO.Cylinder.FireWithRetries(System.Int32,Labman.IO.Output.SwitchParameters)">
            <summary>
            Fire the cylinder (turn it to it's on state).
            Retries by reverting state and trying again if sensor check fails
            </summary>
            <param name="attempts">The number of attempts to make at firing</param>
            <param name="flags">The switch flags</param>
            <returns>Whether the cylinder move suceeded</returns>
        </member>
        <member name="M:Labman.IO.Cylinder.IsFired">
            <summary>
            Checks the sensor state (if specified) to see if the cylinder is fired
            </summary>
            <returns>True if the cylinder is fired. False if no sensor is specified and False if the cylinder is not fired.</returns>
        </member>
        <member name="M:Labman.IO.Cylinder.IsRetracted">
            <summary>
            Checks the sensor state (if specified) to see if the cylinder is retracted
            </summary>
            <returns>True if the cylinder is retracted. False if no sensor is specified and False if the cylinder is not retracted.</returns>
        </member>
        <member name="M:Labman.IO.Cylinder.Retract">
            <summary>
            Retract the cylinder (turn it to it's off state)
            </summary>
        </member>
        <member name="M:Labman.IO.Cylinder.Retract(Labman.IO.Output.SwitchParameters)">
            <summary>
            Retract the cylinder (turn it to it's off state)
            </summary>
            <param name="switchParameters">The switch parameters to use</param>
            <returns>Whether the cylinder move suceeded</returns>
        </member>
        <member name="M:Labman.IO.Cylinder.RetractWithRetries(System.Int32)">
            <summary>
            Retract the cylinder (turn it to it's off state).
            Retries by reverting state and trying again if sensor check fails
            </summary>
            <param name="attempts">The number of attempts to make at retracting.</param>
        </member>
        <member name="M:Labman.IO.Cylinder.RetractWithRetries(System.Int32,Labman.IO.Output.SwitchParameters)">
            <summary>
            Retract the cylinder (turn it to it's off state).
            Retries by reverting state and trying again if sensor check fails
            </summary>
            <param name="attempts">The number of attempts to make at retracting.</param>
            <param name="flags">The switch flags</param>
            <returns>Whether the operation suceeded</returns>
        </member>
        <member name="T:Labman.IO.Input">
            <summary>
            The input class represents a single input in the system and is setup to bind to a particular hardware device.
            Input types are stored in the inputs collection in the connectedhardware class.
            </summary>
        </member>
        <member name="F:Labman.IO.Input._ioDevice">
            <summary>
            IO device reference
            </summary>
        </member>
        <member name="F:Labman.IO.Input._isSetup">
            <summary>
            Flag determining if the input has been set up.
            </summary>
        </member>
        <member name="M:Labman.IO.Input.#ctor(Labman.IO.InputSettings)">
            <summary>
            Constructor creates a new instance of the input class
            </summary>
            <param name="settings">The settings to create the class with</param>
        </member>
        <member name="M:Labman.IO.Input.#ctor">
            <summary>
            Constructor creates a new instance of the input class
            </summary>
        </member>
        <member name="T:Labman.IO.Input.DebounceModes">
            <summary>
            Possible debounce modes
            </summary>
        </member>
        <member name="F:Labman.IO.Input.DebounceModes.IgnoreDebounceTimes">
            <summary>
            Ignore the specified de-bounce delays
            </summary>
        </member>
        <member name="F:Labman.IO.Input.DebounceModes.UseDebounceTimes">
            <summary>
            Use the de-bounce settings specified
            </summary>
        </member>
        <member name="P:Labman.IO.Input.Settings">
            <summary>
            Settings for this input
            </summary>
        </member>
        <member name="P:Labman.IO.Input.HelpFile">
            <summary>
            The name of hardware device help rich text file. If left blank, the usercontrol will attempt to infer a path using
            reflection e.g. MitsubishiRobotArmHelpFile
            </summary>
        </member>
        <member name="P:Labman.IO.Input.IsSetup">
            <summary>
            Gets a value indicating whether this input has been set-up.
            </summary>
            <value><c>true</c> if this instance is set-up; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Labman.IO.Input.Setup">
            <summary>
            Sets up the class instance and validates settings
            </summary>
        </member>
        <member name="M:Labman.IO.Input.ReadInput(Labman.Hardware.IODevices.IODevice.InputState)">
            <summary>
            Reads and returns the state of an input
            </summary>
            <param name="simulatedState">The state to return when in simulation mode</param>
            <returns>The current state of the specified input</returns>
        </member>
        <member name="M:Labman.IO.Input.ReadInput(Labman.Hardware.IODevices.IODevice.InputState,Labman.IO.Input.DebounceModes)">
            <summary>
            Reads and returns the state of an input
            </summary>
            <param name="simulatedState">The state to return when in simulation mode</param>
            <param name="debounceMode">The de-bounce mode to use</param>
            <returns>The current state of the specified input</returns>
        </member>
        <member name="T:Labman.IO.InputSettings">
            <summary>
            Class that defines the settings for an Input
            </summary>
        </member>
        <member name="M:Labman.IO.InputSettings.#ctor">
            <summary>
            Class constructor sets default parameters
            </summary>
        </member>
        <member name="P:Labman.IO.InputSettings.IODeviceName">
            <summary>The name of the IO device this input is on</summary>
        </member>
        <member name="P:Labman.IO.InputSettings.IODeviceInputIndex">
            <summary>The index of the index on the IO device</summary>
        </member>
        <member name="P:Labman.IO.InputSettings.InputName">
            <summary>The unique name of this input</summary>
        </member>
        <member name="P:Labman.IO.InputSettings.DebounceTime">
            <summary>The time in milliseconds to debounce the input for</summary>
        </member>
        <member name="P:Labman.IO.InputSettings.IsInverted">
            <summary>A flag which indicates if the input should be inverted</summary>
        </member>
        <member name="P:Labman.IO.InputSettings.UniqueKey">
            <summary>
            A unique key for the item that needs to be saved
            </summary>
        </member>
        <member name="M:Labman.IO.InputSettings.Validate">
            <summary>
            Validate that the settings are valid
            </summary>
        </member>
        <member name="T:Labman.IO.Output">
            <summary>
            The output class represents a single output in the system and is setup to bind to a particular hardware device.
            Output types are stored in the outputs collection in the connectedhardware class.
            </summary>
        </member>
        <member name="F:Labman.IO.Output._ioDevice">
            <summary>
            IO device reference
            </summary>
        </member>
        <member name="M:Labman.IO.Output.#ctor(Labman.IO.OutputSettings)">
            <summary>
            Constructor creates a new instance of the output class
            </summary>
            <param name="settings">The settings to create the class with</param>
        </member>
        <member name="M:Labman.IO.Output.#ctor">
            <summary>
            Constructor creates a new instance of the output class
            </summary>
        </member>
        <member name="T:Labman.IO.Output.SwitchParameters">
            <summary>
            An enumeration of possible switch parameters that may be used
            </summary>
        </member>
        <member name="F:Labman.IO.Output.SwitchParameters.None">
            <summary>No additional switch parameters</summary>
        </member>
        <member name="F:Labman.IO.Output.SwitchParameters.SkipSensorCheckAndDelay">
            <summary>Ignore the defined sensor check and delay times, just switch the output and return</summary>
        </member>
        <member name="F:Labman.IO.Output.SwitchParameters.DoNotThrowExceptionOnSensorFault">
            <summary>Return sensor state instead of throwing an exception if sensor not made</summary>
        </member>
        <member name="F:Labman.IO.Output.SwitchParameters.IgnoreEstop">
            <summary>Ignore estop, overrides output settings</summary>
        </member>
        <member name="F:Labman.IO.Output.SwitchParameters.PreSwitchSensorCheck">
            <summary>Check the defined sensor before switching and return immediately if already in the correct state. Ignored if <see cref="F:Labman.IO.Output.SwitchParameters.SkipSensorCheckAndDelay"/> is specified.</summary>
        </member>
        <member name="P:Labman.IO.Output.Settings">
            <summary>
            Settings for this output
            </summary>
        </member>
        <member name="P:Labman.IO.Output.HelpFile">
            <summary>
            The name of hardware device help rich text file. If left blank, the usercontrol will attempt to infer a path using reflection
            e.g. MitsubishiRobotArmHelpFile
            </summary>
        </member>
        <member name="M:Labman.IO.Output.Setup">
            <summary>
            Sets up the class instance and validates settings
            </summary>
        </member>
        <member name="M:Labman.IO.Output.Setup(System.Boolean)">
            <summary>
            Sets up the class instance and validates settings
            </summary>
            <param name="logMileage">Whether mileage should be logged on this output. Default true. Set to false when creating dummy outputs for hardware config UI.</param>
        </member>
        <member name="M:Labman.IO.Output.On">
            <summary>
            Switch the output on (output may be inverted if selected in the config)
            </summary>
        </member>
        <member name="M:Labman.IO.Output.Off">
            <summary>
            Switch the output off (output may be inverted if selected in the config)
            </summary>
        </member>
        <member name="M:Labman.IO.Output.On(Labman.IO.Output.SwitchParameters)">
            <summary>
            Switch the output on (output may be inverted if selected in the config)
            </summary>
            <param name="switchParameters">The switch parameters to use</param>
            <returns><c>true</c>If a timeout occured in 'DoNotThrowExceptionOnSensorFault' mode returns <c>false</c>, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Labman.IO.Output.Off(Labman.IO.Output.SwitchParameters)">
            <summary>
            Switch the output off (output may be inverted if selected in the config)
            </summary>
            <param name="switchParameters">The switch parameters to use</param>
            <returns><c>true</c>If a timeout occured in 'DoNotThrowExceptionOnSensorFault' mode returns <c>false</c>, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Labman.IO.Output.Switch(System.Boolean)">
            <summary>
            Switch the output off (output may be inverted if selected in the config)
            </summary>
            <param name="state">if set to <c>true</c> [state].</param>
            <returns><c>true</c>If a timeout occured in 'DoNotThrowExceptionOnSensorFault' mode returns <c>false</c>, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Labman.IO.Output.Switch(Labman.Hardware.IODevices.IODevice.OutputState)">
            <summary>
            Switch the output off (output may be inverted if selected in the config)
            </summary>
            <param name="state">The state.</param>
            <returns><c>true</c>If a timeout occured in 'DoNotThrowExceptionOnSensorFault' mode returns <c>false</c>, <c>true</c> otherwise.</returns>
        </member>
        <member name="M:Labman.IO.Output.SwitchOutput(Labman.Hardware.IODevices.IODevice.OutputState,Labman.IO.Output.SwitchParameters)">
            <summary>
            Switches the output to the specified state.
            </summary>
            <param name="state">The state to switch to (True=On, False=Off). Note that the state can be inverted in the database.</param>
            <param name="switchParameters">The switch parameters to use</param>
            <returns><c>true</c> If a timeout occured in 'DoNotThrowExceptionOnSensorFault' mode returns <c>false</c>, <c>true</c> otherwise.</returns>
            <exception cref="T:Labman.BaseException">Sensor timeout</exception>
        </member>
        <member name="T:Labman.IO.OutputSettings">
            <summary>
            Class that defines the settings for an Output
            </summary>
        </member>
        <member name="M:Labman.IO.OutputSettings.#ctor">
            <summary>
            Class constructor sets default parameters
            </summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.IODeviceName">
            <summary>The name of the IO device this output is on, this should exist in the connected hardware iodevices collection</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.IODeviceOutputIndex">
            <summary>The output index on the IO device</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.OutputName">
            <summary>The name of the output</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.OnSensorName">
            <summary>The name of the input to look for after switching the output on</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.OffSensorName">
            <summary>The name of the input to look for after switching the output off</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.OnSensorTimeout">
            <summary>The timeout in milliseconds to wait for the on input to be set</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.OffSensorTimeout">
            <summary>The timeout in milliseconds to wait for the off input to be set</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.OnSwitchDelay">
            <summary>The delay in milliseconds to delay for after switching the output on</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.OffSwitchDelay">
            <summary>The delay in milliseconds to delay for after switching the output off</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.IgnoreEstop">
            <summary>Flag to specify whether to ignore the e/stop when switching</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.IsCylinder">
            <summary>Flag which sets whether to include this output in the cylinders collection or not</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.IsInverted">
            <summary>Flag that sets whether this output is inverted</summary>
        </member>
        <member name="P:Labman.IO.OutputSettings.UniqueKey">
            <summary>
            A unique key for the item that needs to be saved
            </summary>
        </member>
        <member name="M:Labman.IO.OutputSettings.Validate">
            <summary>
            Validate that the settings are valid
            </summary>
        </member>
        <member name="T:Labman.IO.OutputException">
            <summary>
            An exception thrown when an error occurs when switching output
            </summary>
        </member>
        <member name="M:Labman.IO.OutputException.#ctor(System.String)">
            <summary>
            The constructor overrides the base exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.IO.OutputException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Logging.ActivityLogging.ActivityLogFile">
            <summary>
            Logs user activity to a HTML log file.
            </summary>
        </member>
        <member name="M:Labman.Logging.ActivityLogging.ActivityLogFile.LogActivity(System.String,System.String,System.String)">
            <summary>
            Logs a user interaction
            </summary>
            <param name="username">The username of the logged in user (may be empty if no user logged in)</param>
            <param name="targetSite">The class/member that logged the user activity</param>
            <param name="logMessage">The message describing the interaction</param>
        </member>
        <member name="M:Labman.Logging.ActivityLogging.ActivityLogFile.#ctor(System.String,System.TimeSpan)">
            <summary>
            Default constructor
            </summary>
            <param name="fileName">The filename of the HTML log file</param>
            <param name="fileDuration">The duration to add messages to a log file for, a new file is created once this duration is exceeded</param>
        </member>
        <member name="T:Labman.Logging.ActivityLogging.IActivityLog">
            <summary>
            Interface to define a user activity logger
            </summary>
        </member>
        <member name="M:Labman.Logging.ActivityLogging.IActivityLog.LogActivity(System.String,System.String,System.String)">
            <summary>
            Logs a user interaction
            </summary>
            <param name="username">The username of the logged in user (may be empty if no user logged in)</param>
            <param name="targetSite">The class/member that logged the user activity</param>
            <param name="logMessage">The message describing the interaction</param>
        </member>
        <member name="T:Labman.Logging.HardwareLogging.RobotArms.ProgramState">
            <summary>
            An enumeration of possible program states
            </summary>
        </member>
        <member name="T:Labman.Logging.HardwareLogging.RobotArms.IProgramStatePersister">
            <summary>
            An interface to provide a record of the state of a robot arm
            </summary>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.IProgramStatePersister.StartNewProgram(System.String)">
            <summary>
            Indicates that a new program has been started on the arm
            </summary>
            <param name="programName">The name of the program</param>
            <returns>A unique identifier to be used when updating this program's state</returns>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.IProgramStatePersister.FlagProgramAsCompletedSuccessfully(System.Int32)">
            <summary>
            Flags a program as having completed successfully
            </summary>
            <param name="programId">The unique identifier of the program</param>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.IProgramStatePersister.FlagProgramAsFailed(System.Int32)">
            <summary>
            Flags a program as having failed to complete
            </summary>
            <param name="programId">The unique identifier of thge program</param>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.IProgramStatePersister.GetLastProgramState">
            <summary>
            Gets the completion state of the last program that was run on the arm
            </summary>
            <returns>A <see cref="T:Labman.Logging.HardwareLogging.RobotArms.ProgramState"/> indicating the state of the last program</returns>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.IProgramStatePersister.GetLastProgramName">
            <summary>
            Gets the name of the last program to run
            </summary>
            <returns>The name of the last program to run</returns>
        </member>
        <member name="T:Labman.Logging.HardwareLogging.RobotArms.RobotArmDatabaseProgramHistoryLog">
            <summary>
            An implementation of the <see cref="T:Labman.Logging.HardwareLogging.RobotArms.IProgramStatePersister"/> that stores all programs in the database as a log, to provide a record of all programs that are run
            </summary>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.RobotArmDatabaseProgramHistoryLog.#ctor(System.String,System.String,Labman.MotionControl.Arm)">
            <summary>
            Constructor for the RobotArmDatabaseProgramHistoryLog
            </summary>
            <param name="databaseConnectionName">The name of the database connection in the base class</param>
            <param name="tableName">he name of the table storing the log</param>            
            <param name="arm">The arm hardware class</param>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.RobotArmDatabaseProgramHistoryLog.FlagProgramAsCompletedSuccessfully(System.Int32)">
            <summary>
            Flags a program as having completed successfully
            </summary>
            <param name="programId">The unique identifier of the program</param>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.RobotArmDatabaseProgramHistoryLog.FlagProgramAsFailed(System.Int32)">
            <summary>
            Flags a program as having failed to complete
            </summary>
            <param name="programId">The unique identifier of thge program</param>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.RobotArmDatabaseProgramHistoryLog.GetLastProgramName">
            <summary>
            Gets the name of the last program to run
            </summary>
            <returns>The name of the last program to run</returns>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.RobotArmDatabaseProgramHistoryLog.GetLastProgramState">
            <summary>
            Gets the completion state of the last program that was run on the arm
            </summary>
            <returns>A <see cref="T:Labman.Logging.HardwareLogging.RobotArms.ProgramState"/> indicating the state of the last program</returns>
        </member>
        <member name="M:Labman.Logging.HardwareLogging.RobotArms.RobotArmDatabaseProgramHistoryLog.StartNewProgram(System.String)">
            <summary>
            Indicates that a new program has been started on the arm
            </summary>
            <param name="programName">The name of the program</param>
            <returns>A unique identifier to be used when updating this program's state</returns>
        </member>
        <member name="T:Labman.Logging.LogFile">
            <summary>
            The LogFile class is used to add messages to log files
            </summary>
        </member>
        <member name="T:Labman.Logging.LogFile.LogMessageAddedEventHandler">
            <summary>
            Delegate for log message added event.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="E:Labman.Logging.LogFile.MessageAdded">
            <summary>
            Raised whenever a log message is added.
            </summary>
        </member>
        <member name="F:Labman.Logging.LogFile._messageQueue">
            <summary>Nessage Queue where all incoming log messages are placed. A message processor method removes items from the queue to log out</summary>
        </member>
        <member name="F:Labman.Logging.LogFile._messageProcessorRunning">
            <summary>A flag which indicates whether the message processor method is currently running</summary>
        </member>
        <member name="F:Labman.Logging.LogFile._logFileName">
            <summary>The filename to log out to</summary>
        </member>
        <member name="F:Labman.Logging.LogFile._timeSuffix">
            <summary>The time suffix appended to the end of the filename</summary>
        </member>
        <member name="F:Labman.Logging.LogFile._messageQueueProcessor">
            <summary>Timer object that is started when the class is created and checks the message queue for messages to log</summary>
        </member>
        <member name="F:Labman.Logging.LogFile._recentMessages">
            <summary>Collection of recent log messages that can be bound to by a user interface control</summary>
        </member>
        <member name="F:Labman.Logging.LogFile._numberOfLogsToKeepInRecentList">
            <summary>The maximum number of messages to keep in the recent logs collection</summary>
        </member>
        <member name="F:Labman.Logging.LogFile._timeFileWasCreated">
            <summary>Holds the time that the current log file was created</summary>
        </member>
        <member name="F:Labman.Logging.LogFile._fileDuration">
            <summary>Holds the duration to add messages to a log file for, a new file is created once this duration is exceeded</summary>
        </member>
        <member name="P:Labman.Logging.LogFile.RecentMessages">
            <summary>
            Collection of recent log messages that can be bound to by a user interface control
            </summary>
        </member>
        <member name="M:Labman.Logging.LogFile.#ctor(System.String,System.Boolean,System.Int32,System.TimeSpan)">
            <summary>
            Log file constructor, creates message queues and prepares the class for use
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="overwriteExistingFile">if set to <c>true</c> [overwrite existing file].</param>
            <param name="numberOfLogsToKeepInRecentList">The number of logs to keep in recent list.</param>
            <param name="fileDuration">The duration to add messages to a log file for, a new file is created once this duration is exceeded</param>
            <exception cref="T:Labman.BaseException">
            A filename must be specified to create a log file
            or
            A path must be given in the filename
            or
            The file duration must be at least one minute
            </exception>
        </member>
        <member name="M:Labman.Logging.LogFile.#ctor(System.Int32)">
            <summary>
            Log file constructor, creates message queues and prepares the class for use.
            This constructor sets up to allow logs to be displayed on screen but NOT logged to file.
            </summary>
            <param name="numberOfLogsToKeepInRecentList">The number of logs to keep in recent list.</param>
        </member>
        <member name="M:Labman.Logging.LogFile.ChangeLogFileName(System.String,System.Boolean)">
            <summary>
            Change the log file name
            </summary>
            <param name="fileName">The new log filename to use</param>
            <param name="overwriteExistingFile">True to overwrite an existing logfile</param>
        </member>
        <member name="M:Labman.Logging.LogFile.AddLogMessage(System.String,Labman.Logging.LogMessage.LogType)">
            <summary>
            This method queues a log message to be saved to the log file.
            Messages are queued and processed in a seperate thread to keep processing time low.
            </summary>
            <param name="message">The message text to log</param>
            <param name="logType">The type of log to add</param>
        </member>
        <member name="M:Labman.Logging.LogFile.AddLogMessage(Labman.Logging.LogMessage)">
            <summary>
            This method queues a log message to be saved to the log file.
            Messages are queued and processed in a seperate thread to keep processing time low.
            </summary>
            <param name="messageToLog">The message to log</param>
        </member>
        <member name="M:Labman.Logging.LogFile.AddToFile(Labman.Logging.LogMessage,System.IO.StreamWriter)">
            <summary>
            Add the message to the log file
            </summary>
            <param name="messageToLog">The message to log</param>
            <param name="file">The streamwriter to write to</param>
        </member>
        <member name="M:Labman.Logging.LogFile.LogException(System.Exception)">
            <summary>
            Logs an exception as a critical fault.
            The log message includes the origin of the exception.
            </summary>
            <param name="ex">The exception to log</param>
        </member>
        <member name="M:Labman.Logging.LogFile.ValidateFileName(System.String)">
            <summary>
            Performs validation on the filename, including creating the output directory if it doesn't exist
            </summary>
            <param name="fileName">The fileName of the log file, including the full file path</param>
            <returns>The validated filename</returns>
        </member>
        <member name="M:Labman.Logging.LogFile.CreateNewLogFile(System.String,System.Boolean)">
            <summary>
            Creates a new HTML log file
            </summary>
            <param name="fileName">The fileName of the log file, including the full file path</param>
            <param name="overwriteExistingFile">A flag to indicate whether the existing file should be overwritten if there is one</param>
        </member>
        <member name="M:Labman.Logging.LogFile.CreateMessageQueues(System.Int32)">
            <summary>
            Creates the message queues and message processor
            </summary>
            <param name="numberOfLogsToKeepInRecentList">The number of logs to keep in recent list.</param>
        </member>
        <member name="M:Labman.Logging.LogFile.MessageQueueProcessor(System.Object)">
            <summary>
            Message Queue Processing Method is use to check each of the queues for messages to process.
            This method is called periodically by a timer.
            </summary>
            <param name="state">The state.</param>
        </member>
        <member name="T:Labman.Logging.LogMessage">
            <summary>
            A structure containing relevant details about a Log Message
            </summary>
        </member>
        <member name="T:Labman.Logging.LogMessage.LogType">
            <summary>
            Enumeration of the different types of log message that can be added
            </summary>
        </member>
        <member name="F:Labman.Logging.LogMessage.LogType.Information">
            <summary>An information type of log message, this covers most types of log messages including robot actions and process points</summary>
        </member>
        <member name="F:Labman.Logging.LogMessage.LogType.Warning">
            <summary>A warning log message generally is used to log something that gone wrong but is being dealt with</summary>
        </member>
        <member name="F:Labman.Logging.LogMessage.LogType.CriticalError">
            <summary>A critical error log message is typically used for exceptions or process errors that are serious and are possible unhandled/unrecoverable</summary>
        </member>
        <member name="F:Labman.Logging.LogMessage.LogType.Data">
            <summary>A data log message is used for pieces of data (balance weights, temperatures, etc)</summary>
        </member>
        <member name="P:Labman.Logging.LogMessage.Message">
            <summary>The actual text log message to display in the log</summary>
        </member>
        <member name="P:Labman.Logging.LogMessage.Timestamp">
            <summary>A timestamp of when the log was added</summary>
        </member>
        <member name="P:Labman.Logging.LogMessage.Type">
            <summary>The type of log message being added</summary>
        </member>
        <member name="P:Labman.Logging.LogMessage.TypeIcon">
            <summary>The icon to display for this log message</summary>
        </member>
        <member name="M:Labman.Logging.LogMessage.ToFullLogMessage">
            <summary>
            Converts this <see cref="T:Labman.Logging.LogMessage"/> object to a string ready for a log file.
            </summary>
            <returns>This messages as a full HTML formatted message with type, timestamp and message</returns>
        </member>
        <member name="T:Labman.Logging.TraceListener">
            <summary>
            Custom trace listener class is used to provide a common format for all trace messages
            </summary>
        </member>
        <member name="M:Labman.Logging.TraceListener.#ctor(System.String)">
            <summary>
            Class constructor
            </summary>
            <param name="filename">The filename to log to</param>
        </member>
        <member name="M:Labman.Logging.TraceListener.WriteLine(System.String)">
            <summary>
            Override for the write line method, adds the time and source to the log
            </summary>
            <param name="message">A message to write.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" />
            </PermissionSet>
        </member>
        <member name="T:Labman.Messaging.Email.EmailSender">
            <summary>
            Class to send emails via SMTP
            </summary>
        </member>
        <member name="M:Labman.Messaging.Email.EmailSender.#ctor(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Class constructor sets the smtp server details
            </summary>
            <param name="smtpServer">Server IP</param>
            <param name="smtpPort">Server Port</param>
            <param name="smtpUser">Login user</param>
            <param name="smtpPassword">Login password</param>
            <param name="fromAddress">From address</param>
        </member>
        <member name="M:Labman.Messaging.Email.EmailSender.#ctor(System.String,System.Int32,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Class constructor sets the smtp server details
            </summary>
            <param name="smtpServer">Server IP</param>
            <param name="smtpPort">Server Port</param>
            <param name="smtpUser">Login user</param>
            <param name="smtpPassword">Login password</param>
            <param name="fromAddress">From address</param>
            <param name="useSsl">Flag whether to use SSL or not</param>
        </member>
        <member name="M:Labman.Messaging.Email.EmailSender.SendMail(System.String,System.String,System.String)">
            <summary>
            Sends an email
            </summary>
            <param name="toAddress">The email address to send a message to</param>
            <param name="title">The email title</param>
            <param name="body">The email body</param>
        </member>
        <member name="T:Labman.Messaging.Messages.UserLoginChangedMessage">
            <summary>
            Class which allows a user login changed message to be sent during system initialisation
            </summary>
        </member>
        <member name="P:Labman.Messaging.Messages.UserLoginChangedMessage.NewUserName">
            <summary>
            Property that exposes the status message
            </summary>
        </member>
        <member name="M:Labman.Messaging.Messages.UserLoginChangedMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the UserLoginChangedMessage class
            </summary>
            <param name="newUserName">The new username</param>
        </member>
        <member name="T:Labman.Messaging.Messages.SystemInitialisationStatusChangedMessage">
            <summary>
            Class which allows a status changed message to be sent during system initialisation
            </summary>
        </member>
        <member name="P:Labman.Messaging.Messages.SystemInitialisationStatusChangedMessage.StatusMessage">
            <summary>
            Property that exposes the status message
            </summary>
        </member>
        <member name="M:Labman.Messaging.Messages.SystemInitialisationStatusChangedMessage.#ctor(System.String)">
            <summary>
            Creates a new instance of the SystemInitialisationStatusChangedMessage class
            </summary>
            <param name="statusMessage">The status message</param>
        </member>
        <member name="T:Labman.MotionControl.Arm">
            <summary>
            Arm type provides a generic class to access robot arms
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Arm.RobotArmController">
            <summary>
            The instance of the hardware class being controlled by this abstraction
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Arm.SafeMoveChecks">
            <summary>
            A collection of IArmSafeMoveChecks that is performed on this arm
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Arm.ProgramStatePersister">
            <summary>
            The program state persister
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Arm.Settings">
            <summary>
            The settings for this abstraction
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Arm.ProgramRunning">
            <summary>
            Flag to say if the arm is running a program (including pre-move checks)
            </summary>
        </member>
        <member name="M:Labman.MotionControl.Arm.#ctor">
            <summary>
            Default constructor for the arm abstraction
            </summary>
        </member>
        <member name="M:Labman.MotionControl.Arm.#ctor(Labman.MotionControl.ArmSettings)">
            <summary>
            Constructor overload to instantiate the class with existing settings
            </summary>
            <param name="settings">The arm settings</param>
        </member>
        <member name="M:Labman.MotionControl.Arm.Setup">
            <summary>
            Sets up the arm
            </summary>
        </member>
        <member name="M:Labman.MotionControl.Arm.Enable(System.Boolean)">
            <summary>
            Enables the robot arm hardware
            </summary>
            <param name="enable">Flag to say whether to enable or disable</param>
        </member>
        <member name="M:Labman.MotionControl.Arm.IsBusy">
            <summary>
            Flag to say whether the arm (at the hardware level) is busy
            </summary>
            <returns>True if the arm is busy, false otherwise</returns>
        </member>
        <member name="M:Labman.MotionControl.Arm.ClearFaults">
            <summary>
            Clears the faults on the robot arm
            </summary>
        </member>
        <member name="M:Labman.MotionControl.Arm.RunProgram(System.String,System.Boolean)">
            <summary>
            Runs a program on the robot arm
            </summary>
            <param name="programName">The name of the program</param>
            <param name="waitForCompletion">If true, this method will block the calling thread until the program has finished</param>
        </member>
        <member name="M:Labman.MotionControl.Arm.SetProgramVariable(System.String,System.String,System.String)">
            <summary>
            Sets a variable in a program on the arm
            </summary>
            <param name="programName">The program name</param>
            <param name="variableName">The variable name</param>
            <param name="value">The value to assign to the variable</param>
        </member>
        <member name="M:Labman.MotionControl.Arm.SetSpeedOverride(System.Int32)">
            <summary>
            Sets the speed percentage on the arm
            </summary>
            <param name="speedPercentage">The speed percentage</param>
        </member>
        <member name="T:Labman.MotionControl.ArmSettings">
            <summary>
            The settings class for the Arm abstraction
            </summary>
        </member>
        <member name="P:Labman.MotionControl.ArmSettings.RobotArmControllerName">
            <summary>
            The name of the hardware controller that controls this arm
            </summary>
        </member>
        <member name="P:Labman.MotionControl.ArmSettings.ArmName">
            <summary>
             A name for the robot arm
            </summary>
        </member>
        <member name="P:Labman.MotionControl.ArmSettings.UniqueKey">
            <summary>
            A unique key for the item that needs to be saved
            </summary>
        </member>
        <member name="M:Labman.MotionControl.ArmSettings.#ctor">
            <summary>
            Default constructor for the ArmSettings
            </summary>
        </member>
        <member name="M:Labman.MotionControl.ArmSettings.Validate">
            <summary>
            Validate the settings specified to ensure they are valid
            </summary>
        </member>
        <member name="T:Labman.MotionControl.ArmSafeMoveChecks.IArmSafeMoveCheck">
            <summary>
            An interface to provide a check that it's safe for a robot arm to move
            </summary>
        </member>
        <member name="M:Labman.MotionControl.ArmSafeMoveChecks.IArmSafeMoveCheck.SafeToMove(System.String)">
            <summary>
            Checks to see if it's safe to run a program
            </summary>
            <param name="programName">The name of the program attempting to be run on the arm</param>
            <returns>True if it's safe for the arm to move, false otherwise</returns>
        </member>
        <member name="T:Labman.MotionControl.ArmSafeMoveChecks.ProgramHistoryLookupSafeMoveCheck">
            <summary>
            An default implementation of the IArmSafeMoveCheck interface
            </summary>
        </member>
        <member name="M:Labman.MotionControl.ArmSafeMoveChecks.ProgramHistoryLookupSafeMoveCheck.#ctor(System.String,System.String,Labman.MotionControl.Arm)">
            <summary>
            The constructor for the ProgramHistoryLookupSafeMoveCheck class
            </summary>
            <param name="tableName">The name of the table the program history is being stored in</param>
            <param name="databaseConnectionName">The name of the database connection stored in the BaseClass</param>
            <param name="arm">The arm abstraction that's that the lookup is being performed on</param>
        </member>
        <member name="M:Labman.MotionControl.ArmSafeMoveChecks.ProgramHistoryLookupSafeMoveCheck.SafeToMove(System.String)">
            <summary>
            Looks at the last program that was run on the arm, and looks up to see if there's a record of running this combination of programs before. If there's not, the user will be asked whether it's safe to move. The thread will be blocked until user input is given.
            This method may perform an intermediate move between programs.
            </summary>
            <param name="programName">The name of the program attempting to be run on the arm</param>
            <returns>True if it's safe for the arm to move, false otherwise</returns>
        </member>
        <member name="M:Labman.MotionControl.ArmSafeMoveChecks.ProgramHistoryLookupSafeMoveCheck.GetIntermediateProgram(System.String,System.String)">
            <summary>
            Gets the intemediate program to be run between two programs
            </summary>
            <param name="lastProgram">The last program that was run</param>
            <param name="currentProgram">The program to be run now</param>
            <returns>The name of the intermediate program</returns>
        </member>
        <member name="M:Labman.MotionControl.ArmSafeMoveChecks.ProgramHistoryLookupSafeMoveCheck.AskForUserInput(System.String,System.String)">
            <summary>
            Asks the user if it's safe to run a program, given the last program that ran. This method will also add a record of the user's response to the database.
            </summary>
            <param name="lastProgram">The last program that was run</param>
            <param name="currentProgram">The program that is to be run now</param>
            <returns>True if its safe to run the program, false otherwise</returns>
            <remarks>If the user says that an intermediate move is required, it'll be performed as part of this method</remarks>
        </member>
        <member name="M:Labman.MotionControl.ArmSafeMoveChecks.ProgramHistoryLookupSafeMoveCheck.ShowYesNoBox(System.String)">
            <summary>
            displays a styled yes/no message box
            </summary>
            <param name="message">The message to display</param>
            <returns>A messagebox result with the user's response</returns>
        </member>
        <member name="M:Labman.MotionControl.ArmSafeMoveChecks.ProgramHistoryLookupSafeMoveCheck.ShowMessage(System.String)">
            <summary>
            Displays a message in a styled message box to the user
            </summary>
            <param name="message">The message to display</param>
            <returns>True if the user pressed 'OK', false otherwise</returns>
        </member>
        <member name="M:Labman.MotionControl.ArmSafeMoveChecks.ProgramHistoryLookupSafeMoveCheck.GetStringFromUser(System.String)">
            <summary>
            Prompts the user to enter a string
            </summary>
            <param name="message">The message to display to the user</param>
            <returns>The string the user entered, or null if the user didn't enter a value</returns>
        </member>
        <member name="T:Labman.MotionControl.AxisMoveException">
            <summary>
            Exception type that can be thrown for axis move errors
            </summary>
        </member>
        <member name="P:Labman.MotionControl.AxisMoveException.MoveErrorDueToOutOfPositionMove">
            <summary>
            Flag use to handle logic in MoveAbs when this exception is being thrown due to an out of position error
            </summary>
        </member>
        <member name="M:Labman.MotionControl.AxisMoveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.MotionControl.AxisMoveException"/> class.
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>
            The colon syntax specifies that the base constructor is called first before processing this specific constructor
            </remarks>
        </member>
        <member name="M:Labman.MotionControl.AxisMoveException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.MotionControl.AxisMoveException"/> class.
            </summary>
            <param name="ex">The ex.</param>
        </member>
        <member name="M:Labman.MotionControl.AxisMoveException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.MotionControl.AxisMoveException"/> class.
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>
            The colon syntax specifies that the base constructor is called first before processing this specific constructor
            </remarks>
        </member>
        <member name="T:Labman.MotionControl.BeckhoffAxis">
            <summary>
            Beckhoff Axis
            </summary>
        </member>
        <member name="M:Labman.MotionControl.BeckhoffAxis.#ctor(Labman.MotionControl.BeckhoffAxisSettings)">
            <summary>
            Class constructor sets up the class ready for use
            </summary>
            <param name="settings">The axis settings class for this axis</param>
        </member>
        <member name="M:Labman.MotionControl.BeckhoffAxis.SetAxisParameters">
            <summary>
            Sets the axis parameters for the axis.
            </summary>
        </member>
        <member name="T:Labman.MotionControl.BeckhoffAxisSettings">
            <summary>
            This class provides the settings required to configure the operation of a single controllable Beckhoff axis
            </summary>
        </member>
        <member name="M:Labman.MotionControl.BeckhoffAxisSettings.#ctor">
            <summary>
            Settings class constructor
            </summary>
        </member>
        <member name="P:Labman.MotionControl.BeckhoffAxisSettings.PositionWindowTimeMs">
            <summary>
            Position window time in ms
            </summary>
        </member>
        <member name="P:Labman.MotionControl.BeckhoffAxisSettings.Jerk">
            <summary>
            The jerk
            </summary>
        </member>
        <member name="T:Labman.MotionControl.LmcAxis">
            <summary>
            LMC Axis type, used for the LMC motor controller
            </summary>
        </member>
        <member name="M:Labman.MotionControl.LmcAxis.#ctor(Labman.MotionControl.LmcAxisSettings)">
            <summary>
            Class constructor sets up the class ready for use
            </summary>
            <param name="settings">The axis settings class for this axis</param>
        </member>
        <member name="M:Labman.MotionControl.LmcAxis.SetAxisParameters">
            <summary>
            Sets up the axis parameters
            </summary>
        </member>
        <member name="T:Labman.MotionControl.LmcAxisSettings">
            <summary>
            The axis settings
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.HomeMode">
            <summary>
            The default home mode to use for this axis.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.BrakeManagmentEnabled">
            <summary>
            Flag to indicate that the axis should manage its own brake.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.BrakeReleaseDelayMilliseconds">
            <summary>
            The time to wait after energizing the brake for the brake to release from the axis.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.BrakeApplyDelayMilliseconds">
            <summary>
            The time to wait after completing a move before reapplying the brake. 
            If another move command is issued, the device will not start this delay until that move has completed.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.StallDetectionEnabled">
            <summary>
            Flag to indicate if stall detection is enabled.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.EncoderScalerNumerator">
            <summary>
            The numerator scale factor the board applies to the encoder count. 
            Usually this is used to match the logical and encoder position on the board for stall detection.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.EncoderScalerDenominator">
            <summary>
            The denominator scale factor the board applies to the encoder count. 
            Usually this is used to match the logical and encoder position on the board for stall detection.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.AllowedEncoderDeviation">
            <summary>
            The maximum amount of error between the logical and encoder positions before the board will abort a move.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.AxisDriveCurrent">
            <summary>
            The TMC262 current register (CS) value (0 - 31) to be set when the axis is moving.
            This will correlate with a real life Amps value based on the settings on the driver and sense resistor. 
            Page 35 of the TMC262 manual provides more information.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.AxisHoldCurrent">
            <summary>
            The TMC262 current register (CS) value (0 - 31) to be set when the axis is stationary.
            This will correlate with a real life Amps value based on the settings on the driver and sense resistor. 
            Page 35 of the TMC262 manual provides more information.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.LmcAxisSettings.MicrostepSetting">
            <summary>
            Number of microsteps per full step
            </summary>
        </member>
        <member name="M:Labman.MotionControl.LmcAxisSettings.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Labman.MotionControl.LmcAxis"/>
            </summary>
        </member>
        <member name="T:Labman.MotionControl.MoveMonitors.IConditionalMoveMonitor">
            <summary>
            An interface which defines a method of checking something while a move is being performed.
            This interface allow start position and target position to be passed in so it can be made conditional on move conditions
            </summary>
        </member>
        <member name="M:Labman.MotionControl.MoveMonitors.IConditionalMoveMonitor.Check(System.Double,System.Double)">
            <summary>
            This method checks the relevant action and throws an exception when an unexpected condition is met
            </summary>
            <param name="startPosition">The start position of the axis before the move</param>
            <param name="targetPosition">The target position the axis is being moved to</param>
        </member>
        <member name="T:Labman.MotionControl.MoveMonitors.IMoveMonitor">
            <summary>
            An interface which defines a method of checking something while a move is being performed
            </summary>
        </member>
        <member name="M:Labman.MotionControl.MoveMonitors.IMoveMonitor.Check">
            <summary>
            This method checks the relevant action and throws an exception when an unexpected condition is met
            </summary>
        </member>
        <member name="T:Labman.MotionControl.MoveMonitors.SensorCheckMoveMonitor">
            <summary>
            This class checks a sensor for a specified state. This is used to monitor a limit switch
            during a move and if detected throws an exception to stop the motor.
            </summary>
        </member>
        <member name="M:Labman.MotionControl.MoveMonitors.SensorCheckMoveMonitor.#ctor(System.String,Labman.Hardware.IODevices.IODevice.InputState)">
            <summary>
            Class constructor sets up the conditions for the check
            </summary>
            <param name="inputName">The name of the input to check</param>
            <param name="sensorErrorState">The error state to look for</param>
        </member>
        <member name="M:Labman.MotionControl.MoveMonitors.SensorCheckMoveMonitor.Check">
            <summary>
            This method checks the relevant action and throws an exception when an unexpected condition is met
            </summary>
        </member>
        <member name="T:Labman.MotionControl.PickPlaceActions.DelayPickPlaceAction">
            <summary>
            Action class that allows a delay to be included in the pick/place actions
            </summary>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.DelayPickPlaceAction.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="delayMs">Time to wait in milliseconds</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.DelayPickPlaceAction.Execute(System.String,System.Int32)">
            <summary>
            Execute the action
            </summary>
            <param name="area">The current pick/place area being executed for</param>
            <param name="index">The index of the areas being moved to</param>
        </member>
        <member name="T:Labman.MotionControl.PickPlaceActions.GenericPickPlaceAction">
            <summary>
            Generic implementation of the pick place action interface that allows a method to be assigned to it to be executed
            </summary>
        </member>
        <member name="T:Labman.MotionControl.PickPlaceActions.GenericPickPlaceAction.PickPlaceMethod">
            <summary>
            Pick and place delegate method
            </summary>
            <param name="area">The area.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.GenericPickPlaceAction.#ctor(Labman.MotionControl.PickPlaceActions.GenericPickPlaceAction.PickPlaceMethod)">
            <summary>
            Create a new instance of this class
            </summary>
            <param name="methodToExecute">A method action that is executed</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.GenericPickPlaceAction.Execute(System.String,System.Int32)">
            <summary>
            Executes the pick/place action
            </summary>
            <param name="area">The area to pick/place from</param>
            <param name="index">The pick/place index to use</param>
        </member>
        <member name="T:Labman.MotionControl.PickPlaceActions.IPickPlaceActions">
            <summary>
            Interface used to define a set of Pick and Place actions for an axis configuration like the cartesian configuration.
            This interface is used to define a whole set of pre and post actions for pick and place, rather than defining individual actions with the IPickPlaceAction interface.
            </summary>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.IPickPlaceActions.PrePickAction(System.String,System.Int32)">
            <summary>
            This method is executed before the move to the pick position.
            An exception should be thrown if the action fails or does not meet the required requisites.
            </summary>
            <param name="area">The current pick area being executed for</param>
            <param name="index">The index of the areas being moved to</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.IPickPlaceActions.PostPickAction(System.String,System.Int32)">
            <summary>
            This method is executed after the move to the pick position.
            An exception should be thrown if the action fails or does not meet the required requisites.
            </summary>
            <param name="area">The current pick area being executed for</param>
            <param name="index">The index of the areas being moved to</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.IPickPlaceActions.PrePlaceAction(System.String,System.Int32)">
            <summary>
            This method is executed before the move to the place position.
            An exception should be thrown if the action fails or does not meet the required requisites.
            </summary>
            <param name="area">The current place area being executed for</param>
            <param name="index">The index of the areas being moved to</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.IPickPlaceActions.PostPlaceAction(System.String,System.Int32)">
            <summary>
            This method is executed after the move to the place position.
            An exception should be thrown if the action fails or does not meet the required requisites.
            </summary>
            <param name="area">The current place area being executed for</param>
            <param name="index">The index of the areas being moved to</param>
        </member>
        <member name="T:Labman.MotionControl.PickPlaceActions.MoveToSafeZPickPlaceAction">
            <summary>
            Action that moves the Z axis to a specified safe position, if a slow move is specified it it used
            </summary>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.MoveToSafeZPickPlaceAction.#ctor(Labman.MotionControl.CartesianConfigurationSettings,System.Double,Labman.PositionsDatabase.PositionDatabase.PositionTypes)">
            <summary>
            Constructor sets the required action parameters
            </summary>
            <param name="settings">Cartesian settings</param>
            <param name="position">The Z position to move up to</param>
            <param name="pickOrPlace">Use pick or place position</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.MoveToSafeZPickPlaceAction.Execute(System.String,System.Int32)">
            <summary>
            Execute the action
            </summary>
            <param name="area">The current pick/place area being executed for</param>
            <param name="index">The index of the areas being moved to</param>
        </member>
        <member name="T:Labman.MotionControl.PickPlaceActions.InputPickPlaceAction">
            <summary>
            Action class which is used to ensure an input is in the correct state
            </summary>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.InputPickPlaceAction.#ctor(System.String,Labman.Hardware.IODevices.IODevice.InputState)">
            <summary>
            Constructor sets the required parameters for this action
            </summary>
            <param name="inputName">The name of the input to check</param>
            <param name="requiredState">The required state of the input</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.InputPickPlaceAction.Execute(System.String,System.Int32)">
            <summary>
            Execute the action
            </summary>
            <param name="area">The current pick/place area being executed for</param>
            <param name="index">The index of the areas being moved to</param>
        </member>
        <member name="T:Labman.MotionControl.PickPlaceActions.IPickPlaceAction">
            <summary> 
            This interface specifies common methods that must be implemented by actions thatr can be run as part of the pre/post requisites of a pick/place
            </summary>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.IPickPlaceAction.Execute(System.String,System.Int32)">
            <summary>
            Execute the command. An exception should be thrown if the action fails or does not meet the required requisites.
            </summary>
            <param name="area">The current pick/place area being executed for</param>
            <param name="index">The index of the areas being moved to</param>
        </member>
        <member name="T:Labman.MotionControl.PickPlaceActions.MovePickPlaceAction">
            <summary>
            Action class which moves an axis to the specified position
            </summary>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.MovePickPlaceAction.#ctor(System.String,System.Double)">
            <summary>
            Constructor sets the required action parameters
            </summary>
            <param name="axisName">The axis to move</param>
            <param name="targetPosition">The target position to move to</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.MovePickPlaceAction.#ctor(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            Constructor sets the required action parameters
            </summary>
            <param name="axisName">The axis to move</param>
            <param name="targetPosition">The target position to move to</param>
            <param name="slowMoveDistance">The distance to do the slow move for</param>
            <param name="slowMoveSpeedPercentage">The speed percenatge for the slow move</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.MovePickPlaceAction.#ctor(System.String,System.String,System.Int32,Labman.PositionsDatabase.PositionDatabase.PositionTypes)">
            <summary>
            Constructor sets the required action parameters
            </summary>
            <param name="axisName">The axis to move</param>
            <param name="area">Position area to move to</param>
            <param name="areaindex">Index in area</param>
            <param name="pickOrPlace">Use pick or place position</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.MovePickPlaceAction.Execute(System.String,System.Int32)">
            <summary>
            Execute the action
            </summary>
            <param name="area">The current pick/place area being executed for</param>
            <param name="index">The index of the areas being moved to</param>
        </member>
        <member name="T:Labman.MotionControl.PickPlaceActions.OutputPickPlaceAction">
            <summary>
            Action class that switches an output to the specified state
            </summary>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.OutputPickPlaceAction.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new action which will switch an output to the specified state
            </summary>
            <param name="outputName">The name of the output to toggle</param>
            <param name="state">The state of the output to switch to</param>
        </member>
        <member name="M:Labman.MotionControl.PickPlaceActions.OutputPickPlaceAction.Execute(System.String,System.Int32)">
            <summary>
            Execute the action
            </summary>
            <param name="area">The current pick/place area being executed for</param>
            <param name="index">The index of the areas being moved to</param>
        </member>
        <member name="T:Labman.MotionControl.SchneiderCANAxis">
            <summary>Represents an axis attached to a schneider motor controller</summary>
        </member>
        <member name="M:Labman.MotionControl.SchneiderCANAxis.#ctor(Labman.MotionControl.SchneiderCANAxisSettings)">
            <summary>Creates a new instance of <see cref="T:Labman.MotionControl.SchneiderCANAxis"/></summary>
            <param name="settings">The settings object for this axis</param>
        </member>
        <member name="T:Labman.MotionControl.SchneiderCANAxisSettings">
            <summary>Storage settings for a schneider CAN axis</summary>
        </member>
        <member name="M:Labman.MotionControl.SchneiderCANAxisSettings.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.MotionControl.SchneiderCANAxisSettings"/></summary>
        </member>
        <member name="P:Labman.MotionControl.SchneiderCANAxisSettings.EnergiseOnInitialise">
            <summary>Gets or sets a energise on initialise flag.</summary>
        </member>
        <member name="T:Labman.MotionControl.ServotronixAxis">
            <summary>
            Servotronix axis type that controls a single servo axis on a motor controller
            </summary>
        </member>
        <member name="M:Labman.MotionControl.ServotronixAxis.#ctor(Labman.MotionControl.ServotronixAxisSettings)">
            <summary>
            Class constructor sets up the class ready for use
            </summary>
            <param name="settings">The axis settings class for this axis</param>
        </member>
        <member name="M:Labman.MotionControl.ServotronixAxis.SetAxisParameters">
            <summary>
            Sets the axis parameters for the axis.
            </summary>
        </member>
        <member name="T:Labman.MotionControl.ServotronixAxisSettings">
            <summary>
            This class provides the settings required to configure the operation of a single controllable servotronix axis
            </summary>
        </member>
        <member name="M:Labman.MotionControl.ServotronixAxisSettings.#ctor">
            <summary>
            Settings class constructor
            </summary>
        </member>
        <member name="T:Labman.MotionControl.ServotronixAxisSettings.HomeType">
            <summary> 
            Enumeration of possible home types
            </summary>
        </member>
        <member name="P:Labman.MotionControl.ServotronixAxisSettings.StepsPerRev">
            <summary>
            The configured feed constant, which is the measurement distance per one revolution of the output shaft of the gearbox.
            The feed constant is calculated by the following: feed constant = feed ÷ driving shaft revolutions
            </summary>
        </member>
        <member name="P:Labman.MotionControl.ServotronixAxisSettings.PositionWindow">
            <summary>
            The symmetrical range of accepted positions relative to the target_position.
            If the actual value of the position encoder is within the position window, this target position is considered to reached.
            If the value of the position_window is 4294967295, the position_window control is switched off.
            </summary>
        </member>
        <member name="P:Labman.MotionControl.ServotronixAxisSettings.PositionWindowTime">
            <summary>Indicates the time in milliseconds, during which the actual position within the position_window is measured.</summary>
        </member>
        <member name="P:Labman.MotionControl.ServotronixAxisSettings.FollowingError">
            <summary>Maximum allowed position error without producing a fault. If the value of the following error window is 4294967295, the following control is disabled.</summary>
            <remarks>
            This object defines the range of tolerated position values symmetrical to the target position.
            If the position actual value is outside the following error window, a following error occurs.
            A following error may occur when a drive is blocked, an unreachable profile velocity occurs, or if closed-loop coefficients are wrong.
            </remarks>
        </member>
        <member name="P:Labman.MotionControl.ServotronixAxisSettings.ResolverAmplitudeRange">
            <summary>The acceptable range of deviation of resolver sine/cosine signals(as a percentage).</summary>
        </member>
        <member name="P:Labman.MotionControl.ServotronixAxisSettings.AxisHomeType">
            <summary>The home type</summary>
        </member>
        <member name="T:Labman.MotionControl.TrinamicAxis">
            <summary>Represents an axis attached to a trinamic motor controller</summary>
        </member>
        <member name="M:Labman.MotionControl.TrinamicAxis.#ctor(Labman.MotionControl.TrinamicAxisSettings)">
            <summary>Class constructor sets up the class ready for use</summary>
            <param name="settings">The axis settings class for this axis</param>
        </member>
        <member name="M:Labman.MotionControl.TrinamicAxis.SetAxisParameters">
            <summary>Sets the axis parameters for the axis.</summary>
        </member>
        <member name="T:Labman.MotionControl.TrinamicAxisSettings">
            <summary>Storage settings for a trinamic axis.</summary>
        </member>
        <member name="M:Labman.MotionControl.TrinamicAxisSettings.#ctor">
            <summary>Creates a new instance of <see cref="T:Labman.MotionControl.TrinamicAxisSettings"/></summary>
        </member>
        <member name="P:Labman.MotionControl.TrinamicAxisSettings.MicroSteppingResolution">
            <summary>The microstepping resolution</summary>
        </member>
        <member name="P:Labman.MotionControl.TrinamicAxisSettings.HomeSequenceMode">
            <summary>The home sequence mode</summary>
        </member>
        <member name="P:Labman.MotionControl.TrinamicAxisSettings.MaxCurrent">
            <summary>The maximum drive current in amps (peak not RMS)</summary>
        </member>
        <member name="P:Labman.MotionControl.TrinamicAxisSettings.StandbyCurrent">
            <summary>The standby (hold) current in amps (peak not RMS)</summary>
        </member>
        <member name="P:Labman.MotionControl.TrinamicAxisSettings.BoostCurrent">
            <summary>The boost current in amps (peak not RMS). Boost current is used during acceleration and decelleration</summary>
        </member>
        <member name="P:Labman.MotionControl.TrinamicAxisSettings.PulseDivisor">
            <summary>Affects the range of allowable speeds. Should be adjusted carefully in single units</summary>
        </member>
        <member name="P:Labman.MotionControl.TrinamicAxisSettings.RampDivisor">
            <summary>Adjusts the range of allowable accelerations. Should be adjusted carefully in single units</summary>
        </member>
        <member name="P:Labman.MotionControl.TrinamicAxisSettings.PositioningMode">
            <summary>Dictates what position relative movements should be relative to</summary>
        </member>
        <member name="P:Labman.MotionControl.TrinamicAxisSettings.UnitMode">
            <summary>The unit mode used by a <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController6212"/> board</summary>
        </member>
        <member name="P:Labman.MotionControl.TrinamicAxisSettings.EncoderMode">
            <summary>Whether an external or internal encoder is used on a <see cref="T:Labman.Hardware.MotorControllers.TrinamicMotorControllers.TrinamicMotorController1180"/></summary>
        </member>
        <member name="T:Labman.MotionControl.Axis">
            <summary>
            Axis type controls a single axis on a specified motor controller
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.PositionsDatabase">
            <summary>Positions database reference to use</summary>
        </member>
        <member name="T:Labman.MotionControl.Axis.MoveAbsDelegate">
            <summary>
            Delegate used to move an axis async
            </summary>
            <param name="position">The position.</param>
            <param name="speedPercentage">The speed percentage.</param>
            <param name="slowMoveDistance">The slow move distance.</param>
            <param name="slowMoveSpeedPercentage">The slow move speed percentage.</param>
            <param name="moveRecursively">if set to <c>true</c> [move recursively].</param>
        </member>
        <member name="T:Labman.MotionControl.Axis.HomeDelegate">
            <summary>
            Delegate used to home an axis async
            </summary>
        </member>
        <member name="T:Labman.MotionControl.Axis.PreMoveActionDelegate">
            <summary>
            The delegate used to run an action pre move
            </summary>
            <param name="currentPosition">The start, current position</param>
            <param name="targetPosition">The target position</param>
        </member>
        <member name="F:Labman.MotionControl.Axis._asyncOperationException">
            <summary>This exception is set to null when an async call starts and is set if an exception occurs during the async operation. It can then be thrown by the handler waiting for the async operation.</summary>
        </member>
        <member name="F:Labman.MotionControl.Axis._moveRunning">
            <summary>Flag used to track when an async move is running</summary>
        </member>
        <member name="F:Labman.MotionControl.Axis._moveProcessorStarted">
            <summary>Flag that is set when the move axis processor starts</summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.MotorController">
            <summary>
            Property that returns the motor controller used by this axis
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.Settings">
            <summary>Settings object for this axis</summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.DistanceTravelledToLog">
            <summary>This variable keeps track of the distance travelled by this axis. The idea is that this is periodically read by the process and reset.</summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.PreMoveAction">
            <summary>
            Action that can be optionally assigned and is called before each move is performed
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.PostHomeAction">
            <summary>
            Action that can be optionally assigned and is called after the normal axis home completes
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.MoveMonitors">
            <summary>
            Collection of move monitors to check when this axis is moving
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.ConditionalMoveMonitors">
            <summary>
            Collection of conditional move monitors to check when this axis is moving
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.HelpFile">
            <summary>
            The name of hardware device help rich text file. If left blank, the usercontrol will attempt to infer a path using reflection
            e.g. MitsubishiRobotArmHelpFile
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.DeviceSettingsUIType">
            <summary>Type for the user control for this axis's settings form</summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.DeviceControlUIType">
            <summary>Type for the user control for this axis's settings form</summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.IsServoAxis">
            <summary>
            Flag to specify whether this is a servo axis (used to determine the method for in-position)
            </summary>
        </member>
        <member name="P:Labman.MotionControl.Axis.DoNotLogOutOfPositionWarnings">
            <summary>
            Flag which allows out of position warnings to be excluded from the SystemLog - useful if you expect an axis to stall as you are driving into a deadstop on purpose
            </summary>
        </member>
        <member name="M:Labman.MotionControl.Axis.#ctor(Labman.MotionControl.AxisSettings)">
            <summary>
            Class constructor sets up the class ready for use
            </summary>
            <param name="settings">The axis settings class for this axis</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.#ctor">
            <summary>
            Class constructor sets up the class ready for use
            </summary>
        </member>
        <member name="M:Labman.MotionControl.Axis.Setup(System.Boolean)">
            <summary>
            Setup method validates the settings and gets the relevant dependant modules based on their names
            </summary>
            <param name="setAxisParameters">A flag which indicates if axis settings should be written to the controller</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.SetAxisParameters">
            <summary>
            Sets the axis parameters for the axis.
            </summary>
        </member>
        <member name="M:Labman.MotionControl.Axis.Stop(Labman.Hardware.MotorControllers.MotorController.StopMode)">
            <summary>
            Stops the axis
            </summary>
            <param name="stopMode">The stop mode to use</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.WaitForMoveToComplete">
            <summary>
            Wait until this axis has completed its last move. Note this does NOT check axis is in-position.
            </summary>
        </member>
        <member name="M:Labman.MotionControl.Axis.IsAxisBusy">
            <summary>
            Determines if this axis is busy
            </summary>
            <returns>True if the axis is busy, else False</returns>
        </member>
        <member name="M:Labman.MotionControl.Axis.IsInitialised">
            <summary>
            Determines if this axis is initialised
            </summary>
            <returns>True if the axis is initialised, else False</returns>
        </member>
        <member name="M:Labman.MotionControl.Axis.GetLogicalPosition">
            <summary>
            Gets the logical motor position for this axis
            </summary>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.MotionControl.Axis.GetEncoderPosition">
            <summary>
            Gets the encoder position for this axis
            </summary>
            <returns>The position</returns>
        </member>
        <member name="M:Labman.MotionControl.Axis.SetDefaultParameters">
            <summary>
            Sets the default axis parameters
            </summary>
        </member>
        <member name="M:Labman.MotionControl.Axis.SetSpeedAsPercentage(System.Int32)">
            <summary>
            Sets the axis speed to a percentage of the default drive speed
            </summary>
            <param name="speedPercentage">The speed percentage (0-100%)</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.SetSpeed(System.Int32)">
            <summary>
            Sets the axis speed to a percentage of the default drive speed
            </summary>
            <param name="speed">The speed percentage (0-100%)</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbsProcessor(System.Double,System.Int32,System.Double,System.Int32,System.Boolean)">
            <summary>
            Move the axis to an absolute position, using recovery to try multiple times to get there
            </summary>
            <param name="position">The position to move to</param>
            <param name="speedPercentage">The speed percentage to move at</param>
            <param name="slowMoveDistance">The distance in mm to go slow for at the end of the move</param>
            <param name="slowMoveSpeedPercentage">The slow speed percentage to use</param>
            <param name="recursiveCall">Flag which indicates when the method is being called recursively</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.HomeProcessor">
            <summary>
            Homes this axis, waiting for the home to complete
            </summary>
        </member>
        <member name="M:Labman.MotionControl.Axis.Home(Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Homes this axis
            </summary>
            <param name="waitType">Wait for completion type</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveInc(System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Move the axis by an incremental position
            </summary>
            <param name="distance">The distance to move to by</param>
            <param name="waitType">The waiting condition for the move</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveInc(System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Move the axis by an incremental position
            </summary>
            <param name="distance">The distance to move to by</param>
            <param name="waitType">The waiting condition for the move</param>
            <param name="speedPercentage">The speed percentage to move at</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbs(System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Move the axis to an absolute position
            </summary>
            <param name="position">The position to move to</param>
            <param name="waitType">The waiting condition for the move</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbs(System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Move the axis to an absolute position
            </summary>
            <param name="position">The position to move to</param>
            <param name="waitType">The waiting condition for the move</param>
            <param name="speedPercentage">The speed percentage to move at</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbs(System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,System.Double,System.Int32)">
            <summary>
            Move the axis to an absolute position
            </summary>
            <param name="position">The position to move to</param>
            <param name="waitType">The waiting condition for the move</param>
            <param name="speedPercentage">The speed percentage to move at</param>
            <param name="slowMoveDistance">The distance in mm to go slow for at the end of the move</param>
            <param name="slowMoveSpeedPercentage">The slow speed percentage to use</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbs(Labman.PositionsDatabase.Position,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Move the axis to an absolute position
            </summary>
            <param name="xyzPosition">The position to move to</param>
            <param name="waitType">The waiting condition for the move</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbs(System.String,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Move the axis to an absolute position
            </summary>
            <param name="positionArea">The position to area to move to</param>
            <param name="areaIndex">Area index</param>
            <param name="waitType">The waiting condition for the move</param>
            <param name="speedPercentage">The speed percentage to move at</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbs(Labman.PositionsDatabase.Position,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32)">
            <summary>
            Move the axis to an absolute position
            </summary>
            <param name="xyzPosition">The position to move to</param>
            <param name="waitType">The waiting condition for the move</param>
            <param name="speedPercentage">The speed percentage to move at</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbs(Labman.PositionsDatabase.Position,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,System.Double,System.Int32)">
            <summary>
            Move the axis to an absolute position
            </summary>
            <param name="xyzPosition">The position to move to</param>
            <param name="waitType">The waiting condition for the move</param>
            <param name="speedPercentage">The speed percentage to move at</param>
            <param name="slowMoveDistance">The distance in mm to go slow for at the end of the move</param>
            <param name="slowMoveSpeedPercentage">The slow speed percentage to use</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbs(System.String,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,Labman.PositionsDatabase.PositionDatabase.PositionTypes)">
            <summary>
            Move the axis to an absolute position
            </summary>
            <param name="positionArea">The position area to move to</param>
            <param name="areaIndex">The area index to move to</param>
            <param name="waitType">The waiting condition for the move</param>
            <param name="usePlacePosition">A flag which indicates whether to use the place positions</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbs(System.String,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,Labman.PositionsDatabase.PositionDatabase.PositionTypes)">
            <summary>
            Move the axis to an absolute position
            </summary>
            <param name="positionArea">The position area to move to</param>
            <param name="areaIndex">The area index to move to</param>
            <param name="waitType">The waiting condition for the move</param>
            <param name="speedPercentage">The speed percentage to move at</param>
            <param name="usePlacePosition">A flag which indicates whether to use the place positions</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MoveAbs(System.String,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion,System.Int32,System.Double,System.Int32,Labman.PositionsDatabase.PositionDatabase.PositionTypes)">
            <summary>
            Move the axis to an absolute position
            </summary>
            <param name="positionArea">The position area to move to</param>
            <param name="areaIndex">The area index to move to</param>
            <param name="waitType">The waiting condition for the move</param>
            <param name="speedPercentage">The speed percentage to move at</param>
            <param name="slowMoveDistance">The distance in mm to go slow for at the end of the move</param>
            <param name="slowMoveSpeedPercentage">The slow speed percentage to use</param>
            <param name="usePlacePosition">A flag which indicates whether to use the place positions</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.AxisMileageIncrement(System.Object,Labman.Hardware.MotorControllers.MotorMileageEventArgs)">
            <summary>
            Increases the mileage of this axis.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">Arguments indicating mileage increment</param>
        </member>
        <member name="M:Labman.MotionControl.Axis.MotorMovesIncrement(System.Object,Labman.Hardware.MotorControllers.MotorMileageEventArgs)">
            <summary>
            Increases the number of moves logged to this motor.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">Arguments indicating move increment</param>
        </member>
        <member name="T:Labman.MotionControl.AxisSettings">
            <summary>
            This class provides the settings required to configure the operation of a single controllable axis
            </summary>
        </member>
        <member name="T:Labman.MotionControl.AxisSettings.PlaneOfMovement">
            <summary> 
            Enumeration of positions database planes of movement
            </summary>
        </member>
        <member name="F:Labman.MotionControl.AxisSettings.PlaneOfMovement.X">
            <summary>X Plane</summary>
        </member>
        <member name="F:Labman.MotionControl.AxisSettings.PlaneOfMovement.Y">
            <summary>Y Plane</summary>
        </member>
        <member name="F:Labman.MotionControl.AxisSettings.PlaneOfMovement.Z">
            <summary>Z Plane</summary>
        </member>
        <member name="T:Labman.MotionControl.AxisSettings.Direction">
            <summary> 
            Enumeration of possible directions
            </summary>
        </member>
        <member name="F:Labman.MotionControl.AxisSettings.Direction.Forward">
            <summary>Forward direction</summary>
        </member>
        <member name="F:Labman.MotionControl.AxisSettings.Direction.Reverse">
            <summary>Reverse direction</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.AxisPlaneOfMovement">
            <summary>The plane of movement for this axis, this is used to determine which positions database field to obtain positions from</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.MotorControllerName">
            <summary>The motor controller name that this axis is connected to</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.MotorControllerAxisIndex">
            <summary>The axis index on the controller</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.PositionsDatabaseName">
            <summary>Positions database name</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.PositionsDatabaseGroupNameToUse">
            <summary>The name of the positions database group to get positions within</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.AxisName">
            <summary>A descriptive (unique) name of this axis</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.MaxMoveAttempts">
            <summary>The maximum number of attempts to move to reach a position</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.MovesToIgnoreSeekWindow">
            <summary>The number of moves that ignore the normal 'small' seek window (i.e. the number of times to recover from large stalls)</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.SeekWindow">
            <summary>The 'small' seek window (in mm). If the axis is out of position by less than this amount then it will reset its logical position to the encoder and seek into position.</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.DelayInMillisecondsBetweenMoveRetries">
            <summary>The in milliseconds between move retries (0 = No Delay)</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.MinPosition">
            <summary>The minimum position the axis can move to in mm (typically 0.0)</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.MaxPosition">
            <summary>The maximum position the axis can move to in mm</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.EncoderTolerance">
            <summary>The encoder tolerance in mm to move within</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.Encoded">
            <summary>A flag that indicates whether the axis is encoded or not.</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.DefaultSlowMoveDistance">
            <summary>The default distance to move slowly for in slow end moves</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.MotorDirection">
            <summary>The direction of positive movement of the motor</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.EncoderDirection">
            <summary>The direction of positive encoder feedback</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.MotorRatio">
            <summary>The motor ratio to use to convert mm into motor steps</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.EncoderRatio">
            <summary>The encoder ratio to use to convert encoder pulses into mm</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.InitialSpeed">
            <summary>The initial axis speed (start speed)</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.DriveSpeed">
            <summary>The drive speed to run the axis up to</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.AccelerationRate">
            <summary>The rate of acceleration from the initial speed to the drive speed</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.HomeSearchSpeed">
            <summary>The speed to move when searching for the home sensor</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.HomeOffsetSpeed">
            <summary>The speed to move when stepping off the home sensor</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.HomeChangeDirectionDelay">
            <summary>The delay in milliseconds to wait after finding the home sensor and before stepping off</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.HomeTimeout">
            <summary>The timeout in seconds to use when homing</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.MoveTimeout">
            <summary>Gets or sets the move timeout in seconds</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.AxisType">
            <summary>The type of axis with which this settings object is used</summary>
        </member>
        <member name="P:Labman.MotionControl.AxisSettings.UniqueKey">
            <summary>
            A unique key for the item that needs to be saved
            </summary>
        </member>
        <member name="M:Labman.MotionControl.AxisSettings.#ctor">
            <summary>
            Settings class constructor
            </summary>
        </member>
        <member name="M:Labman.MotionControl.AxisSettings.Validate">
            <summary>
            Validate the settings specified to ensure they are valid
            </summary>
        </member>
        <member name="T:Labman.MotionControl.CartesianConfiguration">
            <summary>
            This class provides a container for setting up a set of 3 axes in a gantry configuration.
            The class provides movement routines for such a robot.
            </summary>
            <remarks>
            The cartesian configurations are accessed through the static ConnectedHardware class as follows:
            
            <code>
            // Home the cartesian configuration
            Labman.ConnectedHardware.CartesianConfigurations["Main Gantry"].Home(Hardware.MotorControllers.MotorController.WaitForCompletion.Wait);
            
            // Move the configuration to postion 3 of the 'Output Rack' area in the positions database.
            // If a slow move distance is specified in the positions database then this will be applied with the following command.
            Labman.ConnectedHardware.CartesianConfigurations["Main Gantry"].XYZTo("Output Rack", 3);
            </code>
            </remarks>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._gripper">
            <summary>The gripper output</summary>
        </member>
        <member name="T:Labman.MotionControl.CartesianConfiguration.HomeDelegate">
            <summary>Delegate used to home an axis async</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._moveRunning">
            <summary>Flag used to track when an async move is running</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._asyncOperationException">
            <summary>This exception is set to null when an async call starts and is set if an exception occurs during the async operation. It can then be thrown by the handler waiting for the async operation.</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._positionsDatabase">
            <summary>Positions Database Reference</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._xAxis">
            <summary>X Axis Reference</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._yAxis">
            <summary>Y Axis Reference</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._zAxis">
            <summary>Z Axis Reference</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._prePickActions">
            <summary>A collection of actions that must be performed before a pick command</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._postPickActions">
            <summary>A collection of actions that must be performed after a pick command</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._prePlaceActions">
            <summary>A collection of actions that must be performed before a place command</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration._postPlaceActions">
            <summary>A collection of actions that must be performed after a place command</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfiguration.HelpFile">
            <summary>
            The name of hardware device help rich text file. If left blank, the usercontrol will attempt to infer a path using reflection
            e.g. MitsubishiRobotArmHelpFile
            </summary>
        </member>
        <member name="T:Labman.MotionControl.CartesianConfiguration.PickPlaceActionOption">
            <summary>
            An enumeration of possible options for which actions to take during pick/place
            </summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration.PickPlaceActionOption.Normal">
            <summary>Normal mode where both pre and post actions are performed</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration.PickPlaceActionOption.IgnorePreActions">
            <summary>Ignore the pre pick/place action(s)</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration.PickPlaceActionOption.IgnorePostActions">
            <summary>Ignore the post pick/place action(s)</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration.PickPlaceActionOption.IgnorePreAndPostActions">
            <summary>Ignore the pre and post pick/place action(s)</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfiguration.PickPlaceActionOption.PreActionOnlySkipPickPlace">
            <summary>
            Runs the pre-actions and nothing else, does not try and do the actual pick
            </summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfiguration.Settings">
            <summary>Cartesian configuration settings</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfiguration.XAxis">
            <summary>X Axis</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfiguration.YAxis">
            <summary>Y Axis</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfiguration.ZAxis">
            <summary>Z Axis</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfiguration.PrePickActions">
            <summary>A collection of actions that must be performed before a pick command</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfiguration.PostPickActions">
            <summary>A collection of actions that must be performed after a pick command</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfiguration.PrePlaceActions">
            <summary>A collection of actions that must be performed before a place command</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfiguration.PostPlaceActions">
            <summary>A collection of actions that must be performed after a place command</summary>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.#ctor(Labman.MotionControl.CartesianConfigurationSettings)">
            <summary>
            Cartesian configuration constructor
            </summary>
            <param name="settings">The settings class for this cartesian configuration</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.#ctor">
            <summary>
            Class constructor sets up the class ready for use
            </summary>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.Setup">
            <summary>
            Setup routine finds the relevant class objects based on the specified names in the settings
            </summary>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.IsConfigurationReadyToMove">
            <summary>
            Checks each axis in the configuration to ensure it is initialised and stationary.
            </summary>
            <returns>True if ready to move, else false</returns>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.WaitForGantryMoveToComplete">
            <summary>
            Waits until all axis in the gantry have stopped moving
            </summary>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.Home">
            <summary>
            Homes this cartesian configuration, waiting for all axes to finishing moving
            </summary>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.Home(Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Homes this cartesian configuration
            </summary>
            <param name="waitType">Choice of whether to wait for the homing operation to finish before returning</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYZTo(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the XYZ axes to the specified positions
            </summary>
            <param name="xPosition">The X position in mm</param>
            <param name="yPosition">The Y position in mm</param>
            <param name="zPosition">The Z position in mm</param>
            <param name="slowMoveDistance">The distance to move slowly for</param>
            <param name="slowMoveSpeedPercentage">The speed percentage to move at during the slow move distance</param>
            <param name="xySpeedPercentage">The percentage of the drive speed to move the XY axes with</param>
            <param name="zSpeedPercentage">The percentage of the drive speed to move the Z axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYTo(System.Double,System.Double,System.Int32)">
            <summary>
            Moves the XY axes to the specified positions
            </summary>
            <param name="xPosition">The X position in mm</param>
            <param name="yPosition">The Y position in mm</param>
            <param name="xySpeedPercentage">The percentage of the drive speed to move the XY axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XTo(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Moves the X axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
            <param name="slowMoveDistance">The distance to move slowly for</param>
            <param name="slowMoveSpeedPercentage">The speed percentage to move at during the slow move distance</param>
            <param name="speedPercentage">The percentage of the drive speed to move the XY axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.YTo(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Moves the Y axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
            <param name="slowMoveDistance">The distance to move slowly for</param>
            <param name="slowMoveSpeedPercentage">The speed percentage to move at during the slow move distance</param>
            <param name="speedPercentage">The percentage of the drive speed to move the XY axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            Moves the Z axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
            <param name="slowMoveDistance">The distance to move slowly for</param>
            <param name="slowMoveSpeedPercentage">The speed percentage to move at during the slow move distance</param>
            <param name="speedPercentage">The percentage of the drive speed to move the XY axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(System.Double,System.Double,System.Int32,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Moves the Z axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
            <param name="slowMoveDistance">The distance to move slowly for</param>
            <param name="slowMoveSpeedPercentage">The speed percentage to move at during the slow move distance</param>
            <param name="speedPercentage">The percentage of the drive speed to move the XY axes with</param>
            <param name="waitMode">Wait Mode</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XTo(System.Double)">
            <summary>
            Moves the X axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XTo(System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Moves the X axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
            <param name="waitType">Type of the wait.</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.YTo(System.Double)">
            <summary>
            Moves the Y axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.YTo(System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Moves the Y axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
            <param name="waitType">Type of the wait.</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(System.Double)">
            <summary>
            Moves the Z axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(System.Double,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Moves the Z axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
            <param name="waitType">Type of the wait.</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XTo(System.Double,System.Boolean)">
            <summary>
            Moves the X axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
            <param name="useRecovery">True to use recovery, False to move without encoder checking</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.YTo(System.Double,System.Boolean)">
            <summary>
            Moves the Y axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
            <param name="useRecovery">True to use recovery, False to move without encoder checking</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(System.Double,System.Boolean)">
            <summary>
            Moves the Z axis to the specified positions
            </summary>
            <param name="position">The position in mm</param>
            <param name="useRecovery">True to use recovery, False to move without encoder checking</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYZTo(Labman.PositionsDatabase.Position,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Moves the XYZ axes to the specified positions
            </summary>
            <param name="xyzPosition">The positions database position to move to</param>
            <param name="slowMoveDistance">The distance to move slowly for. This overrides the slow distance specified in the positions database.</param>
            <param name="slowMoveSpeedPercentage">The speed percentage to move at during the slow move distance. This overrides the slow distance specified in the positions database.</param>
            <param name="xySpeedPercentage">The percentage of the drive speed to move the XY axes with</param>
            <param name="zSpeedPercentage">The percentage of the drive speed to move the Z axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYTo(Labman.PositionsDatabase.Position,System.Int32)">
            <summary>
            Moves the XY axes to the specified positions
            </summary>
            <param name="xyzPosition">The positions database position to move to</param>
            <param name="xySpeedPercentage">The percentage of the drive speed to move the XY axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XTo(Labman.PositionsDatabase.Position,System.Double,System.Int32,System.Int32)">
            <summary>
            Moves the X axis to the specified positions
            </summary>
            <param name="xyzPosition">The positions database position to move to</param>
            <param name="slowMoveDistance">The distance to move slowly for. This overrides the slow distance specified in the positions database.</param>
            <param name="slowMoveSpeedPercentage">The speed percentage to move at during the slow move distance. This overrides the slow distance specified in the positions database.</param>
            <param name="speedPercentage">The percentage of the drive speed to move the XY axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.YTo(Labman.PositionsDatabase.Position,System.Double,System.Int32,System.Int32)">
            <summary>
            Moves the Y axis to the specified positions
            </summary>
            <param name="xyzPosition">The positions database position to move to</param>
            <param name="slowMoveDistance">The distance to move slowly for. This overrides the slow distance specified in the positions database.</param>
            <param name="slowMoveSpeedPercentage">The speed percentage to move at during the slow move distance. This overrides the slow distance specified in the positions database.</param>
            <param name="speedPercentage">The percentage of the drive speed to move the XY axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(Labman.PositionsDatabase.Position,System.Double,System.Int32,System.Int32)">
            <summary>
            Moves the Z axis to the specified positions
            </summary>
            <param name="xyzPosition">The positions database position to move to</param>
            <param name="slowMoveDistance">The distance to move slowly for. This overrides the slow distance specified in the positions database.</param>
            <param name="slowMoveSpeedPercentage">The speed percentage to move at during the slow move distance. This overrides the slow distance specified in the positions database.</param>
            <param name="speedPercentage">The percentage of the drive speed to move the Z axis with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYZTo(Labman.PositionsDatabase.Position)">
            <summary>
            Moves the XYZ axes to the specified positions.
            Slow move distances specified in the positions database object are used.
            </summary>
            <param name="xyzPosition">The positions database position to move to</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYTo(Labman.PositionsDatabase.Position)">
            <summary>
            Moves the XY axes to the specified positions.
            Slow move distances specified in the positions database object are used.
            </summary>
            <param name="xyzPosition">The positions database position to move to</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XTo(Labman.PositionsDatabase.Position)">
            <summary>
            Moves the X axis to the specified positions.
            </summary>
            <param name="xyzPosition">The positions database position to move to</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.YTo(Labman.PositionsDatabase.Position)">
            <summary>
            Moves the Y axis to the specified positions.
            </summary>
            <param name="xyzPosition">The positions database position to move to</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(Labman.PositionsDatabase.Position)">
            <summary>
            Moves the Z axis to the specified positions.
            Slow move distances specified in the positions database object are used.
            </summary>
            <param name="xyzPosition">The positions database position to move to</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYZTo(System.String,System.Int32,System.Double,System.Int32,System.Int32,System.Int32,Labman.PositionsDatabase.PositionDatabase.PositionTypes)">
            <summary>
            Move the XYZ axes to a specified position area.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
            <param name="slowMoveDistance">Overrides the default slow move distance with a distance in mm to move slowly at the +ve limit of the move</param>
            <param name="slowMoveSpeedPercentage">Overrides the default slow move speed with the percentage of the drive speed to perform the slow move distance at</param>
            <param name="xySpeedPercentage">The percentage of the drive speed to move the XY axes with</param>
            <param name="zSpeedPercentage">The percentage of the drive speed to move the Z axes with</param>
            <param name="usePlacePosition">A flag which indicates whether to use the place position or not</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYTo(System.String,System.Int32,System.Int32)">
            <summary>
            Move the XY axes to a specified position area.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
            <param name="xySpeedPercentage">The percentage of the drive speed to move the XY axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XTo(System.String,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Move the X axis to a specified position area.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
            <param name="slowMoveDistance">Overrides the default slow move distance with a distance in mm to move slowly at the +ve limit of the move</param>
            <param name="slowMoveSpeedPercentage">Overrides the default slow move speed with the percentage of the drive speed to perform the slow move distance at</param>
            <param name="speedPercentage">The percentage of the drive speed to move the XY axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.YTo(System.String,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Move the Y axis to a specified position area.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
            <param name="slowMoveDistance">Overrides the default slow move distance with a distance in mm to move slowly at the +ve limit of the move</param>
            <param name="slowMoveSpeedPercentage">Overrides the default slow move speed with the percentage of the drive speed to perform the slow move distance at</param>
            <param name="speedPercentage">The percentage of the drive speed to move the XY axes with</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(System.String,System.Int32,System.Double,System.Int32,System.Int32,Labman.PositionsDatabase.PositionDatabase.PositionTypes)">
            <summary>
            Move the Z axis to a specified position area.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
            <param name="slowMoveDistance">Overrides the default slow move distance with a distance in mm to move slowly at the +ve limit of the move</param>
            <param name="slowMoveSpeedPercentage">Overrides the default slow move speed with the percentage of the drive speed to perform the slow move distance at</param>
            <param name="speedPercentage">The percentage of the drive speed to move the XY axes with</param>
            <param name="usePlacePosition">A flag which indicates whether to use the place position or not</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYZTo(System.String,System.Int32)">
            <summary>
            Move the XYZ axes to a specified position area. Does not use the place position.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYTo(System.String,System.Int32)">
            <summary>
            Move the XY axes to a specified position area. Does not use the place position.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XTo(System.String,System.Int32)">
            <summary>
            Move the X axis to a specified position area. Does not use the place position.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.YTo(System.String,System.Int32)">
            <summary>
            Move the Y axis to a specified position area. Does not use the place position.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(System.String,System.Int32)">
            <summary>
            Move the Z axis to a specified position area. Does not use the place position.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(System.String,System.Int32,Labman.Hardware.MotorControllers.MotorController.WaitForCompletion)">
            <summary>
            Move the Z axis to a specified position area. Does not use the place position.
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
            <param name="waitMode">Wait mode</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.XYZTo(System.String,System.Int32,Labman.PositionsDatabase.PositionDatabase.PositionTypes)">
            <summary>
            Move the XYZ axes to a specified position area
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
            <param name="usePlacePosition">Whether to use the place position or not</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.ZTo(System.String,System.Int32,Labman.PositionsDatabase.PositionDatabase.PositionTypes)">
            <summary>
            Move the Z axis to a specified position area
            </summary>
            <param name="positionArea">The area to move within</param>
            <param name="areaIndex">The area index</param>
            <param name="usePlacePosition">Whether to use the place position or not</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.Pick(System.String,System.Int32)">
            <summary>
            Pick from a specified area. 
            Throws an exception on error, or failure to match all of the pre/post pick requisites.
            </summary>
            <param name="area">The area to pick from</param>
            <param name="index">The area index to pick from</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.Pick(System.String,System.Int32,Labman.MotionControl.CartesianConfiguration.PickPlaceActionOption)">
            <summary>
            Pick from a specified area. 
            Throws an exception on error, or failure to match all of the pre/post pick requisites.
            </summary>
            <param name="area">The area to pick from</param>
            <param name="index">The area index to pick from</param>
            <param name="option">The pick/place action option to use</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.Place(System.String,System.Int32)">
            <summary>
            Places to a specified area. 
            Throws an exception on error, or failure to match all of the pre/post place requisites.
            </summary>
            <param name="area">The area to pick from</param>
            <param name="index">The area index to pick from</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.Place(System.String,System.Int32,Labman.MotionControl.CartesianConfiguration.PickPlaceActionOption)">
            <summary>
            Places to a specified area. 
            Throws an exception on error, or failure to match all of the pre/post place requisites.
            </summary>
            <param name="area">The area to pick from</param>
            <param name="index">The area index to pick from</param>
            <param name="option">The pick/place action option to use</param>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.OpenGripper">
            <summary>
            Opens the cartesians gripper if there is one specified
            </summary>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.CloseGripper">
            <summary>
            Closes the cartesians gripper if there is one specified
            </summary>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfiguration.AssignPickPlaceActions(Labman.MotionControl.PickPlaceActions.IPickPlaceActions)">
            <summary>
            Assigns pick place actions based on the specified implementation of the IPickPlaceActions interface
            </summary>
            <param name="actions">The implementation of pick/place actions</param>
        </member>
        <member name="T:Labman.MotionControl.CartesianConfigurationSettings">
            <summary>
            Settings class for the cartesian axis configuration class
            </summary>
        </member>
        <member name="T:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder">
            <summary>
            Enumeration of the possible axis home orders wihin a cartesian configuration
            </summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.DoNotHome">
            <summary>Do not home any axes, you must manually home this configuration</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.XOnly">
            <summary>Home just the X</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.YOnly">
            <summary>Home just the Y</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.ZOnly">
            <summary>Home just the Z</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.XYOnly">
            <summary>Home just the X and Y</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.ZThenXY">
            <summary>Home the Z and then home both the X an Y together</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.ZThenXThenY">
            <summary>Home the Z and then the X and then the Y</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.ZThenYThenX">
            <summary>Home the Z and then the Y and then the X</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.XYZTogether">
            <summary>Home all three axes together</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.XThenYThenZ">
            <summary>Home the X and then the Y and then the Z</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.XThenZThenY">
            <summary>Home the X and then the Z and then the Y</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.YThenXThenZ">
            <summary>Home the Y and then the X and then the Z</summary>
        </member>
        <member name="F:Labman.MotionControl.CartesianConfigurationSettings.HomeOrder.YThenZThenX">
            <summary>Home the Y and then the Z and then the X</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.ConfigurationName">
            <summary>The unique name for this cartesian configuration</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.XAxisName">
            <summary>The name of the X axis, this should be present in the connected hardware class's axis collection</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.YAxisName">
            <summary>The name of the Y axis, this should be present in the connected hardware class's axis collection</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.ZAxisName">
            <summary>The name of the Z axis, this should be present in the connected hardware class's axis collection</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.GripperName">
            <summary>The name of the output for the gripper on this configuration</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.PositionsDatabaseName">
            <summary>The name of the positions database to use, this should be present in the base class's positions database collection</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.PositionsDatabaseGroupNameToUse">
            <summary>The name of the positions database group to get positions within</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.DefaultXYSpeedPercentage">
            <summary>The default speed percentage for the XY axes</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.DefaultZSpeedPercentage">
            <summary>The default speed percentage for the Z axis</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.PickAttempts">
            <summary>Number of times to attempt a pick</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.PlaceAttempts">
            <summary>Number of times to attempt a place</summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.AxisHomeOrder">
            <summary>The home order to use for this configuration</summary>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfigurationSettings.#ctor">
            <summary>
            Class constructor sets up default settings
            </summary>
        </member>
        <member name="M:Labman.MotionControl.CartesianConfigurationSettings.Validate">
            <summary>
            Validates the settings provided
            </summary>
        </member>
        <member name="P:Labman.MotionControl.CartesianConfigurationSettings.UniqueKey">
            <summary>
            A unique key for the item that needs to be saved
            </summary>
        </member>
        <member name="T:Labman.Notification.NotificationServices.TraciotNotificationService">
            <summary>
            This class implements the notification service and sends user notifications out using Traciot
            </summary>
        </member>
        <member name="M:Labman.Notification.NotificationServices.TraciotNotificationService.#ctor(System.String,System.String)">
            <summary>
            Class constructor sets up parameters for sending notifications
            </summary>
            <param name="emailAddresses">A semi-colon seperated list of email address to send notifications to</param>
            <param name="messageTitle">The title of the messages being sent</param>
        </member>
        <member name="M:Labman.Notification.NotificationServices.TraciotNotificationService.SendMessage(System.String)">
            <summary>
            Sends out an email to the list of specified email addresses
            </summary>
            <param name="message">The message body to send</param>
        </member>
        <member name="T:Labman.Notification.NotificationServices.EmailNotificationService">
            <summary>
            Class used to send out email notifications.
            Multiple messages that are received within 5 seconds of each other are group together into one email.
            </summary>
        </member>
        <member name="F:Labman.Notification.NotificationServices.EmailNotificationService._timer">
            <summary>
            A timer which is used to send messages a short time after they are raised so that multiple messages can be grouped together
            </summary>
        </member>
        <member name="F:Labman.Notification.NotificationServices.EmailNotificationService._cachedMessages">
            <summary>
            A queue of cached messages to send
            </summary>
        </member>
        <member name="M:Labman.Notification.NotificationServices.EmailNotificationService.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Class constructor sets up parameters for sending notifications
            </summary>
            <param name="emailAddresses">A semi-colon seperated list of email address to send notifications to</param>
            <param name="smtpHost">The hostname or IP address of the SMTP server</param>
            <param name="smtpPort">The port number of the SMTP server</param>
            <param name="smtpUsername">The username of the email account to send through</param>
            <param name="smtpPassword">The password for the email account we are sending through</param>
            <param name="smtpFromAddress">The address for messages to appear from</param>
            <param name="messageTitle">The title of the messages being sent</param>
        </member>
        <member name="M:Labman.Notification.NotificationServices.EmailNotificationService.#ctor(System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Class constructor sets up parameters for sending notifications
            </summary>
            <param name="emailAddresses">A semi-colon seperated list of email address to send notifications to</param>
            <param name="smtpHost">The hostname or IP address of the SMTP server</param>
            <param name="smtpPort">The port number of the SMTP server</param>
            <param name="smtpUsername">The username of the email account to send through</param>
            <param name="smtpPassword">The password for the email account we are sending through</param>
            <param name="smtpFromAddress">The address for messages to appear from</param>
            <param name="messageTitle">The title of the messages being sent</param>
            <param name="enableSsl">Whether SSL is used to encrypt the connection</param>
            <param name="useDefaultCredentials">Whether default credentials are sent with requests</param>
        </member>
        <member name="M:Labman.Notification.NotificationServices.EmailNotificationService.TimerElapsed(System.Object)">
            <summary>
            Method used to empty the message queue and send all notifications
            </summary>
            <param name="state">State object - not used</param>
        </member>
        <member name="M:Labman.Notification.NotificationServices.EmailNotificationService.SendMessage(System.String,System.String)">
            <summary>
            Method used to send a notification message
            </summary>
            <param name="message">The message to send</param>
            <param name="attachmentFilename">The filename of an attachement to add</param>
        </member>
        <member name="M:Labman.Notification.NotificationServices.EmailNotificationService.SendMessage(System.String)">
            <summary>
            Method used to send a notification message
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="T:Labman.Notification.NotificationServices.INotificationService">
            <summary>
            This interface provides a set of common functionality that all notification services must implement
            </summary>
        </member>
        <member name="M:Labman.Notification.NotificationServices.INotificationService.SendMessage(System.String)">
            <summary>
            Method used to send a notification message
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="T:Labman.Notification.NotificationSender">
            <summary>
            This class is used to store a collection of notification services for a specific object and 
            when instructed will send out notifications to all registered services.
            </summary>
        </member>
        <member name="F:Labman.Notification.NotificationSender._registeredNotifications">
            <summary>
            Collection of services for each notification key
            </summary>
        </member>
        <member name="M:Labman.Notification.NotificationSender.SendNotifications(System.Int32,System.String)">
            <summary>
            Send notifications to all of the registered senders
            </summary>
            <param name="notificationKey">The integer key of the notification to send</param>
            <param name="message">The message to send out</param>
        </member>
        <member name="M:Labman.Notification.NotificationSender.RegisterForNotification(Labman.Notification.NotificationServices.INotificationService,System.Int32)">
            <summary>
            Register for a notifcation for an event
            </summary>
            <param name="service">The notification service to use when sending a message</param>
            <param name="notificationKey">The type of notification to register for</param>
        </member>
        <member name="T:Labman.ParametersDatabase.ParametersDatabase">
            <summary>
            Static class for parameters database methods
            </summary>
        </member>
        <member name="M:Labman.ParametersDatabase.ParametersDatabase.GetParameter(System.String,System.String)">
            <summary>
            Gets the specified parameter from the database using the settings from the base class. This is set in App.xaml.cs
            </summary>
            <param name="parameterName">
            The name of the parameter to get.
            </param>
            <param name="sectionName">
            The name of the section of the parameter to get.
            </param>
            <returns>
            String value of the parameter
            </returns>
            <exception cref="T:Labman.ParametersDatabase.ParameterException">
            Parameter not found in the database.
            </exception>
        </member>
        <member name="M:Labman.ParametersDatabase.ParametersDatabase.GetParameter(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the specified parameter from the database.
            </summary>
            <param name="parameterName">
            The name of the parameter to get.
            </param>
            <param name="sectionName">
            The name of the section of the parameter to get.
            </param>
            <param name="databaseConnectionName">
            The name of the database connection set in App.xaml.cs. The default is "System Database"
            </param>
            <param name="parametersTableName">
            The name of the parameter table. The default is "tbl_parameters"
            </param>
            <param name="sectionFieldName">
            The name of the parameter section column in the database table. The default is "section"
            </param>
            <param name="keyFieldName">
            The name of the parameter key column in the database table. The default is "name"
            </param>
            <param name="valueFieldName">
            The name of the parameter value column in the database table. The default is "value"
            </param>
            <returns>
            String value of the parameter
            </returns>
            <exception cref="T:Labman.ParametersDatabase.ParameterException">
            Parameter not found in the database.
            </exception>
        </member>
        <member name="M:Labman.ParametersDatabase.ParametersDatabase.GetParameter``1(System.String,System.String)">
            <summary>
            Gets the specified parameter from the database and converts it to the specified type.
            </summary>
            <typeparam name="T">
            The data type to convert the value of the parameter to
            </typeparam>
            <param name="parameterName">
            The name of the parameter to get
            </param>
            <param name="sectionName">
            The name of the section of the parameter to get.
            </param>
            <returns>
            The value of the parameter
            </returns>
        </member>
        <member name="M:Labman.ParametersDatabase.ParametersDatabase.GetParameter``1(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the specified parameter from the database and converts it to the specified type.
            </summary>
            <typeparam name="T">
            The data type to convert the value of the parameter to
            </typeparam>
            <param name="parameterName">
            The name of the parameter to get
            </param>
            <param name="sectionName">
            The name of the section of the parameter to get.
            </param>
            <param name="databaseConnectionName">
            The name of the database connection set in App.xaml.cs. The default is "System Database"
            </param>
            <param name="parametersTableName">
            The name of the parameter table. The default is "tbl_parameters"
            </param>
            <param name="sectionFieldName">
            The name of the parameter section column in the database table. The default is "name"
            </param>
            <param name="keyFieldName">
            The name of the parameter key column in the database table. The default is "name"
            </param>
            <param name="valueFieldName">
            The name of the parameter value column in the database table. The default is "value"
            </param>
            <returns>
            The value of the parameter
            </returns>
        </member>
        <member name="M:Labman.ParametersDatabase.ParametersDatabase.SetParameter(System.String,System.String,System.Object)">
            <summary>
            Sets the specified parameter to the specified value in the database
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="sectionName">The name of the section of the parameter to get.</param>
            <param name="value">The value to set the parameter to. Will be converted to a string using ToString()</param>
            <exception cref="T:Labman.ParametersDatabase.ParameterException">Parameter not found in the database.</exception>
        </member>
        <member name="M:Labman.ParametersDatabase.ParametersDatabase.SetParameter(System.String,System.String,System.Object,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets the specified parameter to the specified value in the database
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="sectionName">The name of the section of the parameter to get.</param>
            <param name="value">The value to set the parameter to. Will be converted to a string using ToString()</param>
            <param name="databaseConnectionName">
            The name of the database connection set in App.xaml.cs. The default is "System Database"
            </param>
            <param name="parametersTableName">
            The name of the parameter table. The default is "tbl_parameters"
            </param>
            <param name="sectionFieldName">
            The name of the parameter section column in the database table. The default is "name"
            </param>
            <param name="keyFieldName">
            The name of the parameter key column in the database table. The default is "name"
            </param>
            <param name="valueFieldName">
            The name of the parameter value column in the database table. The default is "value"
            </param>
            <exception cref="T:Labman.ParametersDatabase.ParameterException">Parameter not found in the database.</exception>
        </member>
        <member name="T:Labman.ParametersDatabase.ParameterException">
            <summary>
            Class for exceptions related to the parameter database
            </summary>
        </member>
        <member name="M:Labman.ParametersDatabase.ParameterException.#ctor(System.String)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.ParametersDatabase.ParameterException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.ParametersDatabase.ParameterException.#ctor(System.String,System.String)">
            <summary>
            The constructor overrides the base Labman exception, and sets the TargetParameterName property
            </summary>
            <param name="parameterName">Name of the parameter which caused the exception</param>
            <param name="message">Provide a detailed description of the error</param>
        </member>
        <member name="M:Labman.ParametersDatabase.ParameterException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            The constructor overrides the base Labman exception, and sets the TargetParameterName property
            </summary>
            <param name="parameterName">Name of the parameter which caused the exception</param>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
        </member>
        <member name="P:Labman.ParametersDatabase.ParameterException.TargetParameterName">
            <summary>
            The name of the parameter which caused the exception
            </summary>
        </member>
        <member name="T:Labman.ParametersDatabase.ParametersDatabaseConnectionSettings">
            <summary>
            The settings class for the parameter database
            </summary>
        </member>
        <member name="P:Labman.ParametersDatabase.ParametersDatabaseConnectionSettings.DatabaseConnectionName">
            <summary>
            The name of the database connection. Set in the Database.Providers.ProviderSettings "databaseSettings" variable in App.xaml.cs
            </summary>
        </member>
        <member name="P:Labman.ParametersDatabase.ParametersDatabaseConnectionSettings.ParametersTableName">
            <summary>
            The name of the parameter table
            </summary>
        </member>
        <member name="P:Labman.ParametersDatabase.ParametersDatabaseConnectionSettings.ParametersSectionFieldName">
            <summary>
            The name of the parameter section column
            </summary>
        </member>
        <member name="P:Labman.ParametersDatabase.ParametersDatabaseConnectionSettings.ParameterKeyFieldName">
            <summary>
            The name of the parameter key column
            </summary>
        </member>
        <member name="P:Labman.ParametersDatabase.ParametersDatabaseConnectionSettings.ParameterValueFieldName">
            <summary>
            The name of the parameter value column
            </summary>
        </member>
        <member name="T:Labman.Printing.RawPrinterDriver">
            <summary>
            Class that allows raw commands to be sent to a printer
            </summary>
        </member>
        <member name="T:Labman.Printing.RawPrinterDriver.DOCINFOA">
            <summary>
            Structure and API declarions
            </summary>
        </member>
        <member name="F:Labman.Printing.RawPrinterDriver.DOCINFOA.pDocName">
            <summary>
            The p document name
            </summary>
        </member>
        <member name="F:Labman.Printing.RawPrinterDriver.DOCINFOA.pOutputFile">
            <summary>
            The p output file
            </summary>
        </member>
        <member name="F:Labman.Printing.RawPrinterDriver.DOCINFOA.pDataType">
            <summary>
            The p data type
            </summary>
        </member>
        <member name="M:Labman.Printing.RawPrinterDriver.OpenPrinter(System.String,System.IntPtr@,System.IntPtr)">
            <summary>
            Opens the printer.
            </summary>
            <param name="szPrinter">The sz printer.</param>
            <param name="hPrinter">The h printer.</param>
            <param name="pd">The pd.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Printing.RawPrinterDriver.ClosePrinter(System.IntPtr)">
            <summary>
            Closes the printer.
            </summary>
            <param name="hPrinter">The h printer.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Printing.RawPrinterDriver.StartDocPrinter(System.IntPtr,System.Int32,Labman.Printing.RawPrinterDriver.DOCINFOA)">
            <summary>
            Starts the document printer.
            </summary>
            <param name="hPrinter">The h printer.</param>
            <param name="level">The level.</param>
            <param name="di">The di.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Printing.RawPrinterDriver.EndDocPrinter(System.IntPtr)">
            <summary>
            Ends the document printer.
            </summary>
            <param name="hPrinter">The h printer.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Printing.RawPrinterDriver.StartPagePrinter(System.IntPtr)">
            <summary>
            Starts the page printer.
            </summary>
            <param name="hPrinter">The h printer.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Printing.RawPrinterDriver.EndPagePrinter(System.IntPtr)">
            <summary>
            Ends the page printer.
            </summary>
            <param name="hPrinter">The h printer.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Printing.RawPrinterDriver.WritePrinter(System.IntPtr,System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            Writes the printer.
            </summary>
            <param name="hPrinter">The h printer.</param>
            <param name="pBytes">The p bytes.</param>
            <param name="dwCount">The dw count.</param>
            <param name="dwWritten">The dw written.</param>
            <returns>The result</returns>
        </member>
        <member name="M:Labman.Printing.RawPrinterDriver.SendBytesToPrinter(System.String,System.IntPtr,System.Int32)">
            <summary>
            Sends the bytes to printer.
            </summary>
            <param name="szPrinterName">Name of the sz printer.</param>
            <param name="pBytes">The p bytes.</param>
            <param name="dwCount">The dw count.</param>
            <returns>Success state</returns>
        </member>
        <member name="M:Labman.Printing.RawPrinterDriver.SendFileToPrinter(System.String,System.String)">
            <summary>
            Sends the file to printer.
            </summary>
            <param name="szPrinterName">Name of the sz printer.</param>
            <param name="szFileName">Name of the sz file.</param>
            <returns>Success state</returns>
        </member>
        <member name="M:Labman.Printing.RawPrinterDriver.SendStringToPrinter(System.String,System.String)">
            <summary>
            Sends the string to printer.
            </summary>
            <param name="szPrinterName">Name of the sz printer.</param>
            <param name="szString">The sz string.</param>
            <returns>Success State</returns>
        </member>
        <member name="T:Labman.Printing.ZebraLabelPrinter">
            <summary>
            Class that allows printing to a Zebra ZPL enabled label printer
            </summary>
        </member>
        <member name="P:Labman.Printing.ZebraLabelPrinter.LabelItems">
            <summary>
            Collection of label items to add to each label
            </summary>
        </member>
        <member name="M:Labman.Printing.ZebraLabelPrinter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Printing.ZebraLabelPrinter"/> class.
            </summary>
            <param name="printerDeviceName">Name of the printer device.</param>
        </member>
        <member name="M:Labman.Printing.ZebraLabelPrinter.PrintLabel">
            <summary>
            Prints the defined label
            </summary>
        </member>
        <member name="M:Labman.Printing.ZebraLabelPrinter.AssignFontNumber(System.String,System.Char)">
            <summary>
            Assigns the font number.
            </summary>
            <param name="fontName">Name of the font.</param>
            <param name="fontId">The font identifier.</param>
        </member>
        <member name="M:Labman.Printing.ZebraLabelPrinter.SelectFont(System.Char)">
            <summary>
            Selects the font.
            </summary>
            <param name="fontId">The font identifier.</param>
        </member>
        <member name="M:Labman.Printing.ZebraLabelPrinter.PrintAvailableFontsLabel">
            <summary>
            Prints a label listing the available fonts on the printer
            </summary>
        </member>
        <member name="M:Labman.Printing.ZebraLabelPrinter.SetDarkness(System.Int32)">
            <summary>
            Sets the darkness.
            </summary>
            <param name="darkness">The darkness.</param>
        </member>
        <member name="M:Labman.Printing.ZebraLabelPrinter.SetPrintSpeed(System.Int32)">
            <summary>
            Sets the print speed
            </summary>
            <param name="speed">The print speed in inches per second. Min is 1, max is 14</param>
        </member>
        <member name="M:Labman.Printing.ZebraLabelPrinter.ClearLabelItems">
            <summary>
            Clears the label items
            </summary>
        </member>
        <member name="M:Labman.Printing.ZebraLabelPrinter.AddItemToLabel(Labman.Printing.Zebra.ZebraLabelItem)">
            <summary>
            Adds an item to the label
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:Labman.Printing.ZebraLabelPrinter.SendZplStringToPrinter(System.String)">
            <summary>
            Send the raw ZPL string to the printer
            </summary>
            <param name="zplCommand">ZPL command to send</param>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraItemOrientation">
            <summary>
            Orientations of Zebra printer items
            </summary>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraLabelItem">
            <summary>
            Generic label item
            </summary>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraLabelItem.GetItemZPL">
            <summary>
            Gets the ZPL for this label item
            </summary>
            <returns>ZPL string</returns>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraLabelImage">
            <summary>
            Zebra image label item
            </summary>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraLabelImage.GetItemZPL">
            <summary>
            Gets the ZPL for this label item
            </summary>
            <returns>
            ZPL string
            </returns>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraLabelImage.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Printing.Zebra.ZebraLabelBarcode" /> class.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="scale">The scaling factor (1-10)</param>
            <param name="imageName">Name of the image.</param>
            <param name="directoryCharacter">Directory the graphic is stored in.</param>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraLabelBarcode">
            <summary>
            Zebra barcode label item
            </summary>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraLabelBarcode.BarcodeFormat">
            <summary>
            Barcode formats
            </summary>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraLabelBarcode.GetItemZPL">
            <summary>
            Gets the ZPL for this label item
            barcode width can be canged by BYX (1-10)
            </summary>
            <returns>
            ZPL string
            </returns>
            <exception cref="T:System.NotImplementedException">This barcode format is not yet implemented</exception>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraLabelBarcode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,Labman.Printing.Zebra.ZebraLabelBarcode.BarcodeFormat,System.String,Labman.Printing.Zebra.ZebraItemOrientation)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Printing.Zebra.ZebraLabelBarcode" /> class.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="height">The height. For a data matrix, this is the height of each individual square in the barcode.</param>
            <param name="width"> 1-10 - control for Code128 only, not granular needs trial to set the best value.</param>
            <param name="format">The format.</param>
            <param name="barcode">The barcode.</param>
            <param name="orientation">Orientation of the barcode</param>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraLabelText">
            <summary>
            Zebra text label item
            </summary>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraLabelText.GetItemZPL">
            <summary>
            Gets the ZPL for this label item
            </summary>
            <returns>ZPL string</returns>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraLabelText.#ctor(System.Int32,System.Int32,System.Int32,System.String,Labman.Printing.Zebra.ZebraItemOrientation,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Printing.Zebra.ZebraLabelText"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="size">The size.</param>
            <param name="text">The text.</param>
            <param name="orientation">Orientation of the text</param>
            <param name="leftAligned">text is left aligned if true, right aligned if false</param>
            <param name="fontCharacter">The font to use</param>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraLabelText.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.String,Labman.Printing.Zebra.ZebraItemOrientation,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Printing.Zebra.ZebraLabelText"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="size">The size.</param>
            <param name="width">The width.</param>
            <param name="text">The text.</param>
            <param name="orientation">Orientation of the text</param>
            <param name="leftAligned">text is left aligned if true, right aligned if false</param>
            <param name="fontCharacter">The font to use</param>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraLabelRectangle">
            <summary>
            Zebra Rectnagle graphic box item
            </summary>
            <seealso cref="T:Labman.Printing.Zebra.ZebraLabelItem" />
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraLabelRectangle.GetItemZPL">
            <summary>
            Gets the ZPL for this label item
            </summary>
            <returns> ZPL string </returns>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraLabelRectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Printing.Zebra.ZebraLabelRectangle"/> class.
            </summary>
            <param name="left">The left.</param>
            <param name="top">The top.</param>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="borderThickness">The border thickness.</param>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraFieldBlock">
            <summary>
            When added before a text item, creates a text block for that item.
            This allows you to align the text, or have multi line text
            </summary>
        </member>
        <member name="F:Labman.Printing.Zebra.ZebraFieldBlock._maxLines">
            <summary>
            The maximum number of lines in the text block
            1 to 9999
            Defaults to 1
            </summary>
        </member>
        <member name="F:Labman.Printing.Zebra.ZebraFieldBlock._spaceBetweenLines">
            <summary>
            How much space to have between lines
            -9999 to 9999
            Defaults to 0
            </summary>
        </member>
        <member name="F:Labman.Printing.Zebra.ZebraFieldBlock._textJustification">
            <summary>
            How to align the text
            </summary>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraFieldBlock.JustificationCharacter">
            <summary>
            How to justify the text
            </summary>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraFieldBlock.GetItemZPL">
            <summary>
            Gets the ZPL code for the item
            </summary>
            <returns>The ZPL as a string</returns>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraFieldBlock.#ctor(System.Int32,System.Int32,System.Int32,Labman.Printing.Zebra.ZebraFieldBlock.JustificationCharacter,System.Int32)">
            <summary>
            Creates a new field text block
            </summary>
            <param name="width">The width of the text block</param>
            <param name="maxLines">The maximum number of lines of text in the text block</param>
            <param name="spaceBetweenLines">How much space to have between lines. Defaults is 0. -9999 to 9999</param>
            <param name="textJustification">How to align the text</param>
            <param name="hangingIndent">Indent of the second and remaining lines. Defaults to 0</param>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraGraphicSymbol">
            <summary>
            Inserts a graphic symbol after the last text field
            </summary>
        </member>
        <member name="T:Labman.Printing.Zebra.ZebraGraphicSymbol.Symbol">
            <summary>
            The symbol to draw
            </summary>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraGraphicSymbol.GetItemZPL">
            <summary>
            Gets the ZPL code for the item
            </summary>
            <returns>The ZPL as a string</returns>
        </member>
        <member name="M:Labman.Printing.Zebra.ZebraGraphicSymbol.#ctor(Labman.Printing.Zebra.ZebraItemOrientation,System.Int32,System.Int32,Labman.Printing.Zebra.ZebraGraphicSymbol.Symbol)">
            <summary>
            Creates a new field text block
            </summary>
            <param name="orientation">The orientation of the symbol</param>
            <param name="width">The width of the symbol</param>
            <param name="height">The height of the symbol</param>
            <param name="symbol">The symbol to insert</param>
        </member>
        <member name="T:Labman.Processes.ProcessRequests.IProcessRequest">
            <summary>
            Interface that defines the requirements of a process request object
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.IProcessRequest.UniqueKey">
            <summary>
            A unique key for this request
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.IProcessRequest.ProcessName">
            <summary>
            The name of the process raising the event
            </summary>
        </member>
        <member name="T:Labman.Processes.ProcessRequests.LoadProcessRequest">
            <summary>
            Process request to load a sample
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.LoadProcessRequest.UniqueKey">
            <summary>
            A unique key for this request
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.LoadProcessRequest.ProcessName">
            <summary>
            The name of the process raising the event
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.LoadProcessRequest.Area">
            <summary>
            The zone in which the item is to be unloaded (if applicable)
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.LoadProcessRequest.Position">
            <summary>
            The position to unload from
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.LoadProcessRequest.SampleIdentification">
            <summary>
            An identification for the sample being requested
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessRequests.LoadProcessRequest.#ctor">
            <summary>
            Blank constructor, you must setup properties manually
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessRequests.LoadProcessRequest.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor for the load request
            </summary>
            <param name="processName">The name of the process raising this event</param>
            <param name="areaName">The name of the area to load to</param>
            <param name="position">The position in the area to load to</param>
        </member>
        <member name="T:Labman.Processes.ProcessRequests.TransferProcessRequest">
            <summary>
            Process request to transfer a sample from one location to another
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.TransferProcessRequest.UniqueKey">
            <summary>
            A unique key for this request
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.TransferProcessRequest.ProcessName">
            <summary>
            The name of the process raising the event
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.TransferProcessRequest.SourceArea">
            <summary>
            The zone in which the item is to be unloaded
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.TransferProcessRequest.SourcePosition">
            <summary>
            The position to unload from
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.TransferProcessRequest.TargetArea">
            <summary>
            The zone in which the item is to be loaded
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.TransferProcessRequest.TargetPosition">
            <summary>
            The position to load to
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.TransferProcessRequest.SampleIdentification">
            <summary>
            An identification for the sample being requested
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessRequests.TransferProcessRequest.#ctor">
            <summary>
            Blank constructor, you must setup properties manually
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessRequests.TransferProcessRequest.#ctor(System.String,System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Constructor for the transfer request
            </summary>
            <param name="processName">The name of the process raising this event</param>
            <param name="sourceAreaName">The name of the area to unload from</param>
            <param name="sourceposition">The position in the area to unload from</param>
            <param name="targetAreaName">The name of the area to load to</param>
            <param name="targetposition">The position in the area to load to</param>
        </member>
        <member name="T:Labman.Processes.ProcessRequests.UnloadProcessRequest">
            <summary> 
            Process request to unload a sample
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.UnloadProcessRequest.UniqueKey">
            <summary>
            A unique key for this request
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.UnloadProcessRequest.ProcessName">
            <summary>
            The name of the process raising the event
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.UnloadProcessRequest.Area">
            <summary>
            The zone in which the item is to be unloaded (if applicable)
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.UnloadProcessRequest.Position">
            <summary>
            The position to unload from
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessRequests.UnloadProcessRequest.SampleIdentification">
            <summary>
            An identification for the sample being requested
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessRequests.UnloadProcessRequest.#ctor">
            <summary>
            Blank constructor, you must setup properties manually
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessRequests.UnloadProcessRequest.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor for the unload request
            </summary>
            <param name="processName">The name of the process raising this event</param>
            <param name="areaName">The name of the area to unload from</param>
            <param name="position">The position in the area to unload from</param>
        </member>
        <member name="T:Labman.Processes.Task">
            <summary>
            Class that represents a task that runs in a thread
            </summary>
        </member>
        <member name="P:Labman.Processes.Task.LastException">
            <summary>
            Returns if the last logged exception
            </summary>
        </member>
        <member name="P:Labman.Processes.Task.IsCompleted">
            <summary>
            Returns if the process is completed
            </summary>
        </member>
        <member name="P:Labman.Processes.Task.IsFaulted">
            <summary>
            Returns if the process is faulted
            </summary>
        </member>
        <member name="P:Labman.Processes.Task.Status">
            <summary>
            Current status of the task
            </summary>
        </member>
        <member name="M:Labman.Processes.Task.#ctor(System.Action)">
            <summary>
            Constructor which creates a new task ready to run
            </summary>
            <param name="methodToCall">The method to call in an async thread</param>
        </member>
        <member name="M:Labman.Processes.Task.Dispose">
            <summary>
            Dispose method
            </summary>
        </member>
        <member name="M:Labman.Processes.Task.Start">
            <summary>
            Start the task running
            </summary>
        </member>
        <member name="M:Labman.Processes.Task.Wait">
            <summary>
            Waits for the task to complete
            </summary>
        </member>
        <member name="M:Labman.Processes.Task.RunMethod">
            <summary>
            Process that runs the method
            </summary>
        </member>
        <member name="T:Labman.Processes.StatePersisters.DatabaseStatePersister">
            <summary>
            The database state updater allows a process state to be stored in a database
            </summary>
        </member>
        <member name="M:Labman.Processes.StatePersisters.DatabaseStatePersister.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Class constructor defines the parameters to use when handling states
            </summary>
            <param name="databaseConnectionName">The name of the database connection to use. This should be present in the databaseconnections collection.</param>
            <param name="tableName">The name of the table that holds the state information</param>
            <param name="procesNameFieldName">The name of the field that holds the process name</param>
            <param name="processStateFieldName">The name of the field that holds the process state</param>
            <param name="stateChangedTimestampFieldName">The name of the field that holds the timestamp for the last time the state was changed</param>
        </member>
        <member name="M:Labman.Processes.StatePersisters.DatabaseStatePersister.SetState(System.String,System.Int32)">
            <summary>
            This method is used to set the state in the storage engine
            </summary>
            <param name="processName">The process name that is changing state</param>
            <param name="state">The new state to save</param>
        </member>
        <member name="M:Labman.Processes.StatePersisters.DatabaseStatePersister.GetCurrentState(System.String)">
            <summary>
            This method is used to get the state from the storage engine
            </summary>
            <param name="processName">The process name to get the state for</param>
            <returns>The process state</returns>
        </member>
        <member name="T:Labman.Processes.StatePersisters.IStatePersister">
            <summary>
            This interface defines a common structure for updating the process state in a storage engine
            when the state of a process changes
            </summary>
        </member>
        <member name="M:Labman.Processes.StatePersisters.IStatePersister.SetState(System.String,System.Int32)">
            <summary>
            This method is used to set the state in the storage engine
            </summary>
            <param name="processName">The process name that is changing state</param>
            <param name="state">The new state to save</param>
        </member>
        <member name="M:Labman.Processes.StatePersisters.IStatePersister.GetCurrentState(System.String)">
            <summary>
            This method is used to get the state from the storage engine
            </summary>
            <param name="processName">The process name to get the state for</param>
            <returns>Process State</returns>
        </member>
        <member name="T:Labman.Processes.ProcessBase">
            <summary>
            The process class provides a structure for controlling a process in a common way.
            The process function runs in it's own named thread.
            The class is designed to provide a base mechanism for implementing a "Moore" state machine.
            </summary>
        </member>
        <member name="T:Labman.Processes.ProcessBase.PreProcessResult">
            <summary>
            Enumeration of possible resultant states for the pre-process method
            </summary>
        </member>
        <member name="F:Labman.Processes.ProcessBase.PreProcessResult.OkToStart">
            <summary>This result indicates that the main process loop is OK to start</summary>
        </member>
        <member name="F:Labman.Processes.ProcessBase.PreProcessResult.DoNotStart">
            <summary>This result indicates that an error has occurred and the process should NOT be started</summary>
        </member>
        <member name="T:Labman.Processes.ProcessBase.ProcessNotifications">
            <summary>
            Enumeration of the possible notifications that can be raised from this process class
            </summary>
        </member>
        <member name="F:Labman.Processes.ProcessBase.ProcessNotifications.ProcessStarting">
            <summary>Process is starting</summary>
        </member>
        <member name="F:Labman.Processes.ProcessBase.ProcessNotifications.ProcessErrored">
            <summary>Process has errored</summary>
        </member>
        <member name="F:Labman.Processes.ProcessBase.ProcessNotifications.ProcessAborted">
            <summary>Process has been aborted by the operator</summary>
        </member>
        <member name="F:Labman.Processes.ProcessBase.ProcessNotifications.ProcessPaused">
            <summary>Process has been paused by the operator</summary>
        </member>
        <member name="F:Labman.Processes.ProcessBase.ProcessNotifications.ProcessCompleted">
            <summary>Process has completed normally</summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.ProcessFlaggedToAbort">
            <summary>
            Flag that is set when the process is flagged to be aborted
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.ProcessFlaggedToPause">
            <summary>
            Flag that is set when the process is flagged to be paused
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.ProcessRunning">
            <summary>
            This property exposes the process running flag state
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.PreProcessIsRunning">
            <summary>
            Flag that indicates when the pre-process method is still running
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.LogStateChanges">
            <summary>
            Flag whether to log state changes
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.DisableEStopCheckInProcessLoop">
            <summary>
            Flag allows the default behaviour of checking an estop state in each iteration to be disabled
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.CurrentState">
            <summary>
            The current state of the machine
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.PreviousState">
            <summary>
            The previous state of the state machine
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.ProcessName">
            <summary>
            Property that exposes the process name for this module
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.ProcessExceptionMessage">
            <summary>
            Property that exposes the exception message which caused this process to stop. This is cleared when the process is started.
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.ProcessException">
            <summary>Gets the process exception if one was thrown.</summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.LogRootCauseException">
            <summary> 
            Flag whether to log the root cause exception message.
            This is normally only set on the main process thread.
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.Notifications">
            <summary>
            Property that exposes the notification sender for this process class.
            Calling code can register notification requests.
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.StateUpdater">
            <summary>
            This property gets/sets the state updater for this process class.
            This is used to update the process state in a storage engine when it is changed.
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.ProcessRequestsReceived">
            <summary>
            A queue of requests that have been received by this process from another source
            </summary>
        </member>
        <member name="P:Labman.Processes.ProcessBase.ProcessRequestsPending">
            <summary>
            A collection of requests pending that this process has raised
            </summary>
        </member>
        <member name="E:Labman.Processes.ProcessBase.RequestRaised">
            <summary>
            Event that can be raised by this process when a process request is required.
            DO NOT DIRECTLY CALL THIS FROM THE PROCESS CLASS, USE THE 'RaiseRequest' METHOD.
            </summary>
        </member>
        <member name="E:Labman.Processes.ProcessBase.StateChanged">
            <summary>
            Event that is raised when the state changes
            </summary>
        </member>
        <member name="E:Labman.Processes.ProcessBase.ProcessRunningChanged">
            <summary>
            Event that is raised when the process running flag changes
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessBase.#ctor">
            <summary>
            Class constructor, expects that the process name is manually set after
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessBase.#ctor(System.String,System.Boolean)">
            <summary>
            Class constructor
            </summary>
            <param name="processName">A descriptive name for this process thread</param>
            <param name="logStateChanges">True to log each state change to the process log</param>
        </member>
        <member name="M:Labman.Processes.ProcessBase.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Class constructor
            </summary>
            <param name="processName">A descriptive name for this process thread</param>
            <param name="logStateChanges">True to log each state change to the process log</param>
            <param name="logRootCauseException">Flag which sets whether this process is configured to log the root cause exception (normally only the main process would set this flag)</param>
        </member>
        <member name="M:Labman.Processes.ProcessBase.PreProcess">
            <summary>Pre-process method that must be overridden by the inheritting class</summary>
            <returns>A process result state that indicates whether the main process loop may continue</returns>
        </member>
        <member name="M:Labman.Processes.ProcessBase.PostProcess">
            <summary>Post-process method that must be overridden by the inheritting class</summary>
        </member>
        <member name="M:Labman.Processes.ProcessBase.ProcessLoop">
            <summary>Process loop method that must be overridden by the inheritting class</summary>
        </member>
        <member name="M:Labman.Processes.ProcessBase.SetState``1(``0)">
            <summary>
            Change the current process state
            </summary>
            <typeparam name="T">template type parameter</typeparam>
            <param name="state">The new integer state to change to</param>
        </member>
        <member name="M:Labman.Processes.ProcessBase.Start">
            <summary>
            This method starts the process running if it is not already
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessBase.Abort">
            <summary>
            This method flags for the thread to be aborted.
            The process loop looks for this flag and stops when appropriate.
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessBase.Pause">
            <summary>
            This method flags for the thread to be aborted.
            The process loop looks for this flag and stops when appropriate.
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessBase.RunProcess">
            <summary>
            The main run process routine loops to perform the required process
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessBase.CheckForEstop">
            <summary>
            Throws an exception if the machine is in an E-Stop state.
            </summary>
        </member>
        <member name="F:Labman.Processes.ProcessBase._requestTypesToHandle">
            <summary>
            List of process request types that can be handled
            </summary>
        </member>
        <member name="M:Labman.Processes.ProcessBase.AddProcessRequestTypeToHandle(System.Type)">
            <summary>
            Adds a process request type that can be handled
            </summary>
            <param name="requestType">Type of the request to handle</param>
        </member>
        <member name="M:Labman.Processes.ProcessBase.RaiseRequest(Labman.Processes.ProcessRequests.IProcessRequest)">
            <summary>
            This method is used to raise a request
            </summary>
            <param name="request">The request to raise</param>
        </member>
        <member name="M:Labman.Processes.ProcessBase.ProcessRequestReceivedHandler(Labman.Processes.ProcessRequests.IProcessRequest)">
            <summary>
            This method can be used as a handler for other process's load request event and adds the request to the LoadRequests collection
            </summary>
            <param name="request">The request object</param>
        </member>
        <member name="M:Labman.Processes.ProcessBase.SetPendingRequestAsProcessed(Labman.Processes.ProcessRequests.IProcessRequest)">
            <summary>
            Sets the specified pending test as completed
            </summary>
            <param name="request">The request being completed</param>
        </member>
        <member name="M:Labman.Processes.ProcessBase.SetReceivedRequestAsProcessed(Labman.Processes.ProcessRequests.IProcessRequest)">
            <summary>
            Sets the specified test as completed
            </summary>
            <param name="request">The request being completed</param>
        </member>
        <member name="M:Labman.Processes.ProcessBase.GetNextProcessRequestOfType(System.Type)">
            <summary>
            Gets the next process request received with the specified type
            </summary>
            <param name="type">The type of process request to check for</param>
            <returns>The request if available, else False if none available</returns>
        </member>
        <member name="M:Labman.Processes.ProcessBase.CheckRaisedProcessRequestsOfType(System.Type)">
            <summary>
            Gets the next process request send (requested) with the specified type
            </summary>
            <param name="type">The type of process request to check for</param>
            <returns>True if we have already sent a request of this type</returns>
        </member>
        <member name="T:Labman.ProcessLog">
            <summary>
            The static system log class exposes the process log file for the application and is used
            as a shortcut to the log file object in the baseclass
            </summary>
        </member>
        <member name="M:Labman.ProcessLog.AddLogMessage(System.String,Labman.Logging.LogMessage.LogType)">
            <summary>
            This method queues a log message to be saved to the log file.
            Messages are queued and processed in a seperate thread to keep processing time low.
            </summary>
            <param name="message">The message text to log</param>
            <param name="logType">The type of log to add</param>
        </member>
        <member name="M:Labman.ProcessLog.AddLogMessage(Labman.Logging.LogMessage)">
            <summary>
            This method queues a log message to be saved to the log file.
            Messages are queued and processed in a seperate thread to keep processing time low.
            </summary>
            <param name="messageToLog">The message to log</param>
        </member>
        <member name="M:Labman.ProcessLog.LogException(System.Exception)">
            <summary>
            Logs an exception as a critical fault.
            The log message includes the origin of the exception.
            </summary>
            <param name="ex">The exception to log</param>
        </member>
        <member name="T:Labman.PositionsDatabase.PositionDatabase">
            <summary>
            Retrieves posiitons from a position database.
            </summary>
        </member>
        <member name="T:Labman.PositionsDatabase.PositionDatabase.PositionTypes">
            <summary>
            Possible position types.
            </summary>
        </member>
        <member name="F:Labman.PositionsDatabase.PositionDatabase.PositionTypes.Pick">
            <summary>
            Position type is for picking.
            </summary>
        </member>
        <member name="F:Labman.PositionsDatabase.PositionDatabase.PositionTypes.Place">
            <summary>
            Position type is for placing.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.PositionDatabase.RecordProvider">
            <summary>
            Property that gets or sets the record provider.
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.PositionDatabase.ScanPosition(System.Int32,System.Int32)">
            <summary>
            This function will take an index and scan length and calculate the number of increments in the 
            scan line direction, for the specified index. eg. if you have a rack where the rows go along the x 
            direction, with 10 columns, then passing index=2, scanLength=10 will return 1, which is 1 increment in the x direction.
            </summary>
            <param name="index">Specifies the index.</param>
            <param name="scanLength">Specifies the scan line length.</param>
            <returns>int, the calculated scan position.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.PositionDatabase.ScanLine(System.Int32,System.Int32)">
            <summary>
            This function will take an index and scan line length and calculate the number of the scan line containing the 
            specified index, eg. if you have a rack where the rows go along the x direction, with 10 columns, then passing 
            Index=12 and ScanLength=10 will return 1, which is 1 increment in the y direction.
            </summary>
            <param name="index">Specifies the index.</param>
            <param name="scanLength">Specifies the scan line length.</param>
            <returns>int, the calculated scan line.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.PositionDatabase.PositionOnCircle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            This function will take the centre position of a circle and the position of one point on the circle,
            it will then calculate the position on the circle which is incrementAngle radians counterclockwise of the
            first position.
            </summary>
            <param name="offsetX">Specifies centre position in x plane.</param>
            <param name="offsetY">Specifies centre position in y plane.</param>
            <param name="offsetZ">Specifies centre position in z plane.</param>
            <param name="firstAngleX">Specifies point on circle in x plane.</param>
            <param name="firstAngleY">Specifies point on circle in y plane.</param>
            <param name="firstAngleZ">Specifies point on circle in z plane.</param>
            <param name="incrementAngle">Specifies the incement angle.</param>
            <returns>Position object containing calculated position.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.PositionDatabase.PositionOnRectangle(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32)">
            <summary>
            This function calculates a position in a rectangular area from an initial position using
            specified increments, line increments, line length an index.
            </summary>
            <param name="offsetX">Specifies first position in x plane.</param>
            <param name="offsetY">Specifies first position in y plane.</param>
            <param name="offsetZ">Specifies first position in z plane.</param>
            <param name="incrementX">Specifies increment x.</param>
            <param name="incrementY">Specifies increment y.</param>
            <param name="incrementZ">Specifies increment z.</param>
            <param name="lineIncrementX">Specifies line increment x.</param>
            <param name="lineIncrementY">Specifies line increment y.</param>
            <param name="lineIncrementZ">Specifies line increment z.</param>
            <param name="lineLength">Specifies line length.</param>
            <param name="index">Specifies index.</param>
            <returns>Position object containing calculated position.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.PositionDatabase.GetPosition(System.String,System.String,System.Int32,Labman.PositionsDatabase.PositionDatabase.PositionTypes)">
            <summary>
            Gets a position from the position database for a specified group, area and index.
            </summary>
            <param name="group">Specifies the group.</param>
            <param name="area">Specifies the area.</param>
            <param name="index">Specifies the index.</param>
            <param name="positionType">Specifies the position type. If position type is place the Z position is adjutsed by the Z place offset.</param>
            <returns>Position object containing XYZ position.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.PositionDatabase.GetPosition(System.String,System.String,System.Int32)">
            <summary>
            Gets a position from the position database for a specified group, area and index.
            </summary>
            <param name="group">Specifies the group.</param>
            <param name="area">Specifies the area.</param>
            <param name="index">Specifies the index.</param>
            <returns>Position object containing XYZ position.</returns>
            <remarks>NOTE:Returned position does not take into account Z place offset.</remarks>
        </member>
        <member name="M:Labman.PositionsDatabase.PositionDatabase.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.PositionDatabase.#ctor(Labman.PositionsDatabase.Providers.Provider)">
            <summary>
            Construction.
            </summary>
            <param name="recordProvider">Specifes the provider to use for retreiving raw position database records.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.PositionDatabase.#ctor(Labman.PositionsDatabase.PositionsDatabaseSettings)">
            <summary>
            Creates a new instance of a positions database using settings loaded in from a storage engine
            </summary>
            <param name="settings">The settings used to create the class</param>
        </member>
        <member name="T:Labman.PositionsDatabase.PositionsDatabaseSettings">
            <summary>
            The settings class for the positions database
            </summary>
        </member>
        <member name="T:Labman.PositionsDatabase.PositionsDatabaseSettings.Providers">
            <summary>
            The possible types of connection that can be used
            </summary>
        </member>
        <member name="F:Labman.PositionsDatabase.PositionsDatabaseSettings.Providers.Database">
            <summary>A database provider</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.PositionsDatabaseSettings.Providers.XML">
            <summary>An XML provider</summary>
        </member>
        <member name="P:Labman.PositionsDatabase.PositionsDatabaseSettings.ConnectionType">
            <summary>
            The type of provider to use
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.PositionsDatabaseSettings.ConnectionName">
            <summary>
            The name of the connection
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.PositionsDatabaseSettings.Settings">
            <summary>
            The settings to use to open the connection, these are specific to a type
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.PositionsDatabaseSettings.UniqueKey">
            <summary>
            A unique key for this settings provider
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.PositionsDatabaseSettings.#ctor(System.String)">
            <summary>
            Constructor for these settings
            </summary>
            <param name="connectionName">The name of the connection</param>
        </member>
        <member name="T:Labman.PositionsDatabase.Position">
            <summary>
            Positions database position definition
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Position.X">
            <summary>
            The X position
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Position.Y">
            <summary>
            The Y position
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Position.Z">
            <summary>
            The Z position
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Position.SlowMoveDistance">
            <summary>
            The distance to move slowly for this position
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Position.SlowMoveSpeedPercentage">
            <summary>
            The speed percentage of the drive speed to move the slow distance at
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.Position.#ctor">
            <summary>
            Position constructor
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.Position.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Position constructor
            </summary>
            <param name="x">The initial X position</param>
            <param name="y">The initial Y position</param>
            <param name="z">The initial Z position</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Position.#ctor(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Position constructor
            </summary>
            <param name="x">The initial X position</param>
            <param name="y">The initial Y position</param>
            <param name="z">The initial Z position</param>
            <param name="slowMoveDitance">The slow move distance</param>
            <param name="slowMoveSpeedPercentage">The slow move speed percentage</param>
        </member>
        <member name="T:Labman.PositionsDatabase.Providers.DBPositionProviderSettings">
            <summary>
            Positions database provider settings class extending provider settings class by adding a TableName property.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.DBPositionProviderSettings.TableName">
            <summary>
            Gets or sets the positions table.
            </summary>
        </member>
        <member name="T:Labman.PositionsDatabase.Providers.DBPositionProvider">
            <summary>
            Class to extract raw position data from a database.
            </summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.DBPositionProvider._connectionPassedIn">
            <summary>
            Member flag used to store whether database conenction was passed in.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.DBPositionProvider.DatabaseConnection">
            <summary>
            Property that gets or sets the database connection.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.DBPositionProvider.TableName">
            <summary>
            Property that gets or sets the positions database table name.
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.SortedListToPositionRecord(System.Collections.Generic.SortedList{System.String,System.String})">
            <summary>
            Takes a sorted list containing a position record and converts to a PositionRecord object and returns.
            </summary>
            <param name="positionData">Specifies the sorted list containg a position record.</param>
            <returns>None.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.GetPositions(System.String)">
            <summary>
            Returns collection of PositionRecords for a specified query.
            </summary>
            <param name="command">Specifies the query.</param>
            <returns>None.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.GetPositionRecord(System.String,System.String)">
            <summary>
            Returns a full positions record for a specified area name. 
            </summary>
            <param name="groupName">Specifies the group name</param>
            <param name="area">Specifies the area name.</param>
            <returns>If successful a PositionRecord containing position data is returned.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.PositionExists(System.String,System.String)">
            <summary>
            Determines if an area exists for a specified group.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <param name="area">Specifies the area name.</param>
            <returns>None.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.UpdatePositionRecord(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Updates an existing position record.
            </summary>
            <param name="positionRecord">PositionRecord object containing values for update. The record updated 
            should be the record with the same group and area name specified in positionRecord.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.AddPositionRecord(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Adds a new position record.
            </summary>
            <param name="positionRecord">PositionRecord containing the position data for new record.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.DeletePositionRecord(System.String,System.String)">
            <summary>
            Deletes an existing position record.
            </summary>
            <param name="groupName">Specifies the group name</param>
            <param name="area">Specifies the group and area name of the position to delete. Record(s)
            with mactching group and area names are deleted.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.DeletePositionRecord(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Deletes an existing position record.
            </summary>
            <param name="positionRecord">Specifies the record to delete. Deleted record is
            that with matching Group and Area.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.GetPositionRecords(System.String)">
            <summary>
            Returns all positions for a specified group.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <returns>If successful a collection of PositionRecord objects for specified group is returned.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.GetPositionRecordList(System.String)">
            <summary>
            Returns all positions for a specified group as a sorted list.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <returns>SortedList, ID of position record is key.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.GetPositionRecords">
            <summary>
            Returns a collection of ALL position records.
            </summary>
            <returns>If successful a collection of PositionRecord objects is returned.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.GetPositionRecordList">
            <summary>
            Returns a sorted list of ALL position records.
            </summary>
            <returns>SortedList, ID of position record is key.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.GetGroupNames">
            <summary>
            Returns a collection of group names.
            </summary>
            <returns>Collection of string group names.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.GetAreaNamesForGroup(System.String)">
            <summary>
            Returns a collection of area names for a specified group.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <returns>Collection of area names for specified group.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.#ctor">
            <summary>
            Default constructor. Mereley intialises connection passed in flag to true.
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.#ctor(Labman.Database.Connection,System.String)">
            <summary>
            Constructor. Intialises DatabaseConnection and TableName properties to those specified .
            </summary>
            <param name="databaseConnection">Specifies the database connection.</param>
            <param name="tableName">Specifies the table name.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.#ctor(Labman.PositionsDatabase.Providers.DBPositionProviderSettings)">
            <summary>
            Constructor. Creates a database connection using passed in settings.
            </summary>
            <param name="databaseProviderSettings">Specifies a DBPositionProviderSettings object containing settings.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.DBPositionProvider.Dispose">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="T:Labman.PositionsDatabase.Providers.PositionRecord">
            <summary>
            Encapsulates a position database position record.
            </summary>
        </member>
        <member name="T:Labman.PositionsDatabase.Providers.PositionRecord.AreaTypes">
            <summary>
            Possible area types.
            </summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.PositionRecord.AreaTypes.Rectangular">
            <summary>
            Area type is rectangular.
            </summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.PositionRecord.AreaTypes.Circular">
            <summary>
            Area type is circular.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.ID">
            <summary>
            Property that gets or sets the position record ID field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.Group">
            <summary>
            Property that gets or sets the position group name.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.Area">
            <summary>
            Property that gets or sets the area name field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.AreaType">
            <summary>
            Property that gets or sets the area type field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.LowIndex">
            <summary>
            Property that gets or sets the low index field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.HighIndex">
            <summary>
            Property that gets or sets the high index field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.OffsetX">
            <summary>
            Property that sets or gets the y offset field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.OffsetY">
            <summary>
            Property that gets or sets the Y offset field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.OffsetZ">
            <summary>
            Property that gets or sets the Z offset field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.IncrementX">
            <summary>
            Property that gets or sets the increment X field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.IncrementY">
            <summary>
            Property that gets or sets the increment Y field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.IncrementZ">
            <summary>
            Property that gets or sets the increment Z field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.LineIncrementX">
            <summary>
            Property that gets or sets the line increment X field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.LineIncrementY">
            <summary>
            Property that gets or sets the line increment Y field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.LineIncrementZ">
            <summary>
            Property that gets or sets the line increment Z field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.LineLength">
            <summary>
            Property that gets or sets the line length field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.FirstAngleX">
            <summary>
            Property that gets or sets the first angle X field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.FirstAngleY">
            <summary>
            Property that gets or sets the first angle Y field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.FirstAngleZ">
            <summary>
            Property that gets or sets the first angle Z field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.IncrementAngle">
            <summary>
            Property that gets or sets the increment angle field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.PickSlowMoveDistance">
            <summary>
            Property that gets or sets the slow move distance field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.PickSlowMoveSpeedPercentage">
            <summary>
            Property that gets or sets the slow move speed percentage field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.PlaceSlowMoveDistance">
            <summary>
            Property that gets or sets the slow move distance field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.PlaceSlowMoveSpeedPercentage">
            <summary>
            Property that gets or sets the slow move speed percentage field.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.PositionRecord.ZPlaceOffset">
            <summary>
            Property that gets or sets the Z place offset field.
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.PositionRecord.Equals(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Checks if two positions are the sample
            </summary>
            <param name="positionRecord">The position record to compare against</param>
            <returns>True if equal</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.PositionRecord.#ctor">
            <summary>
            Default construction - intialises all members to 0.
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.PositionRecord.#ctor(System.Int32,System.String,System.String,Labman.PositionsDatabase.Providers.PositionRecord.AreaTypes,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double)">
            <summary>
            Construction - intialises members to values passed in.
            </summary>
            <param name="id">Specifies value used to initialise ID member property.</param>
            <param name="group">Specifies value used to initialise group member property.</param>
            <param name="area">Specifies value used to initialise area member property.</param>
            <param name="areaType">Specifies value used to initialise area type member property.</param>
            <param name="lowIndex">Specifies value used to initialise low index member property.</param>
            <param name="highIndex">Specifies value used to initialise high index member property.</param>
            <param name="offsetX">Specifies value used to initialise offset x member property.</param>
            <param name="offsetY">Specifies value used to initialise offset y member property.</param>
            <param name="offsetZ">Specifies value used to initialise offset z member property.</param>
            <param name="incrementX">Specifies value used to initialise increment x member property.</param>
            <param name="incrementY">Specifies value used to initialise increment y member property.</param>
            <param name="incrementZ">Specifies value used to initialise increment z member property.</param>
            <param name="lineIncrementX">Specifies value used to initialise line increment x member property.</param>
            <param name="lineIncrementY">Specifies value used to initialise line increment y member property.</param>
            <param name="lineIncrementZ">Specifies value used to initialise line increment z member property.</param>
            <param name="lineLength">Specifies value used to initialise line length member property.</param>
            <param name="firstAngleX">Specifies value used to initialise first angle x member property.</param>
            <param name="firstAngleY">Specifies value used to initialise first angle y member property.</param>
            <param name="firstAngleZ">Specifies value used to initialise first angle z member property.</param>
            <param name="incrementAngle">Specifies value used to initialise increment angle member property.</param>
            <param name="pickSlowMoveDistance">Specifies value used to initialise slow move distance member property.</param>
            <param name="pickSlowMoveSpeedPercentage">Specifies value used to initialise slow move speed percentage member property.</param>
            <param name="placeSlowMoveDistance">Specifies value used to initialise slow move distance member property.</param>
            <param name="placeSlowMoveSpeedPercentage">Specifies value used to initialise slow move speed percentage member property.</param>
            <param name="zPlaceOffset">Specifies value used to initialise z place offset member property.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.PositionRecord.#ctor(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.PositionsDatabase.Providers.PositionRecord"/> class.
            </summary>
            <param name="positionRecord">The position record.</param>
        </member>
        <member name="T:Labman.PositionsDatabase.Providers.Provider">
            <summary>
            Provides common functionality for position record providers.
            </summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.POSITION">
            <summary>Position element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.ID">
            <summary>ID element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.GROUPNAME">
            <summary>GroupName element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.AREA">
            <summary>Area element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.AREA_TYPE">
            <summary>Area type element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.LOW_INDEX">
            <summary>Low Index element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.HIGH_INDEX">
            <summary>High Index element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.OFFSET_X">
            <summary>Offset X element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.OFFSET_Y">
            <summary>Offset Y element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.OFFSET_Z">
            <summary>Offset Z element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.INCREMENT_X">
            <summary>Increment X element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.INCREMENT_Y">
            <summary>Increment Y element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.INCREMENT_Z">
            <summary>Increment Z element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.LINE_INCREMENT_X">
            <summary>Line Increment X element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.LINE_INCREMENT_Y">
            <summary>Line Increment Y element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.LINE_INCREMENT_Z">
            <summary>Line Increment Z element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.LINE_LENGTH">
            <summary>Line Length element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.FIRST_ANGLE_X">
            <summary>First Angle X element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.FIRST_ANGLE_Y">
            <summary>First Angle Y element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.FIRST_ANGLE_Z">
            <summary>First Angle Z element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.INCREMENT_ANGLE">
            <summary>Increment Angle element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.PICK_SLOW_MOVE_DISTANCE">
            <summary>Slow move distance element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.PICK_SLOW_MOVE_SPEED_PERCENTAGE">
            <summary>Slow move speed percentage element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.PLACE_SLOW_MOVE_DISTANCE">
            <summary>Slow move distance element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.PLACE_SLOW_MOVE_SPEED_PERCENTAGE">
            <summary>Slow move speed percentage element/field name.</summary>
        </member>
        <member name="F:Labman.PositionsDatabase.Providers.Provider.Z_PLACE_OFFSET">
            <summary>Z Place Offset element/field name.</summary>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.GetPositionRecord(System.String,System.String)">
            <summary>
            Returns a full positions record for a specified area name.
            </summary>
            <param name="groupName">The group name to get the position within</param>
            <param name="area">Specifies the area name.</param>
            <returns>
            If successful a PositionRecord containing position data is returned.
            </returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.PositionExists(System.String,System.String)">
            <summary>
            Determines if an area exists for a specified group.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <param name="area">Specifies the area name.</param>
            <returns>None.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.UpdatePositionRecord(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Updates an existing position record.
            </summary>
            <param name="positionRecord">PositionRecord object containing values for update. The record updated 
            should be the record with the same group and area name specified in positionRecord.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.AddPositionRecord(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Adds a new position record.
            </summary>
            <param name="positionRecord">PositionRecord containing the position data for new record.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.DeletePositionRecord(System.String,System.String)">
            <summary>
            Deletes an existing position record.
            </summary>
            <param name="groupName">The positions database group</param>
            <param name="area">Specifies the area name of the position to delete. Record(s)
            with mactching group and area names should be deleted.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.DeletePositionRecord(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Deletes an existing position record.
            </summary>
            <param name="positionRecord">Specifies the record to delete. Deleted record should be
            that with matching Group and Area.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.GetPositionRecords(System.String)">
            <summary>
            Returns ALL positions for a specified group.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <returns>Collection of PositionRecord objects for specified group is returned.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.GetPositionRecordList(System.String)">
            <summary>
            Returns all positions for a specified group as a sorted list.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <returns>SortedList, ID of position record is key.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.GetPositionRecords">
            <summary>
            Returns a collection of ALL position records.
            </summary>
            <returns>Collection of PositionRecord objects is returned.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.GetPositionRecordList">
            <summary>
            Returns a sorted list of ALL position records.
            </summary>
            <returns>SortedList, ID of position record is key.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.GetGroupNames">
            <summary>
            Returns a collection of group names.
            </summary>
            <returns>Collection of string group names.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.Provider.GetAreaNamesForGroup(System.String)">
            <summary>
            Returns a collection of area names for a specified group.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <returns>Collection of area names for specified group.</returns>
        </member>
        <member name="T:Labman.PositionsDatabase.Providers.XMLPositionProviderSettings">
            <summary>
            Settings for an XML positions database provider
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.XMLPositionProviderSettings.Filename">
            <summary>
            Gets or sets the positions xml filename.
            </summary> 
        </member>
        <member name="T:Labman.PositionsDatabase.Providers.XMLPositionProvider">
            <summary>
            Class to extract raw position data from an XML position file.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.XMLPositionProvider.Filename">
            <summary>
            Gets or sets the XML filename.
            </summary>
        </member>
        <member name="P:Labman.PositionsDatabase.Providers.XMLPositionProvider.RootElement">
            <summary>
            Gets or sets the root element name.
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.XELementToPositionRecord(System.Xml.Linq.XElement)">
            <summary>
            Takes an XElement containing a record/node from a positions XML file and returns the equivalent PositionRecord.
            </summary>
            <param name="element">Specifies the XElement to convert to a PositionRecord.</param>
            <returns>None.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.GetNextID(System.Xml.Linq.XDocument)">
            <summary>
            Returns the next ID to be used for adding a new record.
            </summary>
            <param name="xmlPositions">Specifies XDocument containing all current positions.</param>
            <returns>int, next ID.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.GetPositionRecord(System.String,System.String)">
            <summary>
            Returns a full positions record for a specified area name. 
            </summary>
            <param name="groupName">Specifies the group name</param>
            <param name="area">Specifies the area name.</param>
            <returns>If successful a PositionRecord containing position data is returned, null is returned otherwise.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.PositionExists(System.String,System.String)">
            <summary>
            Determines if an area exists for a specified group.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <param name="area">Specifies the area name.</param>
            <returns>None.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.UpdatePositionRecord(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Updates an existing position record.
            </summary>
            <param name="positionRecord">PositionRecord object containing values for update. The record updated 
            is the record with the same group and area name specified in positionRecord.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.AddPositionRecord(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Adds a new position record.
            </summary>
            <param name="positionRecord">Specifies the position record to add.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.DeletePositionRecord(System.String,System.String)">
            <summary>
            Deletes a position record from the xml tree.
            </summary>
            <param name="groupName">Specifies the group name of the record to delete.</param>
            <param name="area">Speicifes the area name of the record to delete.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.DeletePositionRecord(Labman.PositionsDatabase.Providers.PositionRecord)">
            <summary>
            Deletes a positon record from the xml tree.
            </summary>
            <param name="positionRecord">Specifies the position record to delete.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.GetPositionRecords(System.String)">
            <summary>
            Returns all positions for a specified group.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <returns>If successful a collection of PositionRecord objects for specified group is returned.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.GetPositionRecordList(System.String)">
            <summary>
            Returns all positions for a specified group as a sorted list.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <returns>SortedList, ID of position record is key.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.GetPositionRecords">
            <summary>
            Returns a collection of all position records.
            </summary>
            <returns>If successful a collection of PositionRecord objects is returned.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.GetPositionRecordList">
            <summary>
            Returns a sorted list of ALL position records.
            </summary>
            <returns>SortedList, ID of position record is key.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.GetGroupNames">
            <summary>
            Returns a collection of group names.
            </summary>
            <returns>Collection of string group names.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.GetAreaNamesForGroup(System.String)">
            <summary>
            Returns a collection of area names for a specified group.
            </summary>
            <param name="groupName">Specifies the group name.</param>
            <returns>Collection of area names for specified group.</returns>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.#ctor">
            <summary>
            Default construction.
            </summary>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.#ctor(Labman.PositionsDatabase.Providers.XMLPositionProviderSettings)">
            <summary>
            Constructor - intialises filename member.
            </summary>
            <param name="settings">The settings to use to create this provider</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.#ctor(System.String)">
            <summary>
            Constructor - intialises filename member.
            </summary>
            <param name="filename">Specifies the filename used to intialise filename member.</param>
        </member>
        <member name="M:Labman.PositionsDatabase.Providers.XMLPositionProvider.#ctor(System.String,System.String)">
            <summary>
            Constructor - intialises fielname and root element memebrs.
            </summary>
            <param name="filename">Specifies value used to intialise Filename member.</param>
            <param name="rootElement">Specifies the value used to initialise RootElement member.</param>
        </member>
        <member name="T:Labman.ProcessList">
            <summary>
            Static class for storaging the collection of processes used
            </summary>
        </member>
        <member name="P:Labman.ProcessList.Processes">
            <summary>
            Collection of process classes that are registered
            </summary>
        </member>
        <member name="P:Labman.ProcessList.ProcessStartOrder">
            <summary>
            Collection of process names to list how they are added and should be started
            </summary>
        </member>
        <member name="P:Labman.ProcessList.RootCauseException">
            <summary>
            Property that exposes the root cause exception. 
            This is cleared when a run is started and set when ProcessList.CheckProcessesForErrorsAndAbortAll() is called and detects a process in an error state.
            The property should contain the exception that caused the first process to become errored.
            </summary>
        </member>
        <member name="P:Labman.ProcessList.IsProcessRunning">
            <summary>
            This property determines if one or more of the processes are running
            </summary>
        </member>
        <member name="M:Labman.ProcessList.AddProcessClassInstance``1(System.String,System.Boolean)">
            <summary>
            Adds a new process class to the collection of used processes
            </summary>
            <typeparam name="T">The type of the process class to create. This should inherit from Labman.Processes.ProcessBase</typeparam>
            <param name="processName">The unique name for this process instance</param>
            <param name="logStateChanges">True to log state changes to the process log</param>
        </member>
        <member name="M:Labman.ProcessList.StartAll">
            <summary>
            Start all of the processes
            </summary>
            <returns>If any of the processes fail to start, the process name is returned. null otherwise</returns>
        </member>
        <member name="M:Labman.ProcessList.AbortAll">
            <summary>
            Flag all processes to abort
            </summary>
        </member>
        <member name="M:Labman.ProcessList.PauseAll">
            <summary>
            Flag all processes to pause
            </summary>
        </member>
        <member name="M:Labman.ProcessList.CheckProcessesForErrorsAndAbortAll">
            <summary>
            Checks all slave processes are running
            </summary> 
        </member>
        <member name="T:Labman.Security.ApplicationAuthentication">
            <summary>
            The application authentication class is used to ensure that the application is allowed to be run.
            The authentication method is chosen and passed as a constructor parameter.
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthentication.#ctor(Labman.Security.ApplicationAuthenticators.IApplicationAuthenticator)">
            <summary>
            Authenticate the software using the specifed method.
            Throws an exception if not authenticated
            </summary>
            <param name="authenticator">The authentication class instance to authenticate with</param>
        </member>
        <member name="T:Labman.Security.ApplicationAuthenticators.ComputerHardwareTrialAuthenticator">
            <summary>
            This class provides an application authentication method that checks the software is running on an 
            approved computer. A computer is uniquely idenified using the CPU, Motherboard and HDD Ids
            
            This class also has an optional trial mode will disable the software after a trial period if not unlocked
            with a unique hardware id.
            
            
            NOTE 
            The trial isn't fully safe against the user changing the computer clock. Once the outside of the trial changing
            clock will have not effect. Until the trial expires the user could keep changing the clock back each day. This
            trial is designed to work silently in the background until it expires so the user is unaware until it's too late.
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.ComputerHardwareTrialAuthenticator.#ctor(System.Boolean,System.Int32)">
            <summary>
            Class constructor sets the expiry date for the application
            </summary>
            <param name="checkTrial">if set to <c>true</c> [check trial].</param>
            <param name="trialDuration">Duration of the trial in days.</param>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.ComputerHardwareTrialAuthenticator.Dispose">
            <summary>
            Dispose method closes any used resources
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.ComputerHardwareTrialAuthenticator.AuthenticateSoftware">
            <summary>
            Authenticate the software
            </summary>
            <returns>TRUE if the software is authenticated to run and FALSE otherwise</returns>
        </member>
        <member name="T:Labman.Security.ApplicationAuthenticators.IApplicationAuthenticator">
            <summary>
            A base class for technologies that can authenticate an application is being valid to run
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.IApplicationAuthenticator.AuthenticateSoftware">
            <summary>
            This method must be overridden and executes code to authenticate software
            </summary>
            <returns>True if the application is authenticated</returns>
        </member>
        <member name="T:Labman.Security.ApplicationAuthenticators.SimpleDateTimeApplicationAuthenticator">
            <summary>
            This class provides a simple application authentication method that checks the current system date time against the 
            defined expiry date/time for the application to stop working.
            NOTE: THIS IS NOT SAFE TO THE USER CHANGING THE SYSTEM CLOCK!
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.SimpleDateTimeApplicationAuthenticator.#ctor(System.DateTime)">
            <summary>
            Class constructor sets the expiry date for the application
            </summary>
            <param name="expiryDate">The application expiry date</param>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.SimpleDateTimeApplicationAuthenticator.Dispose">
            <summary>
            Dispose method closes any used resources
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.SimpleDateTimeApplicationAuthenticator.AuthenticateSoftware">
            <summary>
            Authenticate the software
            </summary>
            <returns>TRUE if the software is authenticated to run and FALSE otherwise</returns>
        </member>
        <member name="T:Labman.Security.ApplicationAuthenticators.TrialAuthenticator">
            <summary>
            This class provides an application authentication method that checks whether the software is running in a
            a trial mode or if it has been registered
            
            NOTE 
            The trial isn't fully safe against the user changing the computer clock. Once the outside of the trial changing
            clock will have not effect. Until the trial expires the user could keep changing the clock back each day. This
            trial is designed to work silently in the background until it expires so the user is unaware until it's too late.
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.TrialAuthenticator.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Security.ApplicationAuthenticators.TrialAuthenticator"/> class.
            </summary>
            <param name="trialDuration">Duration of the trial.</param>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.TrialAuthenticator.Dispose">
            <summary>
            Dispose method closes any used resources
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.TrialAuthenticator.AuthenticateSoftware">
            <summary>
            Authenticate the software
            </summary>
            <returns>TRUE if the software is authenticated to run and FALSE otherwise</returns>
        </member>
        <member name="T:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator">
             <summary>
             Class that implements the HASP application authenticator
             </summary>
             <remarks>
             The HASP protection framework provides two methods for protecting your software IP; hardware (HASP HL) and software (HASP SL). This standard module is designed to work with the hardware version of this protection framework.
            
             The framework provides two different methods for protecting your software, they are:
             1)	Envelope – This is the “quick + dirty” method of protection. It wraps a software executable(s) and/or DLL(s) in and envelope that prevents reverse engineering and requires a HASP HL key to be present in order to operate. This method is used to protect the standard module DLL produced by this standard module.
             2)	API – Extra functions are accessible via the API and this allows you to implement custom protection strategies for your software applications. The strategy employed in this particular module is based upon a GUID key used to unlock the software. The software will be fully functional for a definable period of time after which unless an unlocking GUID key is provided the software will no longer function at all. The GUID key is programmed into the memory of each individual key and it is specific to the end customer.
             The protection mechanism used in the standard module is based around an expiry date (stored as ticks) and a GUID used to authenticate supplied activation keys. Activation keys are supplied by Labman to the end user. These keys are supplied in encrypted form. The encryption algorithm used is AES with our unique vendor code used as the encryption seed. Our vender code should never be divulged. These activation keys contain an expiry date and a GUID (unique to the customer). Whenever a valid activation key is supplied it is stored on the HASP keys internal memory. If an expiry date of 0 is encoded in the activation key then this will turn off the expiry date checking (this can be turned back on by supplying another activation key with valid expiry date if required).
             The standard module contains a helper form (frmHASPHLTimeHelper) which can be used from your project to display a standard dialog box that the user can enter activation keys into. This should be used along with the function blnAuthenticateSoftware. If this function returns FALSE then display this form to the user.
             </remarks>
        </member>
        <member name="F:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.VendorCode">
            <summary>
            The Base64 encoded HASP vendor code for Labman keys. This is SECRET DO NOT re-distribute
            </summary>
        </member>
        <member name="F:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.ExpiryOffset">
            <summary>
            Constant to hold the memory offset to set the file pointer before we start reading the expiry time for the software
            </summary>
        </member>
        <member name="F:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.ExpiryBufferSize">
            <summary>
            Constant for the buffer size for the expiry time
            </summary>
        </member>
        <member name="F:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.ExpiryGuidOffset">
            <summary>
            Constant to hold the memory offset to set the file pointer before we start reading the GUID for the software
            </summary>
        </member>
        <member name="F:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.ExpiryGuidSize">
            <summary>
            Constant for the size of buffer to use to read in the authentication GUID
            </summary>
        </member>
        <member name="F:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator._haspKey">
            <summary>
            A session object used to interact with the HASP key
            </summary>
        </member>
        <member name="P:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.LastErrorMessage">
            <summary>
            Returns the text of the last error message caught in the module
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.#ctor(Aladdin.HASP.FeatureType)">
            <summary>
            Creates a new instance of the class
            </summary>
            <param name="featureType">The feature set to log into the HASP key with</param>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.#ctor">
            <summary>
            Creates a new instance of the class
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.Dispose">
            <summary>
            Disposes of the HASP key object when the object is destroyed
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.LoginToKey">
            <summary>
            Logs into the HASP key
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.LogoutOfKey">
            <summary>
            Logs out of the HASP key
            </summary>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.GetRTCValue">
            <summary>
            Gets the realtime clock value from the HASP key
            </summary>
            <returns>Returns the value of the realtime clock as a DateTime</returns>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.AuthenticateSoftware">
            <summary>
            This function retrieves the expiry date from the HASP key and compares it to the realtime clock value stored on the key.
            If the expiry date is earlier then the date on the HASP key then the software is not authenticated
            </summary>
            <returns>TRUE if the software is authenticated to run and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.SubmitActivationKey(System.String)">
            <summary>
            This function is used to submit a new activation key to the HASP key, only valid activation keys will be accepted
            </summary>
            <param name="key">The activation key to be submitted</param>
            <returns>TRUE if the activation key was submitted OK and FALSE otherwise</returns>
        </member>
        <member name="M:Labman.Security.ApplicationAuthenticators.HASPApplicationAuthenticator.ProcessReturnValue(Aladdin.HASP.HaspStatus)">
            <summary>
            Processes return values from HASP functions and raises error messages accordingly
            </summary>
            <param name="returnValue">Pass the return value you wish to check as a parameter</param>
        </member>
        <member name="T:Labman.Security.TrialStatus">
            <summary>
            Enumeration of Trial Statuses
            </summary>
        </member>
        <member name="T:Labman.Security.TrialUtilities">
            <summary>
            Utility class for application trial.
            </summary>
        </member>
        <member name="M:Labman.Security.TrialUtilities.ResetTrail(System.Int32)">
            <summary>
            Resets the trail.
            </summary>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:Labman.Security.TrialUtilities.SetTrailStatus(Labman.Security.TrialStatus)">
            <summary>
            Sets the trail status.
            </summary>
            <param name="newStatus">The new status.</param>
        </member>
        <member name="M:Labman.Security.TrialUtilities.GetTrialStatus(System.Int32)">
            <summary>
            Gets the trial status.
            </summary>
            <param name="trialDuration">Duration of the trial.</param>
            <returns>TrialStatus.</returns>
        </member>
        <member name="T:Labman.Security.Encryption">
            <summary>
            Encryption class provides generic methods to encrypt/decrypt data
            </summary>
        </member>
        <member name="F:Labman.Security.Encryption._aesLabmanKey">
            <summary>Variable that holds the AES key - 32 bytes long</summary>
        </member>
        <member name="F:Labman.Security.Encryption.aesLabmanIV">
            <summary>Variable that holds the AES initialisation vector - 16 bytes long</summary>
        </member>
        <member name="M:Labman.Security.Encryption.AesEncrypt(System.Byte[])">
            <summary>
            Encrypt the specified input data using 128 bit AES encryption (formally known as Rijndael encryption)
            </summary>
            <param name="inputToEncrypt">Input data to encrypt</param>
            <returns>
            A byte array of encrypted data
            </returns>
            <exception cref="T:Labman.BaseException">Error encrypting data:  + ex.Message</exception>
        </member>
        <member name="M:Labman.Security.Encryption.AesDecrypt(System.Byte[])">
            <summary>
            Decrypts the specified input data that was previously encrypted into a byte array
            </summary>
            <param name="inputToDecrypt">The encrypted input data</param>
            <returns>
            The decrypted data array
            </returns>
            <exception cref="T:Labman.BaseException">Error decrypting data:  + ex.Message</exception>
        </member>
        <member name="M:Labman.Security.Encryption.Encrypt(System.String,System.String)">
            <summary>
            Encrypts the specified input text.
            </summary>
            <param name="inputToEncrypt">The input to encrypt.</param>
            <param name="passPhrase">The pass phrase.</param>
            <returns>Encripted text.</returns>
        </member>
        <member name="M:Labman.Security.Encryption.Decrypt(System.String,System.String)">
            <summary>
            Decrypts the specified encripted text.
            </summary>
            <param name="cipherText">The cipher text.</param>
            <param name="passPhrase">The pass phrase.</param>
            <returns>Decripted text.</returns>
        </member>
        <member name="M:Labman.Security.Encryption.IsPasswordValid(System.String,System.String)">
            <summary>
            Compares a password against its encrypted counterpart to check if it is a match
            </summary>
            <param name="inputPassword">The input password in plain text</param>
            <param name="encryptedPassword">The encrypted reference password</param>
            <returns>True if the password is correct and matches</returns>
        </member>
        <member name="T:Labman.Settings.Configuration">
            <summary>
            Configuration class provides generic methods for loading and using settings
            </summary>
        </member>
        <member name="M:Labman.Settings.Configuration.LoadSettingsForType``1(System.Collections.Generic.SortedList{System.String,``0},Labman.Settings.StorageEngines.ISettingsStorageEngine)">
            <summary>
            Load all of the special types into the relevant collection, creating a new instance of the type and passing in the settings for it
            </summary>
            <typeparam name="T">The type of object being loaded</typeparam>
            <param name="collection">The sorted list to store the objects in</param>
            <param name="storageEngine">The storage engine to retrieve the settings from</param>
        </member>
        <member name="M:Labman.Settings.Configuration.MigrateSettingsToStorageEngine(Labman.Settings.StorageEngines.ISettingsStorageEngine,Labman.Settings.StorageEngines.ISettingsStorageEngine,System.Boolean,System.Boolean)">
            <summary>
            Migrate settings from one storage engine to another.
            </summary>
            <param name="sourceStorageEngine">The storage engine to copy from</param>
            <param name="destinationStorageEngine">The storage engine to copy to</param>
            <param name="deleteSource">True to delete the source items after copying, False to leave source in-tact</param>
            <param name="overwriteExistingItems">True to overwrite existing items in the destination storage, false to skip existing items</param>
            <example>
            var newAxesStorageEngine = new Settings.StorageEngines.DatabaseSettingsStorageEngine(BaseClass.DatabaseConnections[BaseClass.SystemDatabaseName], "hardwareconfig_axes");
            Settings.Configuration.MigrateSettingsToStorageEngine(ConnectedHardware.AxesStorageEngine, newAxesStorageEngine, false, true);
            </example>
        </member>
        <member name="M:Labman.Settings.Configuration.FindHardwareDeviceClassType(System.String)">
            <summary>
            Find the Labman Hardware class type for the given settings class name
            </summary>
            <param name="settingsClassName">Settings Class Name</param>
            <returns>The object type for the hardware settings</returns>
        </member>
        <member name="T:Labman.Settings.StorageEngines.ISettingsStorageEngine">
            <summary>
            Storage engine interface allows settings classes that implement the IStorableSettings interface to be saved/loaded etc
            </summary>
        </member>
        <member name="M:Labman.Settings.StorageEngines.ISettingsStorageEngine.Load(System.String)">
            <summary>
            Load a specific item from the engine
            </summary>
            <param name="key">The item with the given key will be loaded</param>
            <returns>The item settings class requested</returns>
        </member>
        <member name="M:Labman.Settings.StorageEngines.ISettingsStorageEngine.Load(System.String,System.Type)">
            <summary>
            Load a specific item from the engine
            </summary>
            <param name="key">The item with the given key will be loaded</param>
            <param name="classType">The type of class being deserialised into</param>
            <returns>The item settings class requested</returns>
        </member>
        <member name="M:Labman.Settings.StorageEngines.ISettingsStorageEngine.Save(System.String,Labman.Settings.IStorableSettings)">
            <summary>
            Save a specified item to the engine
            </summary>
            <param name="key">The unique key for this item</param>
            <param name="value">The settings class instance to save</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.ISettingsStorageEngine.Delete(System.String)">
            <summary>
            Delete an item from the storage engine
            </summary>
            <param name="key">The key of the item</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.ISettingsStorageEngine.Rename(System.String,System.String)">
            <summary>
            Rename an item in the storage engine
            </summary>
            <param name="oldKey">The existing key for the item</param>
            <param name="newKey">The new key for the item</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.ISettingsStorageEngine.GetKeys">
            <summary>
            This method gets a list of all of the keys within the engine
            </summary>
            <returns>A list of string key values</returns>
        </member>
        <member name="T:Labman.Settings.StorageEngines.MemorySettingsStorageEngine">
            <summary>
            Storage engine that holds settings instances in memory
            </summary>
        </member>
        <member name="F:Labman.Settings.StorageEngines.MemorySettingsStorageEngine._settings">
            <summary>
            Collection of settings sorted by a string key
            </summary>
        </member>
        <member name="M:Labman.Settings.StorageEngines.MemorySettingsStorageEngine.Load(System.String)">
            <summary>
            Load and return the settings for this key
            </summary>
            <param name="key">The key to return</param>
            <returns>The settings object</returns>
        </member>
        <member name="M:Labman.Settings.StorageEngines.MemorySettingsStorageEngine.Load(System.String,System.Type)">
            <summary>
            Load a specific item from the engine
            </summary>
            <param name="key">The item with the given key will be loaded</param>
            <param name="classType">The type of class being deserialised into</param>
            <returns>The item settings class requested</returns>
        </member>
        <member name="M:Labman.Settings.StorageEngines.MemorySettingsStorageEngine.Save(System.String,Labman.Settings.IStorableSettings)">
            <summary>
            Save an item to the collection
            </summary>
            <param name="key">The key to save against</param>
            <param name="value">The item to save</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.MemorySettingsStorageEngine.Delete(System.String)">
            <summary>
            Delete an item from the collection
            </summary>
            <param name="key">The key to delete</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.MemorySettingsStorageEngine.Rename(System.String,System.String)">
            <summary>
            Changes the key for an item in the storage engine
            </summary>
            <param name="oldKey">The existing key</param>
            <param name="newKey">The new key</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.MemorySettingsStorageEngine.GetKeys">
            <summary>
            Return a list of all of the keys in the collection
            </summary>
            <returns>A list of key strings</returns>
        </member>
        <member name="T:Labman.Settings.StorageEngines.DatabaseSettingsStorageEngine">
            <summary>
            An Xml settings storage engine implementation that saves and loads settings files to individual XML files in a dedicated directory for that type.
            </summary>
        </member>
        <member name="M:Labman.Settings.StorageEngines.DatabaseSettingsStorageEngine.#ctor(Labman.Database.Connection,System.String,System.Boolean)">
            <summary>
            Database settings storage engine constructor
            </summary>
            <param name="databaseConnection">The database connection to use for settings storage</param>
            <param name="tableName">The name of the database table to store settings in</param>
            <param name="createTableIfNotExist">True to create the table if it does not already exist, False to throw exception if it does not exist</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.DatabaseSettingsStorageEngine.GetKeys">
            <summary>
            This method gets a list of all of the keys within the engine
            </summary>
            <returns>A list of string key values</returns>
        </member>
        <member name="M:Labman.Settings.StorageEngines.DatabaseSettingsStorageEngine.Load(System.String)">
            <summary>
            Load a specific item from the engine
            </summary>
            <param name="key">The item with the given key will be loaded</param>
            <returns>The item settings class requested</returns>
        </member>
        <member name="M:Labman.Settings.StorageEngines.DatabaseSettingsStorageEngine.Load(System.String,System.Type)">
            <summary>
            Load a specific item from the engine
            </summary>
            <param name="key">The item with the given key will be loaded</param>
            <param name="classType">The type of class being deserialised into - not required in this implementation</param>
            <returns>The item settings class requested</returns>
        </member>
        <member name="M:Labman.Settings.StorageEngines.DatabaseSettingsStorageEngine.Save(System.String,Labman.Settings.IStorableSettings)">
            <summary>
            Save a specified item to the engine
            </summary>
            <param name="key">The unique key for this item</param>
            <param name="value">The settings class instan
            ce to save</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.DatabaseSettingsStorageEngine.Delete(System.String)">
            <summary>
            Delete an item from the storage engine
            </summary>
            <param name="key">The key of the item</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.DatabaseSettingsStorageEngine.Rename(System.String,System.String)">
            <summary>
            Renames the key for an item in the storage engine
            </summary>
            <param name="oldKey">The existing key for the item</param>
            <param name="newKey">The new key for the item</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.DatabaseSettingsStorageEngine.GetClassType(System.String)">
            <summary>
            Get the type of class that this settings element represents
            </summary>
            <param name="deviceName">The device name to lookup for</param>
            <returns>The Type of settings class</returns>
        </member>
        <member name="T:Labman.Settings.StorageEngines.XmlSettingsStorageEngine">
            <summary>
            An Xml settings storage engine implementation that saves and loads settings files to individual XML files in a dedicated directory for that type.
            </summary>
        </member>
        <member name="M:Labman.Settings.StorageEngines.XmlSettingsStorageEngine.#ctor(System.String,System.Boolean)">
            <summary>
            Xml settings storage engine constructor
            </summary>
            <param name="folderName">A folder name which will contain all of the items which will be loaded by this storage engine</param>
            <param name="createFolderIfNotExists">True to create missing folders, False to throw exception on missing folders (original behaviour)</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.XmlSettingsStorageEngine.GetKeys">
            <summary>
            This method gets a list of all of the keys within the engine
            </summary>
            <returns>A list of string key values</returns>
        </member>
        <member name="M:Labman.Settings.StorageEngines.XmlSettingsStorageEngine.Load(System.String)">
            <summary>
            Load a specific item from the engine
            </summary>
            <param name="key">The item with the given key will be loaded</param>
            <returns>The item settings class requested</returns>
        </member>
        <member name="M:Labman.Settings.StorageEngines.XmlSettingsStorageEngine.Load(System.String,System.Type)">
            <summary>
            Load a specific item from the engine
            </summary>
            <param name="key">The item with the given key will be loaded</param>
            <param name="classType">The type of class being deserialised into</param>
            <returns>The item settings class requested</returns>
        </member>
        <member name="M:Labman.Settings.StorageEngines.XmlSettingsStorageEngine.Save(System.String,Labman.Settings.IStorableSettings)">
            <summary>
            Save a specified item to the engine
            </summary>
            <param name="key">The unique key for this item</param>
            <param name="value">The settings class instance to save</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.XmlSettingsStorageEngine.Delete(System.String)">
            <summary>
            Delete an item from the storage engine
            </summary>
            <param name="key">The key of the item</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.XmlSettingsStorageEngine.Rename(System.String,System.String)">
            <summary>
            Renames the key for an item in the storage engine
            </summary>
            <param name="oldKey">The existing key for the item</param>
            <param name="newKey">The new key for the item</param>
        </member>
        <member name="M:Labman.Settings.StorageEngines.XmlSettingsStorageEngine.GetClassType(System.String)">
            <summary>
            Get the type of class that this settings element represents
            </summary>
            <param name="filename">The filename to parse</param>
            <returns>The Type of settings class</returns>
        </member>
        <member name="T:Labman.Settings.IStorableSettings">
            <summary>
            This interface is used to force settings classes that can be saved to implement a common signiture
            </summary>
        </member>
        <member name="P:Labman.Settings.IStorableSettings.UniqueKey">
            <summary>
            A unique key for the item that needs to be saved
            </summary>
        </member>
        <member name="P:Labman.Settings.IStorableSettings.StorageEngine">
            <summary>
            A storage engine through which this object can save itself.
            </summary>
        </member>
        <member name="T:Labman.Settings.StorableSettings">
            <summary>
            Forces settings classes that can be save to implement a common signature.
            Allows objects to save themselves, being given a storage engine and path at construction rather than when/where ever they are save.
            </summary>
        </member>
        <member name="P:Labman.Settings.StorableSettings.UniqueKey">
            <summary>
            A unique key for the item that needs to be saved
            </summary>
        </member>
        <member name="P:Labman.Settings.StorableSettings.StorageEngine">
            <summary>
            A storage engine through which this object can save itself. Should be set to a sensible default value in the derived constructor.
            </summary>
        </member>
        <member name="M:Labman.Settings.StorableSettings.Save">
            <summary>
            Saves this settings object with the <see cref="P:Labman.Settings.StorableSettings.StorageEngine"/> and <see cref="P:Labman.Settings.StorableSettings.UniqueKey"/> as the path.
            </summary>
        </member>
        <member name="M:Labman.Settings.StorableSettings.Load">
            <summary>
            Loads a copy of this object from the <see cref="P:Labman.Settings.StorableSettings.StorageEngine"/> and <see cref="P:Labman.Settings.StorableSettings.UniqueKey"/> path.
            </summary>
            <returns>A new version of this object from the storage engine or null if <see cref="P:Labman.Settings.StorableSettings.StorageEngine"/> isn't defined.</returns>
        </member>
        <member name="M:Labman.Settings.StorableSettings.Delete">
            <summary>
            Deletes this object from the <see cref="T:Labman.Settings.StorageEngines.ISettingsStorageEngine"/> defined by its <see cref="P:Labman.Settings.StorableSettings.StorageEngine"/> property.
            </summary>
        </member>
        <member name="M:Labman.Settings.StorableSettings.Rename(System.String,System.String)">
            <summary>
            Renames this object in the <see cref="T:Labman.Settings.StorageEngines.ISettingsStorageEngine"/> defined by its <see cref="P:Labman.Settings.StorableSettings.StorageEngine"/> property.
            </summary>
            <param name="oldName">The old name</param>
            <param name="newName">The new name</param>
        </member>
        <member name="M:Labman.Settings.StorableSettings.PersistValue``1(``0@,``0,System.String)">
            <summary>
            Stores a value in the config file and saves the config file at a maximum rate of once per minute
            The config file is saved in a new thread
            </summary>
            <typeparam name="T">The type of the property</typeparam>
            <param name="property">The property in which to save the value</param>
            <param name="value">The value to save</param>
            <param name="propertyName">The name of the property that has changed</param>
        </member>
        <member name="T:Labman.Settings.AutoPersistAttribute">
            <summary>
            An attribute that can be applied to properties of classes that derive from <see cref="T:Labman.Settings.StorableSettings"/>.
            Used to specify that a property should be automatically saved when it changes, using the <see cref="T:Labman.Settings.StorageEngines.ISettingsStorageEngine"/> of the <see cref="T:Labman.Settings.StorableSettings"/>.
            </summary>
        </member>
        <member name="T:Labman.TraciotTelemetry">
            <summary>
            Class used to provide statistics tracking functionality using the Traciot system
            </summary>
        </member>
        <member name="F:Labman.TraciotTelemetry._applicationExiting">
            <summary>
            Flag that is set when the application is being exited
            </summary>
        </member>
        <member name="F:Labman.TraciotTelemetry._traciotThread">
            <summary>
            Traciot / statistics monitor thread
            </summary>
        </member>
        <member name="F:Labman.TraciotTelemetry._traciotApi">
            <summary>
            Api instance
            </summary>
        </member>
        <member name="F:Labman.TraciotTelemetry._hardwareTrackingItemsToLog">
            <summary>
            Local list of hardware values that need to be logged
            </summary>
        </member>
        <member name="T:Labman.TraciotTelemetry.StandardEventCode">
            <summary>
            An enumeration of standard system event codes to log against.
            THESE ARE DESIGNED TO BE THE SAME ACROSS ALL PROJECTS.
            </summary>
            <remarks>
            Please specify a value for all new items
            These values must not exceed 0x1000000 as these are reserved for user fault codes
            </remarks>
        </member>
        <member name="P:Labman.TraciotTelemetry.HostIpAddress">
            <summary>
            Optional IP Address for the machine running the Traciot host service
            </summary>
        </member>
        <member name="P:Labman.TraciotTelemetry.ProjectCodeOverride">
            <summary>
            Optional project code override value. Leaving this blank uses the value set by the host service
            </summary>
        </member>
        <member name="P:Labman.TraciotTelemetry.MainProcessName">
            <summary>
            Value that can set a specific process as the "Main" process that we are tracking in Traciot
            </summary>
        </member>
        <member name="P:Labman.TraciotTelemetry.DisableLogging">
            <summary>
            Flag which allows logging to be disabled
            </summary>
        </member>
        <member name="M:Labman.TraciotTelemetry.Dispose">
            <summary>
            Dispose method is called to stop threads when the application is closing
            </summary>
        </member>
        <member name="M:Labman.TraciotTelemetry.StartTraciotThread">
            <summary>
            This method is used to start the traciot thread if it is not running.
            If the thread is already running then the method exits.
            </summary>
        </member>
        <member name="M:Labman.TraciotTelemetry.TraciotThread">
            <summary>
            Thread used to monitor traciot statistics logging and upload to the server
            </summary>
        </member>
        <member name="M:Labman.TraciotTelemetry.UpdateOverallState(Traciot.Messages.StateMessage.RunState,System.String)">
            <summary>
            Method used to send an overall application state update
            </summary>
            <param name="state">State to send</param>
            <param name="message">Optional message to log</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.UpdateProcessState(System.String,Traciot.Messages.StateMessage.RunState)">
            <summary>
            Add a message from a process class.
            Only the "MAIN" process updates the system status, all processes can log exceptions
            </summary>
            <param name="processName">The process name logging the event</param>
            <param name="state">The processes state</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddProcessException(System.String,System.Exception)">
            <summary>
            Add an exception that has been thrown by a process class
            </summary>
            <param name="processName">Process name</param>
            <param name="ex">Exception object</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddHardwareTrackingLog(System.String,System.Int32)">
            <summary>
            Add a hardware item tracking log
            </summary>
            <param name="hardwareDeviceName">The name of the hardware device</param>
            <param name="increment">The amount to increment the counter by</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddToSampleCounter(System.String,System.Int32)">
            <summary>
            Adds a count to the named sample counter
            </summary>
            <param name="name">Counter name</param>
            <param name="increment">Amount to increment by</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddEventLog(Labman.TraciotTelemetry.StandardEventCode,System.String,Traciot.Messages.EventMessage.EventTypes,System.Double,System.Collections.Generic.SortedList{System.String,System.String})">
            <summary>
            Adds to the event log. This is useful for logging a particular event (such as failed to cap).
            This is not intended to log every system log message!
            </summary>
            <param name="eventCode">A unique code for this event that is common across all systems</param>
            <param name="message">The event message or description (this will be used as a search key so should be kept generic)</param>
            <param name="eventType">The type of event</param>
            <param name="value">Optional value to add to the event (e.g. a duration for the event etc)</param>
            <param name="metaData">An optional key/value list of meta data to attach to the message (for instance to store the rack position of an event that occurred)</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddEventLog(Labman.TraciotTelemetry.StandardEventCode,System.String,Traciot.Messages.EventMessage.EventTypes,System.Object,System.Double)">
            <summary>
            Adds to the event log. This is useful for logging a particular event (such as failed to cap).
            This is not intended to log every system log message!
            </summary>
            <param name="eventCode">A unique code for this event that is common across all systems</param>
            <param name="message">The event message or description (this will be used as a search key so should be kept generic)</param>
            <param name="eventType">The type of event</param>
            <param name="metaData">An optional meta data object to attach to the message (in a serialised format) (e.g. DTO of a sample in an error state)</param>
            <param name="value">Optional value to add to the event (e.g. a duration for the event etc)</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddEventLog(Labman.TraciotTelemetry.StandardEventCode,Traciot.Messages.EventMessage.EventTypes,System.Collections.Generic.SortedList{System.String,System.String})">
            <summary>
            Adds to the event log. This is useful for logging a particular event (such as failed to cap).
            This is not intended to log every system log message!
            </summary>
            <param name="eventCode">A unique code for this event that is common across all systems</param>
            <param name="eventType">The type of event</param>
            <param name="metaData">An optional key/value list of meta data to attach to the message (for instance to store the rack position of an event that occurred)</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddEventLog(Labman.TraciotTelemetry.StandardEventCode,Traciot.Messages.EventMessage.EventTypes,System.Object,System.Double)">
            <summary>
            Adds to the event log. This is useful for logging a particular event (such as failed to cap).
            This is not intended to log every system log message!
            </summary>
            <param name="eventCode">A unique code for this event that is common across all systems</param>
            <param name="eventType">The type of event</param>
            /// <param name="metaData">An optional meta data object to attach to the message (in a serialised format) (e.g. DTO of a sample in an error state)</param>
            <param name="value">Optional value to add to the event (e.g. a duration for the event etc)</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddEventLog(System.Int32,System.String,Traciot.Messages.EventMessage.EventTypes,System.Double,System.Collections.Generic.SortedList{System.String,System.String})">
            <summary>
            Adds to the event log. This is useful for logging a particular event (such as failed to cap).
            This is not intended to log every system log message!
            This override allows project specific event codes to be logged. 
            Project specific event codes are incremented by 0x1000000 so they stand out from standard codes.
            </summary>
            <param name="projectSpecificEventCode">A unique code for this event that is specific to the project</param>
            <param name="message">The event message or description (this will be used as a search key so should be kept generic)</param>
            <param name="eventType">The type of event</param>
            <param name="value">Optional value to add to the event (e.g. a duration for the event etc)</param>
            <param name="metaData">An optional key/value list of meta data to attach to the message (for instance to store the rack position of an event that occurred)</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddEventLog(System.Int32,System.String,Traciot.Messages.EventMessage.EventTypes,System.Object,System.Double)">
            <summary>
            Adds to the event log. This is useful for logging a particular event (such as failed to cap).
            This is not intended to log every system log message!
            </summary>
            <param name="projectSpecificEventCode">A unique code for this event that is specific to the project</param>
            <param name="message">The event message or description (this will be used as a search key so should be kept generic)</param>
            <param name="eventType">The type of event</param>
            <param name="metaData">An optional meta data object to attach to the message (in a serialised format) (e.g. DTO of a sample in an error state)</param>
            /// <param name="value">Optional value to add to the event (e.g. a duration for the event etc)</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddSystemDiagnostic(System.String,Traciot.Messages.DiagnosticMessage.RobotDiagnosticState,System.Collections.Generic.SortedList{System.String,System.String})">
            <summary>
            Adds to the system diagnostics log. This is useful for logging automatic system diagnostics that are run on a weekly basis etc (eg a position alignment check).
            </summary>
            <param name="diagnosticName">The unique diagnostic name (this will be used as a search key so should be kept generic)</param>
            <param name="state">The state of the diagnostic check</param>
            <param name="metaData">An optional key/value list of meta data to attach to the message (for instance to store the rack position of an event that occurred)</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddDispenseResult(System.String,System.Double,System.Double,System.Double,System.DateTime,System.DateTime,System.String,System.String,System.String,System.String,Traciot.Messages.DispenseDataMessage.DispenseState)">
            <summary>
            Add a dispense data message
            </summary>
            <param name="materialLabLimsCode">The Labman LIMS material code being used (for production systems this maybe a customer material code)</param>
            <param name="targetWeight">The target weight of the dispense in grammes</param>
            <param name="targetTolerance">The target tolerance for the dispense in grammes</param>
            <param name="actualWeight">The actual, final weight in grammes</param>
            <param name="startTime">The start time of the dispense</param>
            <param name="endTime">The end time of the dispense</param>
            <param name="dispenseCodeFilepath">The full filepath to the code file used for dispensing</param>
            <param name="dispenseCodeContent">The code file content - the actual source code for the dispensing algorithm!</param>
            <param name="dispenseSettingsFilepath">The full filepath to the dispense settings file</param>
            <param name="dispenseSettingsFileContent">The contents of the dispense settings file / class being used</param>
            <param name="state">The dispense state</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddSystemIssue(Traciot.Messages.Issue,System.String,System.String)">
            <summary>
            Log an occurrence of a new issue
            </summary>
            <param name="issue">The issue to which this occurrence is logging</param>
            <param name="notes">Any notes about the issue occurrence</param>
            <param name="cause">The cause of the occurrence if known</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.CreateSupportTicket(Traciot.Messages.Issue,System.String,System.String)">
            <summary>
            Log an occurrence of a new issue
            </summary>
            <param name="issue">The issue to which this occurrence is logging</param>
            <param name="notes">Any notes about the issue occurrence</param>
            <param name="cause">The cause of the occurrence if known</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.SendUserNotification(Traciot.Messages.UserNotificationMessage.NotificationType,System.String,System.String,System.String)">
            <summary>
            Sends a user notification (eg Email)
            </summary>
            <param name="userNotificationType">The type of notification to send</param>
            <param name="toAddress">The address to send the message to</param>
            <param name="title">The title of the message</param>
            <param name="message">The message content to send</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddSensorValue(System.String,System.Int32)">
            <summary>
            Adds a sensor value - note: don't log every single sensor state change, keep this for times you want to look at sensor readings over time
            </summary>
            <param name="sensorName">Sensor name</param>
            <param name="value">Sensor value</param>
        </member>
        <member name="M:Labman.TraciotTelemetry.AddSensorValue(System.String,System.Double)">
            <summary>
            Adds a sensor value - note: don't log every single sensor state change, keep this for times you want to look at sensor readings over time
            </summary>
            <param name="sensorName">Sensor name</param>
            <param name="value">Sensor value</param>
        </member>
        <member name="T:Labman.EngineeringParameterAttribute">
            <summary>
            Attribute that describes a method's parameter for the engineering screen
            </summary>
        </member>
        <member name="P:Labman.EngineeringParameterAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Labman.EngineeringParameterAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:Labman.EngineeringParameterAttribute.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
        </member>
        <member name="P:Labman.EngineeringParameterAttribute.Units">
            <summary>
            Gets or sets the units.
            </summary>
        </member>
        <member name="P:Labman.EngineeringParameterAttribute.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
        </member>
        <member name="P:Labman.EngineeringParameterAttribute.PlaceHolder">
            <summary>
            Gets or sets the placeholder.
            </summary>
        </member>
        <member name="P:Labman.EngineeringParameterAttribute.MinValue">
            <summary>
            Gets or sets the minimum value.
            </summary>>
        </member>
        <member name="P:Labman.EngineeringParameterAttribute.MaxValue">
            <summary>
            Gets or sets the maximum value.
            </summary>
        </member>
        <member name="P:Labman.EngineeringParameterAttribute.IsPath">
            <summary>
            Gets or sets a flag indicating if the parameter is a file path
            </summary>
        </member>
        <member name="M:Labman.EngineeringParameterAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.EngineeringParameterAttribute"/> class.
            </summary>
        </member>
        <member name="M:Labman.EngineeringParameterAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.EngineeringParameterAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="desc">The desc.</param>
        </member>
        <member name="M:Labman.EngineeringParameterAttribute.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.EngineeringParameterAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="desc">The desc.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Labman.EngineeringParameterAttribute.#ctor(System.String,System.String,System.String[],System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.EngineeringParameterAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="desc">The desc.</param>
            <param name="parameters">The parameters.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:Labman.EngineeringParameterAttribute.#ctor(System.String,System.String,System.String[],System.Object,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.EngineeringParameterAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="desc">The desc.</param>
            <param name="parameters">The parameters.</param>
            <param name="defaultValue">The default value.</param>
            <param name="minValue">The minimum value.</param>
            <param name="maxValue">The maximum value.</param>
        </member>
        <member name="T:Labman.EngineeringMethodAttribute">
            <summary>
            Attribute that describes a method for the engineering screen
            </summary>
        </member>
        <member name="P:Labman.EngineeringMethodAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="M:Labman.EngineeringMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.EngineeringMethodAttribute"/> class.
            </summary>
            <param name="desc">The desc.</param>
        </member>
        <member name="T:Labman.IgnoreEngineeringMethodAttribute">
            <summary>
            Attribute that marks a method as to be ignored and left from the engineering screen
            </summary>
        </member>
        <member name="T:Labman.ConditionalEngineeringMethodAttributeBase">
            <summary>
            Attribute that allows you to define your own logic to determine whether or not an engineering method can be
            executed or not
            </summary>
        </member>
        <member name="P:Labman.ConditionalEngineeringMethodAttributeBase.IsVisible">
            <summary>
            Property used to determine whether the engineering method is visible to the user
            </summary>
        </member>
        <member name="T:Labman.PresentationCommon.UserInterface.TypeConverters.InverseNullToVisibilityConverter">
            <summary>
            A type converter that allows a visibility value to be set using a nullable object when binding
            </summary>
        </member>
        <member name="M:Labman.PresentationCommon.UserInterface.TypeConverters.InverseNullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Labman.PresentationCommon.UserInterface.TypeConverters.InverseNullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The reverted value</returns>
        </member>
        <member name="T:Labman.PresentationCommon.UserInterface.TypeConverters.NullToBooleanConverter">
            <summary>
            A type converter that allows a nullable object to be bound against a boolean value
            </summary>
        </member>
        <member name="M:Labman.PresentationCommon.UserInterface.TypeConverters.NullToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Labman.PresentationCommon.UserInterface.TypeConverters.NullToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The reverted value</returns>
        </member>
        <member name="T:Labman.PresentationCommon.UserInterface.TypeConverters.NullToVisibilityConverter">
            <summary>
            A type converter that allows a visibility value to be set using a nullable object when binding
            </summary>
        </member>
        <member name="M:Labman.PresentationCommon.UserInterface.TypeConverters.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Labman.PresentationCommon.UserInterface.TypeConverters.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts the back.
            </summary>
            <param name="value">The value.</param>
            <param name="targetType">Type of the target.</param>
            <param name="parameter">The parameter.</param>
            <param name="culture">The culture.</param>
            <returns>The reverted value</returns>
        </member>
        <member name="T:Labman.SoakTesters.AxisSoakTester">
            <summary>
            This class allows an axis to be soak tested
            </summary>
        </member>
        <member name="P:Labman.SoakTesters.AxisSoakTester.TestName">
            <summary>
            Get / Set the name/description of the test
            </summary>
        </member>
        <member name="P:Labman.SoakTesters.AxisSoakTester.CompletedIterations">
            <summary>
            Get the number of completed iterations
            </summary>
        </member>
        <member name="P:Labman.SoakTesters.AxisSoakTester.ErroredIterations">
            <summary>
            Get the number of iterations that failed or caused an error
            </summary>
        </member>
        <member name="P:Labman.SoakTesters.AxisSoakTester.IsTestRunning">
            <summary>
            Get a flag which idicates whether the test is running or not
            </summary>
        </member>
        <member name="M:Labman.SoakTesters.AxisSoakTester.#ctor(System.String,System.Double,System.Boolean)">
            <summary>
            Create a new axis soak tester
            </summary>
            <param name="axisName">The name of the axis to run</param>
            <param name="maxPosition">The maximum position the axis can move to</param>
            <param name="homeAxis">Flag to indicate if the axis should home on a fail or on test startup.</param>
        </member>
        <member name="M:Labman.SoakTesters.AxisSoakTester.#ctor(System.String,System.Double,System.Double,System.Boolean)">
            <summary>
            Create a new axis soak tester
            </summary>
            <param name="axisName">The name of the axis to run</param>
            <param name="minPosition">The minimum position the axis can move to</param>
            <param name="maxPosition">The maximum position the axis can move to</param>
            <param name="homeAxis">Flag to indicate if the axis should home on a fail or on test startup.</param>
        </member>
        <member name="M:Labman.SoakTesters.AxisSoakTester.Prepare">
            <summary>
            Ensures the device is ready to perform the test - this method should not return until ready
            </summary>
        </member>
        <member name="M:Labman.SoakTesters.AxisSoakTester.StartTest">
            <summary>
            Resets previous statistics and start the test running
            </summary>
        </member>
        <member name="M:Labman.SoakTesters.AxisSoakTester.StopTest">
            <summary>
            Stop the test
            </summary>
        </member>
        <member name="M:Labman.SoakTesters.AxisSoakTester.DoTest">
            <summary>
            This method performs the actual test sequence
            </summary>
        </member>
        <member name="T:Labman.SoakTesters.ISoakTester">
            <summary> 
            This interface provides a framework for which specific items can be soak tested
            </summary>
        </member>
        <member name="M:Labman.SoakTesters.ISoakTester.StartTest">
            <summary>
            Start the test running
            </summary>
        </member>
        <member name="M:Labman.SoakTesters.ISoakTester.StopTest">
            <summary>
            Stop the test
            </summary>
        </member>
        <member name="M:Labman.SoakTesters.ISoakTester.Prepare">
            <summary>
            Ensures the device is ready to perform the test - this method should not return until ready
            </summary>
        </member>
        <member name="P:Labman.SoakTesters.ISoakTester.TestName">
            <summary>
            Get / Set the name/description of the test
            </summary>
        </member>
        <member name="P:Labman.SoakTesters.ISoakTester.CompletedIterations">
            <summary>
            Get the number of completed iterations
            </summary>
        </member>
        <member name="P:Labman.SoakTesters.ISoakTester.ErroredIterations">
            <summary>
            Get the number of iterations that failed or caused an error
            </summary>
        </member>
        <member name="P:Labman.SoakTesters.ISoakTester.IsTestRunning">
            <summary>
            Get a flag which idicates whether the test is running or not
            </summary>
        </member>
        <member name="T:Labman.ConnectedHardware">
            <summary>
            Static class that exposes the currently connected hardware devices
            </summary>
        </member>
        <member name="P:Labman.ConnectedHardware.ConnectedHardwareLock">
            <summary>
            Lock used to prevent access to connected hardware during initialisation
            </summary>
        </member>
        <member name="P:Labman.ConnectedHardware.DisableHardwareConfigUpdates">
            <summary>
            This flag can be set in a project to disable the ability to update hardware configuration settings or add/remove items
            </summary>
        </member>
        <member name="P:Labman.ConnectedHardware.PreInitialisationActions">
            <summary>
            This event is fired before the initialisation method is run
            </summary>
        </member>
        <member name="P:Labman.ConnectedHardware.PostInitialisationActions">
            <summary>
            This event is fired after the initialisation method has been run
            </summary>
        </member>
        <member name="P:Labman.ConnectedHardware.AnalogInputsStorageEngine">
            <summary>The storage engine used to store the input configurations</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.InputsStorageEngine">
            <summary>The storage engine used to store the input configurations</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.AnalogOutputsStorageEngine">
            <summary>The storage engine used to store the output configurations</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.OutputsStorageEngine">
            <summary>The storage engine used to store the output configurations</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.AxesStorageEngine">
            <summary>The storage engine used to store the axis configurations</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.CartesianConfigurationsStorageEngine">
            <summary>The storage engine used to store the cartesian configurations</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.DevicesStorageEngine">
            <summary>The storage engine used to store the devices configurations</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.ArmsStorageEngine">
            <summary>The storage engine used to store the arm configurations</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._analogInputs">
            <summary>Collection of analog inputs used in the system</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.AnalogInputs">
            <summary>Property that exposes the collection of analog inputs</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._inputs">
            <summary>Collection of inputs used in the system</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Inputs">
            <summary>Property that exposes the collection of inputs</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._analogOutputs">
            <summary>Collection of analog inputs used in the system</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.AnalogOutputs">
            <summary>Property that exposes the collection of analog outputs</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._outputs">
            <summary>Collection of outputs used in the system</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Outputs">
            <summary>Property that exposes the collection of outputs</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._cylinders">
            <summary>Collection of cylinders used in the system</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Cylinders">
            <summary>Property that exposes the collection of cylinders</summary>
        </member>
        <member name="M:Labman.ConnectedHardware.GetHardware``1(System.String)">
            <summary>Get the given hardware object type with the given name from the correct collection in ConnectedHardware</summary>
            <typeparam name="T">The type of the hardware object (e.g. <see cref="T:Labman.IO.Input"/></typeparam>
            <param name="name">The name of the hardware device</param>
            <returns>The given hardware object type with the given name from the correct collection in ConnectedHardware</returns>
        </member>
        <member name="F:Labman.ConnectedHardware._axes">
            <summary>Collection of axes used in the system</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Axes">
            <summary>Property that exposes the collection of axes</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._cartesianConfigurations">
            <summary>Collection of gantry configurations used in the system</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.CartesianConfigurations">
            <summary>Property that exposes the collection of gantry configurations</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._arms">
            <summary>Collection of arms used in the system</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Arms">
            <summary>Property that exposes the collection of arms</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.PriorityHardwareInitialisationDeviceNames">
            <summary>
            List of device names for devices that we want to initialise as a priority before pre-initialisation actions.
            This allows setup of special devices (for instance comms with a Safety PLC in order to get e/stop states before attempting to do full initialisation)
            </summary>
        </member>
        <member name="F:Labman.ConnectedHardware._devices">
            <summary>Collection of connected hardware devices</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Devices">
            <summary>Property that exposes the master list of connected hardware devices</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._balances">
            <summary>Collection of balances that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Balances">
            <summary>Property that exposes the collection of balances</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._barcodeReaders">
            <summary>Collection of barcode readers that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.BarcodeReaders">
            <summary>Property that exposes the collection of barcode readers</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._ioDevices">
            <summary>Collection of input/output devices that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.IODevices">
            <summary>Property that exposes the collection of input/output devices</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._motorControllers">
            <summary>Collection of motor controllers that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.MotorControllers">
            <summary>Property that exposes the collection of motor controllers</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._microwaveDigesters">
            <summary>Collection of microwave digesters that have been added to be used in a project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.MicrowaveDigesters">
            <summary>Property that exposes the collection of microwave digesters</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._syringes">
            <summary>Collection of syringes that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Syringes">
            <summary>Property that exposes the collection of syringes</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._pids">
            <summary>Collection of pids that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.PIDs">
            <summary>Property that exposes the collection of pids</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._electricGrippers">
            <summary>Property of grippers that have been added to be used in the project </summary>
        </member>
        <member name="P:Labman.ConnectedHardware.ElectricGrippers">
            <summary>Property that exposes the collection of grippers</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._rheometers">
            <summary>Collection of rheometers that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Rheometers">
            <summary>Property that exposes the collection of rheometers</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._environmentSensors">
            <summary>Collection of environment sensors that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.EnvironmentSensors">
            <summary>Property that exposes the collection of environment sensors</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._centrifuges">
            <summary>Collection of centrifuges that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Centrifuges">
            <summary>Property that exposes the collection of centrifuges</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._instruments">
            <summary>Collection of instruments that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Instruments">
            <summary>Property that exposes the collection of instruments</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._centrifugeCameras">
            <summary>Collection of camera centrifuge pairs that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.CentrifugeCameras">
            <summary>Property that exposes the collection of centrifugecameras</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._spectrophotometers">
            <summary>Collection of spectrophotometers that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Spectrophotometers">
            <summary>Property that exposes the collection of spectrophotometers</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._cameras">
            <summary>Collection of Cameras that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Cameras">
            <summary>Property that exposes the collection of Cameras</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._torqueTransducers">
            <summary>Collection of Cameras that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.TorqueTransducers">
            <summary>Property that exposes the collection of Cameras</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._recirculatingCoolers">
            <summary>Collection of Cameras that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.RecirculatingCoolers">
            <summary>Property that exposes the collection of Cameras</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._turbidityMeters">
            <summary>Collection of turbidity meters that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.TurbidityMeters">
            <summary>Property that exposes the collection of TurbidityMeters</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._robotArms">
            <summary>Collection of robot arms that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.RobotArms">
            <summary>Property that exposes the collection of RobotArms</summary>
        </member>
        <member name="F:Labman.ConnectedHardware._lasers">
            <summary>Collection of lasers that have been added to be used in the project</summary>
        </member>
        <member name="P:Labman.ConnectedHardware.Lasers">
            <summary>Property that exposes the collection of lasers</summary>
        </member>
        <member name="M:Labman.ConnectedHardware.LoadConnectedDeviceSettings">
            <summary>
            Load all of the connected hardware and configurations for this project
            </summary>
        </member>
        <member name="M:Labman.ConnectedHardware.LoadHardwareDevices(Labman.Settings.StorageEngines.ISettingsStorageEngine)">
            <summary>
            Load all devices from the storage engine and add them to the appropriate collections
            </summary>
            <param name="storageEngine">The storage engine.</param>
        </member>
        <member name="M:Labman.ConnectedHardware.InitialiseAllDevices">
            <summary>
            Initialises all of the hardware devices
            </summary>
        </member>
        <member name="M:Labman.ConnectedHardware.AddDeviceInstance(System.String,System.String)">
            <summary>
            Adds a new hardware device to the relevant Devices collection based on its type.
            Searches both the robot and merlin assemblies for the device, with the robot assembly taking precedence.
            </summary>
            <param name="className">The name of the class of the device (e.g. SartoriusBalance)</param>
            <param name="deviceName">A description for the device, this will be its key in the collection</param>
        </member>
        <member name="M:Labman.ConnectedHardware.AddDeviceInstanceFromAssembly(System.String,System.String,System.String)">
            <summary>
            Adds a new hardware device to the relevant Devices collection based on its type.
            Searches for the device in the given assembly. If the assembly name is null or empty, both the robot and merlin assemblies are searched, with the robot assembly taking precedence.
            If no matching assembly is found the merlin assembly is used.
            </summary>
            <param name="className">The name of the class of the device (e.g. SartoriusBalance)</param>
            <param name="assemblyName">The name of assembly of the class of the device</param>
            <param name="deviceName">A description for the device, this will be its key in the collection</param>
        </member>
        <member name="M:Labman.ConnectedHardware.AddDeviceInstanceFromAssembly(System.String,System.String,System.String,Labman.Hardware.Settings)">
            <summary>
            Adds a new hardware device to the relevant Devices collection based on its type.
            Searches for the device in the given assembly. If the assembly name is null or empty, both the robot and merlin assemblies are searched, with the robot assembly taking precedence.
            If no matching assembly is found the merlin assembly is used.
            </summary>
            <param name="className">The name of the class of the device (e.g. SartoriusBalance)</param>
            <param name="assemblyName">The name of the assembly in which to find the device. Must match the <see cref="P:System.Reflection.AssemblyName.Name"/></param>
            <param name="deviceName">A description for the device, this will be its key in the collection</param>
            <param name="deviceSettings">The settings class object for the hardware device, this will be loaded into the instance settings class</param>
        </member>
        <member name="M:Labman.ConnectedHardware.AddDeviceInstanceFromAssembly(System.String,System.Reflection.Assembly,System.String)">
            <summary>
            Adds a new hardware device to the relevant Devices collection based on its type.
            Searches for the device in the given assembly.
            </summary>
            <param name="className">The name of the class of the device (e.g. SartoriusBalance)</param>
            <param name="assembly">The assembly of the class of the device</param>
            <param name="deviceName">A description for the device, this will be its key in the collection</param>
        </member>
        <member name="M:Labman.ConnectedHardware.AddDeviceInstanceFromAssembly(System.String,System.Reflection.Assembly,System.String,Labman.Hardware.Settings)">
            <summary>
            Adds a new hardware device to the relevant Devices collection based on its type.
            Searches for the device in the given assembly.
            </summary>
            <param name="className">The name of the class of the device (e.g. SartoriusBalance)</param>
            <param name="assembly">The assembly of the class of the device</param>
            <param name="deviceName">A description for the device, this will be its key in the collection</param>
            <param name="deviceSettings">The settings class object for the hardware device, this will be loaded into the instance settings class</param>
        </member>
        <member name="M:Labman.ConnectedHardware.AddDeviceInstance(System.String,System.String,Labman.Hardware.Settings)">
            <summary>
            Adds a new hardware device to the relevant Devices collection based on its type.
            Searches both the robot and merlin assemblies for the device, with the robot assembly taking precedence.
            </summary>
            <param name="className">The name of the class of the device (e.g. SartoriusBalance)</param>
            <param name="deviceName">A description for the device, this will be its key in the collection</param>
            <param name="deviceSettings">The settings class object for the hardware device, this will be loaded into the instance settings class</param>
        </member>
        <member name="M:Labman.ConnectedHardware.AddDeviceInstance(System.String,System.Collections.Generic.IEnumerable{System.Type},System.String,Labman.Hardware.Settings)">
            <summary>
            Adds a new hardware device to the relevant Devices collection based on its type.
            Searches the given collection of types for the device.
            </summary>
            <param name="className">The name of the class of the device (e.g. SartoriusBalance)</param>
            <param name="possibleTypes">A collection of type in which the given device should be</param>
            <param name="deviceName">A description for the device, this will be its key in the collection</param>
            <param name="deviceSettings">The settings class object for the hardware device, this will be loaded into the instance settings class</param>
        </member>
        <member name="M:Labman.ConnectedHardware.AddDeviceInstance(System.Type,System.String)">
            <summary>
            Adds a new hardware device to the relevant Devices collection based on its type
            </summary>
            <param name="classType">The class of the device (e.g. SartoriusBalance)</param>
            <param name="deviceName">A description for the device, this will be its key in the collection</param>
        </member>
        <member name="M:Labman.ConnectedHardware.AddDeviceInstance(System.Type,System.String,Labman.Hardware.Settings)">
            <summary>
            Adds a new hardware device to the relevant Devices collection based on its type
            </summary>
            <param name="classType">The class of the device (e.g. SartoriusBalance)</param>
            <param name="deviceName">A description for the device, this will be its key in the collection</param>
            <param name="deviceSettings">The settings class object for the hardware device, this will be loaded into the instance settings class</param>
        </member>
        <member name="M:Labman.ConnectedHardware.GetAssembly(System.String)">
            <summary>
            Attempts to get the assembly that matches the parameter. Returns the executing assembly if no match is found.
            </summary>
            <param name="assemblyName">The name of the assembly to find. Must match the <see cref="P:System.Reflection.AssemblyName.Name"/></param>
            <returns>The assembly that matches the parameter or the executing assembly if no match is found.</returns>
        </member>
        <member name="M:Labman.ConnectedHardware.GetConnectedHardwareCollection(System.Type)">
            <summary>
            Gets the collection in <see cref="T:Labman.ConnectedHardware"/> into which the given type can be added.
            </summary>
            <param name="valueType">The type for which to find a containing collection</param>
            <returns>The collection in <see cref="T:Labman.ConnectedHardware"/> into which the given type can be added</returns>
        </member>
        <member name="M:Labman.ConnectedHardware.GetSettings(System.Type)">
            <summary>
            Gets the property on the given device type that is used to store its settings.
            </summary>
            <param name="deviceType">The type of the device or virtual device (like "Input")</param>
            <returns>The property on the given device type that is used to store its settings</returns>
        </member>
        <member name="P:Labman.ConnectedHardware.HomeAction">
            <summary>
            Home action that must be set by the application setup before use
            </summary>
        </member>
        <member name="M:Labman.ConnectedHardware.HomeRobot">
            <summary>
            Homes the whole robot
            </summary>
        </member>
        <member name="M:Labman.ConnectedHardware.Dispose">
            <summary>
            The dispose method disposes of all initialised devices
            </summary>
        </member>
        <member name="T:Labman.Culture.CultureSettings">
            <summary>
            Class used to specify the culture settings for the application
            </summary>
        </member>
        <member name="M:Labman.Culture.CultureSettings.InitializeCultures">
            <summary>
            Initialise the cultures to use
            </summary>
        </member>
        <member name="T:Labman.Culture.CultureSettings.Settings">
            <summary>
            Settings class
            </summary>
        </member>
        <member name="P:Labman.Culture.CultureSettings.Settings.Default">
            <summary>
            Gets the default.
            </summary>
        </member>
        <member name="P:Labman.Culture.CultureSettings.Settings.Culture">
            <summary>
            Gets or sets the culture.
            </summary>
        </member>
        <member name="P:Labman.Culture.CultureSettings.Settings.UICulture">
            <summary>
            Gets or sets the UI culture.
            </summary>
        </member>
        <member name="T:Labman.HardwareLog">
            <summary>
            The static hardware log class exposes the main Labman log file for the application and is used
            as a shortcut to the log file object in the baseclass
            </summary>
        </member>
        <member name="M:Labman.HardwareLog.AddLogMessage(System.String,Labman.Logging.LogMessage.LogType)">
            <summary>
            This method queues a log message to be saved to the log file.
            Messages are queued and processed in a seperate thread to keep processing time low.
            </summary>
            <param name="message">The message text to log</param>
            <param name="logType">The type of log to add</param>
        </member>
        <member name="M:Labman.HardwareLog.AddLogMessage(Labman.Logging.LogMessage)">
            <summary>
            This method queues a log message to be saved to the log file.
            Messages are queued and processed in a seperate thread to keep processing time low.
            </summary>
            <param name="messageToLog">The message to log</param>
        </member>
        <member name="M:Labman.HardwareLog.LogException(System.Exception)">
            <summary>
            Logs an exception as a critical fault.
            The log message includes the origin of the exception.
            </summary>
            <param name="ex">The exception to log</param>
        </member>
        <member name="T:Labman.BaseException">
            <summary>
            This class provides a custom Exception to be thrown from within Labman applications to aid in
            debugging the source of Exceptions.
            </summary>
        </member>
        <member name="M:Labman.BaseException.#ctor(System.String)">
            <summary>
            The constructor overrides the base exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="M:Labman.BaseException.#ctor(System.String,System.Exception)">
            <summary>
            The constructor overrides the base exception
            </summary>
            <param name="message">Provide a detailed description of the error</param>
            <param name="innerException">The inner Exception that is being thrown</param>
            <remarks>The colon syntax specifies that the base constructor is called first before processing this specific constructor</remarks>
        </member>
        <member name="T:Labman.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Labman.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Labman.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Labman.Properties.Resources.data">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Labman.Properties.Resources.error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Labman.Properties.Resources.information">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Labman.Properties.Resources.warning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Labman.SystemLog">
            <summary>
            The static system log class exposes the main Labman log file for the application and is used
            as a shortcut to the log file object in the baseclass
            </summary>
        </member>
        <member name="M:Labman.SystemLog.AddLogMessage(System.String,Labman.Logging.LogMessage.LogType)">
            <summary>
            This method queues a log message to be saved to the log file.
            Messages are queued and processed in a seperate thread to keep processing time low.
            </summary>
            <param name="message">The message text to log</param>
            <param name="logType">The type of log to add</param>
        </member>
        <member name="M:Labman.SystemLog.AddLogMessage(Labman.Logging.LogMessage)">
            <summary>
            This method queues a log message to be saved to the log file.
            Messages are queued and processed in a seperate thread to keep processing time low.
            </summary>
            <param name="messageToLog">The message to log</param>
        </member>
        <member name="M:Labman.SystemLog.LogException(System.Exception)">
            <summary>
            Logs an exception as a critical fault.
            The log message includes the origin of the exception.
            </summary>
            <param name="ex">The exception to log</param>
        </member>
        <member name="T:Labman.Utilities.ComputerHardwareUtilities">
            <summary>
            Utility class for computer hardware
            </summary>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.RegisterComputer">
            <summary>
            Register this computer so it can use the application.
            </summary>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.GetHashedComputerId">
            <summary>
            Gets the hashed computer identifier.
            </summary>
            <returns>hashed computer identifier</returns>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.GetLabmanHashedComputerId">
            <summary>
            Gets the labman hashed computer identifier for the current computer.
            </summary>
            <returns>hashed computer identifier</returns>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.GetLabmanHashedComputerId(System.String)">
            <summary>
            Gets the labman hashed computer identifier for the supplied computer id.
            </summary>
            <param name="hashedComputerId">The hashed computer identifier.</param>
            <returns>hashed computer identifier</returns>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.IsValidLabmanComputerId(System.String)">
            <summary>
            Determines whether [is valid labman computer identifier] [the specified key].
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if [is valid labman computer identifier] [the specified key]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.GetAuthorisedComputerIds">
            <summary>
            Gets the current list of authorised computers from the application config.
            </summary>
            <returns>List of authorised computers.</returns>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.AddAuthorisedComputerId(System.String)">
            <summary>
            Adds a new computer hardware Id the list of authorised computers held in the application config.
            </summary>
            <param name="hardwareId">The hardware identifier.</param>
            <returns><c>true</c> if successfully added, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.GetCPUId">
            <summary>
            Gets the cpu identifier.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.GetBiosId">
            <summary>
            Gets the bios identifier.
            </summary>
            <returns>BIOS Id as a string.</returns>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.GetDiskId">
            <summary>
            Gets the disk identifier.
            </summary>
            <returns>Disk Id as a string.</returns>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.GetBaseBoardId">
            <summary>
            Gets the base board identifier.
            </summary>
            <returns>Base Board Id as a string.</returns>
        </member>
        <member name="M:Labman.Utilities.ComputerHardwareUtilities.GetVideoId">
            <summary>
            Gets the video identifier.
            </summary>
            <returns>Video GPU Id as string.</returns>
        </member>
        <member name="T:Labman.Utilities.EnumerableUtilities">
            <summary>
            Utility helper functions for Enumerables and Linq.
            </summary>
        </member>
        <member name="M:Labman.Utilities.EnumerableUtilities.IndexOfMax``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns the first index of the maximum value</summary>
            <typeparam name="T">The generic type of the enumerable</typeparam>
            <param name="enumerable">The enumerable of <see cref="T:System.IComparable"/> values</param>
            <returns>The first index of the maximum value</returns>
        </member>
        <member name="M:Labman.Utilities.EnumerableUtilities.LastIndexOfMax``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns the last index of the maximum value</summary>
            <typeparam name="T">The generic type of the enumerable</typeparam>
            <param name="enumerable">The enumerable of <see cref="T:System.IComparable"/> values</param>
            <returns>The last index of the maximum value</returns>
        </member>
        <member name="M:Labman.Utilities.EnumerableUtilities.IndexOfMin``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns the first index of the minimum value</summary>
            <typeparam name="T">The generic type of the enumerable</typeparam>
            <param name="enumerable">The enumerable of <see cref="T:System.IComparable"/> values</param>
            <returns>The first index of the minimum value</returns>
        </member>
        <member name="M:Labman.Utilities.EnumerableUtilities.LastIndexOfMin``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Returns the last index of the minimum value</summary>
            <typeparam name="T">The generic type of the enumerable</typeparam>
            <param name="enumerable">The enumerable of <see cref="T:System.IComparable"/> values</param>
            <returns>The last index of the minimum value</returns>
        </member>
        <member name="M:Labman.Utilities.EnumerableUtilities.FirstIndexWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the first index where the given condition is true</summary>
            <typeparam name="T">The generic type of the Enumerable</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="condition">The condition which must be true</param>
            <returns>The first index where the given condition is true</returns>
        </member>
        <member name="M:Labman.Utilities.EnumerableUtilities.LastIndexWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the last index where the given condition is true</summary>
            <typeparam name="T">The generic type of the Enumerable</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="condition">The condition which must be true</param>
            <returns>The last index where the given condition is true</returns>
        </member>
        <member name="M:Labman.Utilities.EnumerableUtilities.TakeRange``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>Returns a range of values between two indexes</summary>
            <typeparam name="T">The generic type of the Enumerable</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="fromInclusive">The index of the first item to return</param>
            <param name="toExclusive">The index of the first item not to return, or null to return all items up to the end of the collection</param>
            <returns>A range of values between two indexes</returns>
        </member>
        <member name="M:Labman.Utilities.EnumerableUtilities.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets a value from an <see cref="T:System.Collections.Generic.IDictionary`2"/> or the default value if not found, or the key is null.
            </summary>
            <typeparam name="TK">The key type</typeparam>
            <typeparam name="TV">The value type</typeparam>
            <param name="dict">The dictionary</param>
            <param name="key">The key</param>
            <param name="defaultValue">The value to return if the key isn't found</param>
            <returns>The value in the dictionary or the default value if it doesn't exist or the key is null</returns>
        </member>
        <member name="M:Labman.Utilities.EnumerableUtilities.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns a distinct enumerabltion of elements from the source based on the given key selector
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <typeparam name="TKey">The type of the key returned by keySelector.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="keySelector">A function to extract the key for each element.</param>
            <returns>A new IEnumerable.</returns>
        </member>
        <member name="T:Labman.Utilities.SettingsFiles">
            <summary>Methods for parsing object into and out of CSV and KVP files</summary>
        </member>
        <member name="T:Labman.Utilities.SettingsFiles.ParsingRequirements">
            <summary>The requirements to be met when parsing a KVP file</summary>
        </member>
        <member name="F:Labman.Utilities.SettingsFiles.ParsingRequirements.None">
            <summary>No requirements</summary>
        </member>
        <member name="F:Labman.Utilities.SettingsFiles.ParsingRequirements.RequireAllPropertiesInClass">
            <summary>All properties in the object type must be populated by the KVP file</summary>
        </member>
        <member name="F:Labman.Utilities.SettingsFiles.ParsingRequirements.IgnoreIncorrectProperties">
            <summary>Properties in the KVP that do not appear in the class will be ignored</summary>
        </member>
        <member name="M:Labman.Utilities.SettingsFiles.LoadSettingsFile``1(System.String,System.String)">
            <summary>Creates an object from the given file path</summary>
            <typeparam name="T">The type of the object to create</typeparam>
            <param name="filePath">The path to a KVP file</param>
            <param name="separator">The character(s) that separate the keys from the values</param>
            <returns>An object from the given file path</returns>
        </member>
        <member name="M:Labman.Utilities.SettingsFiles.LoadSettingsFile``1(System.String,Labman.Utilities.SettingsFiles.ParsingRequirements,System.String)">
            <summary>Creates an object of the given type from the given KVP file</summary>
            <typeparam name="T">The type of the object to create</typeparam>
            <param name="filePath">The path to the KVP file</param>
            <param name="requirements">The requirements when parsing the file</param>
            <param name="separator">The character(s) that separate the keys from the values</param>
            <returns>An object of the given type from the given KVP file, with the given delimiter</returns>
        </member>
        <member name="M:Labman.Utilities.SettingsFiles.CreateSettingsFile(System.Object,System.String)">
            <summary>Creates a KVP file from the given object</summary>
            <param name="objectInstance">The object for which to create a KVP string</param>
            <param name="separator">The character(s) that separate the keys from the values</param>
            <returns>The given object as a KVP string</returns>
        </member>
        <member name="M:Labman.Utilities.SettingsFiles.CreateSettingsFile(System.Type,System.String)">
            <summary>Creates a KVP file from the given object</summary>
            <param name="type">The type of the object</param>
            <param name="separator">The character(s) that separate the keys from the values</param>
            <returns>The given object as a KVP string</returns>
        </member>
        <member name="M:Labman.Utilities.SettingsFiles.CreateSettingsFile``1(System.String)">
            <summary>Creates a KVP file from the given object</summary>
            <typeparam name="T">The type of the object</typeparam>
            <param name="separator">The character(s) that separate the keys from the values</param>
            <returns>The given object as a KVP string</returns>
        </member>
        <member name="M:Labman.Utilities.SettingsFiles.CreateSettingsFile(System.Type,System.Object,System.String)">
            <summary>Creates KVP file from the given object</summary>
            <param name="objectType">The type of the object</param>
            <param name="objectInstance">The object for which to create a KVP string</param>
            <param name="separator">The character(s) that separate the keys from the values</param>
            <returns>The given object as a KVP string</returns>
        </member>
        <member name="M:Labman.Utilities.SettingsFiles.LoadFromCsvSettingsFile``1(System.String,System.Char,System.Boolean)">
            <summary>
            Creates an array of objects of the given type from the given CSV file, with the given delimiter
            </summary>
            <typeparam name="T">The type of object to create</typeparam>
            <param name="filePath">The path to the CSV file</param>
            <param name="delimiter">The CSV file delimeter</param>
            <param name="requireAllProperties">Whether all properties in the object must be populated by the CSV file</param>
            <returns>An object of the given type from the given CSV file, with the given delimiter</returns>
        </member>
        <member name="T:Labman.Utilities.Space3dUtilities">
            <summary>
            Collection of useful methods for movement in 3D space
            </summary>
        </member>
        <member name="T:Labman.Utilities.Space3dUtilities.XYZABCPoint">
            <summary>
            Generic 6Dof point
            </summary>
        </member>
        <member name="P:Labman.Utilities.Space3dUtilities.XYZABCPoint.X">
            <summary>
            Gets or sets the x position.
            </summary>
            <value>
            The x.
            </value>
        </member>
        <member name="P:Labman.Utilities.Space3dUtilities.XYZABCPoint.Y">
            <summary>
            Gets or sets the y position.
            </summary>
            <value>
            The y.
            </value>
        </member>
        <member name="P:Labman.Utilities.Space3dUtilities.XYZABCPoint.Z">
            <summary>
            Gets or sets the z position.
            </summary>
            <value>
            The z.
            </value>
        </member>
        <member name="P:Labman.Utilities.Space3dUtilities.XYZABCPoint.A">
            <summary>
            Gets or sets the a angle.
            </summary>
            <value>
            a.
            </value>
        </member>
        <member name="P:Labman.Utilities.Space3dUtilities.XYZABCPoint.B">
            <summary>
            Gets or sets the b angle.
            </summary>
            <value>
            The b.
            </value>
        </member>
        <member name="P:Labman.Utilities.Space3dUtilities.XYZABCPoint.C">
            <summary>
            Gets or sets the c angle.
            </summary>
            <value>
            The c.
            </value>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Utilities.Space3dUtilities.XYZABCPoint"/> class.
            </summary>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Utilities.Space3dUtilities.XYZABCPoint"/> class with values.
            </summary>
            <param name="x">The x postion.</param>
            <param name="y">The y postion.</param>
            <param name="z">The z postion.</param>
            <param name="a">The a angle.</param>
            <param name="b">The b angle.</param>
            <param name="c">The c angle.</param>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.#ctor(Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Utilities.Space3dUtilities.XYZABCPoint"/> class from a mitsubishi position.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.#ctor(Labman.PositionsDatabase.Position,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Utilities.Space3dUtilities.XYZABCPoint"/> class from a labman position and three angles.
            </summary>
            <param name="position">The position.</param>
            <param name="a">The a angle.</param>
            <param name="b">The b angle.</param>
            <param name="c">The c angle.</param>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.#ctor(Labman.PositionsDatabase.Position)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Utilities.Space3dUtilities.XYZABCPoint"/> class from a labman position.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.#ctor(Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition)">
            <summary>
            Initializes a new instance of the <see cref="T:Labman.Utilities.Space3dUtilities.XYZABCPoint"/> class from a fanuc position.
            </summary>
            <param name="position">The position.</param>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.ToMitsubishiPosition">
            <summary>
            Converts to a mitsubishi position.
            </summary>
            <returns>A mitsubishi position</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.ToMitsubishiPosition(System.String)">
            <summary>
            Converts to a mitsubishi position.
            </summary>
            <param name="name">The name of the position</param>
            <returns>A mitsubishi position</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.ToLabmanPosition">
            <summary>
            Converts to a labman position.
            </summary>
            <returns>A labman position</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.ToFanucPosition">
            <summary>
            Converts to the fanuc position.
            </summary>
            <returns>A fanuc position</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.op_Addition(Labman.Utilities.Space3dUtilities.XYZABCPoint,Labman.Utilities.Space3dUtilities.XYZABCPoint)">
            <summary>
            Implements the operator +.
            </summary>
            <param name="a">the first position.</param>
            <param name="b">The second position.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.op_Subtraction(Labman.Utilities.Space3dUtilities.XYZABCPoint,Labman.Utilities.Space3dUtilities.XYZABCPoint)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="a">The first position.</param>
            <param name="b">The second position.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.op_Multiply(Labman.Utilities.Space3dUtilities.XYZABCPoint,System.Double)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="a">The first position.</param>
            <param name="b">A scalar.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.XYZABCPoint.op_Division(Labman.Utilities.Space3dUtilities.XYZABCPoint,System.Double)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="a">The first position.</param>
            <param name="b">A scalar.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.Magnitude(System.Double[])">
            <summary>
            Calculates the magnitude of a vector
            </summary>
            <param name="values">The values.</param>
            <returns>The magnitude of the given vector</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.LinearInterpolate6Dof(Labman.PositionsDatabase.Position,Labman.PositionsDatabase.Position,System.Double,System.Double)">
            <summary>
            Calculates a path between two points with a constant speed.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="speed">The speed.</param>
            <param name="samplePeriod">The sample period.</param>
            <returns>Array of labman positions describing the path</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.LinearInterpolate6Dof(Labman.PositionsDatabase.Position,System.Double,System.Double,System.Double,Labman.PositionsDatabase.Position,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates a path between two points with a constant speed.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="startA">The start A angle</param>
            <param name="startB">The start B angle</param>
            <param name="startC">The start C angle</param>
            <param name="endPoint">The end point.</param>
            <param name="endA">The end A angle</param>
            <param name="endB">The end B angle</param>
            <param name="endC">The end C angle</param>
            <param name="speed">The speed.</param>
            <param name="samplePeriod">The sample period.</param>
            <returns>Array of value tuple containing labman positions and abc angles describing the path</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.LinearInterpolate6Dof(Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition,Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition,System.Double,System.Double)">
            <summary>
            Calculates a path between two points with a constant speed.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="speed">The speed.</param>
            <param name="samplePeriod">The sample period.</param>
            <returns>Array of mitsubishi positions describing the path</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.LinearInterpolate6Dof(Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition,Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition,System.Double,System.Double)">
            <summary>
            Calculates a path between two points with a constant speed.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="speed">The speed.</param>
            <param name="samplePeriod">The sample period.</param>
            <returns>Array of fanuc positions describing the path</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.LinearInterpolate6Dof(Labman.Utilities.Space3dUtilities.XYZABCPoint,Labman.Utilities.Space3dUtilities.XYZABCPoint,System.Double,System.Double)">
            <summary>
            Calculates a path between two points with a constant speed.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="speed">The speed.</param>
            <param name="samplePeriod">The sample period.</param>
            <returns>Array of positions describing the path</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.Interpolate6Dof(Labman.PositionsDatabase.Position,Labman.PositionsDatabase.Position,System.Double,System.Double,System.Double)">
            <summary>
            Calculates a path between two points with acceleration, angles are calculated to minimise angular acceleration.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="speed">The speed.</param>
            <param name="accel">The acceleration</param>
            <param name="samplePeriod">The sample period.</param>
            <returns>Array of labman positions describing the path</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.Interpolate6Dof(Labman.PositionsDatabase.Position,System.Double,System.Double,System.Double,Labman.PositionsDatabase.Position,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates a path between two points with acceleration, angles are calculated to minimise angular acceleration.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="startA">The start A angle</param>
            <param name="startB">The start B angle</param>
            <param name="startC">The start C angle</param>
            <param name="endPoint">The end point.</param>
            <param name="endA">The end A angle</param>
            <param name="endB">The end B angle</param>
            <param name="endC">The end C angle</param>
            <param name="speed">The speed.</param>
            <param name="accel">The acceleration</param>
            <param name="samplePeriod">The sample period.</param>
            <returns>Array of labman positions describing the path</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.Interpolate6Dof(Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition,Labman.Hardware.RobotArms.MitsubishiRobotArm.XYZABCPosition,System.Double,System.Double,System.Double)">
            <summary>
            Calculates a path between two points with acceleration, angles are calculated to minimise angular acceleration.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="speed">The speed.</param>
            <param name="accel">The acceleration</param>
            <param name="samplePeriod">The sample period.</param>
            <returns>Array of mitsubishi positions describing the path</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.Interpolate6Dof(Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition,Labman.Hardware.RobotArms.FanucRobotArm.XyzwprPosition,System.Double,System.Double,System.Double)">
            <summary>
            Calculates a path between two points with acceleration, angles are calculated to minimise angular acceleration.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="speed">The speed.</param>
            <param name="accel">The acceleration</param>
            <param name="samplePeriod">The sample period.</param>
            <returns>Array of fanuc positions describing the path</returns>
        </member>
        <member name="M:Labman.Utilities.Space3dUtilities.Interpolate6Dof(Labman.Utilities.Space3dUtilities.XYZABCPoint,Labman.Utilities.Space3dUtilities.XYZABCPoint,System.Double,System.Double,System.Double)">
            <summary>
            Calculates a path between two points with acceleration, angles are calculated to minimise angular acceleration.
            </summary>
            <param name="startPoint">The start point.</param>
            <param name="endPoint">The end point.</param>
            <param name="speed">The speed.</param>
            <param name="accel">The acceleration</param>
            <param name="samplePeriod">The sample period.</param>
            <returns>Array of positions describing the path</returns>
        </member>
        <member name="T:Labman.Utilities.EnumUtilities">
            <summary>
            Utility class for enumerations
            </summary>
        </member>
        <member name="M:Labman.Utilities.EnumUtilities.GetEnumDescription(System.Enum)">
            <summary>
            Gets the description of an enum value.
            </summary>
            <remarks>
            Using reflection look for a "Description" attribute associated with the specified
            enum value. If there isn't one then just return the ToString() of the supplied value.
            </remarks>
            <param name="value">The value.</param>
            <returns>The enum description</returns>
        </member>
        <member name="M:Labman.Utilities.EnumUtilities.GetEnumDescription(System.Type,System.String)">
            <summary>
            Gets the description of an enum value.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <param name="fieldName">Name of the field.</param>
            <returns>
            The enum description
            </returns>
            <remarks>
            Using reflection look for a "Description" attribute associated with the specified
            enum value. If there isn't one then just return the ToString() of the supplied value.
            </remarks>
        </member>
        <member name="M:Labman.Utilities.EnumUtilities.GetDisplayAttribute(System.Enum)">
            <summary>Gets the display attribute for this enum value</summary>
            <param name="enumValue">The enum value</param>
            <returns>The display attribute for this enum value</returns>
        </member>
        <member name="M:Labman.Utilities.EnumUtilities.DisplayName(System.Enum)">
            <summary>Gets the display name for this enum value</summary>
            <param name="enumValue">The enum value</param>
            <returns>The display name for this enum value</returns>
        </member>
        <member name="M:Labman.Utilities.EnumUtilities.ParseEnum``1(System.String)">
            <summary>
            Converts the string representation of a enum to equivalent enumerated object.
            </summary>
            <typeparam name="T">An enumeration type.</typeparam>
            <param name="value">A string containing the value to convert.</param>
            <returns>Enumerated object is returned</returns>
        </member>
        <member name="M:Labman.Utilities.EnumUtilities.GetEnumValues``1">
            <summary>
            Returns the values of a given enumeration type.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <returns>IEnumerable of enum items is returned.</returns>
        </member>
        <member name="M:Labman.Utilities.EnumUtilities.GetEnumValuesAndDescription``1">
            <summary>
            Gets a dictionary containing all the values and descriptions of a given enumeration type.
            </summary>
            <typeparam name="T">Enumeration Type</typeparam>
            <returns>Dictionary of enum items and descriptions</returns>
        </member>
        <member name="M:Labman.Utilities.EnumUtilities.ToPascalCaseWithSpaces(System.Enum,System.Boolean)">
            <summary>
            Convert an enum value to its string form and add spaces before each word in a pascal case string.
            </summary>
            <param name="input">The input enum.</param>
            <param name="capitaliseFirstLetter">false to force the first letter to be lower case, true for upper</param>
            <returns>The enum value in pascal case form with spaces between words.</returns>
        </member>
        <member name="M:Labman.Utilities.EnumUtilities.ToCamelCaseWithoutSpaces(System.Enum,System.Boolean)">
            <summary>
            Convert an enum value to its string form as a camel case string, removing spaces between words and capitalising each word.
            </summary>
            <param name="input">The input enum.</param>
            <param name="capitaliseFirstLetter">The output string.</param>
            <returns>The enum value as a camel case string without spaces</returns>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
